<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒙珣的博客</title>
  
  <subtitle>未来很长，当有勇气面对，当与自己和解。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-09T08:57:05.561Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蒙珣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux获取系统版本信息</title>
    <link href="http://example.com/2023/11/09/Linux%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2023/11/09/Linux%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/</id>
    <published>2023-11-09T08:56:06.000Z</published>
    <updated>2023-11-09T08:57:05.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong><code>cat /proc/verison</code></strong></p><p>获取内核信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-nodes1 ~]<span class="comment"># cat /proc/version</span></span><br><span class="line">Linux version 3.10.0-1160.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020</span></span><br></pre></td></tr></table></figure><br><p><strong><code>uname -a</code></strong></p><p>获取内核信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-nodes1 ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux k8s-nodes1 3.10.0-1160.el7.x86_64 <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><span id="more"></span><br><p><strong><code>lsb_release -a</code></strong></p><ul><li>获取系统信息</li><li>有些系统会没有 lsb_release 命令  <code>yum install -y redhat-lsb</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-nodes1 ~]<span class="comment"># lsb_release -a</span></span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">Release:7.9.2009</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><br><p><strong><code>cat /etc/os-release</code></strong></p><p>获取系统信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-nodes1 ~]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><br><p><strong><code>cat /etc/redhat-release</code></strong></p><p>仅适用于 Readhat 系的 Linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-nodes1 ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure><br><p><strong><code>hostnamectl</code></strong></p><p>获取系统信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-nodes1 ~]<span class="comment"># hostnamectl</span></span><br><span class="line">   Static hostname: k8s-nodes1</span><br><span class="line">         Icon name: computer-server</span><br><span class="line">           Chassis: server</span><br><span class="line">        Machine ID: ab3142cf29f34983b5f55182b177a3e8</span><br><span class="line">           Boot ID: e3964313f7f741678d8a0c3f93998be3</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-1160.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br></pre></td></tr></table></figure><br><p><strong>准确获取系统版本号</strong></p><p><strong>方式一</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/redhat-release|sed -r <span class="string">&#x27;s/.* ([0-9]+)\..*/\1/&#x27;</span></span><br></pre></td></tr></table></figure><br><p><strong>方式二</strong></p><p>有些系统会没有 lsb_release 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a|grep -e Release|awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span> | awk -F <span class="string">&quot;.&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sed <span class="string">&#x27;s/[[:space:]]//g&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>转自：<a href="https://www.cnblogs.com/poloyy/p/15489803.html">小菠萝测试笔记</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;code&gt;cat /proc/verison&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取内核信息&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-nodes1 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Linux version 3.10.0-1160.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) &lt;span class=&quot;comment&quot;&gt;#1 SMP Mon Oct 19 16:18:59 UTC 2020&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;uname -a&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取内核信息&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-nodes1 ~]&lt;span class=&quot;comment&quot;&gt;# uname -a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Linux k8s-nodes1 3.10.0-1160.el7.x86_64 &lt;span class=&quot;comment&quot;&gt;#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>平均负载和CPU使用率</title>
    <link href="http://example.com/2023/11/09/%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD%E5%92%8CCPU%E4%BD%BF%E7%94%A8%E7%8E%87/"/>
    <id>http://example.com/2023/11/09/%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD%E5%92%8CCPU%E4%BD%BF%E7%94%A8%E7%8E%87/</id>
    <published>2023-11-09T08:53:35.000Z</published>
    <updated>2023-11-09T08:55:28.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我们知道：</p><ul><li>平均负载是指单位时间内，处在可执行状态和不可中断睡眠状态的进程的平均数。也就是说，它包括了处在执行态，阻塞态和就绪态的进程。</li><li>CPU使用率是指在单位时间内CPU处于非空闲状态的时间比，反映了CPU的繁忙程度。例如：单核CPU单位时间内非空闲态运行时间为0.8s，那么他的CPU使用率为80%；双核CPU单位时间内非空闲态运行时间分别为0.4s和0.6s，那么它的CPU使用率为（0.4+0.6）/2*100%=50%</li></ul><span id="more"></span><p>我们再举个更生动的例子： 有一家银行，他只有一个业务窗口，每次只能接待一个人（单核CPU）。有一天一共有五个人来了，那么就会出现一人在办理手续，其余四人在等待的情况（CPU负载为5） 我们约定在业务窗口的那个人只有真正在办理业务才算是真正使用（CPU使用率）如下图</p><p><img src="https://pic3.zhimg.com/80/v2-ba61b5707d5016d2581582f217ddf0aa_1440w.webp" alt="img"></p><p>了解了负载与CPU使用率的关系之后，我们来聊聊什么情况下会导致负载上升以及平均负载和CPU使用率的关系</p><ul><li>CPU 密集型进程，使用大量 CPU 会导致平均负载升高，此时这两者是一致的；</li><li>I/O 密集型进程，等待 I/O 也会导致平均负载升高，但 CPU 使用率不一定很高；</li><li>大量等待 CPU 的进程调度也会导致平均负载升高，此时的 CPU 使用率也会比较高。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h2><p>本次案例，我会再现三种让平均负载升高的情况。这次案例运用到的工具有stress工具和sysstat工具，关于这两个工具的一些说明，在我的这篇文章里已经提到过，我就不再赘述了 <a href="https://link.zhihu.com/?target=https://blog.csdn.net/s_alted/article/details/117412021">Linux 系统性能分析命令和工具</a></p><p>本次案例的虚拟机配置</p><p><img src="https://pic2.zhimg.com/80/v2-28d3850c09ebb6f24f4a1f827980b0fd_1440w.webp" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载相关工具包</span></span><br><span class="line"> yum install -y stsstat stress</span><br></pre></td></tr></table></figure><p><strong>场景1：CPU密集型进程（CPU使用率高）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟cpu使用率为100%，持续时间为600s</span></span><br><span class="line">stress --cpu 1 --timeout 600</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看平均负载变化情况</span></span><br><span class="line">uptime</span><br><span class="line">... load average: 1.11, 0.59, 0.29</span><br></pre></td></tr></table></figure><p>可以看到，在过去1分钟内，CPU的平均负载高达1.11，这说明cpu占有率已经超过100% 使用sysstat工具包中的mpstat查看cpu性能情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpstat -P ALL 5</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-df0efca4d3e8ada0aa19e8adb9f3e5fe_1440w.webp" alt="img"></p><p>可以看到，CPU的使用率已经为100%，而且他的iowait只有0. 这说明：<strong>平均负载的升高是由于CPU使用率为100%，也就是说CPU使用率的升高导致了平均负载的升高</strong> 我们用pidstat命令查看一下进程的性能情况，看看是哪个进程造成了如此高的CPU使用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidstat -u 5 1</span><br><span class="line">UID  PID  %usr  %system  %guest  %<span class="built_in">wait</span>  %CPU  CPU  Command</span><br><span class="line"> 0   2962  100.00  0.00   0.00   0.00   100.00  1   stress</span><br></pre></td></tr></table></figure><p>就是刚开始我们所用的stress命令导致了这么一个情况的发生</p><p><strong>场景二：I/O 密集型进程</strong> 我们首先使用stress工具来模拟IO压力，有时候大量的等待I/O线程也会导致负载升高，即不停的执行sync</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-i： 产生n个进程 每个进程反复调用sync()，sync()用于将内存上的内容写到硬盘上</span><br><span class="line">stress -i 1 --timeout 300</span><br><span class="line">uptime</span><br><span class="line">load average: 1.09, 0.54, 0.36</span><br></pre></td></tr></table></figure><p>可以看到，过去1min之内的平均负载高达1.09 看一下CPU性能情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpstat -P  ALL 5</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-1447431512f59dccfbe44ce0138bb396_1440w.webp" alt="img"></p><p>我们看到，图中的 iowait 为0，并没有出现我们认为的 Iowait 升高情况，但是sys升高了，这是为什么呢？ 因为对于部分人（包括我）的虚拟机而言，使用的是 stress 中的sync()系统调用，作用是刷新缓冲区内存到磁盘中。而我们的虚拟机缓冲区可能比较小无法产生大的IO压力。这样大部分就都是系统调用的消耗了。</p><p>由此可见，<strong>大量的等待IO也会导致平均负载的升高，但是CPU使用率不一定升高</strong></p><p><strong>场景三：大量进程的场景</strong> 在这个场景中，我们模拟同时有8个进程。但是我们的CPU只有一个，剩下7个进程就会在等待CPU，与此同时我们的CPU处于严重过载的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">产生8个进程 每个进程都反复不停的计算随机数的平方根</span><br><span class="line">stress -c 8 --timeout 600</span><br><span class="line">uptime</span><br><span class="line"> load average: 7.44, 3.34, 1.47</span><br></pre></td></tr></table></figure><p>由此可见，<strong>大量处在就绪态的进程也会导致平均负载的升高</strong></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="什么是CPU密集型"><a href="#什么是CPU密集型" class="headerlink" title="什么是CPU密集型"></a>什么是CPU密集型</h3><p>CPU密集型是指一类计算任务或应用程序，其执行过程主要依赖于中央处理器（CPU）的处理能力，而不是其他系统组件（如内存、硬盘等）。在这种类型的任务中，CPU的计算能力是整个系统性能的瓶颈。</p><p>CPU密集型任务通常涉及大量的数值计算、逻辑运算、数据处理和算法执行。一些典型的CPU密集型应用包括：</p><ol><li>科学计算：包括数学模型求解、数值模拟、天气预测、物理仿真等。</li><li>图像和视频处理：如图像编辑、视频渲染、视频编解码等。</li><li>数据分析：涉及大规模数据的处理、排序、搜索、数据挖掘等。</li><li>人工智能和机器学习：训练深度神经网络时，涉及大量的矩阵运算和向量计算，因此通常是CPU密集型的。</li><li>加密和解密：加密和解密算法的执行需要大量的数学运算，因此也是CPU密集型的应用。</li></ol><p>在处理CPU密集型任务时，性能取决于CPU的速度、核心数量和架构。有时候，可以通过在多个核心上并行执行任务来提高性能，但并不是所有的任务都能充分利用多核处理器的优势。此外，对于某些特定的CPU密集型任务，使用专门的硬件加速器（如GPU、TPU等）可能会显著提高性能。</p><h3 id="什么是IO密集型"><a href="#什么是IO密集型" class="headerlink" title="什么是IO密集型"></a>什么是IO密集型</h3><p>IO密集型是另一类计算任务或应用程序，其执行过程主要受限于输入输出（I/O）操作的速度，而不是CPU的处理能力。在这种类型的任务中，CPU通常需要等待来自外部设备（如硬盘、网络等）的数据读取或写入，从而使CPU的计算能力得不到充分利用。</p><p>IO密集型任务通常涉及大量的文件读写、网络通信、数据库查询等操作。一些典型的IO密集型应用包括：</p><ol><li>文件操作：涉及大规模的文件读取和写入，例如文件复制、数据备份等。</li><li>网络通信：涉及网络数据传输的应用，例如网页服务器、视频流服务等。</li><li>数据库操作：涉及频繁的数据库查询和写入操作，例如在线交易系统、数据存储服务等。</li><li>大规模数据处理：需要频繁地读取和写入大量数据，例如日志分析、大数据处理等。</li></ol><p>在处理IO密集型任务时，CPU的速度和计算能力通常不是性能的瓶颈，而是IO设备的速度和响应时间决定了整体系统性能。因此，针对IO密集型任务，优化IO操作、使用高速IO设备（如SSD）、采用异步IO等技术可以显著提高系统性能。</p><p>值得注意的是，某些应用程序可能同时具有CPU密集型和IO密集型的特点，这时候需要综合考虑CPU和IO设备的性能，进行合理的系统优化。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均负载是指单位时间内，处在可执行状态和不可中断睡眠状态的进程的平均数。也就是说，它包括了处在执行态，阻塞态和就绪态的进程。&lt;/li&gt;
&lt;li&gt;CPU使用率是指在单位时间内CPU处于非空闲状态的时间比，反映了CPU的繁忙程度。例如：单核CPU单位时间内非空闲态运行时间为0.8s，那么他的CPU使用率为80%；双核CPU单位时间内非空闲态运行时间分别为0.4s和0.6s，那么它的CPU使用率为（0.4+0.6）/2*100%=50%&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>批量修改目录下所有文件</title>
    <link href="http://example.com/2023/11/09/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2023/11/09/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</id>
    <published>2023-11-09T08:50:55.000Z</published>
    <updated>2023-11-09T08:53:03.425Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="批量修改目录下所有文件"><a href="#批量修改目录下所有文件" class="headerlink" title="批量修改目录下所有文件"></a>批量修改目录下所有文件</h4><p>批量修改目录下所有文件中包含 192.168.128.48 替换成 10.54.0.30</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path/to/directory -<span class="built_in">type</span> f -<span class="built_in">exec</span> sed -i <span class="string">&#x27;s/192.168.128.48/10.54.0.30/g&#x27;</span> &#123;&#125; +</span><br></pre></td></tr></table></figure><h4 id="批量修改目录下所有文件夹以及文件"><a href="#批量修改目录下所有文件夹以及文件" class="headerlink" title="批量修改目录下所有文件夹以及文件"></a>批量修改目录下所有文件夹以及文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path/to/directory \( -<span class="built_in">type</span> f -o -<span class="built_in">type</span> d \) -<span class="built_in">exec</span> sed -i <span class="string">&#x27;s/192.168.128.48/10.54.0.30/g&#x27;</span> &#123;&#125; +</span><br></pre></td></tr></table></figure><p><code>find</code> 命令中的 <code>-type f</code>、<code>-exec</code> 和 <code>&#123;&#125;</code> 是用于搜索和处理文件的参数和操作符。</p><ul><li><p><code>-type f</code> 是 <code>find</code> 命令的一个选项，用于指定搜索文件类型。在这种情况下，<code>-type f</code> 表示只搜索普通文件（不包括目录、符号链接等）。</p></li><li><p><code>-exec</code> 是一个 <code>find</code> 命令中的一个选项，用于在找到的文件上执行一个命令。它后面应该跟随一个要执行的命令，以及一个分号 <code>;</code>。在示例中，<code>-exec</code> 用于执行 <code>sed</code> 命令。</p></li><li><p><code>&#123;&#125;</code> 是一个特殊标记，它在 <code>-exec</code> 后面用来表示 <code>find</code> 命令找到的每个文件的位置。</p></li><li><p><code>&#123;&#125;</code> 将被替换为实际的文件名。当你使用 <code>-exec</code> 时，你可以在其中使用 <code>&#123;&#125;</code> 来代表每个找到的文件。</p></li><li><p><code>+</code> 是一个特殊的 <code>find</code> 语法，用于告诉 <code>find</code> 命令在找到的文件上执行命令，而不是为每个文件分别执行一次命令。这可以提高效率，特别是在处理大量文件时。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="shell" scheme="http://example.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>被讨厌的勇气</title>
    <link href="http://example.com/2023/08/05/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/"/>
    <id>http://example.com/2023/08/05/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/</id>
    <published>2023-08-05T05:13:11.000Z</published>
    <updated>2024-01-06T08:51:42.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>第一夜：我们的不幸是谁的错</li><li>第二夜：一切烦恼都来自于人际关系</li><li>第三夜：让干涉你生活的人见鬼去</li><li>第四夜：要有被讨厌的勇气</li><li>第五夜：认真的人生“活在当下”</li></ul><h3 id="第一夜：我们的不幸是谁的错"><a href="#第一夜：我们的不幸是谁的错" class="headerlink" title="第一夜：我们的不幸是谁的错"></a>第一夜：我们的不幸是谁的错</h3><p>阿德勒心理学考虑的不是过去的“原因”，而是现在的“自由”，<strong>如果我们一直依赖原因论，就会永远止步不前</strong></p><p>青年有一个朋友，多年躲在自己的房间中闭门不出，他很想改变自己的这种现状，但是一想到要踏出门要面对种种的社会问题以及自己的那些“逃不掉”，而不得不再次面对的问题就心有余悸、惶恐不安。</p><p>也就是说，其实他并不是因为不安而走不出房间，<strong>是因为不想到外面去，不想面对那些“无法解决”的问题，而不安</strong>。也就是说，青年的朋友先有了不想出去，不想面对现实问题的想法。之后为了这个目的，而制造出不安和恐惧之类的情绪。阿德勒心理学把这叫作“目的论”</p><span id="more"></span><p><strong>决定我们自身的不是过去的经历，而是我们自己赋予经历的意义</strong></p><p>阿德勒心理学明确否认了心理创伤，如果闭门不出一直憋在自己房间里的话，父母会非常担心。这就可以把父母的关注集于一身，而且还可以得到父母小心翼翼的照顾。另一方面，哪怕踏出家门一步，都会沦为无人关注的“大多数”，都会成为茫茫人海中非常平凡的一员，甚至成为逊色于人的平庸之辈；而且，没人会重视自己。这些都是闭居者常有的心理。</p><p>【这个作者的说明我感觉挺烂的，可能是给他朋友留一点面子，委婉表达？】</p><p><strong>而被捏造出的不只有心理创伤，还有愤怒。</strong></p><p>比如说：我在咖啡店时，一名服务员讲咖啡打翻，洒了我一身。我这时候大发雷霆，狠狠的大骂了服务员一顿。其实，这完全是为了<strong>不想去承担后续所带来的一切后果，而所制造的怒气。</strong>也就是说，我想要通过大发雷霆来震慑服务员，进而使他认真听自己的话。作为相应的手段，我便捏造了愤怒这种感情。</p><hr><p>那阿德勒心理学是否又是一种虚无主义呢？</p><p>上面的两个例子，是否在否定人类感情呢？</p><p>感情是否只是一种为了达成目的手段或是工具呢？</p><p>阿德勒心理学并不是否定感情的存在，而是否定“人是无法抵抗感情的存在”这种观点的。在“人不受感情支配”这个层面上，进而在“人不受过去支配”这个层面上，<strong>阿德勒心理学正是一种与虚无主义截然相反的思想和哲学</strong></p><p>过去的一切对你造成的影响并不是无法改变的，如果那样的话，活在今天的我们对人生将会是束手无策。</p><p><strong>以精神创伤说为代表的弗洛伊德式的原因论就是变相的决定论，是虚无主义的入口。</strong></p><p>我们要考虑人的潜能。假若人是可以改变的存在，那么基于原因论的价值观也就不可能产生了，目的论自然就会水道渠成。总而言之，<strong>以“人是可以改变的”为前提</strong>。否定我们人类的自由意志、把人看作机器一样的存在，这就是弗洛伊德式的原因论。</p><hr><p>我很想变成Y那样的人，他是一个非常开朗的男士，即使和陌生人也能谈得来。他深受大家的喜爱，可以瞬间令周围的人展露笑容，简直是一位向日葵般的人。而我就是一个不善于和人交往的人，在与他人攀谈的时候总觉得不自然。那么按照阿德勒目的论的主张，“人是可以改变的”，我又是否能变成Y那样的人呢？</p><p><strong>阿德勒心理学所说的改变是让自己变成更好的人，不受原因论的影响，而非成为别人。</strong>这与后面将要说的<strong>接纳自己</strong>有很大关系。看到书中青年的例子，我突然想到我也是和他一样想要变成别人。剽窃朋友的学历、剽窃朋友的努力，在空想的泥潭中行走，在冰冷腐臭的中放弃挣扎，慢慢地沉沦，慢慢地消失。</p><p>多想改变一切啊，多想从头来过啊，明明知道不可能，那就这样吧，自暴自弃，陷入了自卑情结中。</p><p>我们感到不幸福，其实是因为只把注意力集中在了“被给予了什么”，而非想到去如何“利用被给予的东西”。<strong>重要的不是被给予了什么，而是如何利用被给予的东西</strong></p><p>也就是说，<strong>现在的你之所以不幸正是因为你自己亲手选择了“不幸”</strong>，而不是因为生下来就不幸。比如那个困在房间里的青年。你在人生的某个阶段里选择了“不幸”。这既不是因为你生在了不幸的环境中，也不是因为你陷入了不幸的境地中，而是因为<strong>你认为“不幸”对你而言是一种“善”。</strong></p><p>Q：那么又如何才能够重新选择呢？并不是一句“因为是你自己选择了那种生活方式，所以现在马上重新选择”就可以马上改变的吧！</p><p>A：<font color="orange">人无论何时也无论何种环境中都可以改变。<strong>你之所以无法改变，是因为自己下了“不改变”的决心。</strong></font>人时常在选择着自己的生活方式，即使像现在这样促膝而谈的瞬间也在进行着选择。你把自己说成不幸的人，还说想要马上改变，甚至说想要变成别人。尽管如此还是没能改变，这是为什么呢？那是因为你在不断地下着不改变自己生活方式的决心。</p><p>A：尽管有些不方便、不自由，但你还是感觉现在的生活方式更好，大概是觉得一直这样不做改变比较轻松吧。</p><p>A：如果一直保持“现在的我”，那么如何应对眼前的事情以及其结果会怎样等问题都可以根据经验进行推测，可谓是轻车熟路般的状态。即使遇到点状况也能够想办法对付过去。</p><p>A：另一方面，如果选择新的生活方式，那就既不知道新的自己会遇到什么问题，也不知道应该如何应对眼前的事情。未来难以预测，生活就会充满不安，也可能有更加痛苦、更加不幸的生活在等着自己。<strong>也就是说，即使人们有各种不满，但还是认为保持现状更加轻松、更能安心。</strong></p><p>其实这和后面会说到的自卑情结以及优越情结很像。</p><p>哲人：我们<strong>要有“摒弃现在生活方式”的决心</strong>。</p><p>例如，你刚才说“如果可以变成Y那样的人就能够幸福”。但像这样活在<strong>“如果怎样怎样”之类的假设之中，就根本无法改变。</strong>因为“如果可以变成Y那样的人”正是你为自己不做改变找的借口。</p><p>青年：为不做改变的自己找的借口？</p><p>哲人：我有一位年轻朋友，虽然梦想着成为小说家，但却总是写不出作品。他说是因为工作太忙、写小说的时间非常有限，所以才写不出来作品，也从未参加过任何比赛。</p><p>但真是如此吗？实际上，他是想通过不去比赛这一方式来保留一种“如果做的话我也可以”的可能性，即不愿出去被人评价，更不愿去面对因作品拙劣而落选的现实。他只想活在“只要有时间我也可以、只要环境具备我也能写、自己有这种才能”之类的可能性中。或许再过5年或者10年，他又会开始使用“已经不再年轻”或者“也已经有了家庭”之类的借口。</p><p>青年：……他的心情我非常了解。</p><p>哲人：假若应征落选也应该去做。那样的话或许能够有所成长，或许会明白应该选择别的道路。总之，<strong>可以有所发展。</strong>所谓改变现在的生活方式就是这样。如果一直不去投稿应征，那就不会有所发展。<br>青年：梦也许会破灭啊！</p><p>哲人：但那又怎样呢？应该去做——这一简单的课题摆在面前，但却不断地扯出各种“不能做的理由”，你难道不认为这是一种很痛苦的生活方式吗？梦想着做小说家的他，正是“自己”把人生变得复杂继而难以获得幸福。</p><p>阿德勒的目的论是说：<strong>“无论之前的人生发生过什么，都对今后的人生如何度过没有影响。”</strong>决定自己人生的是活在“此时此刻”的你自己。</p><h3 id="第二夜：一切烦恼都来自于人际关系"><a href="#第二夜：一切烦恼都来自于人际关系" class="headerlink" title="第二夜：一切烦恼都来自于人际关系"></a>第二夜：一切烦恼都来自于人际关系</h3><h4 id="为什么会讨厌自己呢？"><a href="#为什么会讨厌自己呢？" class="headerlink" title="为什么会讨厌自己呢？"></a>为什么会讨厌自己呢？</h4><p>因为你<strong>下定了“不要喜欢自己”的决心</strong>。为了达到不喜欢自己的目的，你才只看缺点而不看优点。不喜欢自己是一种对你而言的“善”。</p><p>我们能做的首先是接受现在的自己，不管结果如何，首先让其树立起向前迈进的勇气。阿德勒心理学把这叫作<strong>“鼓励”</strong></p><p>我们讨厌自己也是因为<strong>你太害怕被他人讨厌，害怕在人际关系中受伤。</strong></p><p>所以如何“避免在人际关系中受伤”就变得至关重要了。（不要试图在人际关系中不受到伤害，那是根本可不能的事情。只要涉入人际关系就会或大或小地受伤，也会伤害别人）</p><h4 id="自卑感来自主观捏造"><a href="#自卑感来自主观捏造" class="headerlink" title="自卑感来自主观捏造"></a>自卑感来自主观捏造</h4><p>Q：你具体有怎样的自卑感呢？</p><p>A：在报纸上看到同龄人活跃的姿态时，我就会感到极其自卑。生活在同一时代的人那么活跃，而自己究竟在做什么呢；或者是朋友过得幸福，不是想要祝福而是心生妒忌或者非常焦躁。当然，我也不喜欢自己这张满是粉刺的脸，对于学历、职业以及年收入等社会境况也抱有强烈的自卑感。</p><p>（ps：还是比较有体会的，2023年末遇到了一个很厉害的朋友，刚开始真的很自卑。相处一段时间后发现也是一个普通人，从仰视变成了平视，但很感激能遇见这样一位朋友。而朋友过得好不好其实我不是很care…）</p><p><em>对于自卑感，我们可以先举一个书中的例子</em></p><p>哲人的身高是155，但他并不觉得这是<strong>“劣等性”</strong>（劣等性——价值更少的“感觉”。也就是说，劣等感是一个关于自我价值判断的词语）。相对较矮的身高会更容易让人感到轻松，更容易使人放松警惕；而高大强壮的男性本身就会给人一种震撼感。</p><p>即<strong>问题在于我如何看待这种身高以及赋予它什么样的价值</strong></p><p>Q：我对自己身高的感觉终究还是在和他人的比较——也就是人机关系——中产生的一种主观上的“自卑感”。如果没有可以比较的他人存在，我就不会认为自己太矮。你现在也有各种“自卑感”并深受其苦吧？但是，那并不是客观上的“劣等性”，而是主观上的“自卑感”。即使像身高这样的问题也可以进行主观性的还原（ps：不过作者这样解释身高的话，我想不到还有什么不是主观上的，除了天生的缺陷似乎就没了呢。）</p><p>即<strong>困扰我们的自卑感不是“客观性的事实”而是“主观性的解释”</strong></p><p>我们无法改变客观事实，但可以任意改变主观解释。并且，我们都活在主观世界中。</p><h4 id="自卑情结只是一种借口"><a href="#自卑情结只是一种借口" class="headerlink" title="自卑情结只是一种借口"></a>自卑情结只是一种借口</h4><p>阿德勒承认自卑感人人都有，自卑感本身也并不是坏事。即使是家产万贯的企业家、人人艳羡的绝世美女或者奥林匹克冠军得主，大家多多少少地受到自卑感的困扰。（ps：还是那我那个朋友举例子，相处中我也看到了他的自卑，所以发现原来大佬其实也是一个普通人，但好高兴能认识他啊：）</p><p>Q：那么人为什么会感到自卑呢？</p><p>A：首先，人是作为一种无力的存在活在这个世界上。并且，人希望摆脱这种无力状态，继而就有了普遍追求。阿德勒称其为<strong>“追求优越性”</strong>。</p><p>你可以将其理解为“希望进步“或者“追求理想状态“</p><p>与之相对应的就是自卑感。人都处于追求优越性这一“希望进步的状态”之中，树立某些理想或目标并努力为之奋斗。同时，对于<strong>无法达成理想的自己就会产生一种自卑感</strong>。例如，越是有远大志向的厨师也许就越会产生“还很不熟练”或者“必须做出更好的料理”之类的自卑感。</p><p>阿德勒说“无论是追求优越性还是自卑感，都不是病态，而是一种能够促进健康、正常的努力和成长的刺激”。主要处理得当，自卑感也可以成为努力和成长的催化剂</p><p>我们应该摒弃自卑感，进一步向前；不满足于现状，不断进步；要更加幸福。如果是这样的自卑感，那就没有任何问题。</p><p>但是，有些人无法人情“情况可以通过现实的努力而改变”这一事实，根本没有向前迈进的勇气。他们什么都不做就断定自己不行或是现实无法改变</p><p>Q：是啊。自卑感越强，人就会变得越消极，最终肯定会认为自己一无是处。自卑感不就是这样吗？</p><p>A：不，<strong>这不是自卑感，而是自卑情结。</strong>自卑情结一词原本表示的是一种复杂而反常的心理状态，跟自卑感没有关系。</p><p>自卑感：自卑感本身并不是一件坏事我们之前有说。自卑感也可以成为促成努力和进步的契机。例如，虽然对学历抱有自卑感，但若是正因为如此，才下定“我学历低所以更要付出加倍的努力”之类的决心，那反而成了好事。</p><p>自卑情结：自卑情结是指把自己的自卑感当作某种借口使用的状态。具体就像“我因为学历低所以无法成功”或者“我因为长得不漂亮所以结不了婚”之类的想法。像这样在日常生活中大肆宣扬“因为有A所以才做不到B”这样的理论，这已经超出了自卑感的范畴，它是一种自卑情结。</p><p>Q：难道这不是一种正儿八经的因果关系吗？如果学历低，就会失去很多求职或者发展的机会。不被社会看好也就无法成功。这不是什么借口，而是严峻的事实。</p><p>A：关于你所说的因果关系，阿德勒用“外部因果律”一词来进行说明。意思就是：将原本没有任何因果关系的事情解释成似乎有重大因果关系一样。例如，前几天就有人说：“自己之所以始终无法结婚，就是因为幼时父母离婚的缘故。”从弗洛伊德的原因论来看，父母离婚对其造成了极大的精神创伤，与自己的婚姻观有着很大的因果关系。但是，阿德勒从目的论的角度出发把这种论调称为“外部因果律”。</p><p>Q：但是，现实问题是拥有高学历的人更容易在社会上获得成功啊！先生您应该也有这种社会常识吧。</p><p>A：问题在于你如何去面对这种社会现实。如果抱着“我因为学历低所以无法成功”之类的想法，那就不是“不能成功”而是“不想成功”了。</p><p><strong>简单地说就是害怕向前迈进或者是不想真正地努力。不愿意为了改变自我而牺牲目前所享受的乐趣——比如玩乐或休闲时间。也就是拿不出改变生活方式的“勇气”，即使有些不满或者不自由，也还是更愿意维持现状。</strong></p><h4 id="越自负的人越自卑"><a href="#越自负的人越自卑" class="headerlink" title="越自负的人越自卑"></a>越自负的人越自卑</h4><p><strong><font color="orange">自卑情结 与 优越情结</font></strong></p><p>对自己的学历有着自卑情结，认为“我因为学历低，所以才无法成功”。反过来说，这也就意味着“只要有高学历，我也可以获得巨大的成功”。</p><p>这就是自卑情结的另一个侧面。那些用语言或态度表明自己的自卑情结的人和声称“因为有A所以才不能做到B”的人，他们的言外之意就是“只要没有A，我也会是有能力、有价值的人”。</p><p>也就是说<strong>“要不是因为这一点，我也能行”。</strong></p><p>是的。关于自卑感，阿德勒指出“没有人能够长期忍受自卑感”。也就是说，自卑感虽然人人都有，但它沉重得没人能够一直忍受这种状态。</p><p>拥有自卑感即感觉目前的“我”有所欠缺的状态。如此一来问题就在于……</p><p>如何去弥补欠缺的部分</p><p>最健全的姿态应该是想要通过努力和成长去弥补欠缺部分，例如刻苦学习、勤奋练习、努力工作等。</p><p>但是，没有这种勇气的人就会陷入自卑情结。拿刚才的例子来讲，就会产生“我因为学历低所以无法成功”之类的想法，并且还会进一步通过“如果有高学历自己也很容易成功”之类的话来暗示自己的能力。<strong>意思就是“现在只不过是被学历低这个因素所埋没，‘真正的我’其实非常优秀”。</strong>（ps：他人成功并不是因为学历高，而是因为他人能够忍受你不能忍受的苦，锻炼、学习都是如此）</p><p>A：现在只不过是被学历低这个因素所埋没，‘真正的我’其实非常优秀。这种说法更像是一种自吹自擂。</p><p>Q：这正是<strong>“优越情结”</strong></p><p>虽然苦于强烈的自卑感，但却没有勇气通过努力或成长之类的健全手段去进行改变。即便如此，又没法忍受“因为有A所以才做不到B”之类的自卑情结，无法接受“无能的自己”。如此一来，人就会想要用更加简便的方法来进行补偿。</p><p><strong>表现得好像自己很优秀，继而沉浸在一种虚假的优越感之中。</strong></p><p>一个很常见的例子就是“权势张扬”。</p><p>例如大力宣扬自己是权力者——可以是班组领导，也可以是知名人士，其实就是在通过此种方式来显示自己是一种特别的存在。虚报履历或者过度追逐名牌服饰等也属于一种权势张扬、具有优越情结的特点。这些情况都属于“我”原本并不优秀或者并不特别。而通过把“我”和权势相结合，似乎显得“我”很优秀。这也就是“虚假优越感”。</p><p>Q： 其根源在于怀有强烈的自卑感吧？</p><p>A：当然。我虽然对时尚不太了解，但10根手指全都戴着红宝石或者绿宝石戒指的人与其说是有审美意识的问题，倒不如说是自卑感的问题，也就是一种优越情结的表现。</p><p>不过，借助权势的力量来抬高自己的人终究是活在他人的价值观和人生之中。这是必须重点强调的地方</p><p>例如，那些想要骄傲于自我功绩的人，那些沉迷于过去的荣光整天只谈自己曾经的辉煌业绩的人，这样的人恐怕你身边也有。这些都可以称之为优越情结。</p><p>自大其实也是自卑感的另一种表现</p><p>如果真正地拥有自信，就不会自大。正因为有强烈的自卑感才会骄傲自大，那其实是想要故意炫耀自己很优秀。担心如果不那么做的话，就会得不到周围的认可。这完全是一种优越情结。</p><p>Q：……也就是说，自卑情结和优越情结从名称上来看似乎是正相反的，但实际上却有着密切的联系？</p><p>A：密切相关。最后再举一个关于自夸的复杂实例。这是一种通过把自卑感尖锐化来实现异常优越感的模式。具体就是指夸耀不幸。</p><p>就是说那些津津乐道甚至是夸耀自己成长史中各种不幸的人。而且，即使别人想要去安慰或者帮助其改变，他们也会用“你无法了解我的心情”来推开援手。</p><p>Q：啊，这种人倒是存在……</p><p>A：这种人其实是<strong>想要借助不幸来显示自己“特别”，他们想要用不幸这一点来压住别人。</strong></p><p>例如，我的身高很矮。对此，心善的人会用“没必要在意”或者“人的价值并不由身高决定”之类的话来安慰我。但是，此时我如果甩出“你怎么能够理解矮子的烦恼呢！”之类的话加以拒绝的话，那谁都会再无话可说。如此一来，恐怕周围的人一定会小心翼翼地来对待我吧。</p><p><strong>以自己的不幸为武器来支配对方</strong></p><p>阿德勒甚至指出：“在我们的文化中，弱势其实非常强大而且具有特权”。当你把自己的不幸当作保持“特别”的武器来用，那人就会永远需要不幸。</p><h4 id="人生不是与他人的比赛"><a href="#人生不是与他人的比赛" class="headerlink" title="人生不是与他人的比赛"></a>人生不是与他人的比赛</h4><p>Q：阿德勒也认为希望进步的“追求优越性”属于普遍欲求吧？另一方面，他又提醒人们不可以陷入过剩的自卑感或优越感之中。如果是直接否定“追求优越性”的话倒还容易理解，但他又认可这一点。那么，我们到底应该怎么做呢？</p><p>A：请想象一下这种情形：虽然行进距离或速度各不相同，但大家都平等地走在一个平面上。所谓“追求优越性”是指自己不断朝前迈进，而不是比别人高出一等的意思。</p><p><strong>不与任何人竞争，只要自己不断前进即可。</strong>当然，也没有必要把自己和别人相比较。</p><p>Q：哎呀，这不可能吧。我们无论如何都避免不了把自己与别人相比较。自卑感不就是这样产生的吗？</p><p>A：<strong>健全的自卑感不是来自与别人的比较，而是来自与“理想的自己”的比较。</strong></p><h4 id="在意你长相的，只有你自己"><a href="#在意你长相的，只有你自己" class="headerlink" title="在意你长相的，只有你自己"></a>在意你长相的，只有你自己</h4><h3 id="第三夜：让干涉你生活的人见鬼去"><a href="#第三夜：让干涉你生活的人见鬼去" class="headerlink" title="第三夜：让干涉你生活的人见鬼去"></a>第三夜：让干涉你生活的人见鬼去</h3><h3 id="第四夜：要有被讨厌的勇气"><a href="#第四夜：要有被讨厌的勇气" class="headerlink" title="第四夜：要有被讨厌的勇气"></a>第四夜：要有被讨厌的勇气</h3><h3 id="第五夜：认真的人生“活在当下”"><a href="#第五夜：认真的人生“活在当下”" class="headerlink" title="第五夜：认真的人生“活在当下”"></a>第五夜：认真的人生“活在当下”</h3><p><strong>自我接纳 -&gt; 他者信赖 -&gt; 他者贡献 &lt;-共同体感觉的建立</strong></p><h4 id="什么是自我接纳？"><a href="#什么是自我接纳？" class="headerlink" title="什么是自我接纳？"></a>什么是自我接纳？</h4><p>假如<strong>做不到就诚实地接受这个“做不到的自己”，然后尽量朝着自己能够做到的方向去努力，不对自己撒谎。</strong></p><p>比如说：对得了60分的自己说“这次只是运气不好，真正的自己能得100分”。这就是自我肯定，与此相对，在诚实地接受60分的自己的基础上努力思考，“如何才能接近100分”这就是自我接纳。</p><p>可以使用课题分离，要分清“能够改变的”和“不能改变的”。我们无法改变“被给予了什么”，但是关于“如何去利用被给予的东西”，我们却可以用自己的力量改变。</p><p>即<strong>不去关注“无法改变的”，而去关注“可以改变的”，这就是自我接纳。</strong></p><h4 id="什么是他者信赖？"><a href="#什么是他者信赖？" class="headerlink" title="什么是他者信赖？"></a>什么是他者信赖？</h4><p>我们首先要分清信用和信赖的区别？</p><p>信用：信用是有附加条件的，如银行贷款等</p><p>信赖：信赖是不附加任何条件的，在相信他人的时候不附加任何条件。</p><p>Q：无条件的信赖可能会伤害我们，会遭到背叛，那么我们还要无条件的信任吗？</p><p>A：应该用课题分离去思考这个问题。如果你并不想与那个人搞好关系的话，也可以用手中的剪刀去剪断。阿德勒心理学并没有给予道德价值观去主张“要无条件的信任他人”，而无条件信赖他人是搞好人际关系和构建横向关系的一种手段。</p><p>无条件信赖他人的前提是自我接纳，即看清自己能够做到的和自己不能做到的。也就是可以理解背叛是他人的课题，继而也就不难迈出迈向他者信赖的步伐了。</p><p>Q：遭到背叛时的怒气和悲伤该怎么办呢？</p><p>A：悲伤的时候尽管悲伤就好了，想要逃避痛苦或悲伤才不敢付出行动，以至于与任何人都无法建立深厚的关系。</p><h4 id="什么是他者贡献？"><a href="#什么是他者贡献？" class="headerlink" title="什么是他者贡献？"></a>什么是他者贡献？</h4><p>Q：他者贡献是发扬自我牺牲精神为周围人效劳吗？</p><p>A：<strong>他者贡献的意思并不是自我牺牲，相反，阿德勒把他人牺牲自己人生的称作“过度适应社会的人”并对此给予警示。</strong></p><p><strong>他者贡献也并不是舍弃“我”而为他人效劳，它反而是为了能够体会到“我”的价值而采取的一种手段。</strong></p><p>最容易理解的他者贡献就是工作。我们通过工作、劳动来实现他者贡献，参与共同体，体会“我对他人有用”，进而获得自己的存在价值。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第一夜：我们的不幸是谁的错&lt;/li&gt;
&lt;li&gt;第二夜：一切烦恼都来自于人际关系&lt;/li&gt;
&lt;li&gt;第三夜：让干涉你生活的人见鬼去&lt;/li&gt;
&lt;li&gt;第四夜：要有被讨厌的勇气&lt;/li&gt;
&lt;li&gt;第五夜：认真的人生“活在当下”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第一夜：我们的不幸是谁的错&quot;&gt;&lt;a href=&quot;#第一夜：我们的不幸是谁的错&quot; class=&quot;headerlink&quot; title=&quot;第一夜：我们的不幸是谁的错&quot;&gt;&lt;/a&gt;第一夜：我们的不幸是谁的错&lt;/h3&gt;&lt;p&gt;阿德勒心理学考虑的不是过去的“原因”，而是现在的“自由”，&lt;strong&gt;如果我们一直依赖原因论，就会永远止步不前&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;青年有一个朋友，多年躲在自己的房间中闭门不出，他很想改变自己的这种现状，但是一想到要踏出门要面对种种的社会问题以及自己的那些“逃不掉”，而不得不再次面对的问题就心有余悸、惶恐不安。&lt;/p&gt;
&lt;p&gt;也就是说，其实他并不是因为不安而走不出房间，&lt;strong&gt;是因为不想到外面去，不想面对那些“无法解决”的问题，而不安&lt;/strong&gt;。也就是说，青年的朋友先有了不想出去，不想面对现实问题的想法。之后为了这个目的，而制造出不安和恐惧之类的情绪。阿德勒心理学把这叫作“目的论”&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2023" scheme="http://example.com/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>CH3-计算机的算术运算</title>
    <link href="http://example.com/2023/07/26/CH3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/"/>
    <id>http://example.com/2023/07/26/CH3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/</id>
    <published>2023-07-26T14:12:58.000Z</published>
    <updated>2023-08-05T05:12:50.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>计算机中的字由位组成。因此，字可以用二进制数表示。第2章里提到整数可以表示成十进制或者二进制形式，但是其他常数用的数据如何表示？例如：</p><ul><li>小数和其他实数如何表示？</li><li>当一个操作数生成了一个无法表示的大数时如何处理？</li><li>上述问题隐含着一个秘密：怎样用硬件真正地做乘法和除法？</li></ul><p>本章的目的就是要揭示这些秘密，包含实数的表示方法、算术的算法、实现这些算法的硬件，以及如何在指令集中表示有关的内容。有了这些知识后，你就能解释在使用计算机的过程中遇到的各种不明白的事情了。另外，我们还将介绍如何使用该技术加速算术运算密集型程序的运行。</p><span id="more"></span><h2 id="章节导图"><a href="#章节导图" class="headerlink" title="章节导图"></a>章节导图</h2><p><img src="%E7%AB%A0%E8%8A%82%E5%AF%BC%E5%9B%BE.png" alt="章节导图"></p><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="整数的表示"><a href="#整数的表示" class="headerlink" title="整数的表示"></a>整数的表示</h3><p><img src="%E6%95%B4%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA.png" alt="整数的表示"></p><h4 id="无符号整数-原码-反码"><a href="#无符号整数-原码-反码" class="headerlink" title="无符号整数 原码 反码"></a>无符号整数 原码 反码</h4><p>不同于MIPS的32位字，我们先讨论8位整数</p><p>将全部8位用来表示绝对值的二进制数叫做<font color="orange">无符号整数</font></p><p>其表示范围为 0 ~ +255，即 (2^8-1)</p><p>00000000 00000001 00000010……11111111</p><br><p>将最高位用来表示正负号(正数为0，负数为1)，其余7位表示绝对值的方法叫做<font color="orange">原码</font>&gt; </p><p>也称为<font color="orange">符号和幅值</font>表示法，其表示范围为 -127 ~ -0 ~ +0 ~ +127，即 (2^7-1)</p><p>00000000 00000001 00000010……01111111 10000000 10000001 ……11111111 </p><p><font style="background: grey">*原码是带符号整数的表示方法</font></p><p>将最高位为0的原码按位取反来表示负数，叫做<font color="orange">反码</font></p><p>其表示范围为 -127 ~ -0 ~ +0 ~ +127</p><p>00000000 00000001 00000010……01111111 11111111 11111110 ……10000000</p><h4 id="补码-符号扩展-大小端编址"><a href="#补码-符号扩展-大小端编址" class="headerlink" title="补码 符号扩展 大小端编址"></a>补码 符号扩展 大小端编址</h4><p>原码和反码不能直接用于二进制加减法，且正负两个0会给编程人员带来麻烦</p><p> 因此，当今计算机都采用可以直接加减的<font color="orange">补码</font>来表示带符号整数 </p><p>先用 00000000 ~ 01111111 表示零和正整数 0 ~ +127 </p><p>再用 10000000 ~ 11111111 表示负数 -128，即(-2^7) ~ -1 </p><p>数x和它的反码相加，必定是11111111 (-1)</p><p>即 x + x̅ = -1，x̅ + 1 = x，因此将一个补码整数化为它的相反数，方法就是按位取反再+1</p><br><p>addi指令中，第一个源操作数是32位补码寄存器，第二个源操作数是16位补码立即数</p><p>将最高位即符号位，复制到高16位，即可完成<font color="orange">符号扩展</font></p><br><p>对于一个长于1字节的整数，如果高位放在低地址，就称为<font color="orange">大端编址</font></p><p>如果高位放在高地址，就称为<font color="orange">小端编址</font></p><p>对于大小端编址可以参考《深入理解计算机系统》，有详细的介绍与讲解</p><br><p><font color="grey">对于16位补码 0xFFE0   1）十进制真值为？ 2）符号扩展=？ 3）大端/小端编址分别=？</font></p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="整数的四则运算ALU"><a href="#整数的四则运算ALU" class="headerlink" title="整数的四则运算ALU"></a>整数的四则运算ALU</h3><p><img src="%E6%95%B4%E6%95%B0%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97.png" alt="整数的四则运算"></p><h3 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h3><ol><li><p>补码加减的溢出分为哪两种，分别对应哪四个情况？</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">补码加减溢出分别为：上溢和下溢</span><br><span class="line">分别对应：上溢有 正数+正数溢出 和 正数－负数溢出两种</span><br><span class="line">         下溢有 负数+负数溢出 和 负数-正数溢出两种</span><br></pre></td></tr></table></figure></li><li><p>为什么最低位ALU不接受进位，也要使用全加器？</p></li><li><p>为了支持and、or运算，采用哪种数字电路部件来选择信号？nor运算怎么实现？</p></li><li><p>32位ALU怎样支持slt和条件分支指令？</p></li><li><p>三组（四位）ALU控制信号的作用分别是什么？</p></li><li><p>行波进位和超前进位加法器的门延迟分别怎么计算？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">行波进位的门延迟为：位数<span class="number">*2</span>，即 32<span class="number">*2</span>=64</span><br><span class="line">                 因为每一位要经过一个与门和一个或门</span><br><span class="line"></span><br><span class="line">超前进位的门延迟为：位数中4的几次方，并向上取整然后<span class="number">*2</span>+1。即4^2.5+1 -&gt; 3<span class="number">*2</span>+1 = 7</span><br></pre></td></tr></table></figure></li><li><p>改进前的乘法器，控制逻辑实现哪些功能？</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">根据乘数最低位是0还是1，决定被乘数是否加到积上</span><br><span class="line">实现两个移位：被乘数左移，乘数右移</span><br><span class="line">计数：当循环（迭代）进行32次后退出</span><br></pre></td></tr></table></figure></li><li><p>改进后的乘法器和除法器是否可以共用一套硬件？64位寄存器怎么变化？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">可以。</span><br><span class="line">64位寄存器的变化：</span><br><span class="line"><span class="code">              对于乘法</span></span><br><span class="line"><span class="code">最开始，左边是32位的积，右边是32位乘数</span></span><br><span class="line"><span class="code">最后经过32步的运算，整个变成64位的积</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">              对于除法</span></span><br><span class="line"><span class="code">最开始，存放的是64位的被除数（一开始的余数）</span></span><br><span class="line"><span class="code">最后，变成左边32位的余数，右边32位的商</span></span><br></pre></td></tr></table></figure></li><li><p><strong>SCU熟练掌握分步列出改进后的乘除法器中寄存器的值</strong>【熟练掌握】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">改进前后的表，改进后都为4次</span><br></pre></td></tr></table></figure></li><li><p>乘法、除法分别用什么策略实现进一步改进？</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">乘法：将<span class="number">32</span>个ALU组合起来变成并行树。只需等待<span class="built_in">log2</span>^<span class="number">32</span>，即<span class="number">5</span>次<span class="number">32</span>位长的加法时间，而不是等待<span class="number">32</span>次加法时间。</span><br><span class="line">除法：采用SRT。通过查找表的方法来尝试猜测每步几个商位。其中查找表基于被除数和余数的高位部分来进行。依赖后面的步骤来修正错误的猜测。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;计算机中的字由位组成。因此，字可以用二进制数表示。第2章里提到整数可以表示成十进制或者二进制形式，但是其他常数用的数据如何表示？例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小数和其他实数如何表示？&lt;/li&gt;
&lt;li&gt;当一个操作数生成了一个无法表示的大数时如何处理？&lt;/li&gt;
&lt;li&gt;上述问题隐含着一个秘密：怎样用硬件真正地做乘法和除法？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章的目的就是要揭示这些秘密，包含实数的表示方法、算术的算法、实现这些算法的硬件，以及如何在指令集中表示有关的内容。有了这些知识后，你就能解释在使用计算机的过程中遇到的各种不明白的事情了。另外，我们还将介绍如何使用该技术加速算术运算密集型程序的运行。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机组成与设计" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>服务器为什么大量出现TIME_WAIT</title>
    <link href="http://example.com/2023/07/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E9%87%8F%E5%87%BA%E7%8E%B0TIME-WAIT/"/>
    <id>http://example.com/2023/07/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E9%87%8F%E5%87%BA%E7%8E%B0TIME-WAIT/</id>
    <published>2023-07-24T07:13:17.000Z</published>
    <updated>2023-11-09T08:55:31.527Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>写在开头，大概 4 年前，听到运维同学提到 TIME_WAIT 状态的 TCP 连接过多的问题，但是当时没有去细琢磨；最近又听人说起，是一个新手进行压测过程中，遇到的问题，因此，花点时间，细深究一下。</p><p>从这几个方面着手：</p><p>问题描述：什么现象？什么影响？</p><ol><li>问题分析</li><li>解决方案</li><li>底层原理</li></ol><span id="more"></span><h3 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a><strong>1、问题描述</strong></h3><p>模拟高并发的场景，会出现批量的 TIME_WAIT 的 TCP 连接：</p><p><img src="./TIMEWAIT.jpg" alt="img"></p><p>短时间后，所有的 TIME_WAIT 全都消失，被回收，端口包括服务，均正常。即，在高并发的场景下，TIME_WAIT 连接存在，属于正常现象。</p><p>线上场景中，持续的高并发场景：</p><ul><li><p>一部分 TIME_WAIT 连接被回收，但新的 TIME_WAIT 连接产生；</p></li><li><p>一些极端情况下，会出现大量的 TIME_WAIT 连接。</p></li></ul><p><strong>Think：上述大量的 TIME_WAIT 状态 TCP 连接，有什么业务上的影响吗？</strong></p><p>Nginx 作为反向代理时，大量的短链接，可能导致 Nginx 上的 TCP 连接处于 time_wait 状态：</p><p>1.每一个 time_wait 状态，都会占用一个「本地端口」，上限为 65535(16 bit，2 Byte)；</p><p>2.当大量的连接处于 time_wait 时，新建立 TCP 连接会出错，address already in use : connect 异常</p><p>统计 TCP 连接的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 统计：各种连接的数量</span><br><span class="line"></span><br><span class="line">$ netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">ESTABLISHED 1154</span><br><span class="line"></span><br><span class="line">TIME_WAIT 1645</span><br></pre></td></tr></table></figure><p><strong>Tips：TCP 本地端口数量，上限为 65535（6.5w），这是因为 TCP 头部使用 16 bit，存储「端口号」，因此约束上限为 65535。</strong></p><h3 id="2、问题分析"><a href="#2、问题分析" class="headerlink" title="2、问题分析"></a><strong>2、问题分析</strong></h3><p>大量的 TIME_WAIT 状态 TCP 连接存在，其本质原因是什么？</p><p>1.大量的短连接存在</p><p>2.特别是 HTTP 请求中，如果 connection 头部取值被设置为 close 时，基本都由「服务端」发起主动关闭连接</p><p>3.而，TCP 四次挥手关闭连接机制中，为了保证 ACK 重发和丢弃延迟数据，设置 time_wait 为 2 倍的 MSL（报文最大存活时间）</p><p>TIME_WAIT 状态：</p><ul><li><p>1.TCP 连接中，主动关闭连接的一方出现的状态；（收到 FIN 命令，进入 TIME_WAIT 状态，并返回 ACK 命令）</p></li><li><p>2.保持 2 个 MSL 时间，即，4 分钟；（MSL 为 2 分钟）</p></li></ul><h3 id="3、解决办法"><a href="#3、解决办法" class="headerlink" title="3、解决办法"></a><strong>3、解决办法</strong></h3><p>解决上述 time_wait 状态大量存在，导致新连接创建失败的问题，一般解决办法：</p><p>1.客户端，HTTP 请求的头部，connection 设置为 keep-alive，保持存活一段时间：现在的浏览器，一般都这么进行了</p><p>2.服务器端 允许 time_wait 状态的 socket 被重用 缩减 time_wait 时间，设置为 1 MSL（即，2 mins）</p><p><strong>结论：几个核心要点</strong></p><p><strong>1.time_wait 状态的影响：</strong></p><ul><li><p>TCP 连接中，「主动发起关闭连接」的一端，会进入 time_wait 状态</p></li><li><p>time_wait 状态，默认会持续 2 MSL（报文的最大生存时间），一般是 2x2 mins</p></li><li><p>time_wait 状态下，TCP 连接占用的端口，无法被再次使用</p></li><li><p>TCP 端口数量，上限是 6.5w（65535，16 bit）</p></li><li><p>大量 time_wait 状态存在，会导致新建 TCP 连接会出错，address already in use : connect 异常</p></li></ul><p><strong>2.现实场景：</strong></p><ul><li><p>服务器端，一般设置：不允许「主动关闭连接」</p></li><li><p>但 HTTP 请求中，http 头部 connection 参数，可能设置为 close，则，服务端处理完请求会主动关闭 TCP 连接</p></li><li><p>现在浏览器中， HTTP 请求 connection 参数，一般都设置为 keep-alive</p></li><li><p>Nginx 反向代理场景中，可能出现大量短链接，服务器端，可能存在</p></li></ul><p><strong>3.解决办法：</strong></p><ul><li><p>服务器端允许 time_wait 状态的 socket 被重用</p></li><li><p>缩减 time_wait 时间，设置为 1 MSL（即，2 mins）</p></li></ul><p><strong>4、附录 - 底层原理</strong></p><p>几个方面：</p><ul><li><p>1.TCP 连接状态的查询</p></li><li><p>2.MSL 时间</p></li><li><p>3.TCP 三次握手和四次握手</p></li></ul><p><strong>附录 A：查询 TCP 连接状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Mac 下，查询 TCP 连接状态的具体命令：</span><br><span class="line"></span><br><span class="line">// Mac 下，查询 TCP 连接状态</span><br><span class="line"></span><br><span class="line">$ netstat -nat |grep TIME_WAIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Mac 下，查询 TCP 连接状态，其中 -E 表示 grep 或的匹配逻辑</span><br><span class="line"></span><br><span class="line">$ netstat -nat | grep -E &quot;TIME_WAIT|Local Address&quot;</span><br><span class="line"></span><br><span class="line">Proto Recv-Q Send-Q Local Address Foreign Address (state)</span><br><span class="line"></span><br><span class="line">tcp4 0 0 127.0.0.1.1080 127.0.0.1.59061 TIME_WAIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 统计：各种连接的数量</span><br><span class="line"></span><br><span class="line">$ netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">ESTABLISHED 1154</span><br><span class="line"></span><br><span class="line">TIME_WAIT 1645</span><br></pre></td></tr></table></figure><p><strong>附录 B：MSL 时间</strong>MSL，Maximum Segment Lifetime，“报文最大生存时间”</p><p>1.任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。（IP 报文）</p><p>2.TCP报文 （segment）是ip数据报（datagram）的数据部分。</p><p><strong>Tips：RFC 793中规定MSL为2分钟，实际应用中常用的是30秒，1分钟和2分钟等。</strong></p><p>2MSL，TCP 的 TIME_WAIT 状态，也称为2MSL等待状态：</p><p>1.当TCP的一端发起主动关闭（收到 FIN 请求），在发出最后一个ACK 响应后，即第3次握 手完成后，发送了第四次握手的ACK包后，就进入了TIME_WAIT状态。</p><p>2.必须在此状态上停留两倍的MSL时间，等待2MSL时间主要目的是怕最后一个 ACK包对方没收到，那么对方在超时后将重发第三次握手的FIN包，主动关闭端接到重发的FIN包后，可以再发一个ACK应答包。</p><p>3.在 TIME_WAIT 状态时，两端的端口不能使用，要等到2MSL时间结束，才可继续使用。（IP 层）</p><p>4.当连接处于2MSL等待阶段时，任何迟到的报文段都将被丢弃。</p><p>不过在实际应用中，可以通过设置 「SO_REUSEADDR选项」，达到不必等待2MSL时间结束，即可使用被占用的端口。</p><p><strong>附录 C：TCP 三次握手和四次握手</strong></p><p>具体示意图：</p><ul><li>1.三次握手，建立连接过程</li><li>2.四次挥手，释放连接过程</li></ul><p><img src="./TCP%E4%B8%89%E6%AC%A1%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B.webp" alt="img"></p><p><strong>几个核心疑问：</strong></p><p>1.time_wait 是「服务器端」的状态？or 「客户端」的状态？</p><p>RE：time_wait 是「主动关闭 TCP 连接」一方的状态，可能是「客服端」的，也可能是「服务器端」的；</p><p>一般情况下，都是「客户端」所处的状态；「服务器端」一般设置「不主动关闭连接」。</p><p>2.服务器在对外服务时，是「客户端」发起的断开连接？还是「服务器」发起的断开连接？</p><p>正常情况下，都是「客户端」发起的断开连接；</p><p>「服务器」一般设置为「不主动关闭连接」，服务器通常执行「被动关闭」；</p><p>但 HTTP 请求中，http 头部 connection 参数，可能设置为 close，则，服务端处理完请求会主动关闭 TCP 连接，</p><p><strong>关于 HTTP 请求中，设置的主动关闭 TCP 连接的机制：TIME_WAIT的是主动断开方才会出现的，所以主动断开方是服务端？</strong></p><p>1.答案是是的。在HTTP1.1协议中，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久。</p><p>2.HTTP默认的Connection值为close，那么就意味着关闭请求的一方几乎都会是由服务端这边发起的。那么这个服务端产生TIME_WAIT过多的情况就很正常了。</p><p>3.虽然HTTP默认Connection值为close，但是，现在的浏览器发送请求的时候一般都会设置Connection为keep-alive了。所以，也有人说，现在没有必要通过调整参数来使TIME_WAIT降低了。</p><p><strong>关于 time_wait：</strong></p><p>1.TCP 连接建立后，「主动关闭连接」的一端，收到对方的 FIN 请求后，发送 ACK 响应，会处于 time_wait 状态；</p><p>2.time_wait 状态，存在的必要性：</p><p><strong>a、</strong> 可靠的实现 TCP 全双工连接的终止：四次挥手关闭 TCP 连接过程中，最后的 ACK 是由「主动关闭连接」的一端发出的，如果这个 ACK 丢失，则，对方会重发 FIN 请求，因此，在「主动关闭连接」的一段，需要维护一个 time_wait 状态，处理对方重发的 FIN 请求；</p><p><strong>b、</strong> 处理延迟到达的报文：由于路由器可能抖动，TCP 报文会延迟到达，为了避免「延迟到达的 TCP 报文」被误认为是「新 TCP 连接」的数据，则，需要在允许新创建 TCP 连接之前，保持一个不可用的状态，等待所有延迟报文的消失，一般设置为 2 倍的 MSL（报文的最大生存时间），解决「延迟达到的 TCP 报文」问题。</p><blockquote><p><em>文章转载：DevOps技术栈</em></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;写在开头，大概 4 年前，听到运维同学提到 TIME_WAIT 状态的 TCP 连接过多的问题，但是当时没有去细琢磨；最近又听人说起，是一个新手进行压测过程中，遇到的问题，因此，花点时间，细深究一下。&lt;/p&gt;
&lt;p&gt;从这几个方面着手：&lt;/p&gt;
&lt;p&gt;问题描述：什么现象？什么影响？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;问题分析&lt;/li&gt;
&lt;li&gt;解决方案&lt;/li&gt;
&lt;li&gt;底层原理&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我与地坛</title>
    <link href="http://example.com/2023/07/09/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/"/>
    <id>http://example.com/2023/07/09/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/</id>
    <published>2023-07-09T07:48:37.000Z</published>
    <updated>2023-07-09T14:17:39.415Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>但是太阳，它每时每刻都是夕阳也都是旭日。当他熄灭着走下山去收尽苍凉残照之际，正式它在另一面燃烧着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。</p><p>当然，那不是我。</p><p>但是，那不是我吗？</p><span id="more"></span><br><p>命运中有一种错误是只能犯一次的，并且没有改正的机会，命运中有一种并非是错误的错误，它却是不被原谅的。</p><br><p>宇宙以其不息的欲望将一个歌舞炼为永恒。这欲望有怎样一个人间的姓名，大可忽略不计。</p><br><p>我常以为是丑女造就了美人。我常以为是愚氓举出了智者。</p><p>我常以为是懦夫衬照了英雄。我常以为是众生度化了佛祖。</p><br><p>要是有些事我没说，地坛，你别以为是我忘了，我什么也没忘。但是有些事只适合收藏，不能说，也不能想，却又不能忘。</p><br><p>先别去死，再试着活一活看。</p><br><p>就命运而言，休伦公道。</p><br><p>一个人，出生了，这就不再是一个可以辩论的问题，而只是上帝交给他的一个事实。上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个人必然会降临的节日。</p><br><p>在人生的每个阶段，我们都对慢慢前程抱着一份激动的希望，以为奇迹就在前方。然而， 人生只是一个个梦想不断破灭的过程。而当我们走出所有曲折的日子时才发现，真正的美好与神奇，已经永远地留在了背后。</p><br><p>梦是什么？回忆，是怎么一回事？</p><p>倘若在五十光年之外有一架倍数足够大的望远镜，有一个观察点，料必那些情景便依然如故，那条小街，小街上空的鸽群，</p><p>….</p><p><strong>因而我盼望夜晚，盼望黑夜，盼望寂静中自由的到来。</strong></p><p><strong>甚至盼望站到死中，去看生。</strong></p><p><strong>我的躯体早已被固定在床上，固定在轮椅中，但我的心魂常在黑夜出行，脱离开残废的躯壳，脱离白昼的魔法，脱离实际，在尘嚣稍息的夜的世界里游逛，听所有的梦者诉说，看所有放弃了尘世角色的游魂在野的天空和旷野中解开另一种戏剧。风，四处游走，串联起夜的消息，从沉睡的窗口到沉睡的窗口，去探望被白昼忽略了的心情。另一种世界，蓬蓬勃勃，夜的声音无比辽阔。</strong>《记忆与印象1——轻轻地走与轻轻地来》</p><br>]]></content>
    
    
    <summary type="html">&lt;p&gt;但是太阳，它每时每刻都是夕阳也都是旭日。当他熄灭着走下山去收尽苍凉残照之际，正式它在另一面燃烧着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。&lt;/p&gt;
&lt;p&gt;当然，那不是我。&lt;/p&gt;
&lt;p&gt;但是，那不是我吗？&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2023" scheme="http://example.com/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>在逆境中仍要坚守原则，才能获得内心的宁静</title>
    <link href="http://example.com/2023/07/02/%E5%9C%A8%E9%80%86%E5%A2%83%E4%B8%AD%E4%BB%8D%E8%A6%81%E5%9D%9A%E5%AE%88%E5%8E%9F%E5%88%99%EF%BC%8C%E6%89%8D%E8%83%BD%E8%8E%B7%E5%BE%97%E5%86%85%E5%BF%83%E7%9A%84%E5%AE%81%E9%9D%99/"/>
    <id>http://example.com/2023/07/02/%E5%9C%A8%E9%80%86%E5%A2%83%E4%B8%AD%E4%BB%8D%E8%A6%81%E5%9D%9A%E5%AE%88%E5%8E%9F%E5%88%99%EF%BC%8C%E6%89%8D%E8%83%BD%E8%8E%B7%E5%BE%97%E5%86%85%E5%BF%83%E7%9A%84%E5%AE%81%E9%9D%99/</id>
    <published>2023-07-02T10:43:59.000Z</published>
    <updated>2023-07-09T10:12:02.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>近期，法学名师罗翔在一场毕业会上的即兴致辞，引发关注。</p><p>他开门见山地表示：<strong>“我很想祝大家一帆风顺，但我觉得这不现实。”</strong></p><p>常被人认作理想主义者的他，抛出一个问题：<strong>在顺势时可以坚持的原则，逆势时是否还要坚持，以及如何坚持？</strong></p><p>罗翔认为，抛弃原则获得的成功，将无法获得内心的平静。</p><p>他援引纪伯伦语，指出这世间有两种痛，一种是野心还没实现的痛苦，还有一种是野心成就后的无聊，很多人都困在两种痛苦里双向切换。</p><p>他又以孔子以例，直言无论君子还是小人，都有可能遭受厄运，但二者的区别在于，小人会随时改变原则，但君子会守住他的原则。</p><p><strong>“如果世界接受不了我们的理想，这不是我们的问题，是世界的问题。不容然后见君子。”</strong></p><p>他强调真的勇敢，是对良善的坚持，这种坚持本身就是一种幸福，祝愿各位年轻人能找到内心的宁静，一生平安。</p><span id="more"></span><hr><p>本文为罗翔在中国政法大学2023届毕业晚会上的即兴致辞。</p><p>找到内心的宁静，一生平安。</p><p><strong>其实我很想祝大家一帆风顺，但是我觉得这不现实。</strong></p><p>智者说，<strong>人这一生至少有三件事是无法避免的：一个是苦难，一个是邪恶，还有一个是人生的终点。</strong></p><p>所以，愿我们每时每刻都在当下储存足够多美好的记忆，去对抗人生不期而至的苦楚；也愿我们在记忆中能够储存足够多的美善，能够与邪恶相对抗而不和它同流合污；更愿我们能够在记忆中有更多的美好，能让我们平静从容的走向人生的终点。</p><p>这个世界其实有很多所谓的成功人士，他们并不值得信任。</p><p><strong>纪伯伦说过：这个世界有两种痛苦,一种是野心还没实现的痛苦，还有一种是野心成就后的无聊。</strong></p><p>我见过很多成功的和正在追逐成功的人，他们都在这两种痛苦中双向切换。</p><p>所以有人说： <strong>真正能够带给我们宁静的是我们内心的原则。</strong></p><p>当然这样需要有命运的加持，我想给各位分享一个故事：</p><p>2600多年前，当孔子绝粮于陈蔡，七天没有饭吃。外面有暴徒袭击，但孔子依然弦歌不断，依然给学生讲课，因为他要告诉他的学生，无论在什么情境下都应该临危不惧、泰然若处。</p><p>他的大弟子子路走过来问老师：为什么我们会遭遇这种困境呢？</p><p>孔子说：“君子固穷，小人穷斯滥矣”。</p><p><strong>无论是君子还是小人，我们都有可能会遭受厄运，但君子和小人的区别在于，小人穷斯滥矣，他们会随时改变原则；但君子会固守他的原则。</strong></p><p>孔子反问他的学生：那你觉得我们为什么会遭此困境？我们不是又不是野兽为什么会在旷野奔跑呢？</p><p>子路对自己要求非常严，他想了想，他的回答是：老师，那可能是我们做得不够好吧。我们没有坚持“仁”的标准，我们不够智慧。</p><p>但是孔子回答他说：如果坚持仁、坚持智慧，为什么会有比干？为什么会有伯夷叔齐？所以你要不要把凡事都往自己身上推。子路你已经做的很好了，但是外界的环境是你改变不了的。有的时候你要相信命运，尽人事听天命。</p><p>孔子的第二个学生子贡是个有钱人，然后孔子也问了他同样的问题：我们为什么会遭此困境？</p><p>子贡说：老师您的理想太宏大了，为什么不能降低标准呢，只要降低标准我们就能维持。但孔子说：作为专业人士，我们不能降低标准。</p><p>我们不能降低标准来谄媚。他说子贡啊，你的志向太不薄。</p><p>最后是孔子最欣赏的学生叫颜回。</p><p>他的回答第一部分跟子贡完全一样，说“夫子之道至大，故天下莫能容”。但是他第二个回答是：“不容何如（病），不容然后见君子。”</p><p><strong>如果世界接受不了我们的理想，这不是我们的问题，是世界的问题。不容然后见君子。</strong></p><p>1600多年后，当22岁的苏轼高中进士，他给主考官梅饶臣写了一封信，叫《上梅直讲书》，引用了这个典故：不容然后见君子。他有大好的前途，春风得意，他并不知道等待他的到底是什么。</p><p>我时常想，如果苏轼能够提前预知他人生的终点，能够提前预知他所经历的一切，他是不是有勇气重来一遍。</p><p><strong>我真心祝福各位同学，能够找到内心的宁静，一生平安。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期，法学名师罗翔在一场毕业会上的即兴致辞，引发关注。&lt;/p&gt;
&lt;p&gt;他开门见山地表示：&lt;strong&gt;“我很想祝大家一帆风顺，但我觉得这不现实。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常被人认作理想主义者的他，抛出一个问题：&lt;strong&gt;在顺势时可以坚持的原则，逆势时是否还要坚持，以及如何坚持？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;罗翔认为，抛弃原则获得的成功，将无法获得内心的平静。&lt;/p&gt;
&lt;p&gt;他援引纪伯伦语，指出这世间有两种痛，一种是野心还没实现的痛苦，还有一种是野心成就后的无聊，很多人都困在两种痛苦里双向切换。&lt;/p&gt;
&lt;p&gt;他又以孔子以例，直言无论君子还是小人，都有可能遭受厄运，但二者的区别在于，小人会随时改变原则，但君子会守住他的原则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“如果世界接受不了我们的理想，这不是我们的问题，是世界的问题。不容然后见君子。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;他强调真的勇敢，是对良善的坚持，这种坚持本身就是一种幸福，祝愿各位年轻人能找到内心的宁静，一生平安。&lt;/p&gt;</summary>
    
    
    
    
    <category term="2023" scheme="http://example.com/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>Python 面向对象练习</title>
    <link href="http://example.com/2023/05/28/Python-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2023/05/28/Python-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%83%E4%B9%A0/</id>
    <published>2023-05-28T15:08:32.000Z</published>
    <updated>2023-05-28T15:10:01.185Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol><li><p>简述面向对象的三大特性？</p><ul><li><p>封装：将方法封装到类中 或 将数据封装到对象中，以便以后使用</p></li><li><p>继承：将类中的公共的方法提取到基类中去实现</p></li><li><p>多态：Python默认支持多态（这种方式称之为鸭子类型），最简单的基础下面的这段代码即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">  v1 = arg.copy()  <span class="comment"># 浅拷贝</span></span><br><span class="line">  <span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure><span id="more"></span></li></ul></li><li><p>将以下函数改成累的方式并调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(a1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self,a1</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a1)</span><br><span class="line">    </span><br><span class="line">b = Test()</span><br><span class="line">b.func(<span class="number">222</span>)</span><br></pre></td></tr></table></figure></li><li><p>面向对象中的self指的是什么？</p><p>self 是一个参数，在通过对象、方法 的方式去执行方法时，这个参数会被python自动传递（值为调用当前方法的对象）</p></li><li><p>以下代码体现面向对象的什么特性？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line">    self.gender = gender</span><br><span class="line">    </span><br><span class="line">obj = Person(<span class="string">&#x27;蒙珣&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><p>体现了封装的特性，将 <code>蒙珣, 18, 男</code> 封装到 obj 对象中</p></li><li><p>以下代码体现面向对象什么特性？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">email</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送邮件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">msg</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送短信</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wechat</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送微信</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>依然是封装，将email、msg、wechat这些功能封装到 Message 中</p></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo.func&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">obj = Foo()</span><br><span class="line">result = obj.func()</span><br><span class="line"><span class="built_in">print</span>(reslut)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo.func <span class="comment"># 函数被实例化的时候会被执行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>none <span class="comment"># 函数没有返回值，所以result是none</span></span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base1.f1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base1.f2&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base1.f3&#x27;</span>)</span><br><span class="line">    self.f1()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base2.f2&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Base1, Base2</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f0</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo.f0&#x27;</span>)</span><br><span class="line">    self.f3()</span><br><span class="line">    </span><br><span class="line">obj = Foo()</span><br><span class="line">obj.f0()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数继承的考察，Foo(Base1,Base2)。中Base1先写，所以优先级比Base2高。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo.f0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base1.f3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base1.f1 </span><br><span class="line"><span class="comment"># self是obj对象，在class Base1的 def f3(self) 中，调用了self.f1()</span></span><br><span class="line"><span class="comment"># 程序会先去class Foo(Base1, Base2)类中找f1(), 如果没有再去Base1中找</span></span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base.f1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.f1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base.f3&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Base</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo.f1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo.f2&#x27;</span>)</span><br><span class="line">    self.f3()</span><br><span class="line">    </span><br><span class="line">obj = Foo()</span><br><span class="line">obj.f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo.f2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo.f1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base.f3</span><br><span class="line"><span class="comment"># self是obj对象，在class Base类的f3()中调用self.f1()</span></span><br><span class="line"><span class="comment"># 程序先到class Foo()中找f1()方法，如果有就执行，没有再去所继承的Base()类中寻找</span></span><br></pre></td></tr></table></figure></li><li><p>补充代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user_lsit = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  user = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">  pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码&#x27;</span>)</span><br><span class="line">  email = <span class="built_in">input</span>（<span class="string">&#x27;请输入邮箱：&#x27;</span>）</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 需求</span></span><br><span class="line"><span class="string">1. while循环提示 用户输入：用户名、密码、邮箱（正则满足邮箱格式）</span></span><br><span class="line"><span class="string">2. 为每个用户创建一个个对象，并添加到user_list中</span></span><br><span class="line"><span class="string">3. 当列表中的添加 3个对象后，跳出循环并以此循环打印所有用户的姓名和邮箱</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, pwd, email</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.pwd = pwd</span><br><span class="line">    self.email = email</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    user_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      user = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码&#x27;</span>)</span><br><span class="line">  email = <span class="built_in">input</span>(<span class="string">&#x27;请输入邮箱：&#x27;</span>)</span><br><span class="line">      match_object = re.match(<span class="string">&quot;(\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)&quot;</span>, email, re.ASCII)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> match_object:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;邮箱格式输入错误，请重新输入&quot;</span>)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        user_object = UserInfo(user, pwd, email)</span><br><span class="line">        user_list.append(user_object)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(user_list) == <span class="number">3</span>:</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">          </span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line">    <span class="built_in">print</span>(item.name, item.email)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  run()</span><br></pre></td></tr></table></figure></li><li><p>补充代码，实现用户注册和登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, pwd</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.pwd = pwd</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 用户列表，数据格式：[user对象，user对象，user对象]</span></span><br><span class="line">    self.user_list = []</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户登录，输入用户名和密码然后去self.user_list中校验用户名合法性</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户注册，每注册一个用户就创建一个user对象，然后添加到self.user_list中，表示注册成功</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    主程序</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  obj = Account()</span><br><span class="line">  obj.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, pwd</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.pwd = pwd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 用户列表，数据格式：[user对象，user对象，user对象]</span></span><br><span class="line">        self.user_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用户登录，输入用户名和密码然后去self.user_list中校验用户合法性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户登录&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            user = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名(Q/q):&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> user.upper() == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> user_object <span class="keyword">in</span> self.user_list:</span><br><span class="line">                <span class="keyword">if</span> user == user_object.name <span class="keyword">and</span> pwd == user_object.pwd:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用户注册，没注册一个用户就创建一个user对象，然后添加到self.user_list中，表示注册成功。</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户注册&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            user = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名(Q/q):&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> user.upper() == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>)</span><br><span class="line">            user_object = User(user, pwd)</span><br><span class="line">            self.user_list.append(user_object)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        主程序</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        method_dict = &#123;</span><br><span class="line">            <span class="string">&quot;1&quot;</span>: &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;登录&quot;</span>, <span class="string">&quot;method&quot;</span>: self.login&#125;,</span><br><span class="line">            <span class="string">&quot;2&quot;</span>: &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;注册&quot;</span>, <span class="string">&quot;method&quot;</span>: self.register&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        message = <span class="string">&quot;;&quot;</span>.join([<span class="string">&quot;&#123;&#125;.&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k, v[<span class="string">&#x27;title&#x27;</span>]) <span class="keyword">for</span> k, v <span class="keyword">in</span> method_dict.items()])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(message)</span><br><span class="line">            choice = <span class="built_in">input</span>(<span class="string">&quot;请选择功能(Q/q)：&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> choice.upper() == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            info = method_dict.get(choice)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> info:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;选择错误，请重新选择&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            method = info[<span class="string">&#x27;method&#x27;</span>]</span><br><span class="line">            method()  <span class="comment"># self.login()  /   self.register()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj = Account()</span><br><span class="line">    obj.run()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简述面向对象的三大特性？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;封装：将方法封装到类中 或 将数据封装到对象中，以便以后使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承：将类中的公共的方法提取到基类中去实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多态：Python默认支持多态（这种方式称之为鸭子类型），最简单的基础下面的这段代码即可&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v1 = arg.copy()  &lt;span class=&quot;comment&quot;&gt;# 浅拷贝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(v1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>启动docker容器后网络冲突的解决办法</title>
    <link href="http://example.com/2023/04/12/%E5%90%AF%E5%8A%A8docker%E5%AE%B9%E5%99%A8%E5%90%8E%E7%BD%91%E7%BB%9C%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2023/04/12/%E5%90%AF%E5%8A%A8docker%E5%AE%B9%E5%99%A8%E5%90%8E%E7%BD%91%E7%BB%9C%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2023-04-12T15:44:16.000Z</published>
    <updated>2023-04-12T15:45:09.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="查看启动容器的镜像源数据"><a href="#查看启动容器的镜像源数据" class="headerlink" title="查看启动容器的镜像源数据"></a>查看启动容器的镜像源数据</h3><p><code>docker inspect classify_service</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;docker-cluster-yml_default&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;classify_service&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;classify_service&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;3e4da4c588e0&quot;</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;1e720d1e75de556314b9bf0f81eae19f4fdb4b3e403d628632aa0ca73045087d&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;f8eab1e55b3ca4437510c6fbc53fb92e57b63091f3bca329fc7db97f23ff91d0&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.21.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.21.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: <span class="number">16</span>,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:15:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="查看IP信息"><a href="#查看IP信息" class="headerlink" title="查看IP信息"></a>查看IP信息</h3><p><code>ifconfig</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">br</span>-<span class="number">1</span>e<span class="number">720</span>d<span class="number">1</span>e<span class="number">75</span>de: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.21.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.21.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:fdff:fec<span class="number">1</span>:b<span class="number">29</span>d  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:fd:c<span class="number">1</span>:b<span class="number">2</span>:<span class="number">9</span>d  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">1153655</span>  bytes <span class="number">95446468</span> (<span class="number">91</span>.<span class="number">0</span> MiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">1462690</span>  bytes <span class="number">126927983</span> (<span class="number">121</span>.<span class="number">0</span> MiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">br</span>-f<span class="number">653</span>e<span class="number">2</span>f<span class="number">2</span>bfa<span class="number">1</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.20.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.20.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:<span class="number">86</span>ff:fe<span class="number">3</span>b:<span class="number">7</span>d  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">86</span>:<span class="number">3</span>b:<span class="number">00</span>:<span class="number">7</span>d  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">106</span>  bytes <span class="number">7060</span> (<span class="number">6</span>.<span class="number">8</span> KiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">944</span>  bytes <span class="number">42760</span> (<span class="number">41</span>.<span class="number">7</span> KiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">docker0</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.17.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.17.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:<span class="number">94</span>ff:fe<span class="number">7</span>a:<span class="number">9366</span>  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">94</span>:<span class="number">7</span>a:<span class="number">93</span>:<span class="number">66</span>  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">76579</span>  bytes <span class="number">61234293</span> (<span class="number">58</span>.<span class="number">3</span> MiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">137251</span>  bytes <span class="number">12661386</span> (<span class="number">12</span>.<span class="number">0</span> MiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到该容器IP是172.21.0.1，我们需要删除桥接网络接口，然后再重建docker IP网段</p><h3 id="删除桥接网络接口"><a href="#删除桥接网络接口" class="headerlink" title="删除桥接网络接口"></a>删除桥接网络接口</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y install bridge-utils</span><br><span class="line"></span><br><span class="line"><span class="attribute">brctl</span> delbr br-<span class="number">1</span>e<span class="number">720</span>d<span class="number">1</span>e<span class="number">75</span>de</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重建docker-IP-网段"><a href="#重建docker-IP-网段" class="headerlink" title="重建docker IP 网段"></a>重建docker IP 网段</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;default-address-pools&quot;</span> : [</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="string">&quot;base&quot;</span> : &quot;192.168.0.0/16&quot;,</span><br><span class="line">        <span class="string">&quot;size&quot;</span> : 24</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload <span class="meta">&amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>可以看到网段已经被修改</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">br</span>-f<span class="number">653</span>e<span class="number">2</span>f<span class="number">2</span>bfa<span class="number">1</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.20.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.20.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:<span class="number">86</span>ff:fe<span class="number">3</span>b:<span class="number">7</span>d  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">86</span>:<span class="number">3</span>b:<span class="number">00</span>:<span class="number">7</span>d  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">17203</span>  bytes <span class="number">1580215</span> (<span class="number">1</span>.<span class="number">5</span> MiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">8742</span>  bytes <span class="number">1836663</span> (<span class="number">1</span>.<span class="number">7</span> MiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">docker0</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">192.168.1.1</span>  netmask <span class="number">255.255.255.0</span>  broadcast <span class="number">192.168.1.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:ffff:febc:c<span class="number">628</span>  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:ff:bc:c<span class="number">6</span>:<span class="number">28</span>  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">333</span>  bytes <span class="number">38230</span> (<span class="number">37</span>.<span class="number">3</span> KiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">608</span>  bytes <span class="number">47778</span> (<span class="number">46</span>.<span class="number">6</span> KiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;查看启动容器的镜像源数据&quot;&gt;&lt;a href=&quot;#查看启动容器的镜像源数据&quot; class=&quot;headerlink&quot; title=&quot;查看启动容器的镜像源数据&quot;&gt;&lt;/a&gt;查看启动容器的镜像源数据&lt;/h3&gt;&lt;p&gt;&lt;code&gt;docker inspect classify_service&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Networks&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&amp;quot;docker-cluster-yml_default&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPAMConfig&amp;quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;Links&amp;quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;Aliases&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&amp;quot;classify_service&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&amp;quot;classify_service&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&amp;quot;3e4da4c588e0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;NetworkID&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;1e720d1e75de556314b9bf0f81eae19f4fdb4b3e403d628632aa0ca73045087d&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;EndpointID&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;f8eab1e55b3ca4437510c6fbc53fb92e57b63091f3bca329fc7db97f23ff91d0&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;Gateway&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;172.21.0.1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;172.21.0.2&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPPrefixLen&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPv6Gateway&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;GlobalIPv6Address&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;GlobalIPv6PrefixLen&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;MacAddress&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;02:42:ac:15:00:02&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;DriverOpts&amp;quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用docker compose 安装mysql8</title>
    <link href="http://example.com/2023/04/12/%E4%BD%BF%E7%94%A8docker-compose-%E5%AE%89%E8%A3%85mysql8/"/>
    <id>http://example.com/2023/04/12/%E4%BD%BF%E7%94%A8docker-compose-%E5%AE%89%E8%A3%85mysql8/</id>
    <published>2023-04-12T15:40:47.000Z</published>
    <updated>2023-04-12T15:43:48.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p><code>docker pull mysql:8.0.18</code></p><h4 id="编写docker-compose"><a href="#编写docker-compose" class="headerlink" title="编写docker compose"></a>编写docker compose</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot; </span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    # 使用的镜像和TAG</span><br><span class="line">    image: mysql:8.0.18</span><br><span class="line">    # docker重启后，是否重启</span><br><span class="line">    restart: always</span><br><span class="line">    # 创建的容器名称</span><br><span class="line">    container_name: mysql8</span><br><span class="line">    # 指定端口号</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;33060:3306&quot;</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: admin</span><br><span class="line">    # 挂载卷</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/docker/mysql/conf:/etc/mysql/conf.d</span><br><span class="line">      - /data/docker/mysql/log:/var/log/mysql</span><br><span class="line">      - /data/docker/mysql/data:/var/lib/mysql</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="关闭mysql-binlog日志，最大连接数，表大小"><a href="#关闭mysql-binlog日志，最大连接数，表大小" class="headerlink" title="关闭mysql binlog日志，最大连接数，表大小"></a>关闭mysql binlog日志，最大连接数，表大小</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">pid-<span class="keyword">file</span>        = <span class="regexp">/var/</span>run<span class="regexp">/mysqld/my</span>sqld.pid</span><br><span class="line">socket          = <span class="regexp">/var/</span>run<span class="regexp">/mysqld/my</span>sqld.sock</span><br><span class="line">datadir         = <span class="regexp">/var/</span>lib/mysql</span><br><span class="line">secure-<span class="keyword">file</span>-priv= <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"># Custom config should go here</span><br><span class="line"></span><br><span class="line">max_connections = <span class="number">1000</span></span><br><span class="line">tmp_table_size=<span class="number">64</span>M</span><br><span class="line">max_heap_table_size=<span class="number">64</span>M</span><br><span class="line">skip-log-bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先进到mysql 中查看下binlog状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;log_bin&#x27;;</span><br><span class="line"></span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | ON    |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><p><code>/etc/mysql/my.cnf</code> 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不保存binlog日志</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;skip-log-bin&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表大小设置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;tmp_table_size=64M&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;max_heap_table_size=64M&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql 最大连接数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;max_connections = 1000&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><p>重启docker mysql ，再次查看 <code>SHOW VARIABLES LIKE &#39;log_bin;&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | OFF   |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h4&gt;&lt;p&gt;&lt;code&gt;docker pull mysql:8.0.18&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;编写docker-compose&quot;&gt;&lt;a href=&quot;#编写docker-compose&quot; class=&quot;headerlink&quot; title=&quot;编写docker compose&quot;&gt;&lt;/a&gt;编写docker compose&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;version: &amp;quot;3&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;services:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 使用的镜像和TAG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image: mysql:8.0.18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # docker重启后，是否重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    restart: always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 创建的容器名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container_name: mysql8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 指定端口号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - &amp;quot;33060:3306&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      MYSQL_ROOT_PASSWORD: admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 挂载卷&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - /data/docker/mysql/conf:/etc/mysql/conf.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - /data/docker/mysql/log:/var/log/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - /data/docker/mysql/data:/var/lib/mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CH2-指令-计算机的语言下-过程支持</title>
    <link href="http://example.com/2023/04/04/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%B8%8B-%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81/"/>
    <id>http://example.com/2023/04/04/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%B8%8B-%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81/</id>
    <published>2023-04-04T14:48:36.000Z</published>
    <updated>2023-06-27T16:13:00.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="过程支持"><a href="#过程支持" class="headerlink" title="过程支持"></a>过程支持</h3><p>过程（procedure）或函数是程序员进行结构化编程的工具，两者均有助于提高程序的可理解性和代码的可重用性。过程允许程序员每次只需将精力集中在任务的一部分，由于参数能传递数值并返回结果，因此参数承担过程与其他程序、数据之间接口的角色。</p><span id="more"></span><p><img src="%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81.png"></p><br><h4 id="过程（函数）的执行过程"><a href="#过程（函数）的执行过程" class="headerlink" title="过程（函数）的执行过程"></a>过程（函数）的执行过程</h4><p>C语言中的函数（一种典型的<font color="orange">过程</font>）是结构化编程的强大工具</p><p>函数获取参数、执行运算、返回结果，就好比</p><p>侦探拿着一份计划书去执行任务，再带来想要的结果</p><br><p>1、主程序（调用者）将参数放在过程（被调用者）可以去用的特定位置 <u><strong>什么位置？</strong></u></p><p>2、主程序将控制权交给过程</p><p>3、过程申请并获得存储资源</p><p>4、过程执行</p><p>5、过程将结果的值放在主程序可以取用的特定位置 <u><strong>什么位置？</strong></u></p><p>6、过程把控制权返回给主程序，执行调用过程指令的下一条指令 <u><strong>怎么找到下个位置？</strong></u></p><br><h4 id="支持过程的三大寄存器"><a href="#支持过程的三大寄存器" class="headerlink" title="支持过程的三大寄存器"></a>支持过程的三大寄存器</h4><p>1、主程序（<font color="orange">调用者</font>）将参数放在过程（<font color="orange">被调用者</font>）可以取用的特定位置 <u><strong>什么位置？</strong></u></p><ul><li>4个<font color="orange">参数寄存器（argument reg）</font>$a0 ~ $a3</li></ul><p>5、过程将结果的值放在主程序可以取用的特定位置 <u><strong>什么位置?</strong></u></p><ul><li>2个<font color="orange">值寄存器（value reg）</font>$v0 ~ $v1</li></ul><p>6、过程把控制权返回给主程序，执行调用过程指令的下一条指令 <u><strong>怎么找到这个位置？</strong></u></p><ul><li>主程序把下一条指令的32位地址存入</li><li>1个<font color="orange">返回地址寄存器（return address reg）</font>$ra</li></ul><p><font color="grey">主程序通过什么指令，可以跳转到过程指令，并把下一条指令的地址存入 $ra ?  j+addi 吗？</font></p><br><h4 id="jal-jr-指令对-程序计数器"><a href="#jal-jr-指令对-程序计数器" class="headerlink" title="jal - jr 指令对 程序计数器"></a>jal - jr 指令对 程序计数器</h4><ul><li>$a0 ~ $a3：用于传递参数的4个参数寄存器</li><li>$v0 ~ $v1：用于返回值的两个值寄存器</li><li>$ra：用于返回起始点的返回地址寄存器</li></ul><p>除了分配这些寄存器之外，MIPS汇编语言还包括一条过程调用指令：跳转到某个地址的同时将下一条指令的地址保存在寄存器 $ra 中。这条<strong>跳转和链接指令</strong>（jump-and-link instruction）的格式为：</p><p><code>jal ProcedureAddress</code></p><p>指令中的链接部分表示指向调用点的地址或链接，以允许过程返回到合适的地址。存储在寄存器 $ra（31号寄存器）中的链接部分称为<strong>返回地址</strong>（return address）。返回地址是必须的，因为同一过程可能在程序的不同部分调用。</p><ul><li>跳转和链接指令：跳转到某个地址的同时将下一条指令的地址保存到寄存器 $ra 中的指令</li><li>返回地址：指向调用点的链接，使过程可以返回到合适的地址，在MIPS中它存储在寄存器 $ra 中</li></ul><p>为了支持这种情况，类似MIPS的计算机使用了寄存器跳转（jump register）指令 jr，用与 case 语句，表示无条件跳转到寄存器所指定的地址：</p><p><code>jr $ra</code></p><p>寄存器跳转指令跳转到存储在 $ra 寄存器中的地址——这正式我们所希望的。因此，调用程序或称为<strong>调用者</strong>（caller），将参数值放在 $a0 ~ $a3，然后使用 jar X 跳转到过程X（有时称为被调用者（callee））。被调用者执行运算，将结果放在 $v0 和 $v1，然后使用 jr $ra 指令将控制返回给调用者</p><ul><li>调用者：调用一个过程并为过程提供必要参数值的程序</li><li>被调用者：根据调用者提供的参数执行一系列存储的指令，然后将控制权返回调用者的过程</li><li>程序计数器（program counter PC）：包含在程序中正在被执行指令地址的寄存器</li></ul><p>跳转并链接（jump and link）指令可以同时实现两个功能：</p><ul><li>无条件跳转到一个标签</li><li>将下一条指令的地址放入返回地址寄存器 $ra</li></ul><p><font color="orange">jal Label</font></p><p>jal 指令由调用者主程序使用，还是由被调用者过程使用？</p><p>（主程序使用）</p><br><p>寄存器跳转（jump reg）指令可以跳转到某一寄存器存储器的32位地址</p><p>基本上只和返回地址寄存器搭配</p><p><code>jr $ra</code></p><p><u>jr 指令由调用者主程序使用，还是由被调用者过程使用？</u></p><p>（应该是被调用者过程使用）</p><br><h4 id="综合练习5：数组清零函数（叶过程）"><a href="#综合练习5：数组清零函数（叶过程）" class="headerlink" title="综合练习5：数组清零函数（叶过程）"></a>综合练习5：数组清零函数（叶过程）</h4><p>（叶子过程就是不调用其他过程）</p><p>将下列C语言转换成MIPS-32。为简化难度，没有在for循环中定义 i</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">clear:</span> <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span>  <span class="comment"># i = 0</span></span><br><span class="line"><span class="symbol">Loop:</span>  <span class="keyword">sll </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">2</span></span><br><span class="line">       <span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t1</span>, $<span class="built_in">a0</span></span><br><span class="line">       <span class="keyword">sw </span>$<span class="built_in">zero</span>, <span class="number">0</span>($<span class="built_in">t2</span>)       <span class="comment"># 将a[i]置为0</span></span><br><span class="line">       <span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span>       <span class="comment"># i++</span></span><br><span class="line">       <span class="keyword">slt </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">a1</span>      <span class="comment"># i &lt; size</span></span><br><span class="line">       <span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, Exit</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">j </span>Loop</span><br><span class="line"><span class="symbol">Exit:</span>  <span class="keyword">jr </span>$<span class="built_in">ra</span>                 <span class="comment"># 跳转到由主程序保存的下一条指令地址</span></span><br></pre></td></tr></table></figure><h4 id="保存寄存器的压栈和出栈-栈指针-sp"><a href="#保存寄存器的压栈和出栈-栈指针-sp" class="headerlink" title="保存寄存器的压栈和出栈 栈指针 $sp"></a>保存寄存器的压栈和出栈 栈指针 $sp</h4><p><img src="%E6%A0%88%E6%8C%87%E9%92%88.png"></p><p>在过程调用前，主程序往往已经将自己要用的标量放在了保存寄存器中</p><p>如果过程要使用保存寄存器，要把主程序已经使用的保存寄存器入栈</p><p>栈在内存中以<font color="orange">高地址为栈底，低地址为栈顶</font>，即栈从高地址向低地址“生长”</p><p><font color="orange">栈指针（stack pointer）永远指向栈顶</font></p><p>入栈时，先把$sp减去待保存的寄存器个数的4倍，<u>为什么是4倍？</u></p><p><em>一个栈指针4个字节。一个寄存器是32位，1个字为4个字节，8个字节一位。</em></p><p>再用sw将保存寄存器存入栈中（方向从栈底到栈顶）</p><p>过程结束时把这些数据出栈、放回保存寄存器，供主程序继续使用，步骤正好相反</p><h4 id="综合练习6：运算函数（叶过程）"><a href="#综合练习6：运算函数（叶过程）" class="headerlink" title="综合练习6：运算函数（叶过程）"></a>综合练习6：运算函数（叶过程）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> g, <span class="keyword">int</span> h, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> f;</span><br><span class="line">  f = (g+h) - (i+j);</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设 f 存储在 $s0 中，且 $s0 已经被主程序占用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为 $s0，已经被主程序占用，且被调用函数也要使用 $s0, 所以需要先将$s0存入栈中，等使用完后，再取出来。</span></span><br><span class="line">cal:</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$sp</span>, <span class="variable">$sp</span>, -4</span><br><span class="line">     sw <span class="variable">$s0</span>, 0(<span class="variable">$sp</span>)</span><br><span class="line">     # int f 应该要初始化一下吧，而且有脏数据呢</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$s0</span>, <span class="variable">$zero</span>, <span class="variable">$zero</span></span><br><span class="line">     # g,h,i,j 被主程序申明过，他们在寄存器<span class="variable">$a0</span>, <span class="variable">$a1</span>, <span class="variable">$a2</span>, <span class="variable">$a3</span>中</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$t0</span>, <span class="variable">$a0</span>, <span class="variable">$a1</span></span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$t1</span>, <span class="variable">$a2</span>, <span class="variable">$a3</span></span><br><span class="line">     sub <span class="variable">$s0</span>, <span class="variable">$t0</span>, <span class="variable">$t1</span></span><br><span class="line">     # return f, 将寄存器 <span class="variable">$s0</span> 传入 <span class="variable">$v0</span></span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$v0</span>, <span class="variable">$s0</span>, <span class="variable">$zero</span></span><br><span class="line">     # 将先前存放栈中的<span class="variable">$s0</span>再放回去</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$sp</span>, <span class="variable">$sp</span>, 4</span><br><span class="line">     lw <span class="variable">$s0</span>, 0(<span class="variable">$sp</span>)</span><br><span class="line">     # 返回主程序</span><br><span class="line">     jr <span class="variable">$ra</span></span><br></pre></td></tr></table></figure><h4 id="综合练习6改进：减少指令条数"><a href="#综合练习6改进：减少指令条数" class="headerlink" title="综合练习6改进：减少指令条数"></a>综合练习6改进：减少指令条数</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> g, <span class="keyword">int</span> h, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    f = (g+h)-(i+j);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量f是返回值，所以我们可以直接使用$v0，不使用$s0，这样也避免了出入栈</span></span><br><span class="line"><span class="symbol">cal:</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">a0</span>, $<span class="built_in">a1</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">a2</span>, $<span class="built_in">a3</span></span><br><span class="line">    <span class="keyword">sub </span>$<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h4 id="嵌套过程调用-综合练习7：数组求平方和（嵌套过程）"><a href="#嵌套过程调用-综合练习7：数组求平方和（嵌套过程）" class="headerlink" title="嵌套过程调用 综合练习7：数组求平方和（嵌套过程）"></a>嵌套过程调用 综合练习7：数组求平方和（嵌套过程）</h4><p>侦探搞外包、接着雇佣其他侦探来完成任务，就是嵌套过程调用</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum_of_squares(<span class="keyword">int</span> a[], <span class="keyword">int</span> <span class="built_in">size</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, i &lt; <span class="built_in">size</span>, i++)</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">square</span>(a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">square</span>(<span class="keyword">int</span> a)&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">square</span>;</span><br><span class="line">    <span class="built_in">square</span> = a * a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">square</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，i 的寄存器是 $t0，sum 的寄存器是 $t1，square 的寄存器是 $t2</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sum_of_squares:</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">Loop:</span></span><br><span class="line">    <span class="keyword">slt </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">a1</span></span><br><span class="line">    <span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, Exit</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># a[i]</span></span><br><span class="line">    <span class="keyword">sll </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t4</span>, $<span class="built_in">t4</span>, $<span class="built_in">a0</span></span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 跳转至 square 函数，之前要将 $ra 入栈，因为该函数也不是主函数</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">jar </span>square</span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, $<span class="built_in">t4</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">j </span>Loop</span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">Exit:</span></span><br><span class="line">    $ return sum</span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">v1</span>, $<span class="built_in">t1</span>, $<span class="built_in">zero</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># $ra 出栈</span></span><br><span class="line">    <span class="keyword">lw </span>$<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">square:</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span></span><br><span class="line">    <span class="comment"># 还未学到的乘法指令</span></span><br><span class="line">    <span class="keyword">mul </span>$<span class="built_in">t2</span>, $<span class="built_in">a2</span>, $<span class="built_in">a2</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">v0</span>, $<span class="built_in">t2</span>, $<span class="built_in">zero</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>这个练习也可以减少指令条数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂时不写了</span><br></pre></td></tr></table></figure><p><strong>如果参数多于4个该怎么办呢？MIPS 约定将额外的参数放在栈中帧指针的上方。这样，过程从寄存器 $a0 到 $a3 中获得前4个参数，通过帧指针在内存中寻址获得其余参数</strong></p><h4 id="需要压栈保存的寄存器"><a href="#需要压栈保存的寄存器" class="headerlink" title="需要压栈保存的寄存器"></a>需要压栈保存的寄存器</h4><p>【综合练习6】我们默认<font color="orange">保存寄存器 $s0 ~ $s7</font> 存放到了主程序的变量，需要由过程开始时压栈保存，结束时出栈恢复</p><p>【综合练习7】如果一个过程（外层函数）嵌套了其他过程（内层函数）外层函数通过 jal 修改了 <font color="orange">返回地址寄存器 $ra </font></p><p>$ra 指向外层函数 jal 的下一条指令，不再是外层函数的返回地址了。</p><p>所以需要将 $ra 先入栈，再出栈？？</p><p><font color="orange">栈指针寄存器 $sp</font>、栈中的内容（即<font color="orange">栈指针以上的栈</font>）也需要由过程保留，在addi栈指针、sw入栈、lw出栈的过程中即可保存</p><p><font color="orange">结论：任何过程须显式地压栈保存即将使用的保存寄存器 $s0 ~ $s7（用那几个存那几个）外层嵌套过程须显式地压栈保存返回地址寄存器 $ra</font></p><h4 id="进阶内容：复杂-MIPS-程序示例"><a href="#进阶内容：复杂-MIPS-程序示例" class="headerlink" title="进阶内容：复杂 MIPS 程序示例"></a>进阶内容：复杂 MIPS 程序示例</h4><p>2.8节（68页）提供了一个递归嵌套调用过程计算阶乘的MIPS程序</p><p>2.13节（91页）提供了一个冒泡排序过程嵌套交换过程的MIPS程序</p><p>习题2.27（114页）考察双层for循环的翻译</p><p>习题2.34（115页）考察自嵌套调用的多参数过程的翻译</p><p><strong>例题1. 编译一个递归C过程，演示嵌套过程的链接</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">fact</span>(<span class="built_in">int</span> <span class="built_in">n</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">if</span> (<span class="built_in">n</span> &lt; <span class="number">1</span>) return (<span class="number">1</span>);</span><br><span class="line">else return (<span class="built_in">n</span> * <span class="built_in">fact</span>(<span class="built_in">n</span> - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌套过程</strong></p><p>不调用其他过程的时候称为<strong>叶过程（leaf procedure）</strong>。如果所有过程都是叶过程，那么情况就很简单，但实际并非如此。就像一个侦探， 其任务的一部分是雇用其他侦探，被雇用的侦探进而雇用更多的侦探，某个过程调用其他过程呈也是这样。更进一步的是，递归过程甚至调用的是自身的“克隆”。就像在过程中使用寄存器需要十分小心一样，在调用非叶过程时需要更加小心。</p><p>例如，假设主程序将参数3存入寄存器 $a0，然后使用 jal A 调用过程 A。再假设过程A通过 jal B 调用过程B，参数为7，同样存入$ a0。由于A尚未结束任务，所以在寄存器$a0的使用上存在冲突。同样，在寄存器 $ra 保存自的返回地址上也存在冲突，因为它现在保存着B的返回地址。除非我们采取措施阻止这类问题发发生，否则这个冲突将导致过程A无法返回其调用者。</p><p>一个解决方法是将其他所有必须保留的寄存器压栈，就像将保存寄存器压栈一样。调用者将所有调用后还需要的参数寄存器 ($a0 ~ $a3) 或临时寄存器($t0 ~ $t9)压栈。被调用者将返回地址寄存器 $ra 和被调用者使用的保存寄存器 ($s0 ~ $s7) 都压栈。栈指针 $sp 随着栈中寄存器个数调整。到返回时，寄存器会从存储器中恢复，栈指针也随着重新调整。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">fact:</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">8</span></span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">ra</span>, <span class="number">4</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">slti </span>$<span class="built_in">t0</span>, $<span class="built_in">a0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, Lable1</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">8</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">v0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">Lable1:</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">jal </span>fact</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">lw </span>$<span class="built_in">a0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">lw </span>$<span class="built_in">ra</span>, <span class="number">4</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">8</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mul </span>$<span class="built_in">v0</span>, $<span class="built_in">a0</span>, $<span class="built_in">v0</span></span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p><strong>例题2. 冒泡排序</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> sort(<span class="type">int</span> v[], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; v[j] &gt; v[j + <span class="number">1</span>]; j = <span class="number">1</span>)&#123;</span><br><span class="line">swap(v,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> swap(<span class="type">int</span> v[], <span class="type">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="keyword">temp</span>;</span><br><span class="line"><span class="keyword">temp</span> = v[k];</span><br><span class="line">v[k] = v[k+<span class="number">1</span>];</span><br><span class="line">v[k+<span class="number">1</span>] = <span class="keyword">temp</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题3. 双层for循环</strong></p><p>将下面C代码翻译为MIPS汇编代码。<strong>要求使用的指令数目最少。</strong>假设 a、b、i、j 分别存放在寄存器 $s0、$s1、$t0、$t1 中。另外假设寄存器 $s2 中存放着数组D的基地址</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i=<span class="number">0</span><span class="comment">; i&lt;a; i++)</span></span><br><span class="line">for(<span class="keyword">j=0; </span><span class="keyword">j&lt;b; </span><span class="keyword">j++)</span></span><br><span class="line"><span class="keyword"></span>D[<span class="number">4</span>*<span class="keyword">j] </span>= i + <span class="keyword">j;</span></span><br></pre></td></tr></table></figure><p><strong>例题4. 考察自嵌套调用的多参数过程的翻译</strong></p><p>如果需要使用寄存器 $t0 ~ $t7，请从编号小的寄存器开始使用。</p><p>假设函数 func 声明为 s<code>int f (int a, int b);</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> f(<span class="keyword">int</span> a, <span class="keyword">int</span> b, intc, <span class="keyword">int</span> d)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>(a,b)</span>, <span class="title">c</span>+<span class="title">d</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过程帧与帧指针-fp"><a href="#过程帧与帧指针-fp" class="headerlink" title="过程帧与帧指针 $fp"></a>过程帧与帧指针 $fp</h4><p>为了标记运行中过程建立的栈，除了栈顶的栈指针 $sp</p><p>还可以加一个 <font color="orange">帧指针（frame pointer）$fp</font> 指向栈底</p><p>即过程帧的第一个字</p><br><p>$fp 和 $sp 之间的空间由正在运行的过程使用</p><p>称为<font color="orange">过程帧</font>，也叫活动记录</p><p><img src="%E5%B8%A7%E6%8C%87%E9%92%88.png"></p><h4 id="全局指针-gp-程序的内存分配"><a href="#全局指针-gp-程序的内存分配" class="headerlink" title="全局指针 $gp 程序的内存分配"></a>全局指针 $gp 程序的内存分配</h4><p>为了便于寻找位置固定的数据</p><p>（主程序使用的变量，以及声明为static的变量，统称静态变量）</p><p>使用一个固定指向静态数据区某一位置的全局指针（global pointer）$gp</p><p>程序在内存中包含五段，地址从低到高分别为</p><ol><li><font color="orange">保留段</font></li><li><font color="orange">正文段（代码段</font>），保存指令</li><li><font color="orange">静态数据段</font>，保存静态数据</li><li><font color="orange">动态数据段（堆）</font>，从低往高 “生长”</li><li><font color="orange">栈</font>，从高往低 “生长”</li></ol><p><img src="%E5%9C%A8%E5%A0%86%E4%B8%AD%E4%B8%BA%E6%96%B0%E6%95%B0%E6%8D%AE%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4.png"></p><p>栈和堆此消彼长，实现了内存空间的高效利用</p><p>补充：堆必须是一个完全二叉树，堆里的数据可以任意顺序的存入和移除。</p><h3 id="五种寻址方式"><a href="#五种寻址方式" class="headerlink" title="五种寻址方式"></a>五种寻址方式</h3><p><img src="%E4%BA%94%E7%A7%8D%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.png"></p><h4 id="32个通用寄存器及其编号"><a href="#32个通用寄存器及其编号" class="headerlink" title="32个通用寄存器及其编号"></a>32个通用寄存器及其编号</h4><table><thead><tr><th>寄存器</th><th>名称</th><th>编号</th><th>调用时是否保存</th></tr></thead><tbody><tr><td>$zero</td><td>零寄存器</td><td>0</td><td>不适用</td></tr><tr><td>$v0~$v1</td><td>返回值寄存器</td><td>2~3</td><td>否</td></tr><tr><td>$a0~$a3</td><td>参数寄存器</td><td>4~7</td><td>否</td></tr><tr><td>$t0~$t7</td><td>临时寄存器</td><td>8~15</td><td>否</td></tr><tr><td>$s0~$s7</td><td>保存寄存器</td><td>16~23</td><td>是</td></tr><tr><td>$t8~t9</td><td>额外的临时寄存器</td><td>24~25</td><td>否</td></tr><tr><td>$gp</td><td>全局指针</td><td>28</td><td>是</td></tr><tr><td>$sp</td><td>栈指针</td><td>29</td><td>是</td></tr><tr><td>$fp</td><td>帧指针</td><td>30</td><td>是</td></tr><tr><td>$ra</td><td>返回地址</td><td>31</td><td>是</td></tr></tbody></table><h4 id="R型：寄存器寻址"><a href="#R型：寄存器寻址" class="headerlink" title="R型：寄存器寻址"></a>R型：寄存器寻址</h4><p>所有操作数都是寄存器的指令采用<font color="orange">寄存器寻址（register addressing）</font></p><p>操作数个数从一个到三个不等</p><p>R型指令 &lt;–&gt; 寄存器寻址</p><p>第二部分已经提到过的R型指令有：</p><p>1、运算指令：add，sub，and，or，nor 5条三寄存器操作数指令</p><p>2、运算指令：sll、srl 2条双寄存器操作数指令（rs不使用置为0，使用shamt）</p><p>3、决策指令：slt 1条三寄存器操作数指令</p><p>第三部分新增R型指令：</p><p>4、决策指令：jr 1条单寄存器操作数指令</p><table><thead><tr><th>op</th><th>rs</th><th>rt</th><th>rd</th><th>shamt</th><th>funct</th></tr></thead><tbody><tr><td>6位</td><td>5位</td><td>5位</td><td>5位</td><td>5位</td><td>6位</td></tr></tbody></table><h4 id="I型：立即数寻址和基址偏移寻址"><a href="#I型：立即数寻址和基址偏移寻址" class="headerlink" title="I型：立即数寻址和基址偏移寻址"></a>I型：立即数寻址和基址偏移寻址</h4><p>第三个操作数（第二个源操作数）是常数的指令采用立即数寻址（immediate addressing）具体包裹addi，ori两条指令</p><p><font color="grey">其实还包括lui指令，课本没有着重强调其指令格式</font></p><p><img src="%E7%AB%8B%E5%8D%B3%E6%95%B0%E5%AF%BB%E5%9D%80%E5%92%8C%E5%9F%BA%E5%9D%80%E5%AF%BB%E5%9D%80.png"></p><p>两条数据传送指令lw、sw</p><p>将基址寄存器和偏移量相加的内存寻址方式称为<font color="orange">基址偏移寻址</font></p><p>可单独称为基址寻址（base addressing）和偏移寻址（displacement addressing）</p><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">constant or address</th></tr></thead><tbody><tr><td align="center">6位</td><td align="center">5位</td><td align="center">5位</td><td align="center">16位</td></tr></tbody></table><h4 id="I型：PC相对寻址-字地址和字节地址"><a href="#I型：PC相对寻址-字地址和字节地址" class="headerlink" title="I型：PC相对寻址 字地址和字节地址"></a>I型：PC相对寻址 字地址和字节地址</h4><p>两条条件分支指令beq、bne</p><p>在汇编语言中使用标签来表示分支的目标地址，标签翻译机器语言其实是个整数</p><p>告诉计算机从当前指令的地址出发，到达分支目标地址的距离是多少</p><p><font color="orange">程序计数器（program counter，PC）</font>中保存了执行中指令的地址</p><p>分支指令中的16位分支地址是一个二进制补码，可正可负</p><p>表示以PC+4为基准相加的字地址数目，叫做<font color="orange">PC相对寻址（PC-relative addressing）</font></p><blockquote><p>分支32为地址 = PC + 4 + 字地址偏移量</p></blockquote><p><img src="PC%E7%9B%B8%E5%AF%B9%E5%AF%BB%E5%9D%80.png"></p><h4 id="J型：伪直接寻址"><a href="#J型：伪直接寻址" class="headerlink" title="J型：伪直接寻址"></a>J型：伪直接寻址</h4><p><font color="orange">J 型指令</font>只需要操作码和目的地址两个字段，形式上最为简单</p><table><thead><tr><th align="center">2</th><th align="center">10000</th></tr></thead><tbody><tr><td align="center">6位</td><td align="center">26位</td></tr></tbody></table><p>J 型指令 &lt;–&gt; 伪直接寻址，包含 j, jal 两条</p><p><code>*寄存器跳转 jr 指令是R型指令</code></p><p>直接寻址指的是指令中直接给出32位内存地址，但 J 型指令地址字段只有26位</p><p>因此，执行 J 型指令时，先将26位字地址左移两位（右侧补0）形成28位字节地址</p><p>再和 PC 的高四位拼接成32为地址</p><p>这就是<font color="orange">伪直接寻址（pseudodirect addressing）</font></p><p><img src="%E4%BC%AA%E7%9B%B4%E6%8E%A5%E5%AF%BB%E5%9D%80.png"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Loop:</span></span><br><span class="line">    <span class="keyword">sll </span>$<span class="built_in">t1</span>, $<span class="built_in">s3</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, $<span class="built_in">s6</span></span><br><span class="line">    <span class="keyword">lw</span></span><br></pre></td></tr></table></figure><h4 id="扩大分支与跳转的范围"><a href="#扩大分支与跳转的范围" class="headerlink" title="扩大分支与跳转的范围"></a>扩大分支与跳转的范围</h4><p>PC相对寻址以 PC + 4 为基准，加上一个可正可负的16位补码字地址，寻址范围为</p><p><img src="%E6%89%A9%E5%A4%A7%E5%88%86%E6%94%AF%E4%B8%8E%E8%B7%B3%E8%BD%AC%E7%9A%84%E8%8C%83%E5%9B%B41.png"></p><p><strong>解释说明</strong>：</p><table><thead><tr><th>op</th><th>rt</th><th>rd</th><th>addres</th></tr></thead><tbody><tr><td>6位</td><td>5位</td><td>5位</td><td>16位</td></tr></tbody></table><p>条件分支的地址为16个字地址，所以可跳转至2^16次方个</p><p>且该地址补码可正可负16位补码字地址，即可跳转上下范围2^15次方个</p><p>又因为还有一个0需要考虑，所以范围是 [-2^15, 0, 2^15-1]</p><p>再将其偏移 2 位，即乘4，转为字节。所以范围是 [-2^17 ~ 2^17-4]</p><br><p>伪直接寻址用PC中当前指令地址的高四位<font color="orange">拼接</font>指令中的26位字地址，寻址范围为</p><p><img src="%E6%89%A9%E5%A4%A7%E5%88%86%E6%94%AF%E4%B8%8E%E8%B7%B3%E8%BD%AC%E7%9A%84%E8%8C%83%E5%9B%B42.png"></p><p><font color="grey">在相近的内存地址中寻址利用了加速大概率事件这一设计思想</font></p><p>要分支到更远距离，可以将 beq/bne取反，下接一条可能绕过的 j 指令</p><p>要跳转到更远距离，可以先将32位地址装载到某临时寄存器，再用 jr 指令</p><p><img src="%E6%89%A9%E5%A4%A7%E5%88%86%E6%94%AF%E4%B8%8E%E8%B7%B3%E8%BD%AC%E7%9A%84%E8%8C%83%E5%9B%B43.png"></p><p><strong>分支跳转更远距离</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attribute">bne</span> $s<span class="number">0</span>, $s<span class="number">1</span>, L<span class="number">2</span></span><br><span class="line">   <span class="attribute">j</span> L<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">L2</span>:</span><br></pre></td></tr></table></figure><p>这样就相当于使用伪直接寻址方式，可以得到一个256MB的地址块，比之前128KB地址块扩大很多</p><p><strong>跳转更远的距离</strong></p><p>如果我们要跳转的地址，不在这256MB地址块中呢</p><p>我们可以先将32位地址装载到临时寄存器中，再使用 jr 指令就可以了</p><p><strong>解题思路：</strong></p><p>比如说我们现在这条指令的地址是 0000 0000 0000 0000 0000 0000 0000 0000 32个零</p><p>写成16进制就是8个零，即 0000 0000(16)。如果我们要跳转到 1000 0001(16) </p><p>我们使用 j 指令跳转是需要高四位是相同的值才行，但是这个显然不同。</p><p>我们先将 1000 0001(16) 32位地址转换成10进制，使用 lui 、ori 转载进寄存器 $t0 中</p><p>然后我们使用 jr $t0 就能跳转至任意地点了</p><h4 id="寻址方式小结"><a href="#寻址方式小结" class="headerlink" title="寻址方式小结"></a>寻址方式小结</h4><ol><li><p>R 型的<font color="orange"><font>寄存器寻址</font></font>：操作数为1个/2个/3个寄存器的数据</p></li><li><p>I 型的<font color="orange">立即数寻址</font>：addi、lui、ori 三条立即数指令，其中一个操作数是指令字段中的常数</p></li><li><p>I 型的<font color="orange">基址偏移寻址</font>：lw、sw两条访存指令</p><p>将 rs 中的基地址和偏移量直接相加，得到偏移地址<u>以 lw $t0, 12($s0) 为例</u></p></li><li><p>I 型的<font color="orange">PC相对寻址</font>：beq、bne两条条件分支指令</p><p>分支指令中的<font color="orange">PC相对地址</font>（可正可负的字偏移量）</p><p>左移两位（x4）形成字节偏移量</p><p>再和 PC + 4 中的字节地址相加，形成<font color="orange">分支目标地址</font></p><p><u>以地址为1000（十进制）的 beq reg1, reg2, 4 为例</u></p></li><li><p>J 型的<font color="orange">伪直接寻址</font>：将26位字地址左移两位（x4）形成28位字节地址</p><p>再和PC（实际上也是 PC + 4）的高四位拼接成32位<font color="orange">跳转目标地址</font></p><p>以PC高四位为1010的 j 0000 0000 0000 0000 0000 0000 01 为例</p></li></ol><h4 id="MIPS汇编指令小结"><a href="#MIPS汇编指令小结" class="headerlink" title="MIPS汇编指令小结"></a>MIPS汇编指令小结</h4><p><img src="MIPS%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93.png"></p><h3 id="第五部分-C-程序执行过程"><a href="#第五部分-C-程序执行过程" class="headerlink" title="第五部分 C 程序执行过程"></a>第五部分 C 程序执行过程</h3><h4 id="C语言的4个翻译层次"><a href="#C语言的4个翻译层次" class="headerlink" title="C语言的4个翻译层次"></a>C语言的4个翻译层次</h4><p><font color="orange">编译器</font>将高级语言文件（.c）</p><p>翻译成汇编语言文件（.asm）</p><br><p><font color="orange">汇编器</font>首先把伪指令替换为等价的真正指令</p><p>再将汇编语言翻译成机器语言目标文件（.obj）</p><br><p><font color="orange">链接器</font>把目标文件和静态链接库（.lib）、动态链接库（.dll）</p><p>拼接成可执行文件（.exe）</p><br><p><font color="orange">加载器</font>可将执行文件放入内存，装载执行</p><h4 id="字符支持-同步指令对-II-sc-ARM-和-x86-简介"><a href="#字符支持-同步指令对-II-sc-ARM-和-x86-简介" class="headerlink" title="字符支持 同步指令对 II-sc ARM 和 x86 简介"></a>字符支持 同步指令对 II-sc ARM 和 x86 简介</h4><p>为了让计算机能够处理C的8位的ASCII字符，MIPS提供<font color="orange">字节传送指令</font>lb，sb 字符通常理解为无符号数，故取字节常使用取无符号字节lbu指令 同理，为了支持Java的16位Unicode字符，MIPS提供<font color="orange">半字传送指令</font>lh，sh，lhu</p><p>当两个程序访问同一个内存单元，且其中存在写操作时，两程序操作的顺序就尤为重要 MIPS提供<font color="orange">链接取数ll指令</font>和<font color="orange">条件存数sc指令</font>，让程序员能够指定程序操作数据的顺序</p><p><font color="orange">ARM</font>和MIPS同为RISC架构，具有优秀的能耗表现，广泛应用于移动端和嵌入式平台 同MIPS相比，ARM的主要区别是通用寄存器更少(16个)、寻址方式更多(9种) Intel和AMD主导的<font color="orange">x86</font>是一种CISC架构，指令集十分庞大(2018年约1400条) x86是一种本质非常糟糕的架构，最典型的表现是，指令长度从1B到15B不等 由于问世时间恰逢IBM进军PC领域，x86取得了巨大的商业成功，至今占据很大的份额</p><p>Intel将x86移动化的尝试屡屡碰壁，苹果将ARM电脑化的实践却高歌猛进</p><h3 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h3><p>1、为了实现过程调用，我们引入了哪三类寄存器和哪个指令对? </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了实现过程调用，我们引用了</span><br><span class="line">参数寄存器 $<span class="built_in">a0</span> ~ $<span class="built_in">a3</span>, 返回值寄存器 $<span class="built_in">v0</span>, 返回地址寄存器 $<span class="built_in">ra</span></span><br><span class="line">指令对是 <span class="keyword">jal（调用者主程序使用） </span>- <span class="keyword">jr（被调用者函数使用）</span></span><br></pre></td></tr></table></figure><p>2、三类寄存器分别存放什么?指令对中的两条指令分别由谁使用，完成什么功能?</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数寄存器$a：存放参数</span><br><span class="line">值寄存器$v：存放返回值</span><br><span class="line">返回地址寄存器$ra：存放过程调用中的返回地址</span><br><span class="line">$jar: 首先需要完成jump（跳转）的功能，其次要完成<span class="keyword">link</span>（将$jar下一条指令的地址，存放到$ra返回地址寄存器当中）的功能</span><br><span class="line">$jr: 跳转到一个寄存器所指定的地址当中</span><br></pre></td></tr></table></figure><p> 3、当过程要使用保存寄存器时，要进行什么操作? </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要压栈保存</span><br><span class="line"><span class="number">1</span>、需要使用<span class="keyword">addi指令，使栈指针往下偏移几个寄存器的空间（即个数*4）</span></span><br><span class="line"><span class="keyword"></span><span class="number">2</span>、使用<span class="keyword">sw，使寄存器数据进入栈当中</span></span><br></pre></td></tr></table></figure><p>4、为什么过程内部的变量优先使用临时寄存器?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">过程也是用保存寄存器，会使主程序去争抢保存寄存器。且主程序已经使用了保存寄存器去存放变量或者数组的基址。</span><br><span class="line">如果过程要使用保存寄存器，一定要入栈保存和出栈恢复的过程</span><br><span class="line">为了减少对内存的操作，优先使用临时寄存器，能不用就不用</span><br></pre></td></tr></table></figure><p>5、复习综合练习5~7，熟悉for循环、清零、函数调用等常见的C语句翻译</p><p>6、R型指令和J型指令分别采用什么寻址方式?I型有哪三种寻址方式?</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R型是寄存器寻址的充要条件</span><br><span class="line">J型是伪直接寻址的充要条件</span><br><span class="line">I型有立即数、基址偏移、<span class="built_in">PC</span>相对寻址这三种寻址方式</span><br></pre></td></tr></table></figure><p>7、PC相对寻址和伪直接寻址为了扩大寻址范围，其地址代表什么单位?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC相对寻址中的字偏移，字偏移量总共是用16位立即数字段来表示。既然采用了字地址偏移量，也就能用16位字地址去表示18位字节地址。</span><br><span class="line">所以地址代表着字这个单位，我们就可以节省2位空间，获得更大的寻址范围</span><br></pre></td></tr></table></figure><p>8、PC相对寻址和伪直接寻址分别怎样获得标签的真实地址?</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">PC</span>相对寻址是（<span class="built_in">PC</span>+<span class="number">4</span>）这样一个基础，再加上一个数，或者减去一个数，就得到了标签的相对地址。</span><br><span class="line">伪直接寻址是通过<span class="built_in">PC</span>的高<span class="number">4</span>位，和一个<span class="number">26</span>位的字地址拼接起来，就构成了一个<span class="number">32</span>位的字节地址。（<span class="number">26</span>位的字地址，实际上是对应<span class="number">28</span>位的字节地址的，所以<span class="number">4</span>+<span class="number">28</span>位就能够拼接成<span class="number">32</span>位字节地址了）</span><br></pre></td></tr></table></figure><p>9、复习MIPS汇编指令，对应上每条指令的指令格式和寻址方式</p><p>10、运行C程序要经过哪四个步骤?</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译-&gt;汇编-&gt;链接-&gt;加载</span><br></pre></td></tr></table></figure><h3 id="全章复习"><a href="#全章复习" class="headerlink" title="全章复习"></a>全章复习</h3><blockquote><p>转自：B站 翼云图灵</p><p>参考：计算机组成与设计·硬件/软件接口 原书第5版</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;过程支持&quot;&gt;&lt;a href=&quot;#过程支持&quot; class=&quot;headerlink&quot; title=&quot;过程支持&quot;&gt;&lt;/a&gt;过程支持&lt;/h3&gt;&lt;p&gt;过程（procedure）或函数是程序员进行结构化编程的工具，两者均有助于提高程序的可理解性和代码的可重用性。过程允许程序员每次只需将精力集中在任务的一部分，由于参数能传递数值并返回结果，因此参数承担过程与其他程序、数据之间接口的角色。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机组成与设计" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7安装Docker</title>
    <link href="http://example.com/2023/03/31/Centos7%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://example.com/2023/03/31/Centos7%E5%AE%89%E8%A3%85Docker/</id>
    <published>2023-03-31T12:55:59.000Z</published>
    <updated>2023-03-31T13:10:20.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、安装前必读"><a href="#一、安装前必读" class="headerlink" title="一、安装前必读"></a>一、安装前必读</h2><p>在安装 Docker 之前，先说一下配置，我这里是Centos7 Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。</p><p>注意：本文的命令使用的是 root 用户登录执行，不是 root 的话所有命令前面要加 <code>sudo</code></p><p><strong>1.查看当前的内核版本</strong></p><p><code>uanme -r</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux VM-4-8-centos 3.10.0-1160.71.1.el7.x86_64 <span class="comment">#1 SMP Tue Jun 28 15:37:28 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@VM-4-8-centos ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.71.1.el7.x86_64</span><br><span class="line">[root@VM-4-8-centos ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.使用 root 权限更新 yum 包（生产环境中此步操作需慎重，看自己情况，学习的话随便搞)</p><p><code>yum -y update</code></p><p>这个命令不是必须执行的，看个人情况，后面出现不兼容的情况的话就必须update了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 </span></span><br><span class="line">yum -y update：升级所有包同时也升级软件和系统内核； </span><br><span class="line">yum -y upgrade：只升级所有包，不升级软件和系统内核</span><br></pre></td></tr></table></figure><p>3.卸载旧版本（如果之前安装过的话）</p><p><code>yum remove docker  docker-common docker-selinux docker-engine</code></p><h2 id="二、安装Docker的详细步骤"><a href="#二、安装Docker的详细步骤" class="headerlink" title="二、安装Docker的详细步骤"></a>二、安装Docker的详细步骤</h2><p><strong>1.安装需要的软件包， yum-util 提供 yum-config-manager 功能，另两个是 devicemapper 驱动依赖</strong></p><p><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p><p><strong>2.设置 yum 源</strong></p><p>设置一个yum源，下面两个都可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</span><br></pre></td></tr></table></figure><p>3.选择docker版本并安装</p><ul><li>查看可用版本有哪些</li></ul><p><code>yum list docker-ce --showduplicates | sort -r</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">docker-ce.x86_64            3:23.0.2-1.el7                      docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:23.0.1-1.el7                      docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:23.0.0-1.el7                      docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.23-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><ul><li>选择一个版本并安装：<code>yum install docker-ce-版本号</code></li></ul><p><code>yum -y install docker-ce-18.03.1.ce</code></p><p>4.启动 Docker 并设置开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>5.查看 Docker 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos ~]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:      18.03.1-ce</span><br><span class="line"> API version:  1.37</span><br><span class="line"> Go version:   go1.9.5</span><br><span class="line"> Git commit:   9ee9f40</span><br><span class="line"> Built:        Thu Apr 26 07:20:16 2018</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Orchestrator: swarm</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:      18.03.1-ce</span><br><span class="line">  API version:  1.37 (minimum version 1.12)</span><br><span class="line">  Go version:   go1.9.5</span><br><span class="line">  Git commit:   9ee9f40</span><br><span class="line">  Built:        Thu Apr 26 07:23:58 2018</span><br><span class="line">  OS/Arch:      linux/amd64</span><br><span class="line">  Experimental: <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、安装前必读&quot;&gt;&lt;a href=&quot;#一、安装前必读&quot; class=&quot;headerlink&quot; title=&quot;一、安装前必读&quot;&gt;&lt;/a&gt;一、安装前必读&lt;/h2&gt;&lt;p&gt;在安装 Docker 之前，先说一下配置，我这里是Centos7 Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。&lt;/p&gt;
&lt;p&gt;注意：本文的命令使用的是 root 用户登录执行，不是 root 的话所有命令前面要加 &lt;code&gt;sudo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.查看当前的内核版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uanme -r&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@VM-4-8-centos ~]&lt;span class=&quot;comment&quot;&gt;# uname -a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Linux VM-4-8-centos 3.10.0-1160.71.1.el7.x86_64 &lt;span class=&quot;comment&quot;&gt;#1 SMP Tue Jun 28 15:37:28 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@VM-4-8-centos ~]&lt;span class=&quot;comment&quot;&gt;# uname -r&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.10.0-1160.71.1.el7.x86_64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@VM-4-8-centos ~]&lt;span class=&quot;comment&quot;&gt;# &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx部署</title>
    <link href="http://example.com/2023/03/29/Nginx%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2023/03/29/Nginx%E9%83%A8%E7%BD%B2/</id>
    <published>2023-03-29T12:54:31.000Z</published>
    <updated>2023-06-28T14:58:29.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><p>nginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。它是一个俄罗斯人lgor sysoev开发的，作者将源代码开源出来供全球使用。</p><p>nginx比它大哥apache性能改进许多，nginx占用的系统资源更少，支持更高的并发连接，有更高的访问效率。</p><p>nginx不但是一个优秀的web服务软件，还可以作为反向代理，负载均衡，以及缓存服务使用。<br>安装更为简单，方便，灵活。</p><p>nginx可以说是非常nb了</p><h4 id="面试回答nginx技巧"><a href="#面试回答nginx技巧" class="headerlink" title="面试回答nginx技巧"></a>面试回答nginx技巧</h4><ul><li>支持高并发，能支持几万并发连接</li><li>资源消耗少，在3万并发连接下开启10个nginx线程消耗的内存不到200M</li><li>可以做http反向代理和负载均衡</li><li>支持异步网络i/o事件模型epol</li></ul><span id="more"></span><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="1-gcc-安装"><a href="#1-gcc-安装" class="headerlink" title="1. gcc 安装"></a>1. gcc 安装</h3><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装</p><p><code>yum install gcc-c++</code></p><h3 id="2-PCRE-pcre-devel-安装"><a href="#2-PCRE-pcre-devel-安装" class="headerlink" title="2. PCRE pcre-devel 安装"></a>2. PCRE pcre-devel 安装</h3><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。</p><p>nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><p><code>yum install -y pcre pcre-devel</code></p><h3 id="3-zlib-安装"><a href="#3-zlib-安装" class="headerlink" title="3. zlib 安装"></a>3. zlib 安装</h3><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><p><code>yum install -y zlib zlib-devel</code></p><h3 id="4-OpenSSL-安装"><a href="#4-OpenSSL-安装" class="headerlink" title="4. OpenSSL 安装"></a>4. OpenSSL 安装</h3><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</p><p>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><h3 id="5-安装环境代码集合"><a href="#5-安装环境代码集合" class="headerlink" title="5. 安装环境代码集合"></a>5. 安装环境代码集合</h3><p><code>yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel openssl openssl-devel -y</code></p><h3 id="安装、启动-Nginx"><a href="#安装、启动-Nginx" class="headerlink" title="安装、启动 Nginx"></a>安装、启动 Nginx</h3><h4 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1. 下载源码包"></a>1. 下载源码包</h4><p><code>wget -c https://nginx.org/download/nginx-1.12.0.tar.gz</code></p><h4 id="2-解压缩源码"><a href="#2-解压缩源码" class="headerlink" title="2. 解压缩源码"></a>2. 解压缩源码</h4><p><code>tar -zxvf nginx-1.12.0.tar.gz</code></p><h4 id="3-配置，编译安装-开启-Nginx-状态监测功能"><a href="#3-配置，编译安装-开启-Nginx-状态监测功能" class="headerlink" title="3. 配置，编译安装 开启 Nginx 状态监测功能"></a>3. 配置，编译安装 开启 Nginx 状态监测功能</h4><p>编译安装支持开启很多第三方的功能</p><p><code>./configure --prefix=/opt/nginx1-12/ --with-http_ssl_module --with-http_stub_status_module</code></p><p><code>make &amp;&amp; make install</code></p><ul><li>–prefix  指定将 nginx 装到哪里</li><li>–with-http_ssl_module  使 Nginx 支持 https 协议</li><li>–with-http_stub_status_module 性能统计模块</li></ul><h4 id="4-启动-Nginx，进入-sbin-目录，找到-Nginx-启动命令"><a href="#4-启动-Nginx，进入-sbin-目录，找到-Nginx-启动命令" class="headerlink" title="4. 启动 Nginx，进入 sbin 目录，找到 Nginx 启动命令"></a>4. 启动 Nginx，进入 sbin 目录，找到 Nginx 启动命令</h4><p><code>cd sbin</code></p><p><code>./nginx</code>                        #启动</p><p><code>./nginx -s stop</code>            #关闭</p><p><code>./nginx -s reload</code>        #重新加载</p><h3 id="安装完成后的检测"><a href="#安装完成后的检测" class="headerlink" title="安装完成后的检测"></a>安装完成后的检测</h3><p><code>netstat -tunlp | grep 80</code><br><code>curl -I 127.0.0.1</code><br>#如果访问不了，检查selinux，iptables</p><h2 id="Nginx-实战学习"><a href="#Nginx-实战学习" class="headerlink" title="Nginx 实战学习"></a>Nginx 实战学习</h2><ul><li>部署一个静态网站</li><li>基于端口的多虚拟主机</li><li>访问日志</li><li>错误日志</li><li>代理服务</li></ul><h3 id="静态网站配置"><a href="#静态网站配置" class="headerlink" title="静态网站配置"></a>静态网站配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">user root;    <span class="comment"># ngxin的工作用户，必须和启动用户一致</span></span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        <span class="comment"># nginx 通过root指令，确定ngxin的网页文件放在哪里</span></span><br><span class="line">        <span class="comment"># 这个html指的是nginx安装目录下加一个html文件夹</span></span><br><span class="line">            root   /home/wiliiam/web/;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># index参数指的是，首页文件的名字(从/home/wiliiam/web/目录下找index.html文件)</span></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>修改配置文件后，需要重启 Nginx 程序，才能更新配置</li></ul><p><strong>关于Nginx配置文件第一行：user root的问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(ll_env) [root@VM-4-8-centos blog]<span class="comment"># ps -aux | grep nginx</span></span><br><span class="line">nobody     342  0.0  0.1  48600  2328 ?        S    22:29   0:00 nginx: worker process</span><br><span class="line">root       633  0.0  0.2 149360  5124 pts/1    S+   22:30   0:00 vim nginx.conf</span><br><span class="line">root      5110  0.0  0.0 112816   980 pts/0    S+   22:49   0:00 grep --color=auto nginx</span><br><span class="line">root     13835  0.0  0.0  46084  1904 ?        Ss   21:11   0:00 nginx: master process ./nginx</span><br></pre></td></tr></table></figure><ul><li><p>worker process Nginx 的工作用户没有指定，就是nobody</p></li><li><p>启动nginx的是root用户，而工作用户是nginx，两个不一致就会导致403错误</p><p>我们修改工作用户和启动用户一致</p></li></ul><p><strong>重启 Nginx</strong></p><ul><li><p>先验证配置文件语法是否正确</p><p><code>/opt/nginx1-12/sbin/nginx -t</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos conf]<span class="comment"># /opt/nginx1-12/sbin/nginx -t</span></span><br><span class="line"></span><br><span class="line">nginx: the configuration file /opt/nginx1-12//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /opt/nginx1-12//conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure></li><li><p><font color="orange">指定路径，再重启（否则可能会重启其他的 Nginx）</font></p></li></ul><p><code>/opt/nginx1-12/sbin/nginx -s reload</code></p><h3 id="基于端口的多虚拟主机"><a href="#基于端口的多虚拟主机" class="headerlink" title="基于端口的多虚拟主机"></a>基于端口的多虚拟主机</h3><p>如果每台linux服务器只运行了一个小网站，那么人气低，流量小的草根站长需要承担高额的服务器租赁费，也造成了硬件资源浪费。</p><p>虚拟主机就是将一台服务器分割成多个“虚拟服务器”，每个站点使用各自的硬盘空间，由于省资源，省钱，众多网站都使用虚拟主机来部署网站。</p><p><em>也就是指定不同的端口</em></p><p><img src="1.png"></p><ol><li>虚拟主机的概念就是在web服务里的一个独立的网站站点，这个站点对应独立的域名（IP），具有独立的程序和资源目录，可以独立的对外提供服务。</li><li>这个独立的站点配置是在nginx.conf中使用server{}代码块标签来表示一个虚拟主机。<br>Nginx支持多个server{}标签，即支持多个虚拟主机站点。</li></ol><p>虚拟主机的类型</p><ul><li><p>基于域名的虚拟主机</p><p>通过不同的域名区分不同的虚拟主机，是企业应用最广的虚拟主机。</p></li><li><p>基于端口的虚拟主机</p><p>通过不同的端口来区分不同的虚拟主机，一般用作企业内部网站，不对外直接提供服务的后台，例如<a href="http://www.pythonav.cn:9000/">www.pythonav.cn:9000</a></p></li><li><p>基于IP的虚拟主机</p><p>通过不同的IP区分不同的虚拟主机，此类比较少见，一般业务需要多IP的常见都会在负载均衡中绑定VIP</p></li></ul><p><img src="2.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 第一个虚拟主机网站</span></span><br><span class="line">  server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root   /root/web1/blogproject/templates/blog/;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个虚拟主机网站</span></span><br><span class="line">  server &#123;</span><br><span class="line">      listen       81;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root  /root/web2/blogproject/templates/blog/;</span><br><span class="line">          index  index.html;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><p>Nginx 能够记录用户的每一次访问请求</p><ul><li><p>对于该日志的记录，分析，可以更清晰的掌握服务器的动态信息，比如安全性</p></li><li><p>对于用户行为进行检测，分析</p><ul><li>能够记录出用户访问的时间、次数、频率</li></ul></li></ul><p>我们需要去掉 http 中的 log_format 和 access_log 的注释，即为两个虚拟主机服务开启日志监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改nginx的配置如下</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 我是网站1</span></span><br><span class="line"> server&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 我是网站2</span></span><br><span class="line"> server&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过以下命令持续检测</p><p><code>tail -f /opt/nginx1-12/logs/access.log</code></p><p>通过该 access.log 日志，即可进行更多的日志分析</p><h4 id="http-中对应参数解析"><a href="#http-中对应参数解析" class="headerlink" title="http 中对应参数解析"></a>http 中对应参数解析</h4><ul><li>log_format是日志关键字参数，不能变</li><li>main是日志格式指定的标签，记录日志时通过main标签选择指定的格式。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_addr</span>    记录客户端ip</span><br><span class="line"><span class="variable">$remote_user</span>    远程用户，没有就是 “-”</span><br><span class="line"><span class="variable">$time_local</span> 　　 对应[14/Aug/2018:18:46:52 +0800]</span><br><span class="line"><span class="variable">$request</span>　　　 　对应请求信息<span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span></span><br><span class="line"><span class="variable">$status</span>　　　  　状态码</span><br><span class="line"><span class="variable">$body_bytes_sent</span>　　571字节 请求体的大小</span><br><span class="line"><span class="variable">$http_referer</span>　　对应“-”　　由于是直接输入浏览器就是 -</span><br><span class="line"><span class="variable">$http_user_agent</span>　　客户端身份信息</span><br><span class="line"><span class="variable">$http_x_forwarded_for</span>　　记录客户端的来源真实ip 97.64.34.118</span><br></pre></td></tr></table></figure><p>日志效果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">66.102.6.6 - - [14/Aug/2018:18:46:52 +0800] <span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 571 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36 Google Favicon&quot;</span> <span class="string">&quot;97.64.34.118&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Nginx-限制网站来源IP访问"><a href="#Nginx-限制网站来源IP访问" class="headerlink" title="Nginx 限制网站来源IP访问"></a>Nginx 限制网站来源IP访问</h4><p>如果哪天发现你的nginx很慢，或者检查access.log时候，有一人疯狂请求你的nginx server，那么可以禁止这个IP访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制 ip 或 ip 段访问</span></span><br><span class="line"><span class="comment"># 禁止访问/blog/底下的资源</span></span><br><span class="line"></span><br><span class="line">location /blog &#123;</span><br><span class="line">  deny 122.71.240.254</span><br><span class="line"></span><br><span class="line">  <span class="comment"># alias /opt/nginx1-12/html/blog;</span></span><br><span class="line">  allow 10.1.1.0/16;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Nginx-错误页面优化"><a href="#Nginx-错误页面优化" class="headerlink" title="Nginx 错误页面优化"></a>Nginx 错误页面优化</h4><p>在网站运行过程中，可能因为页面不存在等原因，导致网站无法正常响应请求，此时web服务会返回系统的错误码，但是默认的错误页面很不友好。</p><p>因此我们可以将404，403等页面的错误信息重定向到网站首页或者其他指定的页面，提升用户访问体验。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /root/web/blogproject/templates/blog/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 /root/web/blogproject/templates/blog/ 路径下的 40x.html 错误页面</span></span><br><span class="line">        error_page  404 403 404 405 /40x.html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 40x.html</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&#x27;width:100%;height:100%;&#x27;</span> <span class="attr">src</span>=<span class="string">https://pic1.zhimg.com/80/v2-77a9281a2bebc7a2ea5e02577af266a8_hd.png</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="3.png"></p><h3 id="Nginx-代理服务"><a href="#Nginx-代理服务" class="headerlink" title="Nginx 代理服务"></a>Nginx 代理服务</h3><ul><li>当你访问你的个人 linux </li></ul><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p><strong>正向代理，也就是传说中的代理,他的工作原理就像一个跳板（VPN），简单的说：</strong></p><p><strong>我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器呢，他能访问那个我不能访问的网站，于是我先连上代理服务器，告诉他我需要那个无法访问网站的内容，代理服务器去取回来，然后返回给我。</strong></p><p><img src="4.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># root   /root/web1/blogproject/templates/blog/;</span></span><br><span class="line">        <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">        <span class="comment"># 代理地址</span></span><br><span class="line">        proxy_pass https://baidu.com</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p><strong>对于客户端而言，代理服务器就像是原始服务器</strong></p><p><img src="5.png"></p><p>Nginx 实现负载均衡的组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_http_proxy_module    proxy代理模块，用于把请求抛给服务器节点或者upstream服务器池</span><br></pre></td></tr></table></figure><p>实现一个简单的反向代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 机器准备，两台服务器</span></span><br><span class="line"></span><br><span class="line">master 192.168.11.63  <span class="comment"># 主负载</span></span><br><span class="line">slave 192.168.11.64<span class="comment"># web1</span></span><br></pre></td></tr></table></figure><p>主负载均衡节点的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">        upstream slave_pools&#123;</span><br><span class="line">    server 192.168.11.64:80 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass  http://slave_pools;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时访问master的服务器 192.168.11.63:80 地址，已经会将请求转发给slave的80端口</p><p>除了页面效果的展示以外，还可以通过log(access.log)查看代理效果</p><h3 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h3><p><a href="/download/conf/nginx.conf">Nginx 配置文件.cof</a></p><blockquote><p>转载自：<a href="https://www.cnblogs.com/pyyu/p/9468680.html">https://www.cnblogs.com/pyyu/p/9468680.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Nginx是什么&quot;&gt;&lt;a href=&quot;#Nginx是什么&quot; class=&quot;headerlink&quot; title=&quot;Nginx是什么&quot;&gt;&lt;/a&gt;Nginx是什么&lt;/h2&gt;&lt;p&gt;nginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。它是一个俄罗斯人lgor sysoev开发的，作者将源代码开源出来供全球使用。&lt;/p&gt;
&lt;p&gt;nginx比它大哥apache性能改进许多，nginx占用的系统资源更少，支持更高的并发连接，有更高的访问效率。&lt;/p&gt;
&lt;p&gt;nginx不但是一个优秀的web服务软件，还可以作为反向代理，负载均衡，以及缓存服务使用。&lt;br&gt;安装更为简单，方便，灵活。&lt;/p&gt;
&lt;p&gt;nginx可以说是非常nb了&lt;/p&gt;
&lt;h4 id=&quot;面试回答nginx技巧&quot;&gt;&lt;a href=&quot;#面试回答nginx技巧&quot; class=&quot;headerlink&quot; title=&quot;面试回答nginx技巧&quot;&gt;&lt;/a&gt;面试回答nginx技巧&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;支持高并发，能支持几万并发连接&lt;/li&gt;
&lt;li&gt;资源消耗少，在3万并发连接下开启10个nginx线程消耗的内存不到200M&lt;/li&gt;
&lt;li&gt;可以做http反向代理和负载均衡&lt;/li&gt;
&lt;li&gt;支持异步网络i/o事件模型epol&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Python内置函数和推导式</title>
    <link href="http://example.com/2023/03/22/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <id>http://example.com/2023/03/22/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BC%8F/</id>
    <published>2023-03-22T13:41:45.000Z</published>
    <updated>2023-03-23T15:33:43.179Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今日概要：</p><ul><li>匿名函数</li><li>生成器</li><li>内置函数</li><li><span style='color:orange;'><strong>附加</strong></span>：推导式，属于数据类型的知识，内部的高级的用法会涉及到【生成器】和【函数】的知识。</li></ul><h3 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h3><p>传统的函数的定义包括了：函数名 + 函数体</p><p>匿名函数，则是基于 lamdba 表达式实现定义一个可以没有名字的函数，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_list = [ <span class="keyword">lambda</span> x : x + <span class="number">100</span>, <span class="keyword">lambda</span> x : x + <span class="number">101</span>, <span class="keyword">lambda</span> x : x + <span class="number">102</span>]</span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x1047963b0</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="keyword">lambda</span> x : x + <span class="number">100</span></span><br><span class="line"></span><br><span class="line">res = f1(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">200</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>基于Lambda定义的函数格式为：<code>lambda 参数:函数体</code></p><ul><li><p>参数，支持任意参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: 函数体</span><br><span class="line"><span class="keyword">lambda</span> x1,x2: 函数体</span><br><span class="line"><span class="keyword">lambda</span> *args, **kwargs: 函数体</span><br></pre></td></tr></table></figure></li><li><p>函数体，只能支持单行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上面代码，lambda写法</span></span><br><span class="line"><span class="keyword">lambda</span> x: x + <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>返回值，默认将函数单行代码执行的结果返回给函数的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x: x + <span class="number">100</span></span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 110</span></span><br></pre></td></tr></table></figure></li></ul><p>匿名函数适用于简单的业务处理，可以快速并简单的创建函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + <span class="number">100</span></span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">lambda</span> a1,a2: a1 + a2 + <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="扩展：三元运算"><a href="#扩展：三元运算" class="headerlink" title="扩展：三元运算"></a>扩展：三元运算</h4><p>简单的函数，可以基于lambda表达式实现。</p><p>简单的条件语句，可以基于三元运算实现，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;请写入内容&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;蒙珣&quot;</span> <span class="keyword">in</span> num:</span><br><span class="line">  data = <span class="string">&quot;帅哥&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  data = <span class="string">&quot;美女&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;请写入内容&quot;</span>)</span><br><span class="line">data = <span class="string">&quot;帅哥&quot;</span> <span class="keyword">if</span> <span class="string">&quot;蒙珣&quot;</span> <span class="keyword">in</span> num <span class="keyword">else</span> <span class="string">&quot;美女&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果 =  条件成立时    if   条件   else   不成立</span></span><br></pre></td></tr></table></figure><p><strong>lambda表达式和三元运算没有任何关系，属于两个独立的知识点。</strong></p><p>掌握三元运算后，以后再编写匿名函数时，就可以处理再稍微复杂点的情况了，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x: <span class="string">&quot;大了&quot;</span> <span class="keyword">if</span> x &gt; <span class="number">66</span> <span class="keyword">else</span> <span class="string">&quot;小了&quot;</span></span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 小了</span></span><br><span class="line"></span><br><span class="line">v2 = func(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(v2) <span class="comment"># 大了</span></span><br></pre></td></tr></table></figure><h3 id="2-生成器"><a href="#2-生成器" class="headerlink" title="2.生成器"></a>2.生成器</h3><p>生成器是由函数 + yield 关键字创造出来的写法，在特定情况下，用他可以帮助我们节省内存。（类似C动态分配内存）</p><ul><li><p>生成器函数，但函数中有yield存在时，这个函数就是生产生成器函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="number">444</span>)</span><br></pre></td></tr></table></figure></li><li><p>生成器对象，执行生成器函数时，会返回一个生成器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">444</span>)</span><br><span class="line">    </span><br><span class="line">data = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行生成器函数func，返回的生成器对象。</span></span><br><span class="line"><span class="comment"># 注意：执行生成器函数时，函数内部代码不会执行。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">444</span>)</span><br><span class="line">    </span><br><span class="line">data = func()</span><br><span class="line"></span><br><span class="line">v1 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line">v2 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v2)</span><br><span class="line"></span><br><span class="line">v3 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v3)</span><br><span class="line"></span><br><span class="line">v4 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v4)  <span class="comment"># 结束或中途遇到return，程序爆：StopIteration 错误</span></span><br></pre></td></tr></table></figure></li></ul><p>生成器的特点是，记录在函数中的执行位置，下次执行next时，会从上一次的位置基础上再继续向下执行。</p><h4 id="生成器的应用场景"><a href="#生成器的应用场景" class="headerlink" title="生成器的应用场景"></a>生成器的应用场景</h4><ul><li><p>假设要让你生成 300w个随机的4位数，并打印出来。</p><ul><li><p>在内存中一次性创建300w个</p></li><li><p>动态创建，用一个创建一个。</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">val = random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line"><span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">data_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30000</span>):</span><br><span class="line">  val = random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line"> data_list.append(val)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 再使用时，去 data_lsit 中获取即可</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_random_num</span>(<span class="params">max_count</span>):</span></span><br><span class="line">  counter = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> counter &lt; max_counter:</span><br><span class="line">    <span class="keyword">yield</span> random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">data_list = gen_random_num(<span class="number">30000</span>)</span><br><span class="line"><span class="comment"># 再使用时，去 data_list 中获取即可</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;generator object gen_random_num at 0x1027355b0&gt;</span></span><br><span class="line"><span class="string">使用 list() 查看或者使用 for循环</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># print(list(data_list))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>假设让你从某个数据源中获取300w条数据（后期学习操作MySQL 或 Redis等数据源再操作，了解思想即可）。</li></ul><p>​    <img src="iShot_2023-03-23_23.08.39.png"></p><p>所以，当以后需要我们在内存中创建很多数据时，可以想着用基于生成器来实现一点一点生成（用一点生产一点），以节省内存的开销。</p><h4 id="生成器的扩展"><a href="#生成器的扩展" class="headerlink" title="生成器的扩展"></a>生成器的扩展</h4><p>send() 方法会返回生成器所产生的下一个值，或者如果生成器没有产生下一个值就退出则会引发 StopIteration。当调用 send() 来启动生成器时，它必须以  None 作为调用参数，因为这时没有可以接收值 yield 表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    v1 = <span class="keyword">yield</span> <span class="number">1</span>  <span class="comment"># 遇到 yield 将 yield 后面的值返还给 generator.send() 方法，即赋值给n1，yield在还没有赋值时，就已经被封存了，在下次 generator.send() 调用时，才将 666 赋值给v1</span></span><br><span class="line">    <span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">    v2 = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(v2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">    v3 = <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(v3)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">444</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = func()</span><br><span class="line"></span><br><span class="line">n1 = data.send(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"></span><br><span class="line">n2 = data.send(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"></span><br><span class="line">n3 = data.send(<span class="number">777</span>)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"></span><br><span class="line">n4 = data.send(<span class="number">888</span>)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">222</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">777</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="3.内置函数"></a>3.内置函数</h3><p><img src="iShot_2023-03-23_23.26.59.png"></p><p>Python内部为我们提供了很多方便的内置函数，在此整理出来36个给大家来讲解。</p><ul><li><p>第1组（5个）</p><ul><li><p>abs，绝对值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="built_in">abs</span>(-<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>pow，指数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">5</span>) <span class="comment"># 2的5次方  2**5</span></span><br><span class="line"><span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure></li><li><p>sum，求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">sum</span>([-<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]) <span class="comment"># 可以被迭代-for循环</span></span><br><span class="line"><span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure></li><li><p>divmod，求商和余数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">v1</span>, v<span class="number">2</span> = divmod(<span class="number">9</span>, <span class="number">2</span>)</span><br><span class="line"><span class="attribute">print</span>(v<span class="number">1</span>, v<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>round，小数点后n位（四舍五入）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">round</span>(<span class="number">4.11786</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 4.12</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>第2组：（4个）</p><ul><li><p>min，最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">min</span>(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">56</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">v2</span> = min([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]) # 迭代的类型（for循环）</span><br><span class="line"><span class="attribute">print</span>(v<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="built_in">min</span>([-<span class="number">11</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>], key=<span class="keyword">lambda</span> x: <span class="built_in">abs</span>(x))</span><br><span class="line"><span class="built_in">print</span>(v3) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></li><li><p>max，最大值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">max</span>(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">56</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line">v2 = <span class="built_in">max</span>([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>])</span><br><span class="line"><span class="built_in">print</span>(v2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="built_in">max</span>([-<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>], key=<span class="keyword">lambda</span> x: x * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(v3) <span class="comment"># 55</span></span><br></pre></td></tr></table></figure></li><li><p>all，是否全部为True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">all</span>(   [<span class="number">11</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="string">&quot;&quot;</span>]   ) <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li><li><p>any，是否存在True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="built_in">any</span>([<span class="number">11</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="string">&quot;&quot;</span>]) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><ul><li><p>- </p></li><li><p>第3组（3个）</p><ul><li>bin，十进制转二进制</li><li>oct，十进制转八进制</li><li>hex，十进制转十六进制</li></ul></li><li><p>第4组（2个）</p><ul><li><p>ord，获取字符对应的unicode码点（十进制）</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = ord(<span class="string">&quot;武&quot;</span>)</span><br><span class="line">print(<span class="name">v1</span>, hex(<span class="name">v1</span>))</span><br></pre></td></tr></table></figure></li><li><p>chr，根据码点（十进制）获取对应字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">chr</span>(<span class="number">27494</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第5组（9个）</p><ul><li><p>int</p></li><li><p>foat</p></li><li><p>str，unicode编码</p></li><li><p>bytes，utf-8、gbk编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;武沛齐&quot;</span>  <span class="comment"># str类型</span></span><br><span class="line"></span><br><span class="line">v2 = v1.encode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># bytes类型</span></span><br><span class="line"></span><br><span class="line">v3 = <span class="built_in">bytes</span>(v1,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="comment"># bytes类型</span></span><br></pre></td></tr></table></figure></li><li><p>bool</p></li><li><p>list</p></li><li><p>dict</p></li><li><p>tuple</p></li><li><p>set</p></li></ul></li><li><p>第6组（13个）</p><ul><li><p>len</p></li><li><p>print</p></li><li><p>input</p></li><li><p>open</p></li><li><p>type，获取数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v1) == <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>range </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>enumerate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="string">&quot;武沛齐&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&#x27;root&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(v1, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(num, value)</span><br></pre></td></tr></table></figure></li><li><p>id</p></li><li><p>hash</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">hash</span>(<span class="string">&quot;武沛齐&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>help，帮助信息</p><ul><li>pycharm，不用</li><li>终端，使用</li></ul></li><li><p>zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]</span><br><span class="line">v2 = [<span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>]</span><br><span class="line">v3 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">    </span><br><span class="line">result = <span class="built_in">zip</span>(v1, v2, v3)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li><li><p>callable，是否可执行，后面是否可以加括号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;武沛齐&quot;</span></span><br><span class="line">v2 = <span class="keyword">lambda</span> x: x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">v3</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">callable</span>(v1) ) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(v2))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(v3))</span><br></pre></td></tr></table></figure></li><li><p>sorted，排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">sorted</span>([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&quot;wupeiqi&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">119</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;root&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">29</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;seven&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">9</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">139</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">sorted</span>(info.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data_list = [</span><br><span class="line">    <span class="string">&#x27;1-5 编译器和解释器.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-17 今日作业.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-9 Python解释器种类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-16 今日总结.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-2 课堂笔记的创建.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-15 Pycharm使用和破解（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-12 python解释器的安装（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-13 python解释器的安装（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-8 Python介绍.mp4&#x27;</span>, <span class="string">&#x27;1-7 编程语言的分类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-3 常见计算机基本概念.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-14 Pycharm使用和破解（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-10 CPython解释器版本.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-1 今日概要.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-6 学习编程本质上的三件事.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-18 作业答案和讲解.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-4 编程语言.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-11 环境搭建说明.mp4&#x27;</span></span><br><span class="line">]</span><br><span class="line">result = <span class="built_in">sorted</span>(data_list, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>].split(<span class="string">&quot;-&quot;</span>)[-<span class="number">1</span>]) )</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h3 id="4-推导式"><a href="#4-推导式" class="headerlink" title="4.推导式"></a>4.推导式</h3><p>推导式是Python中提供了一个非常方便的功能，可以让我们通过一行代码实现创建list、dict、tuple、set 的同时初始化一些值。</p><p>请创建一个列表，并在列表中初始化：0、1、2、3、4、5、6、7、8、9…299 整数元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">    data.append(i)</span><br></pre></td></tr></table></figure><ul><li><p>列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_list = [ i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">num_list = [ [i,i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">num_list = [ [i,i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">6</span> ]</span><br></pre></td></tr></table></figure></li><li><p>集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_set = &#123; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_set = &#123; (i,i,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_set = &#123; (i,i,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i&gt;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_dict = &#123; i:i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_dict = &#123; i:(i,<span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_dict = &#123; i:(i,<span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i&gt;<span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>元组，<span style="color:red">不同于其他类型。</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不会立即执行内部循环去生成数据，而是得到一个生成器。</span></span><br><span class="line">data = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li></ul><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><ol><li><p>去除列表中每个元素的 <code>.mp4</code>后缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">data_list = [</span><br><span class="line">    <span class="string">&#x27;1-5 编译器和解释器.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-17 今日作业.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-9 Python解释器种类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-16 今日总结.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-2 课堂笔记的创建.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-15 Pycharm使用和破解（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-12 python解释器的安装（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-13 python解释器的安装（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-8 Python介绍.mp4&#x27;</span>, <span class="string">&#x27;1-7 编程语言的分类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-3 常见计算机基本概念.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-14 Pycharm使用和破解（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-10 CPython解释器版本.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-1 今日概要.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-6 学习编程本质上的三件事.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-18 作业答案和讲解.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-4 编程语言.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-11 环境搭建说明.mp4&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data_list:</span><br><span class="line">    result.append(item.rsplit(<span class="string">&#x27;.&#x27;</span>,<span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">result = [ item.rsplit(<span class="string">&#x27;.&#x27;</span>,<span class="number">1</span>)[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data_list]</span><br></pre></td></tr></table></figure></li><li><p>将字典中的元素按照 <code>键-值</code>格式化，并最终使用 <code>;</code>连接起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;武沛齐&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>:<span class="string">&quot;xxx@live.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data_list [] </span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    temp = <span class="string">&quot;&#123;&#125;-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k,v)</span><br><span class="line">    temp.append(data_list)</span><br><span class="line">resutl = <span class="string">&quot;;&quot;</span>.join(data)</span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;;&quot;</span>.join( [ <span class="string">&quot;&#123;&#125;-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k,v) <span class="keyword">for</span> k,v <span class="keyword">in</span> info.items()] )</span><br></pre></td></tr></table></figure></li><li><p>将字典按照键从小到大排序，然后在按照如下格式拼接起来。（微信支付API内部处理需求）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&#x27;sign_type&#x27;</span>: <span class="string">&quot;MD5&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;out_refund_no&#x27;</span>: <span class="string">&quot;12323&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;appid&#x27;</span>: <span class="string">&#x27;wx55cca0b94f723dc7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mch_id&#x27;</span>: <span class="string">&#x27;1526049051&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;out_trade_no&#x27;</span>: <span class="string">&quot;ffff&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;nonce_str&#x27;</span>: <span class="string">&quot;sdfdffd&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;total_fee&#x27;</span>: <span class="number">9901</span>,</span><br><span class="line">    <span class="string">&#x27;refund_fee&#x27;</span>: <span class="number">10000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&amp;&quot;</span>.join([<span class="string">&quot;&#123;&#125;=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(key, value) <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">sorted</span>(info.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])])</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_list = [func <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_list = [func(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果（执行出错，通过他可以让你更好的理解执行过程）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + i</span><br><span class="line"></span><br><span class="line">data_list = [func <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">val = data_list[<span class="number">0</span>](<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果（新浪微博面试题）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="keyword">lambda</span> x: x + i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># [函数,函数,函数]   i=9</span></span><br><span class="line"></span><br><span class="line">v1 = data_list[<span class="number">0</span>](<span class="number">100</span>)</span><br><span class="line">v2 = data_list[<span class="number">3</span>](<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(v1, v2)  <span class="comment"># 109 109</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="小高级"><a href="#小高级" class="headerlink" title="小高级"></a>小高级</h4><ol><li><p>推导式支持嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [ i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    data.append(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [ [i,j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) ]</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        data.append([i,j])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一副扑克牌</span></span><br><span class="line">poker_list = [ [color, num] <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>) <span class="keyword">for</span> color <span class="keyword">in</span> [<span class="string">&quot;红桃&quot;</span>, <span class="string">&quot;黑桃&quot;</span>, <span class="string">&quot;方片&quot;</span>, <span class="string">&quot;梅花&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(poker_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">poker_list = [ (color,num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>) <span class="keyword">for</span> color <span class="keyword">in</span> [<span class="string">&quot;红桃&quot;</span>, <span class="string">&quot;黑桃&quot;</span>, <span class="string">&quot;方片&quot;</span>, <span class="string">&quot;梅花&quot;</span>] ]</span><br></pre></td></tr></table></figure></li><li><p>烧脑面试题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span>():</span></span><br><span class="line">       <span class="keyword">return</span> [<span class="keyword">lambda</span> x: i * x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 1. num()并获取返回值  [函数,函数,函数,函数] i=3</span></span><br><span class="line">   <span class="comment"># 2. for循环返回值</span></span><br><span class="line">   <span class="comment"># 3. 返回值的每个元素(2)</span></span><br><span class="line">   result = [m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()]  <span class="comment"># [6,6,6,6]</span></span><br><span class="line">   <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span>():</span></span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">lambda</span> x: i * x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 1. num()并获取返回值  生成器对象</span></span><br><span class="line">   <span class="comment"># 2. for循环返回值</span></span><br><span class="line">   <span class="comment"># 3. 返回值的每个元素(2)</span></span><br><span class="line">   result = [m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()]  <span class="comment"># [0,2,4,6 ]</span></span><br><span class="line">   <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><ol><li><p>匿名函数，基于lambda表达式实现一行创建一个函数。一般用于编写简单的函数。</p></li><li><p>三元运算，用一行代码实现处理简单的条件判断和赋值。</p></li><li><p>生成器，函数中如果yield关键字</p><ul><li>生成器函数</li><li>生成器对象</li><li>执行生成器函数中的代码<ul><li>next</li><li>for（常用）</li><li>send</li></ul></li></ul></li><li><p>内置函数（36个）</p></li><li><p>推导式</p><ul><li>常规操作</li><li>小高级操作</li></ul></li></ol><h3 id="6-作业"><a href="#6-作业" class="headerlink" title="6. 作业"></a>6. 作业</h3><ol><li><p>看代码写结果（这题我做错了…）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v = [ <span class="keyword">lambda</span> :x  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] </span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"><span class="built_in">print</span>(v[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(v[<span class="number">0</span>]())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成了10个函数后，此时的x为9</span></span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">0</span>,-<span class="number">1</span>) <span class="keyword">if</span> i &gt; <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="keyword">lambda</span> x:x*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">2</span>) == data[<span class="number">8</span>](<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li><li><p>请用列表推导式实现，踢出列表中的字符串，最终生成一个新的列表保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">&quot;alex&quot;</span>,<span class="number">455</span>,<span class="string">&#x27;eirc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_data_list = [ ... ] <span class="comment"># 请在[]中补充代码实现。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：可以用type判断类型</span></span><br></pre></td></tr></table></figure></li><li><p>请用列表推导式实现，对data_list中的每个元素判断，如果是字符串类型，则计算长度作为元素放在新列表的元素中；如果是整型，则让其值+100 作为元素放在新的列表的元素中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">&quot;alex&quot;</span>,<span class="number">455</span>,<span class="string">&#x27;eirc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_data_list = [ ... ] <span class="comment"># 请在[]中补充代码实现。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：可以基于三元运算实现</span></span><br></pre></td></tr></table></figure></li><li><p>请使用字典推导式实现，将如果列表构造成指定格式字典.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data_list = [</span><br><span class="line">    (<span class="number">1</span>,<span class="string">&#x27;alex&#x27;</span>,<span class="number">19</span>),</span><br><span class="line">    (<span class="number">2</span>,<span class="string">&#x27;老男&#x27;</span>,<span class="number">84</span>),</span><br><span class="line">    (<span class="number">3</span>,<span class="string">&#x27;老女&#x27;</span>,<span class="number">73</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请使用推导式将data_list构造生如下格式：</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">info_dict = &#123;</span></span><br><span class="line"><span class="string">    1:(1,&#x27;alex&#x27;,19),</span></span><br><span class="line"><span class="string">    2:(2,&#x27;老男&#x27;,84),</span></span><br><span class="line"><span class="string">    3:(3,&#x27;老女&#x27;,73)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>有4个人玩扑克牌比大小，请对比字典中每个人的牌的大小，并输入优胜者的姓名（值大的胜利，不必考虑A）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">player = &#123;</span><br><span class="line">    <span class="string">&quot;武沛齐&quot;</span>:[<span class="string">&quot;红桃&quot;</span>,<span class="number">10</span>],</span><br><span class="line">    <span class="string">&quot;alex&quot;</span>:[<span class="string">&quot;红桃&quot;</span>,<span class="number">8</span>],</span><br><span class="line">    <span class="string">&#x27;eric&#x27;</span>:[<span class="string">&quot;黑桃&quot;</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="string">&#x27;killy&#x27;</span>:[<span class="string">&quot;梅花&quot;</span>,<span class="number">12</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尽量多的列举你记得的内置函数？【能记住多少就写多少，不强制去背，在此尽权利写即可，这种公共后续用的多了就自然而然就记住了】</p></li><li><p>请编写一个生成器函数实现生成n个斐波那契数列的值。</p><ul><li><p>什么是斐波那契数列？</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前两个数相加的结果，就是下一个数。</span><br><span class="line">1<span class="number"> 1 </span>2<span class="number"> 3 </span>5<span class="number"> 8 </span>13<span class="number"> 21 </span>34<span class="number"> 55 </span>...</span><br></pre></td></tr></table></figure></li><li><p>代码结构示例，请在此基础上补充代码实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">max_count</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="built_in">input</span>(<span class="string">&quot;请输入要生成斐波那契数列的个数：&quot;</span>)</span><br><span class="line">count = <span class="built_in">int</span>(count)</span><br><span class="line">fib_generator = fib(count)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> fib_generator:</span><br><span class="line">    <span class="built_in">print</span>(num) </span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日概要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匿名函数&lt;/li&gt;
&lt;li&gt;生成器&lt;/li&gt;
&lt;li&gt;内置函数&lt;/li&gt;
&lt;li&gt;&lt;span style=&#39;color:orange;&#39;&gt;&lt;strong&gt;附加&lt;/strong&gt;&lt;/span&gt;：推导式，属于数据类型的知识，内部的高级的用法会涉及到【生成器】和【函数】的知识。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-匿名函数&quot;&gt;&lt;a href=&quot;#1-匿名函数&quot; class=&quot;headerlink&quot; title=&quot;1.匿名函数&quot;&gt;&lt;/a&gt;1.匿名函数&lt;/h3&gt;&lt;p&gt;传统的函数的定义包括了：函数名 + 函数体&lt;/p&gt;
&lt;p&gt;匿名函数，则是基于 lamdba 表达式实现定义一个可以没有名字的函数，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data_list = [ &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;102&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(data_list[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&amp;lt;function &amp;lt;&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt;&amp;gt; at &lt;span class=&quot;number&quot;&gt;0x1047963b0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f1 = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res = f1(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python函数进阶</title>
    <link href="http://example.com/2023/02/26/Python%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2023/02/26/Python%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</id>
    <published>2023-02-26T05:52:05.000Z</published>
    <updated>2023-02-28T15:26:56.168Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><ul><li>*args</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(args)<span class="comment"># 元组类型 (22,)(22,33,99)()</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 只能按照位置传参</span></span><br><span class="line">func(<span class="number">22</span>)</span><br><span class="line">func(<span class="number">22</span>,<span class="number">33</span>)</span><br><span class="line">func(<span class="number">22</span>,<span class="number">33</span>,<span class="number">99</span>)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>**kwargs</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(kwargs)<span class="comment"># 字典类型 &#123;&quot;n1&quot;:&quot;蒙珣&quot;&#125; &#123;&#x27;n1&#x27;:&#x27;蒙珣&#x27;,&#x27;age&#x27;:18,&#x27;email&#x27;:&#x27;mengxun@11.com&#x27;&#125; &#123;&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 只能按关键字传参</span></span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>)</span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>,email=<span class="string">&quot;mengxun@11.com&quot;</span>)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>*args,**kwargs</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(args,kwargs)<span class="comment"># (22,33,99) (22,)&#123;&#x27;n1&#x27;:&#x27;蒙珣&#x27;,&#x27;age&#x27;:18&#125; ()&#123;&#125;</span></span><br><span class="line">  </span><br><span class="line">func(<span class="number">22</span>,<span class="number">33</span>,<span class="number">99</span>)</span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line">func(<span class="number">22</span>,n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>提示：是否还记得字符串格式化时的format功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;我叫&#123;&#125;,今年&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;蒙珣&quot;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">v2 = <span class="string">&quot;我叫&#123;name&#125;,今年&#123;age&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># def format(*args,**kwargs):</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="参数内存地址相关"><a href="#参数内存地址相关" class="headerlink" title="参数内存地址相关"></a>参数内存地址相关</h4><p>如果想查看某个值在内存中的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addr = <span class="built_in">id</span>(v1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(addr)</span><br><span class="line"><span class="number">4347695248</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v1))</span><br><span class="line"><span class="number">4347824448</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v2))</span><br><span class="line"><span class="number">4347825216</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2 = v1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v1))</span><br><span class="line"><span class="number">4346072768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v2))</span><br><span class="line"><span class="number">4346072768</span></span><br></pre></td></tr></table></figure><p><font color="orange"><strong>记住一句话：函数执行传参时，传递的是内存地址</strong></font></p><p>即：python传参默认传递的是内存地址</p><p>Python参数的这一特性有两个好处：</p><ul><li>节省内存</li><li>对于可变类型且函数中修改元素的内容，所有的地方都会修改。可变类型：列表、字典、集合。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可变类型 &amp; 修改内部</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="meta">... </span> data.append(<span class="number">999</span>)</span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(v1)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">999</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊情况：可变类型 &amp; 重新赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="meta">... </span> data = [<span class="string">&quot;蒙珣&quot;</span>,<span class="string">&quot;william&quot;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(v1)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊情况：不可变类型，无法修改内部元素，只能重新赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="meta">... </span> data = <span class="string">&quot;William&quot;</span></span><br><span class="line"><span class="meta">... </span> <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">William</span><br></pre></td></tr></table></figure><h4 id="函数的返回值是内存地址"><a href="#函数的返回值是内存地址" class="headerlink" title="函数的返回值是内存地址"></a>函数的返回值是内存地址</h4><p>其他很多编程语言执行函数时，默认传参时会将数据重新拷贝一份，会浪费内存</p><p>当然，如果你不想让外部的变量和函数内部参数的变量一致，也可以选择将外部值拷贝一份，再传给函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变类型 &amp; 修改内部修改</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line">  data.append(<span class="number">999</span>)</span><br><span class="line">  </span><br><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="comment"># 拷贝一份数据</span></span><br><span class="line">new_v1 = copy.deepcopy(v1)</span><br><span class="line">func(new_v1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br></pre></td></tr></table></figure><p>函数内存地址引用的变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  data = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">  </span><br><span class="line">v1 = func()</span><br><span class="line"><span class="built_in">print</span>(v1)<span class="comment"># [11,22,33]</span></span><br><span class="line"></span><br><span class="line">v2 = func()</span><br><span class="line"><span class="built_in">print</span>(v2)<span class="comment"># [11,22,33]</span></span><br></pre></td></tr></table></figure><p>上述代码的执行过程：</p><ul><li>执行func函数</li><li><code>data = [11,22,33]</code> 创建一块内存区域，内部存储 [11, 22, 33]，data变量指向这块内存地址 10000001110。</li><li><code>return data</code> 返回data指向的内存地址</li><li>v1接收返回值，所以v1和data都指向<code>[11,22,33]</code>的内存地址（两个变量质量此内存，引用计数器为2）</li><li>由函数执行完毕后，函数内部的变量都会被释放。（即：删除data变量，内存地址的引用计数器-1）</li></ul><p>所以，最终v1只想的函数内部创建的那块内存地址。（v1指向的1000001110内存地址）</p><ul><li>执行func函数</li><li><code>data = [11,22,33]</code> 创建一块内存区域，内部存储 [11, 22, 33]，data变量指向这块内存地址 11111001110。</li><li><code>return data</code> 返回data指向的内存地址</li><li>v2接收返回值，所以v1和data都指向<code>[11,22,33]</code>的内存地址（两个变量质量此内存，引用计数器为2）</li><li>由函数执行完毕后，函数内部的变量都会被释放。（即：删除data变量，内存地址的引用计数器-1）</li></ul><p>所以，最终v1指向的函数内部创建的那块内存地址。（v1指向的 11111001110）</p><h4 id="参数的默认值【面试题】"><a href="#参数的默认值【面试题】" class="headerlink" title="参数的默认值【面试题】"></a>参数的默认值【面试题】</h4><p>这个知识点在面试题中出现的概率比较高，但真正实际开发中用的比较少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=<span class="number">18</span></span>):</span></span><br><span class="line">  <span class="built_in">print</span>(a1,a2)</span><br></pre></td></tr></table></figure><blockquote><p>原理：Python在创建函数（未执行）时，如果发现函数的参数中有默认值，则在函数内部会创建一块区域并维护这个值</p><ul><li><p>执行函数未传值时，则让a2指向函数维护的那个值的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="string">&quot;root&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>执行函数传值时，则让a2指向新传入的值的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="string">&quot;admin&quot;</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>在特定情况<font color="orange">【默认参数的值是可变类型】&amp;【函数内部会修改这个值】</font></p><ul><li><p>坑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在函数内存中会维护一块区域存储 [1,2,666] 100010001</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=[<span class="number">1</span>,<span class="number">2</span>]</span>):</span></span><br><span class="line">  a2.append(<span class="number">666</span>)</span><br><span class="line">  <span class="built_in">print</span>(a1,a2)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># a1 = 100</span></span><br><span class="line"><span class="comment"># a2 -&gt; 100010001</span></span><br><span class="line">func(<span class="number">100</span>)<span class="comment"># 100 [1,2,666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a1 = 200</span></span><br><span class="line"><span class="comment"># a2 -&gt; 100010001</span></span><br><span class="line">func(<span class="number">200</span>)<span class="comment"># 200 [1,2,666,666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a1 = 99</span></span><br><span class="line"><span class="comment"># a2 -&gt; 111111101</span></span><br><span class="line">func(<span class="number">99</span>,[<span class="number">77</span>,<span class="number">99</span>])<span class="comment"># 99 [77,99,666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a1 = 300</span></span><br><span class="line"><span class="comment"># a2 -&gt; 100010001</span></span><br><span class="line">func(<span class="number">300</span>)<span class="comment"># 300 [1,2,666,666,666]</span></span><br></pre></td></tr></table></figure></li><li><p>大坑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在内部会维护一块区域存储[1,2],内存地址 1010101010</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=[<span class="number">1</span>,<span class="number">2</span>]</span>):</span></span><br><span class="line">  a2.append(a1)</span><br><span class="line">  <span class="keyword">return</span> a2</span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)<span class="comment"># [1,2,10]</span></span><br><span class="line"></span><br><span class="line">v2 = func(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(v2)<span class="comment"># [1,2,10,20]</span></span><br><span class="line"></span><br><span class="line">v3 = func(<span class="number">30</span>,[<span class="number">11</span>,<span class="number">22</span>])</span><br><span class="line"><span class="built_in">print</span>(v3)<span class="comment"># [11,22,30]</span></span><br><span class="line"></span><br><span class="line">v4 = func(<span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(v4)<span class="comment"># [1,2,10,20,40]</span></span><br></pre></td></tr></table></figure></li><li><p>深坑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=[<span class="number">1</span>,<span class="number">2</span>]</span>):</span></span><br><span class="line">  a2.append(al)</span><br><span class="line">  <span class="keyword">return</span> a2</span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">10</span>)</span><br><span class="line">v2 = func(<span class="number">20</span>)</span><br><span class="line">v3 = func(<span class="number">30</span>,[<span class="number">11</span>,<span class="number">22</span>])</span><br><span class="line">v4 = func(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v1)<span class="comment"># [1,2,10,20,40]</span></span><br><span class="line"><span class="built_in">print</span>(v2)<span class="comment"># [1,2,10,20,40]</span></span><br><span class="line"><span class="built_in">print</span>(v3)<span class="comment"># [11,22,30]</span></span><br><span class="line"><span class="built_in">print</span>(v4)<span class="comment"># [1,2,10,20,40]</span></span><br></pre></td></tr></table></figure><p>V1,V2,V4用的都是同一块内存</p></li></ul><h4 id="动态参数补充"><a href="#动态参数补充" class="headerlink" title="动态参数补充"></a>动态参数补充</h4><p>实参使用*，即在执行函数时也可以用*</p><ul><li><p>形参固定，实参用<code>*和**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(a1,a2)</span><br><span class="line">  </span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>)<span class="comment"># 11 22</span></span><br><span class="line">func(a1=<span class="number">1</span>,a2=<span class="number">2</span>)<span class="comment"># 1 2</span></span><br><span class="line"></span><br><span class="line">func(*[<span class="number">11</span>,<span class="number">22</span>])<span class="comment"># 11 22</span></span><br><span class="line">func(**&#123;<span class="string">&quot;a1&quot;</span>:<span class="number">11</span>,<span class="string">&quot;a2&quot;</span>:<span class="number">22</span>&#125;)<span class="comment"># 11 22</span></span><br></pre></td></tr></table></figure></li><li><p>形参用<code>*和** </code>，实参也用<code>*和**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(args,kwargs)</span><br><span class="line">  </span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>,name=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">func([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>],&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">2</span>&#125;)<span class="comment"># ([11, 22, 33], &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 2&#125;) &#123;&#125;</span></span><br><span class="line">func(*[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>],**&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">2</span>&#125;)<span class="comment"># (11, 22, 33) &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 值得注意：按照这个方式将数据传给args和kwargs时，数据是会重新拷贝的（可以理解为内部循环每个元素并设置到args和kwargs中）</span></span><br></pre></td></tr></table></figure></li></ul><p>所以，在使用format字符串格式化时，可以这样使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;我是&#123;&#125;,年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;蒙珣&quot;</span>,<span class="number">18</span>)</span><br><span class="line">v2 = <span class="string">&quot;我是&#123;name&#125;,年龄：&#123;age&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">v3 = <span class="string">&quot;我是&#123;&#125;,年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(*[<span class="string">&quot;蒙珣&quot;</span>,<span class="number">18</span>])</span><br><span class="line">v4 = <span class="string">&quot;我是&#123;name&#125;,年龄：&#123;age&#125;&quot;</span>.<span class="built_in">format</span>(**&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;蒙珣&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="函数做元素"><a href="#函数做元素" class="headerlink" title="函数做元素"></a>函数做元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">data_list = [<span class="string">&quot;mengxun&quot;</span>,<span class="string">&quot;蒙珣&quot;</span>,func,func()]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">0</span>])<span class="comment"># mengxun</span></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">1</span>])<span class="comment"># 蒙珣</span></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">2</span>])<span class="comment"># func函数</span></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">3</span>])<span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line">res = data_list[<span class="number">2</span>]()</span><br><span class="line"><span class="built_in">print</span>(res)<span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">2</span>]())<span class="comment"># 123</span></span><br></pre></td></tr></table></figure><p><strong>注意：函数同时也可以被哈希，所以函数名通常也可以当做集合的元素、字典的键</strong></p><p>掌握这个知识后，对后续的项目开发有很大的帮助，例如，在项目中遇到根据选择不同操作时：</p><ul><li><p>情景1，例如：开发一个类似微信的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_image</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_emoji</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送表情&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送文件&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎使用xx系统&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择：1.发送消息；2.发送图片；3.发送表情；4.发送文件&quot;</span>)</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&quot;输入选择的序号&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">  send_message()</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">  send_image()</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">  send_emoji()</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">  send_file()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>其实这种大量使用 if 判断不是一个很好的方式，我们可以将其放入字典中再使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_image</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_emoji</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送表情&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送文件&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">function_dict = &#123;</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: send_message,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: send_image,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: send_emoji,</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: send_file</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎使用xx系统&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择：1.发送消息；2.发送图片；3.发送表情；4.发送文件&quot;</span>)</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&quot;输入选择的序号&quot;</span>)</span><br><span class="line"></span><br><span class="line">func = function_dict.get(choice)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> func:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="comment"># 执行函数</span></span><br><span class="line">  func()</span><br></pre></td></tr></table></figure></li></ul><p>上述情况，在参数相同时才可用，如果参数不一致，会出错。</p><ul><li><p>情景2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>(<span class="params">phone,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_image</span>(<span class="params">img_path,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_emoji</span>(<span class="params">emoji</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送表情&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>(<span class="params">path</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送文件&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名和参数</span></span><br><span class="line">function_dict = &#123;</span><br><span class="line">  <span class="string">&quot;1&quot;</span>:[send_message,[<span class="string">&#x27;1513121255089&#x27;</span>,<span class="string">&#x27;你好&#x27;</span>]],</span><br><span class="line">  <span class="string">&quot;2&quot;</span>:[send_image,[<span class="string">&#x27;xxx/xxx/xx.png&#x27;</span>,<span class="string">&#x27;消息内容&#x27;</span>]],</span><br><span class="line">  <span class="string">&quot;3&quot;</span>:[send_emoji,[<span class="string">&quot;😊&quot;</span>]],</span><br><span class="line">  <span class="string">&quot;4&quot;</span>:[send_file,[<span class="string">&#x27;xx.zip&#x27;</span>]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎使用xx系统&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择：1.发送消息；2.发送图片；3.发送表情；4.发送文件&quot;</span>)</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&quot;输入选择的序号&quot;</span>)</span><br><span class="line"></span><br><span class="line">item = function_dict.get(choice)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> item:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="comment"># 执行函数</span></span><br><span class="line">  func = item[<span class="number">0</span>]</span><br><span class="line">  param_list = item[<span class="number">1</span>]</span><br><span class="line">  func(*param_list)</span><br></pre></td></tr></table></figure></li><li><p>情景2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">mobile,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span>(<span class="params">to_email,subject,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wechat</span>(<span class="params">user_id,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送微信&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func_list = [</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>: send_msg, <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&#x27;mobile&#x27;</span>: <span class="string">&quot;17610837191&quot;</span>, <span class="string">&quot;content&quot;</span>:<span class="string">&quot;您有新短息&quot;</span>&#125;&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>: send_email, <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&#x27;to_emial&#x27;</span>: <span class="string">&quot;mengxu@117.com&quot;</span>, <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;报警消息&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;硬盘容量不够用了&quot;</span>&#125;&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>: send_wechat, <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&#x27;user_id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&quot;出去玩吗&quot;</span>&#125;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> func_list:</span><br><span class="line">  func = item[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">  param_dict = item[<span class="string">&#x27;params&#x27;</span>]</span><br><span class="line">  func(**param_dict)</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h4><p>上述示例中的函数均定义在全局作用域，其实函数也可以定义在局部作用域，这样函数呗局部作用域和其子作用域中调用（函数的嵌套）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;BBBB&quot;</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CCCC&quot;</span>)</span><br><span class="line">    inner()</span><br><span class="line">    func()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;DDDD&quot;</span>)</span><br><span class="line">    </span><br><span class="line">handler()</span><br><span class="line">-------------------</span><br><span class="line">BBBB</span><br></pre></td></tr></table></figure><p>到现在你会发现，只要理解数据定义时所存在的作用域，并根据从上到下代码执行过程进行分析，再怎么嵌套都可以搞定</p><p>现在的你可能有疑问：为什么要这么嵌套定义？把函数都定义在全局不好吗？</p><p>其实，大多数情况下我们都会将函数定义在全局，不会嵌套着定义函数。不过，当我们定义一个函数去实现某功能，想要将内部功能拆分成N个函数，又担心这个N个函数放在全局会与其他函数名冲突时（尤其多人协同开发）可以选择使用函数的嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  f1()</span><br><span class="line">  f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  f1()</span><br><span class="line">  f2()</span><br></pre></td></tr></table></figure><p>![image-20230227222215296](/Users/william/Library/Application Support/typora-user-images/image-20230227222215296.png)</p><p>![image-20230227222321268](/Users/william/Library/Application Support/typora-user-images/image-20230227222321268.png)</p><p>![image-20230227222345169](/Users/william/Library/Application Support/typora-user-images/image-20230227222345169.png)</p><h4 id="嵌套引发作用域问题"><a href="#嵌套引发作用域问题" class="headerlink" title="嵌套引发作用域问题"></a>嵌套引发作用域问题</h4><p><strong>函数作用域分析1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">  name = <span class="string">&quot;mengxun&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">  inner()</span><br><span class="line">  </span><br><span class="line">run()</span><br></pre></td></tr></table></figure><ul><li><p>函数在执行过程中，先创建了一个全局作用域 <code>name = 蒙珣</code> ，然后创建了一个全局作用域<code>run函数</code>。</p></li><li><p>之后在我们调用<code>函数run()</code>时，该函数在内部声明了一个局部作用域 <code>name = mengxun</code>，而后又声明了一个局部作用域的函数为<code>inner函数</code>。</p></li><li><p>在函数内部中，他自己调用 <code>inner()</code>，先从函数内部寻找，是否有 <code>inner</code> 函数。如果有则调用内部函数，如果没有则调用外部函数。</p></li><li><p>最后执行 inner函数，结果为<code>mengxun</code></p></li></ul><p><img src="%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%88%86%E6%9E%901.png" alt="函数作用域分析1"></p><p><strong>函数作用域分析2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">  name = <span class="string">&quot;mengxun&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line">  </span><br><span class="line">v1 = run()</span><br><span class="line">v1()</span><br><span class="line"></span><br><span class="line">v2 = run()</span><br><span class="line">v2()</span><br></pre></td></tr></table></figure><ul><li>函数在执行过程中，先创建了一个全局作用域 <code>name = 蒙珣</code>，然后创建了一个全局作用域 <code>run函数</code></li><li>之后我们调用<code>函数run()</code>，并将其声明成全局变量 v1</li><li>此时，<code>函数run()</code>内部，开始声明局部变量<code>name = mengxun</code>，并返回<code>局部函数inner()</code>的内存地址</li><li>接着，我们调用<code>全局变量v1</code>，于是开始执行<code>run函数</code>内部的<code>inner函数</code></li><li><code>inner函数</code>先从内部找<code>name</code>变量，如果内部没有<code>name</code>变量，就开始在上一级函数中寻找<code>name</code>变量，并使用。</li><li>最后打印 mengxun</li><li>声明全局变量v2，同上。不同的是，v2是创建的不同于v1的另一个调用栈。</li></ul><p><img src="%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%88%86%E6%9E%902.png" alt="函数作用域分析2"></p><p><strong>函数作用域分析3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">  name = <span class="string">&quot;mengxun&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">  <span class="keyword">return</span> [inner,inner,inner]</span><br><span class="line"></span><br><span class="line">func_list = run()</span><br><span class="line">func_list[<span class="number">2</span>]()</span><br><span class="line">func_list[<span class="number">1</span>]()</span><br><span class="line"></span><br><span class="line">funcs = run()</span><br><span class="line">funcs[<span class="number">2</span>]()</span><br><span class="line">funcs[<span class="number">1</span>]()</span><br></pre></td></tr></table></figure><p>三句话搞定作用域：</p><ul><li>优先在自己的作用域找，自己没有就去上级作用域</li><li>在作用域中寻找值时，要确保此次此刻值是什么</li><li>分析函数的执行，并确定函数<strong>作用域链</strong>（函数嵌套）</li></ul><p>![image-20230227224253973](/Users/william/Library/Application Support/typora-user-images/image-20230227224253973.png)</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;动态参数&quot;&gt;&lt;a href=&quot;#动态参数&quot; class=&quot;headerlink&quot; title=&quot;动态参数&quot;&gt;&lt;/a&gt;动态参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;*args&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;*args&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(args)		&lt;span class=&quot;comment&quot;&gt;# 元组类型 (22,)(22,33,99)()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 只能按照位置传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;**kwargs&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;**kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(kwargs)		&lt;span class=&quot;comment&quot;&gt;# 字典类型 &amp;#123;&amp;quot;n1&amp;quot;:&amp;quot;蒙珣&amp;quot;&amp;#125; &amp;#123;&amp;#x27;n1&amp;#x27;:&amp;#x27;蒙珣&amp;#x27;,&amp;#x27;age&amp;#x27;:18,&amp;#x27;email&amp;#x27;:&amp;#x27;mengxun@11.com&amp;#x27;&amp;#125; &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 只能按关键字传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;,email=&lt;span class=&quot;string&quot;&gt;&amp;quot;mengxun@11.com&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;*args,**kwargs&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;*args,**kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(args,kwargs)		&lt;span class=&quot;comment&quot;&gt;# (22,33,99) (22,)&amp;#123;&amp;#x27;n1&amp;#x27;:&amp;#x27;蒙珣&amp;#x27;,&amp;#x27;age&amp;#x27;:18&amp;#125; ()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;提示：是否还记得字符串格式化时的format功能&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;v1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;我叫&amp;#123;&amp;#125;,今年&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v2 = &lt;span class=&quot;string&quot;&gt;&amp;quot;我叫&amp;#123;name&amp;#125;,今年&amp;#123;age&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(name=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# def format(*args,**kwargs):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>撒哈拉的故事</title>
    <link href="http://example.com/2023/02/23/%E6%92%92%E5%93%88%E6%8B%89%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://example.com/2023/02/23/%E6%92%92%E5%93%88%E6%8B%89%E7%9A%84%E6%95%85%E4%BA%8B/</id>
    <published>2023-02-23T14:50:49.000Z</published>
    <updated>2023-02-23T15:05:29.331Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我每想你一次，天上便落下一粒沙，从此便有了撒哈拉。每想你一次，天上就掉下一滴水，于是形成了太平洋。</p><span id="more"></span><p>这又是一本去年就看完的书，但是一直比较懒就没有写下读书感受，现在来补一下。</p><blockquote><p>漫漫的黄沙，无边而庞大的天空下，只有我们两个渺小的身影在走着，四周寂寥的很。沙漠，在这个时候真是美极了。</p></blockquote><blockquote><p>我不是妇女解放运动的支持者，但是我极不愿在结婚后失去独立的人格和内心的自由自在化，所以我一再强调，婚后我还是“我行我素”，要不然不结婚。荷西当时对我说：“我就是要你‘你行你素’，失去了你的个性和作风，我何必娶你呢！”</p></blockquote><blockquote><p>“沙伊达能迷住他的不过是情欲上的给予，而这个沙仑一定要将沙伊达的肉体，解释做他这一生所有缺乏的东西的代表，他要的是爱，是亲情，是家，是温暖。这么一个拘谨孤单年轻的心，碰到一点即使是假的爱情，也当然要不顾一切地去抓住了。”</p></blockquote><blockquote><p>“我在想，飞蛾扑火时，一定是极其快乐幸福的。”</p></blockquote><blockquote><p>长久的沙漠生活，只使人学到一个好处，任何一点点现实生活上的享受，都附带地使心灵得到无限的满足和升华。</p></blockquote><blockquote><p>“去海边，穿过沙漠一个来回，汽油也是不得了。”<br>“去捉鱼呀，捉到了做咸鱼晒干，我们可以省菜钱，也可以抵汽油钱。”我的劲一向是很大的，说到玩，决不气馁。</p></blockquote><blockquote><p>友情也是无价的财富，我只有这么安慰他。</p></blockquote><blockquote><p>“我在想，我正疯狂地爱上了一个英俊的跛足军官，我正跟他在这高原上散步，四周长满了美丽的石南花，风吹着我的乱发，他正热烈地注视着我——浪漫而痛苦的日子啊！”我悲叹着。</p></blockquote><blockquote><p>人，是最害怕认识自己的动物</p></blockquote><blockquote><p>生命，在这样荒僻落后而贫苦的地方，一样欣欣向荣地滋长着，它，并不是挣扎着在生存，对于沙漠的居民而言，他们在此地的生老病死都好似是如此自然的事。我看着那些上升的烟火，觉得他们安详得近乎优雅起来。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;我每想你一次，天上便落下一粒沙，从此便有了撒哈拉。每想你一次，天上就掉下一滴水，于是形成了太平洋。&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>北京故事</title>
    <link href="http://example.com/2023/02/21/%E5%8C%97%E4%BA%AC%E6%95%85%E4%BA%8B/"/>
    <id>http://example.com/2023/02/21/%E5%8C%97%E4%BA%AC%E6%95%85%E4%BA%8B/</id>
    <published>2023-02-21T14:45:15.000Z</published>
    <updated>2023-02-21T14:48:51.294Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-DlAixTNQ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="494424786" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><p>这本书其实在去年11月就已经读完，对于书籍前面的详细描写，后面感觉略有一笔带过之嫌。</p><p>我挺喜欢蓝宇这个人的，初遇悍东的胆怯与怯懦。</p><p>再到，不远万里，为见心上人在最寒冷的冬天，穿上最单薄也是最“华丽”的衣服。</p><p>对于悍东所做的他早有察觉，却什么也不说，什么也做不了，他深知这份爱对于眼前这个人来说，“分文不值”。</p><p>我其实挺为蓝宇所抱不平的，这么傻傻的守着一个渣男值得吗。为他放弃前程，放弃追求者。在这份苦海中苦苦挣扎，值得吗？</p><p>蓝宇爱的太深，爱的太深了，以至于分别两年都不曾走出这份感情。</p><p>阳光、开朗、乐观、坚毅、忠诚、廉洁、正直他几乎是一切美好品德的代名词，但也是个十足拧巴的人，每一个用情至深的人，或许都是这样吧。《面纱》里的瓦尔特是，蓝宇也是。</p><p>每每在苦海中挣扎，毅然决然选择抛弃自己的人，都在用刀刺入读者的心。也许就是这样读者才能深切感受到人物的那份疼痛吧。</p><p>相比于电影，《北京故事》这本书给人以更多的想象。《蓝宇》是部好电影，在我看来刘烨，没有演出他们分别时蓝宇饱受苦难后，心性成长后的气魄。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>python更改打印颜色</title>
    <link href="http://example.com/2023/02/07/python%E6%9B%B4%E6%94%B9%E6%89%93%E5%8D%B0%E9%A2%9C%E8%89%B2/"/>
    <id>http://example.com/2023/02/07/python%E6%9B%B4%E6%94%B9%E6%89%93%E5%8D%B0%E9%A2%9C%E8%89%B2/</id>
    <published>2023-02-07T13:20:42.000Z</published>
    <updated>2023-02-07T13:22:07.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>python 更改打印颜色</p><p><strong>终端的字符颜色是用转义序列控制的，是文本模式下的系统显示功能，和具体的语言无关。转义序列是以ESC开头,即用\033来完成（ESC的ASCII码用十进制表示是27，用八进制表示就是033）。</strong></p><span id="more"></span><p>首先，向终端输出彩色字符，色彩的设置由目标终端文字系统和<strong>转义字符</strong>控制，与具体的编程语言无关。其格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[文字效果;前景色;背景色m文字内容\033[0m&quot;</span>) </span><br></pre></td></tr></table></figure><p>显示颜色的参数：</p><table><thead><tr><th>显示方式</th><th>效果</th><th>前景色</th><th>背景色</th><th>颜色描述</th></tr></thead><tbody><tr><td>0</td><td>终端默认设置</td><td>30</td><td>40</td><td>黑色</td></tr><tr><td>1</td><td>高亮显示</td><td>31</td><td>41</td><td>红色</td></tr><tr><td>4</td><td>使用下划线</td><td>32</td><td>42</td><td>绿色</td></tr><tr><td>5</td><td>闪烁</td><td>33</td><td>43</td><td>黄色</td></tr><tr><td>7</td><td>反白显示</td><td>34</td><td>44</td><td>蓝色</td></tr><tr><td>8</td><td>不可见</td><td>35</td><td>45</td><td>紫红色</td></tr><tr><td>22</td><td>非高亮显示</td><td>36</td><td>46</td><td>青蓝色</td></tr><tr><td>24</td><td>去下划线</td><td>37</td><td>47</td><td>白色</td></tr><tr><td>25</td><td>去闪烁</td><td></td><td></td><td></td></tr><tr><td>27</td><td>非反白显示</td><td></td><td></td><td></td></tr><tr><td>28</td><td>可见</td><td></td><td></td><td></td></tr></tbody></table><p><a href="https://blog.csdn.net/wls666/article/details/100867234">参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以根据自己的需求，把常用的封装起来，用的时候直接调用就可以了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></span><br><span class="line">    HEADER = <span class="string">&#x27;\033[95m&#x27;</span></span><br><span class="line">    OKBLUE = <span class="string">&#x27;\033[94m&#x27;</span></span><br><span class="line">    OKGREEN = <span class="string">&#x27;\033[92m&#x27;</span></span><br><span class="line">    WARNING = <span class="string">&#x27;\033[93m&#x27;</span></span><br><span class="line">    FAIL = <span class="string">&#x27;\033[91m&#x27;</span></span><br><span class="line">    ENDC = <span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line">    BOLD = <span class="string">&#x27;\033[1m&#x27;</span></span><br><span class="line">    UNDERLINE = <span class="string">&#x27;\033[4m&#x27;</span></span><br><span class="line">    END = <span class="string">&#x27;\033[0m &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bcolors.HEADER+<span class="string">&quot;header 颜色 okblue&quot;</span>+bcolors.OKBLUE)</span><br><span class="line"><span class="built_in">print</span>(bcolors.WARNING+<span class="string">&#x27;12345&#x27;</span>+bcolors.END)</span><br></pre></td></tr></table></figure><p>[参考：<a href="https://blog.csdn.net/qq_38236620/article/details/127474029]">https://blog.csdn.net/qq_38236620/article/details/127474029]</a>(</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python 更改打印颜色&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;终端的字符颜色是用转义序列控制的，是文本模式下的系统显示功能，和具体的语言无关。转义序列是以ESC开头,即用\033来完成（ESC的ASCII码用十进制表示是27，用八进制表示就是033）。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell+Python监控脚本</title>
    <link href="http://example.com/2023/01/29/Shell-Python%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2023/01/29/Shell-Python%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/</id>
    <published>2023-01-29T07:33:54.000Z</published>
    <updated>2023-01-29T07:45:19.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Shell + Python 的监控脚本，以后还会出一些，写在这里用来拓宽监控思路和计算思路</p><p>因为每个监控脚本虽然大同小异，但是每个脚本之中都有特殊内容，是这个脚本的灵魂所在</p><span id="more"></span><h4 id="监控AL小程序和DM"><a href="#监控AL小程序和DM" class="headerlink" title="监控AL小程序和DM"></a>监控AL小程序和DM</h4><p>Shell监控部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-----------------配置项-----------------</span></span><br><span class="line">jmeterFile=zyzx_audio_2.jmx#jmeter文件</span><br><span class="line"></span><br><span class="line">thread=(400)#并发数</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小程序接口IP:PORT</span></span><br><span class="line">audioIP=&quot;192.168.129.218:9800&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志保存路径</span></span><br><span class="line">logFile=/root/dengyuanjing/jmeterResult</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jmeter生成文件路径</span></span><br><span class="line">jmeterCreatePath=/root/dengyuanjing/jmeter</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jmeter启动路径</span></span><br><span class="line">jmeterStartPath=/root/dengyuanjing/apache-jmeter-5.4.1/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：小程序连接数需要监控多个进程，目前只能主动填写</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python打印的并发数是一个占位值，可以填写真实的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-----------------配置项-----------------</span></span><br><span class="line"></span><br><span class="line">for i in $&#123;thread[@]&#125;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">        lastThread=`sed -n &quot;21p&quot; $jmeterCreatePath/$jmeterFile | awk -F &quot;&gt;&quot; &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;&lt;&quot; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">sed -i &quot;21s/$lastThread/$i/g&quot; $jmeterCreatePath/$jmeterFile</span><br><span class="line"></span><br><span class="line">rm -rf $jmeterCreatePath/500.jtl</span><br><span class="line">rm -rf $jmeterCreatePath/msgReport500</span><br><span class="line"></span><br><span class="line">current_time=`date &quot;+%Y-%m-%d_%H_%M_%S&quot;`</span><br><span class="line">echo &quot;创建目录名称为：$&#123;logFile&#125;/$&#123;current_time&#125;&quot;</span><br><span class="line">        echo &quot;并发数：$i&quot;</span><br><span class="line"></span><br><span class="line">mkdir $logFile/$current_time/</span><br><span class="line"></span><br><span class="line">nohup sh $jmeterStartPath/jmeter.sh -n -t $jmeterCreatePath/$jmeterFile -l $jmeterCreatePath/500.jtl -e -o $jmeterCreatePath/$&#123;current_time&#125;_msgReport_$&#123;i&#125; &gt; $jmeterCreatePath/123.log 2&gt;&amp; 1 &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DM_PID</span></span><br><span class="line">DMservice_PID=`ps -ef | grep DMService.jar | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NLU_PID</span></span><br><span class="line">NLU_PID=`ps -ef | grep NLUService | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小程序PID</span></span><br><span class="line"><span class="meta">#</span><span class="bash">audio_PID=(`ps -ef | grep audiolistening | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`)</span></span><br><span class="line">audio_PIDs=(`ps -ef | grep /usr/local/audiolistening-37/audiolistening | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`)</span><br><span class="line"></span><br><span class="line">        # MySQL PID</span><br><span class="line">        mysql_PID=`ps -ef | grep &quot;mysqld  --character-set-server=utf8mb4&quot; | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">        # redis PID</span><br><span class="line">        #redis_PID=`ps -ef | grep redis-server | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">if [ $&#123;audio_PIDs[0]&#125; -gt $&#123;audio_PIDs[1]&#125; ]; then</span><br><span class="line">    audio_PID=$&#123;audio_PIDs[0]&#125;</span><br><span class="line">else</span><br><span class="line">    audio_PID=$&#123;audio_PIDs[1]&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">    jmeter_PID=`ps -ef | grep apache-jmeter-5.4.1/bin/jmeter.sh | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">    if [ -n &quot;$jmeter_PID&quot; ]; then</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控小程序内存</span></span><br><span class="line"><span class="meta">#</span><span class="bash">top -p <span class="variable">$TTS_PID</span> -n 1 -b |grep -vE <span class="string">&quot;top|Tasks|Cpu|Mem|Swap|PID&quot;</span> |awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span> |sed -n <span class="string">&#x27;2p&#x27;</span> &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/mem.txt</span></span><br><span class="line">top -n 1 -b | grep $audio_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/AudioListenMem.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控小程序CPU</span></span><br><span class="line"><span class="meta">#</span><span class="bash">top -p <span class="variable">$TTS_PID</span> -n 1 -b |grep -vE <span class="string">&quot;top|Tasks|Cpu|Mem|Swap|PID&quot;</span> |awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span> |sed -n <span class="string">&#x27;2p&#x27;</span> &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/cpu.txt</span></span><br><span class="line">top -n 1 -b | grep $audio_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/AudioListenCpu.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控DM内存</span></span><br><span class="line">top -n 1 -b | grep $DMservice_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/DMmem.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控DMCPU</span></span><br><span class="line">top -n 1 -b | grep $DMservice_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/DMcpu.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控NLU CPU</span></span><br><span class="line">top -n 1 -b | grep $NLU_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/NLUcpu.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控DM内存</span></span><br><span class="line">top -n 1 -b | grep $DMservice_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/NLUmem.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控连接数DM</span></span><br><span class="line"><span class="meta">#</span><span class="bash">netstat -antp |grep <span class="variable">$DMservice_PID</span> | grep -v <span class="string">&quot;LISTEN&quot;</span> | wc -l &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/DMthreadCount.txt</span></span><br><span class="line">netstat -antp |grep $DMservice_PID | grep -v &quot;LISTEN&quot; | grep &quot;ESTABLISHED&quot; |grep 9002 |wc -l &gt;&gt; $logFile/$current_time/DMthreadCount.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控连接数NLU</span></span><br><span class="line">netstat -antp |grep $NLU_PID | grep -v &quot;LISTEN&quot; | grep &quot;ESTABLISHED&quot; |grep 9001 |wc -l &gt;&gt; $logFile/$current_time/NLUthreadCount.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控连接数小程序</span></span><br><span class="line"><span class="meta">#</span><span class="bash">netstat -antp |grep <span class="variable">$audio_PID</span>  | grep -v <span class="string">&quot;LISTEN&quot;</span> | grep <span class="string">&quot;ESTABLISHED&quot;</span> |grep 9800 |wc -l &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/AudioLinstening.txt</span></span><br><span class="line"></span><br><span class="line">       # netstat -antp |grep -E &quot;137618|137619|137620|137621|137622|137623&quot;  | grep -v &quot;LISTEN&quot; | grep &quot;ESTABLISHED&quot; |grep 9800 |wc -l &gt;&gt; $logFile/$current_time/AudioLinstening.txt</span><br><span class="line">       # 监控小程序等待连接数</span><br><span class="line">       netstat -antp | grep -v &quot;LISTEN&quot; | grep $audioIP | grep &quot;TIME_WAIT&quot; | wc -l &gt;&gt; $logFile/$current_time/AudioLinstening_TIMEWAIT.txt</span><br><span class="line">               # 监控小程序 等待连接数 和 已连接数</span><br><span class="line">       netstat -antp | grep -v &quot;LISTEN&quot; | grep $audioIP | wc -l &gt;&gt; $logFile/$current_time/AudioLinstening.txt</span><br><span class="line"></span><br><span class="line">       # top 总cpu</span><br><span class="line">               top -n 1 -b | grep &quot;%Cpu(s)&quot; | awk &#x27;&#123;print $2&#125;&#x27; &gt;&gt; $logFile/$current_time/CPU.txt</span><br><span class="line"></span><br><span class="line">       # top 总内存</span><br><span class="line">               top -n 1 -b | grep &quot;KiB Mem&quot;| awk &#x27;&#123;print $8&#125;&#x27; &gt;&gt; $logFile/$current_time/MEM.txt</span><br><span class="line"></span><br><span class="line">               # MySQL CPU</span><br><span class="line">               top -n 1 -b | grep $mysql_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/MySQLcpu.txt</span><br><span class="line"></span><br><span class="line">               # MySQL MEM</span><br><span class="line">               top -n 1 -b | grep $mysql_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/MySQLmem.txt</span><br><span class="line">               </span><br><span class="line">               # redis CPU</span><br><span class="line">               #top -n 1 -b | grep $redis_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/Redismem.txt</span><br><span class="line"></span><br><span class="line">               # redis mem</span><br><span class="line">       #top -n 1 -b | grep $redis_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/Redismem.txt</span><br><span class="line"></span><br><span class="line">       sleep 1</span><br><span class="line"></span><br><span class="line">    else </span><br><span class="line">echo &quot;监控结束，正在统计...&quot;</span><br><span class="line">break</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">python3 calc_bak.py $logFile/$current_time/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;threadCount.txt 连接数第一个值为`cat 222.txt | head -n 1`&quot;</span></span></span><br><span class="line"></span><br><span class="line">cat $logFile/$current_time/result.txt</span><br><span class="line"></span><br><span class="line">echo &quot;&quot;</span><br><span class="line">        </span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>Python 计算部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math,sys,os</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    字体颜色</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></span><br><span class="line">    HEADER = <span class="string">&#x27;\033[95m&#x27;</span></span><br><span class="line">    OKBLUE = <span class="string">&#x27;\033[94m&#x27;</span></span><br><span class="line">    OKGREEN = <span class="string">&#x27;\033[92m&#x27;</span></span><br><span class="line">    WARNING = <span class="string">&#x27;\033[93m&#x27;</span></span><br><span class="line">    FAIL = <span class="string">&#x27;\033[91m&#x27;</span></span><br><span class="line">    BOLD = <span class="string">&#x27;\033[1m&#x27;</span></span><br><span class="line">    UNDERLINE = <span class="string">&#x27;\033[4m&#x27;</span></span><br><span class="line">    END = <span class="string">&#x27;\033[0m &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化日志</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLog</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment">#f.write(&#x27;并发次数为：&#x27;+str(thread_num))</span></span><br><span class="line">        f.write(<span class="string">&quot;\n======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%5s\t%5s\t%5s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取路径所有文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFiles</span>(<span class="params">PATH</span>):</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(PATH):</span><br><span class="line">        <span class="keyword">return</span> files</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    运算90、95、99百分位</span></span><br><span class="line"><span class="string">    1.接收要统计的项目名称，接收完整的路径，接收排序好的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">proName,array</span>):</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = <span class="built_in">round</span>(array[-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    mixValue = <span class="built_in">round</span>(array[<span class="number">0</span>],<span class="number">2</span>)</span><br><span class="line">    averageValue = <span class="built_in">round</span>(<span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = <span class="built_in">round</span>(array[num_count-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = <span class="built_in">round</span>(array[math.ceil(num_count*a1)],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = <span class="built_in">round</span>(array[num_count-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = <span class="built_in">round</span>(array[math.ceil(num_count*a2)],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = <span class="built_in">round</span>(array[num_count-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = <span class="built_in">round</span>(array[math.ceil(num_count*a3)],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将值存入字典</span></span><br><span class="line">    resultDict[proName] = [maxValue, mixValue, averageValue, percent_90, percent_95, percent_99]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n&quot;</span> %(proName,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resultDict</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这段代码后期可以细化，重复代码可拿出来单写，return array</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1.判断是buff/resp</span></span><br><span class="line"><span class="string">    2.读取buff/resp路径下的监控日志，排序后调用calc函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">        array = []</span><br><span class="line">        logPath = PATH + i</span><br><span class="line">        <span class="comment"># 读取监控日志内容,并写入列表</span></span><br><span class="line">        <span class="keyword">if</span> os.path.getsize(logPath) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                array.append(<span class="built_in">float</span>(<span class="number">0</span>))</span><br><span class="line">            array.sort()</span><br><span class="line">            proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            calc(proName,array)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(logPath,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(line) &gt;= <span class="number">15</span>:</span><br><span class="line">                        <span class="built_in">print</span>(bcolors.WARNING+<span class="string">&quot;WARNING&quot;</span>+bcolors.END+logPath+logPath+<span class="string">&quot;检测结果大于7位数，被抛弃&quot;</span>)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        array.append(<span class="built_in">float</span>(line))</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="built_in">print</span>(bcolors.FAIL+<span class="string">&quot;ERROR&quot;</span>+bcolors.END+logPath+<span class="string">&quot;该值有问题，&quot;</span>,line)</span><br><span class="line">            array.sort()</span><br><span class="line">            proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            calc(proName,array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#thread_num = sys.argv[2]</span></span><br><span class="line">    resultPath = PATH + <span class="string">&#x27;result.txt&#x27;</span></span><br><span class="line">    <span class="comment">#fileList = [&quot;AudioListenCpu.txt&quot;,&quot;AudioListenMem.txt&quot;,&quot;DMmem.txt&quot;,&quot;DMcpu.txt&quot;,&quot;DMthreadCount.txt&quot;,&quot;NLUthreadCount.txt&quot;,&quot;AudioLinstening.txt&quot;]</span></span><br><span class="line"> </span><br><span class="line">    fileList = getFiles(PATH)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;result.txt&quot;</span> <span class="keyword">in</span> fileList:</span><br><span class="line">        fileList.remove(<span class="string">&quot;result.txt&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 创建以文件名为键的字典</span></span><br><span class="line">    key = []</span><br><span class="line">    resultDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">        key.append(i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    resultDict = <span class="built_in">dict</span>.fromkeys(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行程序</span></span><br><span class="line">    createLog()</span><br><span class="line">    solve()</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [[[项目index],[监控值index]],[[项目index],[监控值index]], ...]</span></span><br><span class="line"><span class="string">    需要显示的数据 </span></span><br><span class="line"><span class="string">    0 最大值</span></span><br><span class="line"><span class="string">    1 最小值</span></span><br><span class="line"><span class="string">    2 平均值</span></span><br><span class="line"><span class="string">    3 90%</span></span><br><span class="line"><span class="string">    4 95%</span></span><br><span class="line"><span class="string">    5 99%</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    优化，输入要监控的项目和值，自动生成二维数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># values = [[Pdist[&#x27;AudioListenCpu&#x27;][0], Pdist[&#x27;AudioListenCpu&#x27;][1]], [Pdist[&#x27;AudioListenMem&#x27;][1], Pdist[&#x27;AudioListenMem&#x27;][2]]]</span></span><br><span class="line">    <span class="comment"># print(*values)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===============================================&#x27;</span>)</span><br><span class="line">    <span class="comment"># keys = [&#x27;AudioListenCpu&#x27;, &#x27;AudioListenMem&#x27;]</span></span><br><span class="line">    <span class="comment"># indexes = [[0, 1], [1, 2]]</span></span><br><span class="line">    <span class="comment"># for key, idx in zip(keys, indexes):</span></span><br><span class="line">    <span class="comment">#     print(*(resultDict[key][i] for i in idx))</span></span><br><span class="line">        </span><br><span class="line">    keys = [<span class="string">&#x27;DMthreadCount&#x27;</span>,<span class="string">&#x27;AudioLinstening&#x27;</span>,<span class="string">&#x27;NLUthreadCount&#x27;</span>,<span class="string">&#x27;DMcpu&#x27;</span>,<span class="string">&#x27;DMmem&#x27;</span>,<span class="string">&#x27;AudioListenCpu&#x27;</span>,<span class="string">&#x27;AudioListenMem&#x27;</span>,<span class="string">&#x27;NLUcpu&#x27;</span>,<span class="string">&#x27;NLUmem&#x27;</span>]</span><br><span class="line">    indexes = [[<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>], [<span class="number">4</span>], [<span class="number">4</span>], [<span class="number">4</span>], [<span class="number">0</span>]]</span><br><span class="line">    <span class="comment">#print(resultDict)</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> key, idx <span class="keyword">in</span> <span class="built_in">zip</span>(keys, indexes):</span><br><span class="line">        result.extend( (<span class="built_in">str</span>(resultDict[key][i]) <span class="keyword">for</span> i <span class="keyword">in</span> idx))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="comment">#print(result)</span></span><br><span class="line">    <span class="comment">#p = &quot; &quot;.join(result)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="TTS监控脚本"><a href="#TTS监控脚本" class="headerlink" title="TTS监控脚本"></a>TTS监控脚本</h4><p>Shell监控部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------跑之前需要修改的内容------------------------</span></span><br><span class="line">thread=(100 100 100 100 100 100)                               # 需要跑的线程数</span><br><span class="line">loop=3560                                # 循环次数</span><br><span class="line">model=buff                              # 需要跑响应时间写buff，需要跑合成时间写resp</span><br><span class="line">voice_name=xiaonan                     # 指定音色</span><br><span class="line">jar_tool=client_test.3.0.1.6.7.jar      # 需要使用哪种jar包</span><br><span class="line">port=8080                               # TTS端口号</span><br><span class="line">dir=/home/testuser/dyj/tts3.0_result/xingneng    # 存放路径</span><br><span class="line"><span class="meta">#</span><span class="bash">-----------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">PATH=<span class="variable">$PATH</span>:/home/testuser/dyj/python/bin/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> PATH=/home/testuser/dyj/python/bin/:<span class="variable">$PATH</span></span></span><br><span class="line"></span><br><span class="line">for i in $&#123;thread[@]&#125;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">    # 打印当前时间</span><br><span class="line">    date_time=`date &quot;+%Y_%m_%d_%H-%M-%S&quot;`</span><br><span class="line">    echo &quot;当前时间目录为：$date_time&quot;</span><br><span class="line"></span><br><span class="line">    # 查询TTS进程号，TTS目录需为apache-tomcat-TTS，否则更改grep</span><br><span class="line">    TTS_PID=`ps -ef | grep &quot;apache-tomcat-tts&quot; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">    # 创建文件夹</span><br><span class="line">    mkdir -p $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/</span><br><span class="line"></span><br><span class="line">    if [ $model == &quot;buff&quot; ]; then</span><br><span class="line">        nohup java -jar $jar_tool -h 127.0.0.1 -p $port -t socket -sample_rate 8000 -pt url -voice_name $voice_name -text_file file -thread $i -thread_count $loop -play 4 -log 18 -streaming 1 -format pcm -play_buflen 4 &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt 2&gt;&amp; 1 &amp; </span><br><span class="line">        </span><br><span class="line">    elif [ $model == &quot;resp&quot; ]; then</span><br><span class="line">        nohup java -jar $jar_tool -h 127.0.0.1 -p $port -t socket -sample_rate 8000 -pt url -voice_name $voice_name -text_file file -thread $i -thread_count $loop -play 0 -log 24 -streaming 0 -format pcm -play_buflen 4 &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt 2&gt;&amp; 1 &amp; </span><br><span class="line">    else</span><br><span class="line">        echo &quot;请输入buff/resp&quot;</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo &quot;$model模式，$i并发客户端启动完成，正在监控CPU、MEM&quot;</span><br><span class="line"></span><br><span class="line">    sleep 2s</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    # java -jar 命令执行结束会自动退出，如果没有退出说明正在执行</span><br><span class="line">    # 循环判断jar_PID进程是否存在，不存在跳出循环，每5s判断一次</span><br><span class="line"></span><br><span class="line">    while true</span><br><span class="line">    do</span><br><span class="line">        # 获取java -jar的PID</span><br><span class="line">        jar_PID=`ps -ef | grep $jar_tool | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">        if [ -n &quot;$jar_PID&quot; ]; then</span><br><span class="line">            # 监控内存</span><br><span class="line">            #top -n 1 -b | grep &quot;$TTS_PID &quot; | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/mem.txt</span><br><span class="line">            top -p $TTS_PID -n 1 -b |grep -vE &quot;top|Tasks|Cpu|Mem|Swap|PID&quot; |awk &#x27;&#123;print $10&#125;&#x27; |sed -n &#x27;2p&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/mem.txt</span><br><span class="line">    </span><br><span class="line">            # 监控cpu</span><br><span class="line">            #top -n 1 -b | grep &quot;$TTS_PID &quot; | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/cpu.txt</span><br><span class="line">            top -p $TTS_PID -n 1 -b |grep -vE &quot;top|Tasks|Cpu|Mem|Swap|PID&quot; |awk &#x27;&#123;print $9&#125;&#x27; |sed -n &#x27;2p&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/cpu.txt</span><br><span class="line"></span><br><span class="line">            sleep 1s</span><br><span class="line">        else</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">       </span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    echo &quot;$model模式 $i并发客户端进程已结束，正在获取日志数据...&quot;</span><br><span class="line"></span><br><span class="line">    if [ $model == &quot;buff&quot; ]; then</span><br><span class="line">        # 获取buff_time，并生成buff_time.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt | grep &quot;buffTime=&quot; | awk &#x27;&#123;print $5&#125;&#x27; | awk -F &quot;=&quot; &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_time.txt </span><br><span class="line">        # 获取卡顿次数，并生成buff_jdTime.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt | grep &quot;jdTime&quot; | wc -l &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTimeNum.txt</span><br><span class="line">        jdTimeNum=`cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTimeNum.txt`</span><br><span class="line">        # 卡顿时长，需要看日志，目前没有，先不写</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt | grep &quot;jdTime&quot; | awk &#x27;&#123;print $8&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTime.txt</span><br><span class="line">    elif [ $model == &quot;resp&quot; ]; then</span><br><span class="line">        # 获取resp_time，并生成resp_time.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt | grep &quot;respTime=&quot; | awk &#x27;&#123;print $6&#125;&#x27; | awk -F &quot;=&quot; &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_time.txt </span><br><span class="line">        # 获取卡顿次数，并生成resp_jdTime.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt | grep &quot;jdTime&quot; | wc -l &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTimeNum.txt</span><br><span class="line">        jdTimeNum=`cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTimeNum.txt`</span><br><span class="line">        # 卡顿时长，需要看日志，目前没有，先不写</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt | grep &quot;jdTime&quot; | awk &#x27;&#123;print $8&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTime.txt</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo &quot;$model模式 $i并发客户端日志获取完成，正在统计结果&quot;</span><br><span class="line">    #if [ $model == &quot;buff&quot; ]; then</span><br><span class="line">    #    cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTimeNum.txt</span><br><span class="line">    #elif [ $model == &quot;resp&quot; ]; then</span><br><span class="line">    #    cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTimeNum.txt</span><br><span class="line">    #fi</span><br><span class="line"></span><br><span class="line">    python3 calc.py $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/ $model $i $jdTimeNum</span><br><span class="line"></span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/result.txt</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Python计算部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> nullcontext</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    字体颜色</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></span><br><span class="line">    HEADER = <span class="string">&#x27;\033[95m&#x27;</span></span><br><span class="line">    OKBLUE = <span class="string">&#x27;\033[94m&#x27;</span></span><br><span class="line">    OKGREEN = <span class="string">&#x27;\033[92m&#x27;</span></span><br><span class="line">    WARNING = <span class="string">&#x27;\033[93m&#x27;</span></span><br><span class="line">    FAIL = <span class="string">&#x27;\033[91m&#x27;</span></span><br><span class="line">    BOLD = <span class="string">&#x27;\033[1m&#x27;</span></span><br><span class="line">    UNDERLINE = <span class="string">&#x27;\033[4m&#x27;</span></span><br><span class="line">    END = <span class="string">&#x27;\033[0m &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化日志</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLog</span>(<span class="params">jdTimeNum</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(model+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;并发次数为：&#x27;</span>+<span class="built_in">str</span>(thread_num)+<span class="string">&#x27;\t&#x27;</span>+ <span class="string">&#x27;卡顿次数为：&#x27;</span>+<span class="built_in">str</span>(jdTimeNum))</span><br><span class="line">        f.write(<span class="string">&quot;\n======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%5s\t%5s\t%5s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    运算90、95、99百分位</span></span><br><span class="line"><span class="string">    1.接收要统计的项目名称，接收完整的路径，接收排序好的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">proName,array</span>):</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = array[-<span class="number">1</span>]</span><br><span class="line">    mixValue = array[<span class="number">0</span>]</span><br><span class="line">    averageValue = <span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = array[math.ceil(num_count*a1)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = array[math.ceil(num_count*a2)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = array[math.ceil(num_count*a3)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n&quot;</span> %(proName,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">i</span>):</span></span><br><span class="line">    array = []</span><br><span class="line">    logPath = PATH + i</span><br><span class="line">    <span class="comment"># 读取监控日志内容，并写入列表</span></span><br><span class="line">    <span class="keyword">if</span> os.path.getsize(logPath) == <span class="number">0</span>:   <span class="comment"># 查看该文件是否大小为0，主要针对没有卡顿的情况</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            array.append(<span class="built_in">float</span>(<span class="number">0</span>))</span><br><span class="line">        array.sort()</span><br><span class="line">        proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        calc(proName,array)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(logPath,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                <span class="keyword">if</span> line == <span class="string">&quot;0.0&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(bcolors.WARNING+<span class="string">&quot;warning&quot;</span>+bcolors.END+logPath+<span class="string">&quot;0.0的值已被抛弃&quot;</span>)    <span class="comment"># 抛弃内存/cpu中0.0的异常值</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(line) &gt;= <span class="number">7</span>:</span><br><span class="line">                    <span class="built_in">print</span>(bcolors.WARNING+<span class="string">&quot;warning&quot;</span>+bcolors.END+logPath+<span class="string">&quot;检测结果大于7位数，已抛弃&quot;</span>)  <span class="comment"># 抛弃内存/cpu中过大异常值</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    array.append(<span class="built_in">float</span>(line))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(bcolors.FAIL+<span class="string">&quot;error&quot;</span>+bcolors.END+logPath+<span class="string">&quot;该值有问题，&quot;</span>,line)</span><br><span class="line">        array.sort()</span><br><span class="line">        proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        calc(proName,array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.判断是buff/resp</span></span><br><span class="line"><span class="string">    2.读取buff/resp路径下的监控日志，排序后调用calc函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buff_Or_resp</span>():</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">&quot;buff&quot;</span>:</span><br><span class="line">        buffList = [<span class="string">&quot;buff_time.txt&quot;</span>,<span class="string">&quot;buff_jdTime.txt&quot;</span>,<span class="string">&quot;cpu.txt&quot;</span>,<span class="string">&quot;mem.txt&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> buffList:</span><br><span class="line">            solve(i)</span><br><span class="line">                              </span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">&quot;resp&quot;</span>:</span><br><span class="line">        respList = [<span class="string">&quot;resp_time.txt&quot;</span>,<span class="string">&quot;resp_jdTime.txt&quot;</span>,<span class="string">&quot;cpu.txt&quot;</span>,<span class="string">&quot;mem.txt&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> respList:</span><br><span class="line">            solve(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage：python3 path buff/resp thread_num jdTimeNum&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">    model = sys.argv[<span class="number">2</span>]</span><br><span class="line">    thread_num = sys.argv[<span class="number">3</span>]</span><br><span class="line">    jdTimeNum = sys.argv[<span class="number">4</span>]</span><br><span class="line">    resultPath = PATH + <span class="string">&#x27;result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">    createLog(jdTimeNum)</span><br><span class="line">    buff_Or_resp()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Shell + Python 的监控脚本，以后还会出一些，写在这里用来拓宽监控思路和计算思路&lt;/p&gt;
&lt;p&gt;因为每个监控脚本虽然大同小异，但是每个脚本之中都有特殊内容，是这个脚本的灵魂所在&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
