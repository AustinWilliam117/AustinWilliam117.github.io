<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒙珣的博客</title>
  
  <subtitle>未来很长，当有勇气面对，当与自己和解。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-20T02:29:32.056Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蒙珣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix API</title>
    <link href="http://example.com/2023/01/20/Zabbix-API/"/>
    <id>http://example.com/2023/01/20/Zabbix-API/</id>
    <published>2023-01-20T02:27:25.000Z</published>
    <updated>2023-01-20T02:29:32.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Zabbix API 半成品，可能会后续更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZabbixAPI</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, user, password</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.host = <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;/zabbix/api_jsonrpc.php&quot;</span></span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apiCall</span>(<span class="params">self,data</span>):</span></span><br><span class="line">        headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">        data = json.dumps(data)</span><br><span class="line">        response = requests.post(self.host, data, headers=headers)</span><br><span class="line">        responseResult = json.loads(response.text)</span><br><span class="line">        <span class="keyword">return</span> responseResult</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;user.login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;user&quot;</span>: self.user,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: self.password</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addZabbixHost</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;host.create&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: host,</span><br><span class="line">                <span class="string">&quot;interfaces&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;main&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;useip&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;ip&quot;</span>: host,</span><br><span class="line">                        <span class="string">&quot;dns&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;port&quot;</span>: port</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;groups&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;groupid&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;templates&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;templateid&quot;</span>: <span class="string">&quot;10001&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;error&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ERROR：addZabbixHost()报错 &quot;</span> + response[<span class="string">&#x27;error&#x27;</span>][<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;添加监控主机成功：&quot;</span> + <span class="built_in">str</span>(response[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;hostids&#x27;</span>]))</span><br><span class="line">            <span class="comment"># 返回主机列表</span></span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;hostids&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getItems</span>(<span class="params">self,host</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;item.get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;output&quot;</span>: <span class="string">&quot;extend&quot;</span>,</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: host,  <span class="comment"># 需要监控的主机</span></span><br><span class="line">                <span class="string">&quot;search&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;key_&quot;</span>: <span class="string">&quot;system.cpu.util[,idle]&quot;</span>  <span class="comment"># 监控项类型为&quot;系统监控&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="comment">#return response[&quot;result&quot;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查已经添加的主机，并返回hostid列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkHost</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;host.get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;output&quot;</span>: [<span class="string">&quot;host&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        hostidList = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> response[<span class="string">&#x27;result&#x27;</span>]:</span><br><span class="line">            hostidList.append(i[<span class="string">&#x27;hostid&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已经添加的主机有：&quot;</span> + <span class="built_in">str</span>(i[<span class="string">&#x27;hostid&#x27;</span>]))</span><br><span class="line">        <span class="comment"># 返回查询到的主机hostid列表    </span></span><br><span class="line">        <span class="keyword">return</span> hostidList</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导出配置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exportConf</span>(<span class="params">self,hostidList=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> hostidList <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            hostidList = self.checkHost()</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;configuration.export&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;hosts&quot;</span>: hostidList</span><br><span class="line">                &#125;,</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;xml&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="comment"># 暂时不知道要干嘛，只是打印出来</span></span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line">p = ZabbixAPI(<span class="string">&#x27;172.22.144.81&#x27;</span>, <span class="string">&#x27;Admin&#x27;</span>, <span class="string">&#x27;zabbix&#x27;</span>)</span><br><span class="line">p.getItems(<span class="string">&#x27;172.22.144.81&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Zabbix" scheme="http://example.com/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>CH2 指令: 计算机的语言</title>
    <link href="http://example.com/2023/01/12/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80/"/>
    <id>http://example.com/2023/01/12/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80/</id>
    <published>2023-01-12T15:00:00.000Z</published>
    <updated>2023-01-27T16:48:29.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MIPS 操作数</p><table><thead><tr><th>名字</th><th>示例</th><th>注释</th></tr></thead><tbody><tr><td>32个寄存器</td><td>$s0-$s7, $t0-$t9, $zero,<br />$a0-$a3, $v0-$v1, $gp, $fp,<br />$sp, $ra, $at</td><td>寄存器用于数据的快速存取。在MIPS中，只能对存放在寄存器中的数据执行算数操作，寄存器$zero的值恒为0，寄存器$at被汇编器保留，用于处理大的常数</td></tr><tr><td>20^30个存储器字</td><td>Memory[0], Memory[4], …,<br />Memory[4294967292]</td><td>存储器只能通过数据传输指令访问。MIPS使用字节编址，所以连续的字地址相差4。存储器用于保存数据结构、数组和溢出的寄存器。</td></tr></tbody></table><span id="more"></span><p><img src="MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801.png" alt="MIPS汇编语言"></p><p><img src="MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%802.png" alt="MIPS汇编语言"></p><h3 id="第一部分-MIPS-32概述"><a href="#第一部分-MIPS-32概述" class="headerlink" title="第一部分 MIPS-32概述"></a>第一部分 MIPS-32概述</h3><p><img src="MIPS-32%E6%A6%82%E8%BF%B0.png"></p><h4 id="指令的组成-MIPS的设计思想"><a href="#指令的组成-MIPS的设计思想" class="headerlink" title="指令的组成 MIPS的设计思想"></a>指令的组成 MIPS的设计思想</h4><p>计算机执行任何程序，本质上都是在执行机器语言指令（instruction），每条指令都是一条0-1串</p><p>指令首先要指明执行什么操作，通常用0-1串中的前几位来表示，称为操作码 指令还要指出需要操作的数据来自哪里、操作后的结果数据放回哪里 通常用0-1串中的剩余位来表示，称为<font color="orange">操作数</font>或<font color="orange">地址码</font>大部分操作数都是一个地址编号，告诉CPU从哪里取得数据、向哪里放回数据 所以操作数通常也叫做地址码</p><table><thead><tr><th align="center">操作码</th><th align="center">地址码</th><th align="center">地址码</th></tr></thead></table><p>MIPS作为RISC指令集，设计力求保证硬件设备的简单性，在我们讲解的32为MIPS汇编语言（MIPS-32）中，所有指令都是32位长</p></br><h4 id="MIPS-32中的通用寄存器"><a href="#MIPS-32中的通用寄存器" class="headerlink" title="MIPS-32中的通用寄存器"></a>MIPS-32中的通用寄存器</h4><p>MIPS中运算操作的操作数必须来自<font color="orange">寄存器</font>（register）或者指令本身一种位于CPU、比cache更小更快的存储器，用来暂时存放运算的源数据和结果</p><p>一些寄存器是专用的，如存放执行中指令的地址的<font color="orange">程序计数器</font>（PC）于此相对应，用于暂时存放运算数据的寄存器称为通用寄存器</p><p>MIPS中一共有32个32位寄存器，共128B（大部分架构都采用16或32个寄存器）</p><p>我们约定：</p><ul><li>程序中的变量存放在<font color="orange">保存寄存器</font>（store reg）中：$s0 ~ $s7 共8个</li><li>运算的临时变量、中间变量存放在<font color="orange">临时寄存器</font>（temp reg）中：$t0 ~ $t7 共8个</li><li>还有一个<font color="orange">零寄存器</font>，永远存放32位的0，写作$zero</li></ul><h3 id="第二部分-三类汇编指令"><a href="#第二部分-三类汇编指令" class="headerlink" title="第二部分 三类汇编指令"></a>第二部分 三类汇编指令</h3><p><img src="%E4%B8%89%E7%B1%BB%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4.png" alt="三类汇编指令"></p><h4 id="算数运算：加add、减sub"><a href="#算数运算：加add、减sub" class="headerlink" title="算数运算：加add、减sub"></a>算数运算：加add、减sub</h4><p>C赋值语句：c = a + b;</p><p><font color="orange">加法指令 add c, a, b</font>: 将a和b中的数据相加，并将结果存放在c中</p><p>再次强调：MIPS中运算的操作数必须来自寄存器或者指令本身！</p><p>假设变量a，b，c分别存放在寄存器$s0，$s1，$s2中，这条指令就应当写为</p><p><code>add $s2, $s0, $s1</code></p><p>加法中两个数可以对换，但减法不行，故c = a - b；必须写作</p><p><code>sub $s2, $s0, $s1</code></p><p>运算的 “原材料” a和b对应的寄存器$s0, $s1</p><p>分别称为源操作数1*（src1）和源操作数2（src2）</p><p>运算的结果c对应的寄存器$s2称为目的操作数（des）</p><p><code>加减指令的通式：add/sub des, src1, src2</code></p><h4 id="算术运算：加立即数addi"><a href="#算术运算：加立即数addi" class="headerlink" title="算术运算：加立即数addi"></a>算术运算：加立即数addi</h4><p>在 i++ 即 i = i + 1；这条赋值语句中，有个确定的常数1</p><p>与其采取额外的步骤将1装入某个寄存器，不如让指令本身包含这个1</p><p>假设变量i位于寄存器$s0，我们把加法指令的第二个源操作数改为常数1</p><p><code>addi $s0, $s0, 1</code></p><p>就成了加立即数(add immediate)指令</p><p>因为addi指令中的立即数可以取负数（对立即数取负后相加）</p><p>因此，MIPS中没有subi指令</p><h4 id="逻辑按位运算-and、or、nor指令"><a href="#逻辑按位运算-and、or、nor指令" class="headerlink" title="逻辑按位运算:and、or、nor指令"></a>逻辑按位运算:and、or、nor指令</h4><p>当两个源寄存器中，对应的位上同时为1时，与and操作结果为1 当两个源寄存器中，对应的位上至少有一个为1时，或or操作结果为1 因此，假设</p><p><code>$t0 = 0000 0000 0000 0000 0000 0000 0000 1001</code></p><p><code>$t1 = 0000 0000 0000 0000 0000 0000 0000 1100</code></p><p>执行下列两条指令后，$t2中的数据分别变为多少? </p><p><code>and $t2, $t0, $t1</code></p><p><code> or $t2, $t0, $t1</code></p><p>任何数据与0进行<font color="orange">或非nor操作</font>，都会0/1反转 执行下列指令后，$t2中的数据会变为多少?</p><p><code> nor $t2, $t0, $zero</code></p><p><code>$t2 = 1111 1111 1111 1111 1111 1111 1111 0110</code></p><h4 id="逻辑位移运算：sll-和-srl-指令"><a href="#逻辑位移运算：sll-和-srl-指令" class="headerlink" title="逻辑位移运算：sll 和 srl 指令"></a>逻辑位移运算：sll 和 srl 指令</h4><p>比较12和120两个十进制数，通过在对低位的右边添加一个0，变成了10倍</p><p>比较11和110两个二进制数，通过在最低位的右边添加一个0，变成了多少倍？1100呢？</p></br><p><font color="orange">逻辑左移（shift left logic）</font>指令让寄存器中的数据整体往左移动指定的位数，并在右边空出来的位上补0。</p><p>假设<code>$s2 = 0000 0000 0000 0000 0000 0000 0000 0101</code></p><p>逻辑左移两位后，放到寄存器$s0中：</p><p><code>sll $s0, $s2, 2</code></p><p>这里的2不是addi指令中的立即数，而是告诉计算机移动几位的<font color="orange">位移量（shift amount）</font></p></br><p>通过这样一条指令，我们实际上完成了x4的运算！</p><p>x2、x8、x128时，移位量分别是多少？</p><p>x2移位量为1，x8移位量为3，x128移位量为7</p><p><code>srl 指令可以实现/2运算，使用场景不多，不额外讨论</code></p><h4 id="综合练习1：变量运算与赋值"><a href="#综合练习1：变量运算与赋值" class="headerlink" title="综合练习1：变量运算与赋值"></a>综合练习1：变量运算与赋值</h4><p>翻译以下C语句：</p><p>result = a - 10 + (b + c * 5)；其中 result 为 $s3，a 为 $s0，b 为 $s1，c 为 $s2</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c * <span class="number">5</span> -&gt; <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">s2</span>, <span class="number">2</span></span><br><span class="line"> <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, $<span class="built_in">s2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">b </span>+ c * <span class="number">5</span> -&gt; <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">s1</span></span><br><span class="line"></span><br><span class="line">a - <span class="number">10</span> -&gt; <span class="keyword">addi </span>$<span class="built_in">t2</span>, $<span class="built_in">s0</span>, -<span class="number">10</span></span><br><span class="line"></span><br><span class="line">result = <span class="keyword">add </span>$<span class="built_in">s3</span>, $<span class="built_in">t2</span>, $<span class="built_in">t1</span></span><br></pre></td></tr></table></figure><h4 id="寄存器—存储器数据传送：lw指令"><a href="#寄存器—存储器数据传送：lw指令" class="headerlink" title="寄存器—存储器数据传送：lw指令"></a>寄存器—存储器数据传送：lw指令</h4><p>运算指令的操作数必须来自于寄存器/指令本身，但是，通用寄存器一共只有128B</p><p>数组元素却可以占据成千上万个字节，只能存放在内存中</p></br><p>这时，我们把数组第一个元素（a[0]）的32位地址，称为数组的<font color="orange">基址</font>，放在寄存器中</p><p>基址加上要找的元素的下标，就组成了这个元素的地址</p></br><p>如果源操作数在内存中，是数组a的5号元素（第六个元素），数组a的基址存放在$s1中。那么，a[5]的地址就表示为5($s1)</p><p>计算机会自动计算$s1中的基址和<font color="orange">偏移量</font>5的和，找到a[5]的地址</p></br><p>将a[5]从内存传送到寄存器$s0，使用<font color="orange">取字指令（load word）</font></p><p><code>lw $s0, 5($s1)</code></p><h4 id="寄存器—存储器数据传送：字与sw指令"><a href="#寄存器—存储器数据传送：字与sw指令" class="headerlink" title="寄存器—存储器数据传送：字与sw指令"></a>寄存器—存储器数据传送：字与sw指令</h4><p>MIPS的通用寄存器都是32位长，这个长度就是MIPS体系结构的<font color="orange">字长</font>，通常代表了参与运算的数据的长度，因此我们约定：整门课程中，1<font color="orange">字</font>=32b=4B</p></br><p>a[5]相对于a[0]，在内存中的距离是5个字，而不是5个字节。又因为内存按字节编址，即：内存每个字节都有一个特定的编号。</p><p>所以偏移量应该是 5x4=20个字节，a[5]的地址应该表示成20($s1)，于是取数指令变为<font color="orange"><code>lw $s0, 20($s1)</code></font></p></br><p>如果我们要把$t0中运算结果送回内存中的a[2]，需要用到<font color="orange">存字指令（store word）</font>:    <font color="orange"><code>sw $t0, 8($s1)</code></font></p><h4 id="寄存器间数据传送-装载立即数到寄存器"><a href="#寄存器间数据传送-装载立即数到寄存器" class="headerlink" title="寄存器间数据传送 装载立即数到寄存器"></a>寄存器间数据传送 装载立即数到寄存器</h4><p>如果我们需要把数从$t0保存到存放某变量的$s1中，怎么实现?</p><p>MIPS没有专门的寄存器间移动数据的指令。但是，通过把源寄存器中的数据加上0再保存到目标寄存器中，可以实现相同的功能</p><p><code>addi $s1, $t0, 0</code> 或 <code>add $s1, $t0, $zero</code></p><p>这个功能可以用<font color="orange">move伪指令</font>来代替 <font color="orange"><code>move $s1, $t0</code></font></p></br><p>假如我们要把一个常数10装入寄存器$s2，同样可以采用addi指令</p><p><code>addi $s2, $zero, 10</code> 或使用<font color="orange">取立即数（load immediate）伪指令 <code>li $s2, 10</code></font></p><p><em>程序设计题中能否使用伪指令，请咨询老师！</em></p><h4 id="装载32位立即数到寄存器"><a href="#装载32位立即数到寄存器" class="headerlink" title="装载32位立即数到寄存器"></a>装载32位立即数到寄存器</h4><p>我们说可以用addi指令向寄存器装载立即数：<code>addi $s2, $zero, 10</code></p><p>但是，addi指令中的立即数10只能占用32位指令中的一部分（16位，稍后介绍指令格式）</p><p>16位只能表示2E16，即六万多个数，寄存器却能容纳2E32即40多亿个数</p></br><p>二进制与十六进制的转化在此不作介绍</p><p>假设我们要向寄存器$s2装载一个32位的立即数：<code>10A2 7FFF(16)</code></p></br><p>我们必须先用取高位立即数（load upper immediate）指令，把10A2放入$s2的高16位</p><p><font color="orange"><code>lui $s2,4258</code></font>  #十六进制的10A2等于十进制的4258</p><p>再让$s2与低16位的立即数7FFF进行或运算</p><p><font color="orange"><code>ori $s2, $s2, 32767</code></font> #7FFF(16)=32767(10)</p><p>这样，就分两步把32位立即数装载到了32的寄存器中</p><p><code>&lt;font color=&quot;grey&quot;&gt;不能使用addi代替ori指令，如果低16位的最高位是1，addi会把它理解为负数&lt;/font&gt;</code></p><h4 id="综合练习2：数组元素运算与赋值"><a href="#综合练习2：数组元素运算与赋值" class="headerlink" title="综合练习2：数组元素运算与赋值"></a>综合练习2：数组元素运算与赋值</h4><p>a[i] = a[0] + 100000;</p><p>假设数组 a 的基址位于 $s0，变量 i 位于 $s1</p><p>100000(10) = 186A0(16)，1(16) = 1(10)，86A0(16) = 34464</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>.将a[<span class="number">0</span>]传到临时寄存器中</span><br><span class="line"><span class="attribute">lw</span> $t<span class="number">0</span>,<span class="number">0</span>($s<span class="number">0</span>)</span><br><span class="line"><span class="attribute">2</span>.将<span class="number">100000</span>装载<span class="number">32</span>位寄存器中</span><br><span class="line"><span class="attribute">lui</span> $t<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="attribute">ori</span> $t<span class="number">1</span>,$t<span class="number">1</span>,<span class="number">34464</span></span><br><span class="line"><span class="attribute">3</span>.将a[<span class="number">0</span>] 与 <span class="number">100000</span> 相加</span><br><span class="line"><span class="attribute">add</span> $t<span class="number">2</span>,$t<span class="number">0</span>,$t<span class="number">1</span></span><br><span class="line"><span class="attribute">4</span>.获取a[i]的元素</span><br><span class="line"><span class="attribute">sll</span> $t<span class="number">3</span>,$s<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="attribute">add</span> $t<span class="number">4</span>,$t<span class="number">0</span>,$t<span class="number">3</span></span><br><span class="line"><span class="attribute">5</span>.将t<span class="number">2</span>的值传给t<span class="number">4</span>所指向的a[i]地址</span><br><span class="line"><span class="attribute">sw</span> $t<span class="number">2</span>,<span class="number">0</span>($t<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="决策：条件分支beq和bne"><a href="#决策：条件分支beq和bne" class="headerlink" title="决策：条件分支beq和bne"></a>决策：条件分支beq和bne</h4><p>计算机和一般计算器的区别在于何处？</p><p>在于决策能力</p><p>即，根据一定的条件选择执行何种运算的能力</p></br><p>最基础的判断条件是相等关系</p><p>假设 $s0 = 0，$s1 = 0，$s2 = 1</p><p><font color="orange">相等则分支（branch if equal）指令</font>在两个源操作数寄存器中的值相同时分支，分支以<font color="orange">分支标签</font>表示</p><p><font color="orange"><code>beq $s0,$s1,Label</code></font></p><p>与此相对应，<font color="orange">不等则分支（branch if not equal）指令</font>在值不同时分支到标签</p><p><font color="orange"><code>bne $s0,s2,Label</code></font></p><p>如果 不发生分支，则继续执行内存中相邻的下一条指令</p></br><h4 id="综合练习3：if-else语句（无条件跳转-j-和条件分支）"><a href="#综合练习3：if-else语句（无条件跳转-j-和条件分支）" class="headerlink" title="综合练习3：if-else语句（无条件跳转 j 和条件分支）"></a>综合练习3：if-else语句（无条件跳转 j 和条件分支）</h4><p>If (i == j) f = g + h;</p><p>else f = g - h;</p><p>假设f、g、h、i、j 分别存放在$s0 - $s4中</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">beq</span> $<span class="built_in">s3</span>,$<span class="built_in">s4</span>,Label</span><br><span class="line"><span class="keyword">add</span> $<span class="built_in">s0</span>,$<span class="built_in">s1</span>,$<span class="built_in">s2</span></span><br><span class="line"><span class="symbol">Label</span> <span class="keyword">sub</span> $<span class="built_in">s0</span>,$<span class="built_in">s1</span>,$<span class="built_in">s2</span></span><br></pre></td></tr></table></figure><p><font color="orange">结论：判定相等 == 使用bne，判断不等 != 使用beq</font></p><h4 id="决策：小于则置位slt"><a href="#决策：小于则置位slt" class="headerlink" title="决策：小于则置位slt"></a>决策：小于则置位slt</h4><p>除了相等、不等关系，我们还经常比较两个数的大小</p><p>MIPS有一条<font color="orange">小于则置位（set on less than）指令slt</font></p><p><font color="grey">置位：将一位设置为1；复位：将一位设置为0</font></p></br><p>还是假设$s0 = 0，$s1 = 0，$s2 = 1</p><p><font color="orange"><code>slt $t0,$s0,$s2</code></font></p><p>源操作数1 &lt; 源操作数2 吗？ Yes</p><p>此时把目的炒作输寄存器$t0置位为1</p></br><p><code>slt $t0,$s0,$s1</code></p><p>源操作数1 &lt; 源操作数2 吗？No！</p><p>此时把目的操作数寄存器$t0复位为0</p><h4 id="6种条件判断及其伪指令"><a href="#6种条件判断及其伪指令" class="headerlink" title="6种条件判断及其伪指令"></a>6种条件判断及其伪指令</h4><p>通过slt、beq、bne（严格来说还有小于立即数则置位slti指令，不作讨论）指令的各种组合，我们就能够实现全部六种<font color="orange">比较指令</font>，即六种值为真或假的<font color="orange">布尔表达式</font></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &lt; j) <span class="attr">f</span> = g + h;</span><br><span class="line"><span class="keyword">else</span> <span class="attr">f</span> = g - h;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">slt $t0,i,j# 当 i&lt;j 时，把$t0置为1，否则为0</span><br><span class="line">beq $t0,$zero,Else# 当 $t0为0时，执行else后的语句</span><br><span class="line">add f,g,h# 否则顺着执行if后的语句</span><br><span class="line">j Exit# 加法完成后退出if-else语句</span><br><span class="line">Else: sub f,g,h# else</span><br><span class="line">Exit:</span><br></pre></td></tr></table></figure><p><font color="orange">结论：判断大于 &gt; 或小于  &lt; 使用 slt 和 beq，判定大于等于 &gt;= 或小于等于 &lt;= 使用 slt 和 bne </font></p><p>对于比大小的四种比较条件，可以使用伪指令：</p><ul><li>小于则分支blt</li><li>大于则分支bgt</li><li>小于等于则分支ble</li><li>大于等于则分支bge</li></ul><h4 id="综合练习4：while循环"><a href="#综合练习4：while循环" class="headerlink" title="综合练习4：while循环"></a>综合练习4：while循环</h4><p>while(a[i] == k) i++;<br>假设i,k分别存放在$s3和$s5中，a的基址放在$s6中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="MIPS汇编指令小结"><a href="#MIPS汇编指令小结" class="headerlink" title="MIPS汇编指令小结"></a>MIPS汇编指令小结</h4><p><img src="MIPS%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93.png"></p><h4 id="指令格式：R型"><a href="#指令格式：R型" class="headerlink" title="指令格式：R型"></a>指令格式：R型</h4><p>指令中含三个寄存器的运算指令都属于<font color="orange">R型（register type）指令</font></p><p><strong><code>add/sub</code></strong><code>des,src1,src2</code></p><p><strong><code>and/or/nor</code></strong><code>des,src1,src2</code></p><p><strong><code>slt</code></strong><code>des,src1,src2</code></p><p>32位的MIPS指令一共分为6个字段：</p><table><thead><tr><th>op</th><th>rs</th><th>rt</th><th>rd</th><th>shamt</th><th>funct</th></tr></thead><tbody><tr><td>6位</td><td>5位</td><td>5位</td><td>5位</td><td>5位</td><td>6位</td></tr></tbody></table><ul><li><font color="orange">op</font>：operation code，源操作码</li><li><font color="orange">rs</font>：register source，源操作数寄存器 -&gt; <font color="orange">rt</font>：s后面是t，表示第二个源操作数寄存器</li><li><font color="orange">rd</font>：register destination，目的寄存器</li><li><font color="orange">shamt</font>：shift amount，位移量</li><li><font color="orange">funct</font>：function code，功能码</li></ul><h4 id="指令格式：R型-1"><a href="#指令格式：R型-1" class="headerlink" title="指令格式：R型"></a>指令格式：R型</h4><p>R型指令的操作码op都是6个0，由6位功能码funct进一步指定执行什么操作</p><p>以add指令为例</p><ul><li><p><font color="orange">$t0<del>$t7分别为8</del>15号寄存器</font></p></li><li><p><font color="orange">$s0<del>$s7分别为16</del>23号寄存器</font></p></li></ul><table><thead><tr><th>000000</th><th>10001</th><th>10010</th><th>01000</th><th>00000</th><th>100000</th></tr></thead><tbody><tr><td>6位</td><td>5位</td><td>5位</td><td>5位</td><td>5位</td><td>6位</td></tr></tbody></table><p>sub指令仅仅是功能码funct字段从32变为了34，sub $s1, $s1, $s0的32位机器码是多少? </p><p><font color="gray">需要记忆add、sub指令的操作码(都是0)和功能码(分别为32、34)</font></p><p>此外，使用移位量的两条逻辑移位指令</p><p><strong><code>sll/srl</code></strong><code>des, src1, shamt </code></p><p>也属于R型指令，因为没有第二个源操作数寄存器，rt被置为0</p><blockquote><p>转自：B站翼云</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;MIPS 操作数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;32个寄存器&lt;/td&gt;
&lt;td&gt;$s0-$s7, $t0-$t9, $zero,&lt;br /&gt;$a0-$a3, $v0-$v1, $gp, $fp,&lt;br /&gt;$sp, $ra, $at&lt;/td&gt;
&lt;td&gt;寄存器用于数据的快速存取。在MIPS中，只能对存放在寄存器中的数据执行算数操作，寄存器$zero的值恒为0，寄存器$at被汇编器保留，用于处理大的常数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20^30个存储器字&lt;/td&gt;
&lt;td&gt;Memory[0], Memory[4], …,&lt;br /&gt;Memory[4294967292]&lt;/td&gt;
&lt;td&gt;存储器只能通过数据传输指令访问。MIPS使用字节编址，所以连续的字地址相差4。存储器用于保存数据结构、数组和溢出的寄存器。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="计算机组成与设计" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>CH1 计算机概要与技术</title>
    <link href="http://example.com/2022/11/09/CH1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2022/11/09/CH1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/</id>
    <published>2022-11-09T15:31:55.000Z</published>
    <updated>2023-01-20T02:18:46.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在读完本书后，我们能够理解以下问题：</p><ul><li><p>用C或Java等高级语言编写的程序如何翻译成硬件之间的语言？硬件如何执行程序？</p><p>领会这些概念是理解软硬件两者如何影响程序性能的基础</p></li><li><p>什么是软硬件之间的接口，以及软件如何指导硬件完成其功能？</p><p>这些概念对于许多软件的编写十分重要</p></li><li><p>哪些因素决定了程序的性能？程序员如何才能改进程序性能？</p><p>从本书中我们将知道，程序性能取决于原始程序、将该程序转换为计算机语言的软件以及执行该程序的硬件的有效性</p></li><li><p>什么技术可供硬件设计者用于改进性能？</p><p>本书将介绍现代计算机设计的基本概念。有感兴趣的读者可深入阅读另一本进阶教材《Computer Architecture: A Quantitative Approach》</p></li><li><p>硬件设计者可使用那些技术提高能效？什么技术可供程序员提高或降低能效？</p></li><li><p>为什么串行处理近来发展为并行处理？这种发展带来的结果是什么？</p><p>本书给出了解释，并介绍了当今支持并行处理的硬件机制，全面评述了新一代的多核微处理器（multicore microprocessor）</p></li><li><p>自1951年的第一台商用计算机开始，计算机架构师们提出的哪些伟大思想构成了计算机的基础？</p></li></ul><span id="more"></span><p><a href="/download/xmind/CH1%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E8%AE%BE%E8%AE%A1.xmind">点击下载 CH1 计算机概要与设计.xmind</a></p><h3 id="第一部分-计算机的分类"><a href="#第一部分-计算机的分类" class="headerlink" title="第一部分 计算机的分类"></a>第一部分 计算机的分类</h3><h4 id="计算机的分类"><a href="#计算机的分类" class="headerlink" title="计算机的分类"></a>计算机的分类</h4><p><strong>传统上</strong>，按照应用，计算机可分为：</p><ul><li><p><font color="orange">个人计算机（PC）</font></p></li><li><p><font color="orange">服务器</font></p><p>适用于执行大负载任务，多用户通过网络并行访问。</p><p>高端服务器被称为超级计算机</p></li><li><p><font color="orange">嵌入式计算机</font></p></li></ul><p>进入<strong>后PC时代：</strong></p><p>往小的方向发展为：<font color="orange">个人移动设备（PMD）</font></p><p>往大的方向发展为：仓储规模计算机（Warehouse-Scale Computer，<font color=orange>WSC</font>），大型数据中心的云计算服务器</p><h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p><strong>字节常用于存储容量，位常用于传输速度。1字节=8位</strong></p><table><thead><tr><th>十进制术语</th><th>缩写</th><th>数值</th><th>二进制术语</th><th>缩写</th><th>数值</th><th>数值差别</th></tr></thead><tbody><tr><td>kilobyte</td><td>KB</td><td>10^3</td><td>kibibyte</td><td>KiB</td><td>2^10</td><td>2%</td></tr><tr><td>megabyte</td><td>MB</td><td>10^6</td><td>mebibyte</td><td>MiB</td><td>2^20</td><td>5%</td></tr><tr><td>gigabyte</td><td>GB</td><td>10^9</td><td>gibibyte</td><td>GiB</td><td>2^30</td><td>7%</td></tr><tr><td>terabyte</td><td>TB</td><td>10^12</td><td>tebibyte</td><td>TiB</td><td>2^40</td><td>10%</td></tr><tr><td>petabyte</td><td>PB</td><td>10^15</td><td>pebibyte</td><td>PiB</td><td>2^50</td><td>13%</td></tr><tr><td>exabyte</td><td>EB</td><td>10^18</td><td>exbibyte</td><td>EiB</td><td>2^60</td><td>15%</td></tr><tr><td>zettabyte</td><td>ZB</td><td>10^21</td><td>zebibyte</td><td>ZiB</td><td>2^70</td><td>18%</td></tr><tr><td>yottabyte</td><td>YB</td><td>10^24</td><td>yobibyte</td><td>YiB</td><td>2^80</td><td>21%</td></tr></tbody></table><p>测验：</p><p>i5 + GTX3060 + 8G + 512G （GiB）</p><p>生活中，100兆（100Mbps）的带宽。传输速度是100MB/s / 8 = 12.5MiB/s</p><h4 id="理解程序性能"><a href="#理解程序性能" class="headerlink" title="理解程序性能"></a>理解程序性能</h4><p>一个程序的性能取决于以下各因素的组合：程序所用的算法的有效性，用来建立程序并将其翻译成机器指令的软件系统，计算机执行机器指令（可能包括I/O操作）的有效性</p><table><thead><tr><th>软件或硬件组成元素</th><th>该软件如何影响性能</th><th>该论题出现的位置</th></tr></thead><tbody><tr><td>算法</td><td>决定了源码级语句的数量和I/O操作的数量</td><td>其他书</td></tr><tr><td>编程语言、编译器和体系结构</td><td>决定了每条源码级语句对应的计算机指令数量</td><td>第2、3章</td></tr><tr><td>处理器和存储系统</td><td>决定了指令的执行速度</td><td>第4、5、6章</td></tr><tr><td>I/O系统（硬件和操作系统）</td><td>决定了I/O操作可能的执行速度</td><td>第4、5、6章</td></tr></tbody></table><br><h3 id="第二部分-计算机系统结构中的8个伟大思想"><a href="#第二部分-计算机系统结构中的8个伟大思想" class="headerlink" title="第二部分 计算机系统结构中的8个伟大思想"></a>第二部分 计算机系统结构中的8个伟大思想</h3><p><img src="8%E5%A4%A7%E4%BC%9F%E5%A4%A7%E6%80%9D%E6%83%B3.png" alt="8大伟大思想"></p><h4 id="2个设计原则"><a href="#2个设计原则" class="headerlink" title="2个设计原则"></a>2个设计原则</h4><p><strong><font color="orange">1、摩尔定律</font></strong></p><p>单芯片上的集成度（单位面积硅片能容纳的晶体管数量）每18个月翻一番</p><p>提出于1965年</p><p>芯片设计要依据设计 <u>完成</u> 时的工艺水平</p><p><strong><font color="orange">2、抽象简化设计</font></strong></p><p>省略低层次的细节，提供简化的模型</p><h4 id="4个提高性能的方法"><a href="#4个提高性能的方法" class="headerlink" title="4个提高性能的方法"></a>4个提高性能的方法</h4><p><strong><font color="orange">3、加速大概率事件</font></strong></p><p>一台计算机绝大部分时间用来打游戏，改进游戏新能还是其他性能更能提高整体性能？</p><p>定量分析：Amdahl定律</p><center>改进后的执行时间 = 改进影响的执行时间 / 改进量 + 改进不影响的执行时间</center><center>t改进 = t相关/S + t无关</center><p><strong><font color="orange">4、通过并行提高性能</font></strong></p><p>同时发生，典型例子是多核处理器</p><p><strong><font color="orange">5、通过流水线提高性能</font></strong></p><p>类比工业中的流水线</p><p><strong><font color="orange">6、通过预测提高性能</font></strong></p><ul><li>预测失误后恢复的代价不高</li><li>预测有相当的准确率则可以猜测哪些操作会发生，并提前开始执行</li></ul><h4 id="存储器层次与冗余"><a href="#存储器层次与冗余" class="headerlink" title="存储器层次与冗余"></a>存储器层次与冗余</h4><p><strong><font color="orange">7、存储器层次</font></strong></p><p>（见第三部分 软硬件接口）</p><p><strong><font color="orange">8、冗余提高可靠性</font></strong></p><p>计算机不仅需要速度快，还需要工作可靠。由于任何一个物理器件都可能失效，因此可以通过使用冗余部件的方式提高系统的可靠性（dependable），冗余部件可以代替失效部件并可以帮助检测错误。</p><p>物理器件的“备胎”，失效了就换上</p><h3 id="第三部分-软硬件基础"><a href="#第三部分-软硬件基础" class="headerlink" title="第三部分 软硬件基础"></a>第三部分 软硬件基础</h3><p><img src="%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80.png" alt="软硬件基础"></p><h4 id="编程语言分类"><a href="#编程语言分类" class="headerlink" title="编程语言分类"></a>编程语言分类</h4><p><strong>机器指令</strong></p><p>000000111100100100101100111111110010</p><blockquote><p> 汇编语言和由它<strong>汇编</strong>出的机器语言一一对应</p></blockquote><p><strong>汇编语言</strong></p><p>指令助记符、寄存器标号</p><p><code>addi $s1, $s1, 1</code></p><blockquote><p>一条高级语言语句可以<strong>编译</strong>出好几条汇编语言</p></blockquote><p><strong>高级语言</strong></p><p>语句接近自然语言，提高了程序的可移植性</p><p><code>cnt = cnt + 1</code></p><p>机器语言依赖于机器，所以被称作低级语言</p><p><u>汇编语言呢？高级语言呢？</u></p><br><h4 id="冯-·-诺依曼结构"><a href="#冯-·-诺依曼结构" class="headerlink" title="冯 · 诺依曼结构"></a>冯 · 诺依曼结构</h4><p>冯 · 诺依曼结构的五大经典部件：</p><p>1、外围的：<strong>输入设备</strong>、<strong>输出设备</strong>，合称I**/O设备**</p><ul><li><p>输入设备：键盘鼠标、扫描仪</p></li><li><p>输出设备：显示器、打印机</p></li><li><p>混合I/O设备：触摸屏、网卡</p></li></ul><p>2、存放程序和数据的：<strong>存储器</strong></p><ul><li><p>缓存cache ~ SRAM            快但是贵，容量很小（3MB）</p></li><li><p>主存/内存 ~ DRAM            比较快也比较贵，容量中等（8 ~ 16GB）</p></li><li><p>辅存/外存/二级存储器        慢但便宜，容量大（基本都是512GB起步）</p></li></ul><p>*只有放入内存的程序才会被CPU执行</p><p>3、组成CPU的两大部件：运算器（数据通路）、控制器</p><br><h4 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h4><p><img src="%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="存储器层次结构"></p><br><h4 id="指令集体系结构"><a href="#指令集体系结构" class="headerlink" title="指令集体系结构"></a>指令集体系结构</h4><p><img src="%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="指令集体系结构"></p><br><h4 id="集成电路制造"><a href="#集成电路制造" class="headerlink" title="集成电路制造"></a>集成电路制造</h4><p><img src="%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E5%88%B6%E9%80%A0.png" alt="集成电路制造.png"></p><br><h3 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h3><p>复习题是用来碎碎念回忆复习的，不是用来写的！</p><p>打*的问题在考试中不太重要或者比较复杂，请酌情跳过</p><ol><li>传统上计算机分为哪三类？后PC时代有哪两类计算机？</li><li>KB、MB、GB之上有哪些存储容量单位？</li><li>*计算机设计的八大伟大思想是什么？</li><li>Amdahl定律公式是什么？</li><li>高级语言经过什么过程变成汇编语言？汇编语言又经过什么变成机器语言？</li><li>冯·诺依曼结构由哪五大基本部件组成？CPU主要有哪两大部件？还有少量的哪个部件？</li><li>存储器层次中，最快贵小的、其次的、最廉价的是什么？分别采用什么技术？</li><li>Intel和苹果的处理器架构不同，是什么东西不同？</li><li>成品率、芯片面积、产量如何影响集成电路（IC）的自造成本？</li></ol><ul><li>传统意义上计算机分为PC、服务器、嵌入式计算机。后PC时代分为个人移动设备（PMD）、仓储规模计算机（WSC）</li><li>TB、PB、EB、ZB、YB</li><li>摩尔定律、抽象简化、加速大概率事件、并行提高、流水线提高性能、预测提高性能、存储器层次、冗余提高可靠性</li><li>改进后的执行时间 = 改进影响的执行时间 / 改进量 + 改进不影响的执行时间</li><li>高级语言经过编译变成汇编语言，汇编语言经过汇编转换为机器语言</li><li>控制器、存储器、运算器、输入\输出设备。CPU主要两大部件为控制器和运算器，还有少量的存储器</li><li>最快最贵最小的是高速缓存cache采用SRAM，其次是内存采用DRAM，辅存采用磁盘或闪存</li><li>Intel和苹果的处理器架构不同，是因为指令集体系结构不同即架构不同</li><li>成品率越高、产量越高、芯片面积越小，芯片的制造成本越低</li></ul><h3 id="第四部分-性能与功耗"><a href="#第四部分-性能与功耗" class="headerlink" title="第四部分 性能与功耗"></a>第四部分 性能与功耗</h3><p><img src="%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8A%9F%E8%80%97.png" alt="性能与功耗.png"></p><h4 id="评价性能的指标"><a href="#评价性能的指标" class="headerlink" title="评价性能的指标"></a>评价性能的指标</h4><p>个人计算机更看重<strong>响应时间（又称执行时间）</strong>：任务从开始到完成的时间</p><p>服务器更看重<strong>吞吐率</strong>：单位时间内完成的人物数量</p><p>课程主要讨论CPU执行时间</p><blockquote><p>性能 = 1 / 执行时间</p></blockquote><p>计算机A的性能是计算机B的几倍？-&gt; 计算机Ade执行时间是B的几分之一？</p><p><font color="grey">e.g. 运行同一个程序，计算机A用15秒，计算机B用10秒，谁的性能更高？它的性能比另外一台高多少？</font></p><p><font color="grey">计算机B的性能更高，B的性能比A高了15/10=1.5</font></p><h4 id="性能的度量"><a href="#性能的度量" class="headerlink" title="性能的度量"></a>性能的度量</h4><ul><li><strong>CPU执行时间：</strong>即CPU时间。它只表示在CPU上花费的时间，而不包括等待I/O或运行其他程序的时间。（包括用户CPU时间和系统CPU时间）</li><li><strong>用户CPU时间：</strong>用于用户程序为用户花费的CPU时间</li><li><strong>系统CPU时间：</strong>操作系统为用户花费的CPU时间</li><li><strong>时钟周期：</strong>也叫tick、clock tick、clock period、clock 或 cycle，为计算机一个时钟周期的时间，通常是处理器时钟，一般为常数</li><li><strong>时钟长度：</strong>每个时钟周期维持的时间长度</li><li>CPU的时钟频率f（主频）：一秒钟有多少个时钟周期。即：T = 1 / f                </li></ul><h4 id="CPU经典性能公式"><a href="#CPU经典性能公式" class="headerlink" title="CPU经典性能公式"></a>CPU经典性能公式</h4><blockquote><p>一个程序的CPU执行时间 = 一个程序的CPU时钟周期数 x 时钟周期时间    CPUtime = cycles * T</p></blockquote><blockquote><p>一个程序的CPU执行时间 = 一个程序的CPU时钟周期数 / 时钟评率</p></blockquote><p><font color="grey">e.g. 某程序在一台时钟频率为2GHz的计算机上运行需要10秒。现在将设计一台计算机B，希望将运行时间缩短为6秒。计算机的设计者采用的方法是提高时钟频率，但这会影响CPU其余部分的设计，使计算机B运行该程序时需要相当于计算机A的1.2倍时钟周期数。那么计算机设计者应该将时钟频率提高到多少？</font></p><p><img src="CPU%E9%A2%91%E7%8E%87%E9%A2%98.png" alt="CPU频率题.png"></p><ul><li><strong>CPI：</strong>每条指令的时钟周期数，表示执行某个程序或程序片断时每条指令所需的时钟周期平均数。</li></ul><blockquote><p>CPU时钟周期数 = 程序的指令数 x 每条指令的平均时钟周期数</p><p>cycles = IC x CPI</p></blockquote><p><img src="%E6%8C%87%E4%BB%A4%E6%80%A7%E8%83%BD%E5%85%AC%E5%BC%8F%E9%A2%98.png" alt="指令性能公式题.png"></p><blockquote><p>CPU 时间 = 指令数 x CPI x 时钟周期时间    CPUtime = IC * CPI * T</p></blockquote><p>或</p><blockquote><p>CPU 时间 = 指令数 x CPI / 时钟频率    CPUtime = IC * CPI / f</p></blockquote><p><font color="gray">e.g. 主频为4GHz的CPU，每个时钟周期的长度是多少秒？某程序共有3亿条指令，其中1亿条的CPI为3，2亿条的CPI为6，整个程序的CPI是多少?该CPU执行这个程序需要多长时间？</font></p><p><img src="%E7%BB%8F%E5%85%B8%E6%80%A7%E8%83%BD%E5%85%AC%E5%BC%8F.png"></p><h4 id="CPU经典性能公式为什么靠谱"><a href="#CPU经典性能公式为什么靠谱" class="headerlink" title="CPU经典性能公式为什么靠谱"></a>CPU经典性能公式为什么靠谱</h4><p>经典性能公式考虑了<strong>指令数IC</strong>、<strong>平均每条指令需要周期数CPI</strong>、<strong>时钟周期长度T（也就是主频 f 的倒数）</strong>全部三个因素</p><p>使用<strong>CPU执行时间</strong>这个靠谱的指标来衡量性能</p><ul><li><p>使用什么<font color="orange">编程语言</font>和<font color="orange">编译程序</font>、采取什么<font color="orange">算法</font>，影响指令数和CPI两个因素</p></li><li><p>采用什么<font color="orange">指令体系结构</font>，影响指令数、CPI、主频全部三个因素</p></li></ul><p>他们都会影响CPU性能</p><p>还有一个衡量性能的指标<font color="orange">MIPS</font>（million instruction per second，百万指令每秒）</p><blockquote><p>MIPS = IC / (CPUtime x 10^6) = f / (CPI x 10^6)</p></blockquote><p>因为只考虑了主频（周期长）和CPI两个指标，很受作者唾弃</p><h4 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h4><p>CMOS（互补型金属氧化半导体）是当前占统治地位的集成电路技术。</p><p>其中，晶体管的能耗主要来自动态能耗，即晶体管打开/关闭的短暂动态过程。</p><p>即 0 -&gt; 1 或 1 -&gt; 0 的过程</p><p>晶体管经历一次 0 -&gt; 1 -&gt; 0 或 1 -&gt; 0 -&gt; 1 的开关过程</p><p>能耗 = 负载电容 x 电压^2</p><p>开关频率与CPU主频相关</p><p>所以，功耗公式为</p><p><img src="%E5%8A%9F%E8%80%97%E5%85%AC%E5%BC%8F.png"></p><h3 id="教材习题"><a href="#教材习题" class="headerlink" title="教材习题"></a>教材习题</h3><p><strong>1.6</strong> 同一个指令集体系结构由两种不同实现。根据CPI不同，将指令分为A、B、C、D四类，P1的时钟频率是2.5GHz，CPI分别为1、2、3、3；P2的时钟评率是3GHz，CPI分别为2、2、2、2</p><p>一个程序有1x10E6条指令，四类指令比例分别为10%，20%，50%，20%</p><p>（1）每种实现的总CPI分别是？</p><p>（2）每种实现的时钟周期数为？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">因为：<span class="attribute">CPI</span>=cycles/IC</span><br><span class="line">P1 CPI = (1<span class="number">*10E6</span><span class="number">*0</span>.1+2<span class="number">*10E6</span><span class="number">*0</span>.2+3<span class="number">*10E6</span><span class="number">*0</span>.5+3<span class="number">*10E6</span><span class="number">*0</span>.2)/1<span class="number">*10E6</span> = 2.6</span><br><span class="line">P2 CPI = (2<span class="number">*10E6</span><span class="number">*0</span>.1+2<span class="number">*10E6</span><span class="number">*0</span>.2+2<span class="number">*10E6</span><span class="number">*0</span>.5+2<span class="number">*10E6</span><span class="number">*0</span>.2)/1<span class="number">*10E6</span> = 2</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU时钟周期数 <span class="operator">=</span> 程序的指令数 <span class="keyword">x</span> 每条指令的平均时钟周期数</span><br><span class="line">即：cycles <span class="operator">=</span> IC <span class="keyword">x</span> CPI</span><br><span class="line">P<span class="number">1</span> cycles <span class="operator">=</span> <span class="number">1</span><span class="keyword">x</span><span class="number">10E6</span> * <span class="number">2.6</span></span><br><span class="line">P<span class="number">2</span> cycles <span class="operator">=</span> <span class="number">1</span><span class="keyword">x</span><span class="number">10E6</span> * <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>1.7 性能公式与加速比</strong></p><p>对同一个程序，编译器A产生1x10E9条指令，执行时间为1.1s；编译器B产生1.2x10E9条指令，执行时间为1.5s</p><p>（1）若处理器时钟周期长度为1ns，求两个编译器产生程序的CPI</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU time = IC * <span class="keyword">CPI</span> * T</span><br><span class="line"></span><br><span class="line"><span class="number">1.1</span>s = <span class="number">1</span>*<span class="number">10E9</span> * A <span class="keyword">CPI</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="number">-9</span></span><br><span class="line">即 A <span class="keyword">CPI</span> = <span class="number">1.1</span></span><br><span class="line"><span class="number">1.5</span>s = <span class="number">1</span>*<span class="number">10E9</span> * B <span class="keyword">CPI</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="number">-9</span></span><br><span class="line">即 B <span class="keyword">CPI</span> = <span class="number">1.25</span></span><br></pre></td></tr></table></figure><p>（2）假设两个程序在不同处理器上运行，且执行时间相同，求：运行编译器A的处理器比运行B的快多少？</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CPUtime = IC * CPI / fs</span><br><span class="line"></span><br><span class="line"><span class="comment">(ICa * CPIa)</span>/fa = <span class="comment">(ICb * CPIb)</span>/fb</span><br><span class="line"></span><br><span class="line">fb/fa = <span class="comment">(ICb * CPIb)</span> / <span class="comment">(ICa * CPIa)</span> = <span class="comment">(1.25 * 1.2*10E9)</span>/<span class="comment">(1.1 * 1*10E9s)</span> = <span class="number">1.37</span></span><br><span class="line"></span><br><span class="line">即运行编译器B比A快<span class="number">1.37</span>倍</span><br></pre></td></tr></table></figure><p>（3）有种新的编译器，只产生6x10E8条指令，CPI平均为1.1，求：这种新编译器相对于编译器A、B的加速比各多少？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ICnew = 6<span class="number">*10E8</span></span><br><span class="line">CPInew = 1.1</span><br><span class="line">cycles new = 6.6<span class="number">*10E8</span></span><br><span class="line"></span><br><span class="line">S spead up = t 改进前/t 改进后</span><br><span class="line">Ta = ICa<span class="number">*C</span>PIa / ICnew<span class="number">*C</span>PInew</span><br><span class="line">   = 1<span class="number">*10E9</span><span class="number">*1</span>.1 / 6.6<span class="number">*10E8</span></span><br><span class="line">   = 1.67</span><br><span class="line">   </span><br><span class="line">Tb = ICb<span class="number">*C</span>PIb / ICnew<span class="number">*C</span>PInew</span><br><span class="line">   = 1.2<span class="number">*10E9</span><span class="number">*1</span>.25 / 6.6<span class="number">*10E8</span></span><br><span class="line">   = 2.27</span><br></pre></td></tr></table></figure><p><strong>1.11.4 1.11.11 性能公式的思想方式</strong></p><p>一台计算机运行SPEC基准测试程序用时750秒</p><p>（1）如果SPEC指令数增加10%，CPI增加5%，则执行时间变为原来的多少倍？</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPU <span class="built_in">time</span> = IC * CPI * <span class="built_in">T</span></span><br><span class="line"> = <span class="number">1.1</span> IC * <span class="number">1.05</span> CPI * <span class="built_in">T</span></span><br><span class="line"> = <span class="number">1.115</span></span><br></pre></td></tr></table></figure><p>（2）指令数不变，如果要在CPI降低15%的情况下，让CPU时间减少20%，时钟频率应该降为原来的多少倍？</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPU <span class="built_in">time</span> = IC * CPI * <span class="built_in">T</span></span><br><span class="line"><span class="number">0.8</span> CPU <span class="built_in">time</span> = IC * <span class="number">0.85</span> CPI * <span class="built_in">T</span></span><br><span class="line">即 <span class="built_in">T</span> = <span class="number">0.8</span>/<span class="number">0.85</span> = <span class="number">16</span>/<span class="number">17</span></span><br></pre></td></tr></table></figure><p><strong>1.14 Amdahl定律</strong></p><p>一个程序有50x10E6条浮点指令、110x10E6条整数指令、80x10E6条L/S指令和16x10E6条分支指令，4种指令的CPI分别是1、1、4、2，CPU时钟频率变为2GHz</p><p>（1）要让程序运行速度提高2倍，浮点指令的CPI应该变为多少</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU time = cycles * T</span><br><span class="line">即 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span></span><br><span class="line">1/2 cycles = 256<span class="number">*10E6</span>，只改变浮点指令CPI，其他指令<span class="attribute">cycles</span>=462*10E6</span><br><span class="line">所以，不能通过改变浮点指令CPI，使程序运行速度提高2倍</span><br></pre></td></tr></table></figure><p>（2）要让程序运行速度提高2倍，L/S指令的CPI应该变为多少</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU time = cycles * T</span><br><span class="line">即 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span></span><br><span class="line">1/2 cycles = 256<span class="number">*10E6</span>，只改变L/S指令的CPI，其他指令<span class="attribute">cycles</span>=320*10E6</span><br><span class="line">320<span class="number">*10E6</span> - 1/2(512<span class="number">*10E6</span>) = 64<span class="number">*10E6</span></span><br><span class="line">(80<span class="number">*10E6</span> * 4) / (64<span class="number">*10E6</span>)  = 5</span><br><span class="line">5/4 = 0.8</span><br></pre></td></tr></table></figure><p>（3）如果整数、浮点指令的CPI降低40%，L/S指令和分支指令的CPI减少30%，程序的执行时间改进多少？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPUtime 改进前 = cycles/f = 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span> / 2<span class="number">*10E9</span> = 0.256s</span><br><span class="line">CPUtime 改进后 = cycles/f = 50x10E6<span class="number">*0</span>.6 + 110x10E6<span class="number">*0</span>.6 + 80x10E6<span class="number">*2</span>.8 + 16x10E6<span class="number">*1</span>.4 = 342.4<span class="number">*10E6</span> / 2<span class="number">*10E9</span> = 0.171s</span><br><span class="line">0.256 - 0.171 = 0.085s</span><br><span class="line">程序改进0.085秒</span><br></pre></td></tr></table></figure><p><strong>1.8 功耗</strong></p><p>奔腾4主频为3.6GHz，工作电压为1.25V，平均静态功耗为10W，动态功耗90W；酷睿i5主频为3.4GHz，工作电压为0.9V，平均静态功耗为30W，动态功耗40W。</p><p>两个处理器的平均负载电容分别是？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">P = 1/2<span class="emphasis">*CU^2 *</span> f</span><br><span class="line"></span><br><span class="line">90w = 1/2 <span class="emphasis">* C *</span> 1.25^2 <span class="emphasis">* 3.6*</span>10E9</span><br><span class="line">即奔腾4的负载电容为：3.2<span class="emphasis">*10^-8(F)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">40w = 1/2 *</span> C <span class="emphasis">* 0.9^2 *</span> 3.4<span class="emphasis">*10E9</span></span><br><span class="line"><span class="emphasis">即酷睿i5的负载电容为：2.9*</span>10^-8(F)</span><br></pre></td></tr></table></figure><h3 id="四川大学期末习题"><a href="#四川大学期末习题" class="headerlink" title="四川大学期末习题"></a>四川大学期末习题</h3><p><strong>1、下面哪种处理器不是采用RISC指令系统（D）</strong></p><p>A. 华为麒麟处理器</p><p>B. 高通845 处理器</p><p>C. MIPS 处理器</p><p>D. Intel 处理器</p><p><strong>2、下面关于CPI的说法，错误的是（A）</strong></p><p>A. 多周期CPU比单周期CPU的CPI大，因此单周期CPU更快</p><p>B. 同一台机器中运行不同的程序CPI不一定相同</p><p>C. MIPS单周期CPU各种指令的CPI是相同的</p><p>D. MIPS多周期CPU访存指令CPI比R-type型指令CPI大</p><p><strong>3、下列哪一项和CPU的运算速度关系不大（D）</strong></p><p>A. CPU主频    B. MIPS    C. CPI    D. 主存频率</p><p><strong>4、将指令从符号码翻译成二进制码的程序（A）</strong></p><p>A. 汇编器    B. 编译器    C. 链接器    D. 加载器</p><p><strong>5、同一个程序，在同一台计算机的CPU超频前和超频后运行，假设内存的访问速度不变，超频前和超频后CPI对比应该是（B）</strong></p><p>注：CPU超频是指增大CPU的时钟频率</p><p>A. 超频前的CPI大</p><p>B. 超频后的CPI大</p><p>C. 一样大</p><p>D. 不确定</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">超频后，内存的访问速度不变，等待内存的时间长度相同，但是把时钟周期分的更小了，所以有了更多浪费掉的周期，所以引起了整个的<span class="keyword">CPI</span>增大</span><br></pre></td></tr></table></figure><p><strong>6、某处理器执行某一段程序，该程序包含三类指令，其中运算指令120条，访存指令60条，分支指令20条，各类指令的CPI分别为5、10和2。请计算执行这段程序的平均CPI</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPI = 总cycles / 总IC </span><br><span class="line">= (120\*5<span class="string">+60</span>\*10<span class="string">+20</span>*2) / (120<span class="string">+60</span><span class="string">+20</span>) </span><br><span class="line">= 6.2 </span><br></pre></td></tr></table></figure><p><strong>7、编译程序对一个应用在给定的处理器上的性能有极深的影响。假定一个程序，如果采用编译程序A，则动态指令数为1.0x10^9，执行时间为1.5s；如果采用编译程序B，则动态指令数为1.5x10^9，执行时间为2.1s。若该处理器的时钟周期为1ns，请分别求出每种编译程序下的平均CPI</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CPUtime</span> = IC * CPI * T</span><br><span class="line">CPI <span class="attr">A</span> = CPUtime / IC * <span class="attr">T</span> </span><br><span class="line">= <span class="number">1.5</span> / <span class="number">1</span>*<span class="number">10</span>^<span class="number">9</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="attr">-9</span></span><br><span class="line">    = <span class="number">1.5</span></span><br><span class="line">CPI <span class="attr">B</span> = CPUtime / IC * <span class="attr">T</span></span><br><span class="line">= <span class="number">2.1</span> / <span class="number">1.5</span>*<span class="number">10</span>^<span class="number">9</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="attr">-9</span></span><br><span class="line">= <span class="number">1.4</span></span><br></pre></td></tr></table></figure><blockquote><p>转自：B站翼云</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在读完本书后，我们能够理解以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用C或Java等高级语言编写的程序如何翻译成硬件之间的语言？硬件如何执行程序？&lt;/p&gt;
&lt;p&gt;领会这些概念是理解软硬件两者如何影响程序性能的基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是软硬件之间的接口，以及软件如何指导硬件完成其功能？&lt;/p&gt;
&lt;p&gt;这些概念对于许多软件的编写十分重要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哪些因素决定了程序的性能？程序员如何才能改进程序性能？&lt;/p&gt;
&lt;p&gt;从本书中我们将知道，程序性能取决于原始程序、将该程序转换为计算机语言的软件以及执行该程序的硬件的有效性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么技术可供硬件设计者用于改进性能？&lt;/p&gt;
&lt;p&gt;本书将介绍现代计算机设计的基本概念。有感兴趣的读者可深入阅读另一本进阶教材《Computer Architecture: A Quantitative Approach》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;硬件设计者可使用那些技术提高能效？什么技术可供程序员提高或降低能效？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么串行处理近来发展为并行处理？这种发展带来的结果是什么？&lt;/p&gt;
&lt;p&gt;本书给出了解释，并介绍了当今支持并行处理的硬件机制，全面评述了新一代的多核微处理器（multicore microprocessor）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自1951年的第一台商用计算机开始，计算机架构师们提出的哪些伟大思想构成了计算机的基础？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="计算机组成与设计" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>卡拉马佐夫兄弟</title>
    <link href="http://example.com/2022/10/20/%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F/"/>
    <id>http://example.com/2022/10/20/%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F/</id>
    <published>2022-10-20T14:48:52.000Z</published>
    <updated>2022-10-20T14:50:49.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自<a href="https://www.zhihu.com/people/liu-zhao-11-41">虫虫</a></p></blockquote><p>1881年2月9日，就在陀思妥耶夫斯基执笔创作的时候，发生了一个小小的意外，或许根本算不上一个意外——他的的笔筒掉在了地上，然后滚到了书桌下面，于是他起身搬动书桌，然而，这成为了他生前的最后一个动作，在他搬动书桌的时候，突然由于用力过猛导致血管破裂，饱受病痛困扰的他永远地倒在了这次意外之中，而书桌上，还放着他未完成的遗作，就是这部《卡拉马佐夫兄弟》。</p><p>尽管陀思妥耶夫斯基最后的这部作品没有完成，但仍然是一部世界性的巨著，甚至把它称为人类历史上最伟大的小说也不为过，引用一句有些俗套的评价——任何语言都不足以形容这部作品的伟大。</p><span id="more"></span><p><strong>陀思妥耶夫斯基在《卡拉马佐夫兄弟》中显然比其它几部作品走得更远，可以视为其集大成之作，无论是《罪与罚》当中“到美国去”这条未能付诸实践的解脱之路，还是《白痴》中梅诗金公爵对周围环境徒然无力的感化，都在这本书中得到了延续。</strong></p><p><strong>不仅如此，陀思妥耶夫斯基笔下的社会往往充满罪恶感，擅于揭露人性中丑陋的一面，但是在这部作品当中，他表现出了自己最大的善意。</strong></p><p>《卡拉马佐夫兄弟》的故事并不复杂：老卡拉马佐夫贪财好色，只顾自己的享受而完全不顾及三个儿子的生活，导致三个儿子性格迥异。老大德米特里由于财产问题争得不可开交，甚至因为一个女子和父亲争风吃醋，到处扬言要杀死父亲。老二伊万是一个无神论者，他的思想最为激进，自己也饱受这方面的煎熬乃至被刺激到发疯。小儿子阿辽沙则简直是圣洁的化身，包括父亲在内的所有人都不可避免地被他吸引从而产生好感。一家人之间矛盾重重，最后终于因为长子德米特里和父亲矛盾激化，在情绪激动之下试图杀掉父亲，造成了一件使全俄罗斯震动并且扑朔迷离的“弑父案”。</p><h2 id="卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。"><a href="#卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。" class="headerlink" title="卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。"></a>卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。</h2><p>提起卡拉马佐夫一家，很多读者想到的是由书中青年拉基津之口所说的几个特性——好色、贪财、疯癫。<strong>但是另一面，卡拉马佐夫一家还有两个更重要的特征，就是智慧以及理性和原始欲望的碰撞。</strong></p><p>关于智慧，这一家人都在不同领域表现出了自己异于常人的地方，这在作品中有过多次描写。</p><p>老卡拉马佐夫对于赚钱有着灵敏嗅觉，并且善于察言观色，他在委托伊万去切尔马什尼亚办理树林采伐权之前的嘱咐尤为明显，<strong>他叮嘱伊万通过对方胡子抖动这个细节来判断对方是否说谎的细节可以说是神来之笔，这正是现在心理学上流行的“微反应”最直接的体现。</strong></p><p>伊万的智慧在小说中体现得最为明显，他不仅是一位受人尊敬的饱学之士，更是一位敢于和宗教直接对峙的无神论者，伊万可以看作是陀思妥耶夫斯基对宗教质疑的代言人，其在《宗教大法官》一章中的论述是整部作品的关键所在，甚至有很多读者认为伊万才是整部作品的灵魂人物。著名诺贝尔文学奖获得者阿尔贝·加缪在他的《西西弗神话》一书中就多次提及伊万，对这个人物进行了重要阐释，他认为伊万最具有卡拉马佐夫震摄人心的特质，而<strong>伊万的悲剧在于试图找到上帝以外的另一条路来爱别人，可惜的是，伊万没有具体的所爱对象，这种爱的情感因为无法被表达而被世界否定，以至于伊万最终毁灭了自己。</strong></p><p>阿辽沙的智慧在于他悲天悯人，他深受佐西玛长老和基督教的影响，是卡拉马佐夫一家中最具“神性”的人物，虽然作品未完成，对阿辽沙的塑造也没有完全展开，但是这并不妨碍阿辽沙这个角色本身的感化能力。<strong>在纯洁的孩子面前，阿辽沙就是天使的化身,小说结尾处阿辽沙在葬礼上对孩子们的演讲是升华之处，完全可以看做是陀思妥耶夫斯基对人类充满善意的期待。</strong></p><blockquote><p>要知道，最崇高的精神力量，在今后的生活中对身心最有益的感受，莫过于某种美好的回忆，尤其是童年时代从故乡故居保留下来的回忆。关于你们的教育问题人们经常向你们谈起，而某一段从童年时代保留下来的美好而神圣的回忆或许正是最好的教育。如果能带着很多这样的回忆走向生活，这个人便可终生得救</p></blockquote><p>而在长子德米特里身上，我们能深切地体会到理性和原始欲望碰撞产生的的矛盾，<strong>德米特里的形象看似歇斯底里，有着和其父一样好色和贪财的缺点，但德米特里其实更像是父亲之恶、阿辽沙之善以及伊万之理性结合而成的矛盾体。</strong>他一方面纠结于格露莘卡和卡捷琳娜两位女子的感情纠缠，一方面深陷于父亲死后被判是否有罪的泥潭，在这一波三折的冲突当中，他的感情迸发非常强烈。</p><p>著名法国作家安德烈·纪德曾<strong>把陀思妥耶夫斯基作品中的人物心灵分成了三个层面：智力区，这里滋生最坏的诱惑；情感区，激情泛滥；深层区，是智力和激情触及不到的，也可叫做复活区。如果照此来看，卡拉马佐夫三兄弟正好可以一一对应，伊万处在智力区，德米特里处在情感区，而阿辽沙则处在了深层区。</strong>当然，三个层面并无高低之分，彼此间的界限也没有那么明显。</p><p><strong>在对卡拉马佐夫三兄弟做了简要分析之后，下面来看关于文章标题的对应部分，陀思妥耶夫斯基在这部作品当中所表达出来的善意。</strong></p><h2 id="能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。"><a href="#能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。" class="headerlink" title="能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。"></a>能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。</h2><p>一个葱头的故事出自于小说女主人公格露莘卡之口：一个恶毒的老太婆一生之中只做了一件微不足道的好事，就是将一个葱头给了女乞丐，于是在她死后到了地狱以后，上帝便将这个葱头给她当作逃出地狱火坑的唯一希望。老太婆抓住这个救命稻草拼尽全力向上爬，就在即将逃离火坑的时候，地狱中的其他罪人看到以后纷纷拉住老太婆想一起逃出，凶恶的老太婆用脚将别人踢开，妄想自己一个人爬出去，结果葱头马上断了，她被永远地留在了地狱忍受煎熬。</p><p>这个故事被日本著名作家芥川龙之介改编成了短篇小说《蛛丝》，两个故事有异曲同工之妙，<strong>一个葱头和蜘蛛之丝之所以不能使人得到解脱，不在于它们本身的承受力，而在于每个人心底是否存在善意，无论葱头还是蛛丝都是因为善意而生，同样又因为恶念而消亡。</strong></p><p>一斤榛子则是关于卡拉马佐夫家族长子德米特里的经历，在德米特里年幼的时候，由于父亲缺乏关爱而食不果腹、衣不蔽体，本地的一个医生看到可怜的小德米特里之后便给他买了一斤榛子，这对一个肚饿的小孩子来说简直是最珍贵的礼物，而德米特里也始终心怀感激之心，在长大成人之后专门去已经年老的医生家中致敬表示谢意，这件小事也给被指控犯了弑父罪的德米特里赢得了众人的好感。</p><p><strong>一斤榛子和一个葱头同样微不足道，然而两者却展现出了两种不同的力量，葱头之所以被毁灭和榛子之所以能够救赎其实质殊途同归，陀思妥耶夫斯基通过这两件小事表现出了对人类善意的鼓励。</strong></p><h2 id="《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们"><a href="#《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们" class="headerlink" title="《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们"></a>《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们</h2><p>陀思妥耶夫斯基在这部遗作当中，用了相当大的篇幅来描写关于孩子的场景。</p><p>在伊万和阿辽沙关于《宗教大法官》的那次谈话当中，伊万给阿辽沙描述了多种人类对孩子所犯下的罄竹难书的“兽行”，给了阿辽沙极大冲击。阿辽沙本人自始至终都非常喜欢孩子并且深受孩子们喜爱，伊万的这次谈话给阿辽沙带来的，正是社会上关于孩子们最阴暗但是真实存在的一面。</p><blockquote><p>将军吩咐把男孩的衣服脱光，可怜他浑身发抖，吓得魂飞魄散，一声也不敢吱。这时将军下令：‘赶他跑。’狗夫们便冲他大叫：‘快跑，快跑！’那孩子便开始跑……只听得将军大喝一声：‘给我追！’——指挥所有的猎犬向小男孩冲去。母亲眼睁睁看着一大群狗把她的孩子撕成碎片！</p></blockquote><p><strong>陀思妥耶夫斯基把这些血淋淋的事实摆在作品当中，目的当然是为了做出警示——如果这个世界连对孩子都不能表达出起码的善意，那这个世界一切所谓的“善行”又有什么意义。</strong></p><p>小说中另一个关于孩子的重点描写是伊柳沙的葬礼，这部分每次读起来都让人潸然泪下。伊柳沙是一个自小疾病缠身的孩子，家庭的贫困更是让他的病情雪上加霜，而在他父亲受到侮辱之后他的心灵也遭到了不可挽回的摧残，故事的结尾，伊柳沙不出意外的去世了。</p><p><strong>伊柳沙的去世自然让读者悲痛万分，但不可忽略的是，陀思妥耶夫斯基在这里仍然给了我们很大安慰，也传达出了他最后的善意。</strong>这个善意的发起者，正是阿辽沙和一群孩子。</p><p>前文已经说过，阿辽沙是孩子们心中的天使，而孩子们正是受到了阿辽沙的感化才竭尽自己所能给了病危的伊柳沙最后陪伴，他们想尽办法让伊柳沙开心，在伊柳沙离开以后做出承诺照顾他的家人，并且做出了最重要的承诺：<strong>永远不会忘记他给我们生活带来过的美好，这或许是对一个死者最好的怀念。</strong></p><blockquote><p>不管我们会变得多么狠毒——但愿上帝保佑，别让我们走到这一步！——但只要我们回忆起我们曾为伊柳沙送葬，在他最后的一些日子里我们是多么爱他，此刻在这块大石头旁边，我们曾这样聚在一起友好交谈，——那么，即便是我们中间最狠毒、最好挖苦的人（如果我们变成那样的话），他在自己心里毕竟不敢嘲笑自己此时此刻曾经那么善良、那么仁爱。</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>《卡拉马佐夫兄弟》这部作品所表达的东西远不止上述所言，除此之外，陀思妥耶夫斯基对于人性以及宗教的探讨也格外深入，他的作品就像是一面面审视现实的镜子，无论多么细微或者深层之处在它的反射之下都无法隐匿。正如鲁迅所言：“陀思妥耶夫斯基是人类灵魂的伟大审问者”。</p><p><strong>这篇文章之所以选取“善意”这个角度作为切入点，也是为了想提醒热爱陀思妥耶夫斯基的读者，他不仅仅揭示了人性当中最深处的罪恶和丑陋，塑造了一个个充满悲剧的人生，也在传递着他对这个世界的善意和爱。</strong></p><p>最后用德国著名作家赫尔曼·黑塞的评价来结束这篇文章，相信这也是很多读者喜欢陀思妥耶夫斯基作品的原因：</p><blockquote><p>我们之必须阅读陀思妥耶夫斯基，只是在我们遭受痛苦不幸，而我们承受痛苦的能力又趋于极限之时，只是在我们感到整个生活有如一个火烧火燎、疼痛难忍的伤口之时，只是在我们充满绝望、经历无可慰藉的死亡之时。当我们孤独苦闷，麻木不仁地面对生活时，当我们不再能理解生活那疯狂而美丽的残酷，并对生活一无所求时，我们就会敞开心扉去聆听这位惊世骇俗、才华横溢的诗人的音乐。这样，我们就不再是旁观者，不再是欣赏者和评判者，而是与陀思妥耶夫斯基作品中所有受苦受难者共命运 的兄弟，我们承受他们的苦难，并与他们一道着魔般地、駸駸乎投身于生活的旋涡，投身于死亡的永恒碾盘。只有当我们体验到陀思妥耶夫斯基那令人恐惧的常常像地狱般的世界的奇妙意义，我们才能听到他的音乐和飘荡在音乐中的安慰和爱。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;https://www.zhihu.com/people/liu-zhao-11-41&quot;&gt;虫虫&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1881年2月9日，就在陀思妥耶夫斯基执笔创作的时候，发生了一个小小的意外，或许根本算不上一个意外——他的的笔筒掉在了地上，然后滚到了书桌下面，于是他起身搬动书桌，然而，这成为了他生前的最后一个动作，在他搬动书桌的时候，突然由于用力过猛导致血管破裂，饱受病痛困扰的他永远地倒在了这次意外之中，而书桌上，还放着他未完成的遗作，就是这部《卡拉马佐夫兄弟》。&lt;/p&gt;
&lt;p&gt;尽管陀思妥耶夫斯基最后的这部作品没有完成，但仍然是一部世界性的巨著，甚至把它称为人类历史上最伟大的小说也不为过，引用一句有些俗套的评价——任何语言都不足以形容这部作品的伟大。&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>软件评测师试题</title>
    <link href="http://example.com/2022/10/16/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/10/16/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E8%AF%95%E9%A2%98/</id>
    <published>2022-10-16T14:11:27.000Z</published>
    <updated>2022-10-16T15:58:45.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="模拟题1"><a href="#模拟题1" class="headerlink" title="模拟题1"></a>模拟题1</h3><ol><li>最适合数字加减运算的是<font color="orange">补码</font>，最适合表示浮点数阶码的编码是<font color="orange">移码</font></li><li>主存容量16MB，按字节编址，表示该主存地址至少需要<font color="orange">24</font>位。</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">16MB</span> = <span class="number">16</span> * <span class="number">1024</span>KB = <span class="number">2</span>^<span class="number">4</span> * <span class="number">1024</span>B * <span class="number">1024</span>B = <span class="number">2</span>^<span class="number">4</span> * <span class="number">2</span>^<span class="number">10</span> * <span class="number">2</span>^<span class="number">10</span> = <span class="number">2</span>^<span class="number">24</span>B</span><br></pre></td></tr></table></figure><ol start="3"><li><p>操作数所处的位置，可以决定指令的寻址方式。操作数包含在指令中，寻址方式为 <font color="orange">立即寻址</font>；</p><p>操作数在寄存器中，寻址方式为<font color="orange">寄存器寻址</font>；</p><p>操作数的地址在寄存器中，寻址方式为<font color="orange">寄存器间接寻址</font> 。 </p><span id="more"></span></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定操作数或操作数存放位置的方式称为寻址方式</span><br></pre></td></tr></table></figure><p><img src="%E6%93%8D%E4%BD%9C%E6%95%B0%E6%89%80%E5%9C%A8%E5%9C%B0%E5%9D%80%E7%9A%847%E7%A7%8D%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.png" alt="操作数所在地址的7种寻址方式"></p><center><small>操作数所在地址的7种寻址方式</small></center><blockquote><p>寻址方式参考：<a href="https://blog.csdn.net/weixin_42562387/article/details/114433665">https://blog.csdn.net/weixin_42562387/article/details/114433665</a></p></blockquote><h4 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h4><p>操作数包含在指令中，紧跟着操作码并与操作码一起存放在代码段中，与代码一起被取入CPU的指令队列，指令执行时不需要到其他地址单元中去取。<br>立即寻址中的操作数可以是计算机有效数制下的数值，也可以是带单引号的字符。这种寻址方式主要用于给寄存器或存储单元赋初值的场合。</p><p><strong>立即寻址方式是这七种寻址方式中速度最快的寻址方式。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ah,80h             ;8位</span><br><span class="line">mov ax,1234h           ;16位</span><br><span class="line">mov eax,12345678h      ;32位</span><br></pre></td></tr></table></figure><h4 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h4><p>操作数在CPU内部的寄存器中，在指令中指定寄存器号。需要注意的是:<strong>源操作数与目的操作数字长要相同</strong></p><ol><li>源操作数是寄存器</li></ol><blockquote><p>ADD VARD,EAX; VARD是双字类型变量</p></blockquote><ol><li>目的操作数是寄存器</li></ol><blockquote><p>ADD BH, 78h;</p></blockquote><ol><li>源和目的操作数都是寄存器</li></ol><blockquote><p>MOV EAX, EBX;</p></blockquote><h4 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h4><p>操作数存放在内存中，在指令中直接给出该操作数的有效地址，这种寻址方式为直接寻址方式。</p><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p>操作数在存储器中，操作数的有效地址用SI、DI、BX和BP等四个寄存器之一来指定，称这种寻址方式为寄存器间接寻址方式。</p><p>规定：在不使用段超越前缀的情况下</p><p>若有效地址用SI、DI和BX等之一来指定，则其缺省的段寄存器为DS；<br>若有效地址用BP来指定，则其缺省的段寄存器为SS(即：堆栈段)。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;模拟题1&quot;&gt;&lt;a href=&quot;#模拟题1&quot; class=&quot;headerlink&quot; title=&quot;模拟题1&quot;&gt;&lt;/a&gt;模拟题1&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;最适合数字加减运算的是&lt;font color=&quot;orange&quot;&gt;补码&lt;/font&gt;，最适合表示浮点数阶码的编码是&lt;font color=&quot;orange&quot;&gt;移码&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;主存容量16MB，按字节编址，表示该主存地址至少需要&lt;font color=&quot;orange&quot;&gt;24&lt;/font&gt;位。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;16MB&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;KB = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;B * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;B = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;p&gt;操作数所处的位置，可以决定指令的寻址方式。操作数包含在指令中，寻址方式为 &lt;font color=&quot;orange&quot;&gt;立即寻址&lt;/font&gt;；&lt;/p&gt;
&lt;p&gt;操作数在寄存器中，寻址方式为&lt;font color=&quot;orange&quot;&gt;寄存器寻址&lt;/font&gt;；&lt;/p&gt;
&lt;p&gt;操作数的地址在寄存器中，寻址方式为&lt;font color=&quot;orange&quot;&gt;寄存器间接寻址&lt;/font&gt; 。 &lt;/p&gt;</summary>
    
    
    
    <category term="软件测试" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试基本理论" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>监控docker容器状态脚本</title>
    <link href="http://example.com/2022/10/13/%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2022/10/13/%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E8%84%9A%E6%9C%AC/</id>
    <published>2022-10-13T14:51:39.000Z</published>
    <updated>2022-10-13T15:01:51.030Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>使用前先要修改的内容</strong></p><ol><li><p>更改<code>server_log_path</code> 存储路径，该路径是存储监控内容的总路径 </p></li><li><p>修改<code>server_array</code> 数组值，修改成要监控的docker容器名称</p></li><li><p>同步修改calc.sh文件第13行 <code>printf &#39;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&#39;</code></p></li></ol><p><strong>使用方法</strong></p><ol><li><p>执行 calc.sh 文件</p></li><li><p>输入要监控的容器名称，**数字间空格分开。如: 0 2 3 **</p></li><li><p>输入监控的时长<strong>只能输入数字</strong></p><p><strong>注意1: calc.py 和 calc.sh</strong> <strong>要在同一个目录下</strong></p><p><strong>注意2: 请使用管理员用户执行该脚本，否则需要修改脚本中docker status，给其添加权限</strong></p></li></ol><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line">date_time=`date &quot;+%Y_%m_%d_%H-%M-%S&quot;`</span><br><span class="line">server_log_path=/home/dengyuanjing/docker/test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始服务数组</span></span><br><span class="line">server_array=(&quot;Freeswitch&quot; &quot;dialer&quot; &quot;PNLP&quot; &quot;MRCP&quot; &quot;VCG_TTS&quot; &quot;ptts_cloud&quot; &quot;VCG&quot; &quot;PSTT&quot;)</span><br><span class="line"></span><br><span class="line">echo &quot;-----------------------------------------------------------------------------------------------&quot;</span><br><span class="line">echo &quot;生成的目录名称是：$date_time&quot;</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">printf &#x27;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&#x27;</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">read -p &quot;请输入要监控的服务序号(空格分隔)：&quot; number</span><br><span class="line">read -p &quot;请输入要监控的时长(分钟)：&quot; server_time</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取用户输入的长度（不包括空格）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> num=`<span class="built_in">echo</span> <span class="variable">$number</span> | awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;print NF&#125;&#x27;</span>`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户指定要监控的数组</span></span><br><span class="line">select_array=()</span><br><span class="line"></span><br><span class="line">for i in $&#123;number[@]&#125;</span><br><span class="line">do</span><br><span class="line">    select_array[$&#123;#select_array[@]&#125;]=$&#123;server_array[$i]&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;您所选择的监控有：$&#123;select_array[@]&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用下面命令生成1.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker stats dialer &gt; dialer.txt</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存放<span class="built_in">log</span>的路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">LOG_PATH=/home/dengyuanjing/docker/<span class="built_in">test</span>/<span class="variable">$date_time</span>/<span class="variable">$server</span>/</span></span><br><span class="line">PID_array=()</span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    mkdir -p $log_path</span><br><span class="line">    log_result_path=$log_path/result</span><br><span class="line">    mkdir -p $log_result_path</span><br><span class="line">    # 后台监控docker进程</span><br><span class="line">    nohup docker stats $server &gt; $log_path/$server.txt 2&gt;&amp; 1 &amp;</span><br><span class="line">    # 将各个服务的进程号记录的数组中</span><br><span class="line">    PID_array[$&#123;#PID_array[@]&#125;]=$!</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出PID_array的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ps -ef | grep <span class="string">&quot;docker stats dialer&quot;</span></span></span><br><span class="line">for i in $&#123;PID_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo &quot;所监控的进程ID为：$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sleep $&#123;server_time&#125;m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> 掉监控进程</span></span><br><span class="line">for server_PID in $&#123;PID_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    kill -9 $server_PID</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sleep 1m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 过滤docker监控的文本</span></span><br><span class="line"></span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    log_result_path=$log_path/result/</span><br><span class="line">    #echo &quot;现在要过滤的server名称为：$server&quot;</span><br><span class="line">    #echo &quot;路径为：$log_path/$server.txt&quot;</span><br><span class="line">    # 1.过滤出Container ID</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;NR==2 &#123;print $1&#125;&#x27; | grep -v CONTAINER &gt; CONTAINER.log</span><br><span class="line">    # 2.过滤出容器名</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;NR==2 &#123;print $2&#125;&#x27; &gt; CONTAINER_NAME.log</span><br><span class="line">    # 3.过滤出CPU</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $3&#125;&#x27; | grep -v NAME &gt; CPU_Usage.log</span><br><span class="line">    # 4.过滤出使用内存</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $4&#125;&#x27; | grep -v CPU &gt; MEM_Usage.log</span><br><span class="line">    # 5.过滤出内存占比</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $7&#125;&#x27; | grep -v USAGE &gt; MEM_Rate.log</span><br><span class="line">    # 6.过滤出发送数据量Net I</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $8&#125;&#x27; | grep -v USAGE |grep -v / &gt; NET_input.log</span><br><span class="line">    # 7.过滤出接受数据量Net O</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $10&#125;&#x27; | grep -v USAGE |grep -v &#x27;MEM&#x27; &gt; NET_output.log</span><br><span class="line">    # 8.过滤出块读取数据量Block </span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $11&#125;&#x27; | grep -v &quot;%&quot; &gt; Block_input.log</span><br><span class="line">    # 9.过滤出块写入数据量Block O</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $13&#125;&#x27; | grep -v &quot;I/O&quot; &gt; Block_output.log</span><br><span class="line">    # 10.过滤出容器线程数Pids</span><br><span class="line">    # PIDS=cat $log_path/$server.txt |awk &#x27;&#123;print $14&#125;&#x27; | grep -v &quot;BLOCK&quot;</span><br><span class="line"></span><br><span class="line">    # 将日志移入LOG_PATH下</span><br><span class="line">    mv CONTAINER.log $log_result_path</span><br><span class="line">    mv CONTAINER_NAME.log $log_result_path</span><br><span class="line">    mv CPU_Usage.log $log_result_path</span><br><span class="line">    mv MEM_Usage.log $log_result_path</span><br><span class="line">    mv MEM_Rate.log $log_result_path</span><br><span class="line">    mv NET_input.log $log_result_path</span><br><span class="line">    mv NET_output.log $log_result_path</span><br><span class="line">    mv Block_input.log $log_result_path</span><br><span class="line">    mv Block_output.log $log_result_path</span><br><span class="line">    </span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算</span></span><br><span class="line"></span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    log_result_path=$log_path/result/</span><br><span class="line">    python3 calc.py $log_result_path $server</span><br><span class="line"></span><br><span class="line">    # 打印</span><br><span class="line">    sleep 5</span><br><span class="line">    log_result_path=$log_path/result</span><br><span class="line">    cat $log_result_path/calc.txt</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    设置读取的文本路径</span></span><br><span class="line"><span class="string">    1.cpuUsagePath</span></span><br><span class="line"><span class="string">    2.memUsagePath</span></span><br><span class="line"><span class="string">    3.memRatePath</span></span><br><span class="line"><span class="string">    4.netInputPath</span></span><br><span class="line"><span class="string">    5.netOutputPath</span></span><br><span class="line"><span class="string">    6.blockInputPath</span></span><br><span class="line"><span class="string">    7.blockOutputPath</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">server = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="comment">#print(&quot;============================================================&quot;)</span></span><br><span class="line"><span class="comment">#print(PATH)</span></span><br><span class="line">cpuUsagePath = PATH+<span class="string">&#x27;CPU_Usage.log&#x27;</span></span><br><span class="line">memUsagePath = PATH+<span class="string">&#x27;MEM_Usage.log&#x27;</span></span><br><span class="line">memRatePath = PATH+<span class="string">&#x27;MEM_Rate.log&#x27;</span></span><br><span class="line">netInputPath = PATH+<span class="string">&#x27;NET_input.log&#x27;</span></span><br><span class="line">netOutputPath = PATH+<span class="string">&#x27;NET_output.log&#x27;</span></span><br><span class="line">blockInputPath = PATH+<span class="string">&#x27;Block_input.log&#x27;</span></span><br><span class="line">blockOutputPath = PATH+<span class="string">&#x27;Block_output.log&#x27;</span></span><br><span class="line">arrayPath = [cpuUsagePath, memUsagePath, memRatePath, netInputPath, netOutputPath, blockInputPath, blockOutputPath]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_calc</span>():</span></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(server+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%s\t%s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.calc 函数接收两个参数，一个是shell过滤后的值的单位，一个是shell过滤后的数组</span></span><br><span class="line"><span class="string">    2.calc 仅接受排序后的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">unit,array,server,listName</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 90/95/99百分率计算</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = array[-<span class="number">1</span>]</span><br><span class="line">    mixValue = array[<span class="number">0</span>]</span><br><span class="line">    averageValue = <span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = array[math.ceil(num_count*a1)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = array[math.ceil(num_count*a2)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = array[math.ceil(num_count*a3)]</span><br><span class="line"></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s%s%s%s\t %.2f %.2f %.2f %.2f %.2f %.2f\n&quot;</span> %(listName,<span class="string">&quot;(&quot;</span>,unit,<span class="string">&quot;)&quot;</span>,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于分离出unit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line"><span class="string">    1.循环列表</span></span><br><span class="line"><span class="string">    2.打印要计算的列表的名称，如：CPU_Usage、MEM_Usage</span></span><br><span class="line"><span class="string">    3.读取该路径文件</span></span><br><span class="line"><span class="string">    4.按照read_file()分离出来的unit，添加数组元素</span></span><br><span class="line"><span class="string">    5.送入calc()计算</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    <span class="comment"># 分割出每个log中的单位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arrayPath:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            firstLine = f.readline()</span><br><span class="line">            <span class="comment"># 正则匹配非数字的最后一位，即单位</span></span><br><span class="line">            pattern_value = re.findall(<span class="string">r&#x27;\D+&#x27;</span>,firstLine)</span><br><span class="line">            unit = pattern_value[-<span class="number">1</span>]</span><br><span class="line">            unit = unit.split()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print(&#x27;-------------------------------------单位为：&#x27;+unit)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line">        listName = i.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        listName = listName.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print()</span></span><br><span class="line">        <span class="comment">#print(listName)</span></span><br><span class="line">        <span class="comment">#print(type(listName))</span></span><br><span class="line">        array = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                lineValue = line.split(unit)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    array.append(<span class="built_in">float</span>(lineValue))</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;加入列表进行计算的值格式有误!&quot;</span>)</span><br><span class="line">        array.sort()</span><br><span class="line">        calc(unit,array,server,listName)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    write_calc()</span><br><span class="line">    read_file()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;使用前先要修改的内容&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;更改&lt;code&gt;server_log_path&lt;/code&gt; 存储路径，该路径是存储监控内容的总路径 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;server_array&lt;/code&gt; 数组值，修改成要监控的docker容器名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步修改calc.sh文件第13行 &lt;code&gt;printf &amp;#39;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;使用方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;执行 calc.sh 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入要监控的容器名称，**数字间空格分开。如: 0 2 3 **&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入监控的时长&lt;strong&gt;只能输入数字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意1: calc.py 和 calc.sh&lt;/strong&gt; &lt;strong&gt;要在同一个目录下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意2: 请使用管理员用户执行该脚本，否则需要修改脚本中docker status，给其添加权限&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>你当像鸟飞往你的山</title>
    <link href="http://example.com/2022/10/10/%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/"/>
    <id>http://example.com/2022/10/10/%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/</id>
    <published>2022-10-10T14:14:46.000Z</published>
    <updated>2022-10-10T14:15:56.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>《你当像鸟飞往你的山》刚看到这个名字的时候，我以为是回归本心，或是久别重逢，却没想到是通过教育来认识世界，从而坚持自我。</p><p>这也正印证了英文的标题《Educated》</p><p>塔拉的家庭无疑是一个偏激的摩门家庭——父母不信任政府、不参与涉及关于政府的任何工作、从不去医院治疗、他的孩子也从不上学。</p><p>直接原因应该是：<strong>韦恩家事件</strong></p><p>书中多处提到韦恩家在1990年发生的惨案，这导致了父亲的直接转变。但这一切父亲并未亲身经历，只是双向情感障碍带来的幻想。</p><p>对于塔拉来说，家庭是不可分割的一部分。即使肖恩对塔拉在残忍，塔拉依然愿意相信哥哥，而非是自己的记忆。对于父母的作为，她更愿意相信那是一场梦，只要有人告诉她这一切都是她自己幻想出来的，她就会相信。</p><p>直到父母在巴克峰中大肆宣扬她被恶魔附身，塔拉用了一年的时间终于与父亲切断联系，但还是对母亲念念不忘。</p><p>对于父母给塔拉施加的偏激思想——不可以穿露出肉的衣服、不要相信政府、不能去医院等，还有那些文化与学识。塔拉都通过教育慢慢的认清社会与现实。</p><p>教育改变了自己，认清了和家人的隔阂，不会再为家人而妥协与让步，而是更多的考虑自身</p><p>我想到了我父母也是带有这偏激色彩，小病不相信医院也不愿意去医院，反而耽误了病情。还有一些网上的说教也严重影响了他们的主观认知。对于他们来说，那些东西他们也不曾经历过，而奉为经典。</p><p>或许对于我们来说，父母的偏激不会那么明显，但教育是能够认清自己，并摆脱他们偏激思想的重要途径</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>离散数学</title>
    <link href="http://example.com/2022/08/28/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    <id>http://example.com/2022/08/28/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</id>
    <published>2022-08-28T07:14:23.000Z</published>
    <updated>2022-09-01T15:59:27.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>离散数学课程的主要内容：</p><ol><li>基础：逻辑和证明</li><li>基本结构（包括集合、函数、序列、求和与矩阵）</li><li>计数</li><li>高级计数</li><li>关系</li><li>图</li><li>树</li><li>布尔代数</li></ol><p>学习该课程的目的：</p><ol><li>为学习计算机后继课程，如数据结构、编译原理、操作系统、数据库原理、形式语言及自动机。软件工程与方法学、计算机网络和人工智能、高级程序设计语言等，提供必要的数据基础；为阅读计算机文章作充分的数学准备</li></ol><p>数理逻辑：人工智能、数据库、形式语言及自动机、高级程序设计语言</p><p>集合论：信息结构与检索、数据结构</p><p>布尔代数等：开关理论、逻辑设计和程序理论、语法分析</p><p>图论：可计算性理论、计算机网络、数据结构</p><ol start="2"><li>通过学习离散数学，可以培养和提高自己的抽象思维和逻辑推理能力，获得解决实际问题的能力，为以后的软、硬学习和研究开发工作，打下坚实的数学基础。</li></ol><span id="more"></span><h2 id="基础：逻辑和证明"><a href="#基础：逻辑和证明" class="headerlink" title="基础：逻辑和证明"></a>基础：逻辑和证明</h2><h3 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><ul><li>命题</li><li>联结词<ul><li>否定联结词</li><li>合取联结词</li><li>析取联结词</li><li>条件语句：逆命题、逆否命题、反命题</li><li>双条件语句</li></ul></li><li>真值表</li></ul><h4 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h4><ul><li><strong>命题：</strong>是一个陈述句（即陈述事实的语句），它或者或假，但不能既真又假。即：<strong>命题是能够判断真假的陈述句。</strong></li><li><strong>原子命题：</strong>不能分解为更简单的陈述句</li></ul><p><img src="%E5%91%BD%E9%A2%981.png"></p><p>说明：</p><ol><li><p>只有具有确定真值得陈述句才是命题。</p><p>一切没有判断内容的句子，无所谓是非的句子，如：祈使句、感叹句、疑问句等都不是命题</p></li><li><p>因为命题只有两种真值，所以“命题逻辑”又称“二值逻辑”</p></li><li><p>“具有确定真值”是指客观上的具有，有我们是否知道它的真值是两回事</p><p>比如：其他星球上有生命</p></li></ol><p>命题逻辑</p><p><strong>命题构造</strong></p><ul><li>命题变元：p，q，r，s……</li><li>一个命题是真命题，用T表示</li><li>一个命题是加盟命题，用F表示</li><li>复合命题：由原子命题用逻辑运算符组合而来<ul><li>否定联结词：┐</li><li>合取联结词：∧</li><li>析取联结词：∨</li><li>or 联结词：⊕</li><li>条件联结词：→</li><li>双条件联结词：↔</li></ul></li></ul><h4 id="复合命题——联结词"><a href="#复合命题——联结词" class="headerlink" title="复合命题——联结词"></a>复合命题——联结词</h4><ol><li><p>否定联结词（逻辑非）</p><p>令p为一命题，则p的否定记作┐p</p><table><thead><tr><th>p</th><th>┐p</th></tr></thead><tbody><tr><td>T</td><td>F</td></tr><tr><td>F</td><td>T</td></tr></tbody></table></li><li><p>合取联结词（逻辑与）</p><p>令p和q为命题，p、q的合取记作p∧q</p><table><thead><tr><th>p</th><th>q</th><th>p∧q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></li><li><p>析取联结词（逻辑或）</p><p>令p和q为命题，p、q的析取记作p∨q</p><table><thead><tr><th>p</th><th>q</th><th>pVq</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></li><li><p>联结词 or （or有两种不同的含义）</p><ul><li><p>兼或（inclusive or）</p><p>例如：修过计算机科学或高数的学生可以修这门课</p><p>这就是析取的含义，p v q为真，只要两个命题之一为真或两者均为真即可。</p></li><li><p>异或（exclusive or）【相异为真】</p><p>例如：套餐含汤或饮料</p><p>这就是异或（XOR）的含义。p⊕q为真，则两个命题只有一个为真，但不能同事为真</p></li></ul><p>两个命题异或的真值表</p><table><thead><tr><th>p</th><th>q</th><th>p⊕q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>F</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></li><li><p>条件联结词（如果p，则q）</p><table><thead><tr><th>p（前件）</th><th>q（后件）</th><th>p→q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>T</td></tr></tbody></table><p>前提条件为假，结果必为真。例如：</p><ul><li>如果月亮是绿色奶酪做的，我比比尔盖茨更有钱</li><li>如果月亮是绿色奶酪做的，那么我就得靠救济生活</li><li>如果1+1=3，那么猪会飞。</li></ul><p>在条件语句p→q中，在前件之间不需要有任何联系。p→q只依赖于p和q的真值</p><p><img src="%E5%B8%B8%E7%94%A8%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E8%A1%A8%E8%BF%B0%E6%96%B9%E5%BC%8F.png" alt="常用条件语句表述方式"></p><p><strong>逆命题、逆否命题、反命题</strong></p><ul><li>q→p    是p→q的逆命题</li><li>┐q→┐p    是p→q的逆否命题</li><li>┐p→┐q    是p→q的反命题</li></ul></li><li><p>双条件联结词【相同为真】（与异或相反）</p><table><thead><tr><th>p</th><th>q</th><th>p↔q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>T</td></tr></tbody></table><p>双条件的表达方式</p><ul><li>p是q的充分必要条件</li><li>如果p那么q，反之亦然</li><li>p当且仅当q</li></ul></li></ol><h4 id="等价命题"><a href="#等价命题" class="headerlink" title="等价命题"></a>等价命题</h4><p><strong>如果两个命题总是有相同的真值，他们就是等价的</strong></p><p>例：用真值表说明条件语句等价于逆否命题</p><table><thead><tr><th>p</th><th>q</th><th>┐p</th><th>┐q</th><th>p→q</th><th>┐q→┐p</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>F</td><td>F</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>T</td><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td></tr></tbody></table><p>问题：有n个命题变元的真值表有多少行</p><p>解：2^n。我们可以构造的命题数量（不相等）为2^2^n个</p><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><table><thead><tr><th>Operator</th><th>Precedence</th></tr></thead><tbody><tr><td>┐</td><td>1</td></tr><tr><td>∧</td><td>2</td></tr><tr><td>∨</td><td>3</td></tr><tr><td>→</td><td>4</td></tr><tr><td>↔</td><td>5</td></tr></tbody></table><h3 id="命题逻辑的应用"><a href="#命题逻辑的应用" class="headerlink" title="命题逻辑的应用"></a>命题逻辑的应用</h3><h4 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h4><ul><li>语句翻译</li><li>系统规范说明</li><li>布尔搜索</li><li>逻辑谜题</li><li>逻辑电路</li></ul><h4 id="语句翻译"><a href="#语句翻译" class="headerlink" title="语句翻译"></a>语句翻译</h4><p>汉语常有二义性，为了在数学上避免歧义，需要翻译成由命题变量和逻辑联结词组成的表达式</p><p><strong>如何翻译成正确的命题公式</strong></p><p>命题演算的合式公式Wff</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;离散数学课程的主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础：逻辑和证明&lt;/li&gt;
&lt;li&gt;基本结构（包括集合、函数、序列、求和与矩阵）&lt;/li&gt;
&lt;li&gt;计数&lt;/li&gt;
&lt;li&gt;高级计数&lt;/li&gt;
&lt;li&gt;关系&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;布尔代数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学习该课程的目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为学习计算机后继课程，如数据结构、编译原理、操作系统、数据库原理、形式语言及自动机。软件工程与方法学、计算机网络和人工智能、高级程序设计语言等，提供必要的数据基础；为阅读计算机文章作充分的数学准备&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数理逻辑：人工智能、数据库、形式语言及自动机、高级程序设计语言&lt;/p&gt;
&lt;p&gt;集合论：信息结构与检索、数据结构&lt;/p&gt;
&lt;p&gt;布尔代数等：开关理论、逻辑设计和程序理论、语法分析&lt;/p&gt;
&lt;p&gt;图论：可计算性理论、计算机网络、数据结构&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过学习离散数学，可以培养和提高自己的抽象思维和逻辑推理能力，获得解决实际问题的能力，为以后的软、硬学习和研究开发工作，打下坚实的数学基础。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="数学" scheme="http://example.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>悉达多——一首印度的诗</title>
    <link href="http://example.com/2022/08/10/%E6%82%89%E8%BE%BE%E5%A4%9A%E2%80%94%E2%80%94%E4%B8%80%E9%A6%96%E5%8D%B0%E5%BA%A6%E7%9A%84%E8%AF%97/"/>
    <id>http://example.com/2022/08/10/%E6%82%89%E8%BE%BE%E5%A4%9A%E2%80%94%E2%80%94%E4%B8%80%E9%A6%96%E5%8D%B0%E5%BA%A6%E7%9A%84%E8%AF%97/</id>
    <published>2022-08-10T12:54:50.000Z</published>
    <updated>2022-08-10T15:09:09.335Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://www.zhihu.com/people/findingsea">findingsea</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近终于看了心仪已久的《悉达多》，先说读后感受：<strong>这很可能会是我今年看过的最好的一本书了</strong>，五星推荐。黑塞对东方哲学的理解相当深刻，尤其最后一场悉达多与乔文达坐而论道，可以说透彻淋漓，很久没看到这么精彩的大段论述。</p><p>故事其实不复杂，讲的就是一个古印度贵族青年悉达多，不追求财富地位，一心只想追求心灵的宁静，于是孤身展开了求道之旅。其实跟佛陀的故事很像。黑塞用悉达多的三次觉醒来阐述了他对佛教求道的理解。</p><p><em>本文全篇是有点长，如果对书的内容想自己体会的，可以跳过介绍部分，直接翻到最后总结，是我对《悉达多》全书的概括性体会。</em></p><span id="more"></span><h3 id="第一次觉醒"><a href="#第一次觉醒" class="headerlink" title="第一次觉醒"></a>第一次觉醒</h3><p>悉达多为了获得内心的宁静，决定遁入沙门，进行苦行修为。他的朋友乔文达追随他。然后即便经过多年的苦行，即便悉达多的修为已经超过了那些年老的沙门，他仍然觉得他对自我一无所知，他觉得在沙门这里必然难以获得最终的宁静。这时，世人纷纷传言，乔答摩在菩提树下顿悟得道，成为佛陀。于是，他和乔文达去拜访佛陀。</p><p>两人都为佛陀的智慧与安宁所折服，乔文达成为了佛陀的信徒。而悉达多，在于佛陀的一番交谈之后，仍然决定独自求道。</p><p>他之所以没有成为佛陀的信徒，因为佛陀的教义可以圆满地解释这个世界，除了一点：他是如何领悟到这些教义的。佛陀并没有从任何教义中学习，所以学习佛陀的教义并不能达到超然的境界，要达到这种境界，只能依靠自己。</p><p>在离开的路上，悉达多得到第一次觉醒：之所以我对自我一无所知，之所以悉达多对我来说一直保持陌生与未知，只因为我在逃避自我，我在追求梵天，阿特曼。我欲求摧毁自我、摆脱自我以便在未知的存在最深层发现万有的核心，即阿特曼、生命、上帝或绝对终极之物，而正因为如此，我却一路丢失了自我。</p><blockquote><p>为什么乔答摩在他觉悟成道的伟大时刻曾跌坐于菩提树之下? 因为他听见了自己内心的声音，这声音命令他在菩提树下寻求安宁，他并未求助于苦修、献祭、沐浴和祈祷、进餐和饮酒、睡眠和梦想，而是听从了自己内心的声音。人只应服从自己内心的声音，拒绝任何外力的驱使，并等待觉醒那一刻的到来；这才是善的和必要的行为，其他的一切毫无意义。</p></blockquote><p>第一次觉醒之后的悉达多开始认识到目之所见并不是虚幻，那就是实在的。他学会了用孩子一般单纯而无所求的目光去观看，这个世界是如此美好。当一个人能如此单纯，如此觉醒，如此专注于当下，毫无一律地走过这个世界，生命真是意见赏心乐事。</p><h3 id="第二次觉醒"><a href="#第二次觉醒" class="headerlink" title="第二次觉醒"></a>第二次觉醒</h3><p>悉达多向迦摩罗（妓女）学习情爱的技巧，向迦摩施瓦弥（富人）学习做生意的技巧。一开始悉达多只是把生意当成游戏，甚至他做的许多事情都只是游戏而已，他以观察世人而自娱，而他的心，他的本性却从未有丝毫投入。他真实的自我飘然于遥远的异乡，无影无踪，与他的现实生活彼此隔绝。然而，他逐渐沉沦于纸醉金迷的生活，他终于在这种生活中难以自拔了。时光荏苒，等他惊醒的时候，已经头生华发，感觉到现在生活的荒诞，他开始深深地厌恶自己，就像一个吃得过饱、喝酒过多的人在痛楚的呕吐之后会觉得好一点，悉达多也渴望通过一次骇人的呕吐来弃绝这毫无意义的生活。</p><p>悉达多想要自溺在河中，他想要投向死亡，正当此时，他听到了内心深处的唵字真言，这一瞬间他的灵魂猛然觉醒，他忆起了早已忘却的神圣的一切。在一场无梦而深沉的睡眠之后，悉达多感觉自己获得了新生。他感觉到现在所有无常之物又从身旁溜走，又一次他如婴儿般独立于天地之间，一无所知，一无所有，一无所学。他为自己的逃离感到快乐，同时领会到亲身经历世上的一切是件美事，孩提时代他就知道尘俗的享乐及财富为邪恶之物，长久以来他就知道这一点，但知道刚刚才有所体验，不仅在理智上，而是以眼睛、心灵以及胃口深知其意。</p><p>悉达多第二次觉醒，他意识到自己身体的某一部分死去了，那正是他的自我，他渺小、怯懦而傲慢的自我。</p><blockquote><p>悉达多终于明白为什么作为婆罗门或沙门这么多年与自我的斗争都失败了，因为他的傲慢，因为过多的知识，过多的圣诗，过多的献祭，过多的禁欲和过多的造作和追求阻碍了他，他永远都是最聪明的一员，永远那么博学。他的自我潜入了他祭司的身份，潜入他的理智和傲慢，而他却想通过斋戒和忏悔来摧毁自我。只有进入尘世并沉湎于权利、女人和金钱，只有成为商人、赌徒、酒鬼和富人，才能让他心中的祭司和沙门真正死去。他必须经历那些可怕的岁月，遭受恶心的折磨，彻底认清俗尘生活的空虚和疯狂，直到陷入绝望，只有这样，那个浪人悉达多和富人悉达多，才能真正死去，只有这样，他才能获得新生。</p></blockquote><h3 id="第三次觉醒"><a href="#第三次觉醒" class="headerlink" title="第三次觉醒"></a>第三次觉醒</h3><p>悉达多又遇到了当年载过他的摆渡老人，瓦稣迪瓦道，悉达多观察河水的寓意，观察瓦稣迪瓦道脸上的宁静，他决定留下来和瓦稣迪瓦道生活在一起。</p><blockquote><p>一次悉达多问瓦稣迪瓦道：“你是否也从河水学到了这个秘密：即世上并不存在时间的实体?”瓦稣迪瓦脸上漾起了明朗的笑意。 “是的，悉达多，”瓦稣迪瓦道，“是否是这个意思呢? 河水在同一时刻无处不在，遍及源头，河口、瀑布、渡口、水流、海洋以及山脉之间；从另一方面来说，现在只为其自身而存在，并非过去或未来的影子。” “正是如此，”悉达多道，“当我懂得这个道理，我回顾了我的生活。我的生命也是一条河，少年悉达多、成年悉达多和老年悉达多只是由于幻象而有分别，而并非由于现实而有分别。悉达多从前的生活并没有存在于过去，他的死以及终归于梵天也不是发生在将来。过去之心 不可得，未来之心不可得，万法皆如，俱入目前。”</p></blockquote><p>之后，悉达多重逢迦摩罗，并发现她为他生下了一个儿子。迦摩罗被毒蛇咬死后，悉达多把所有心思都交付在了儿子身上，把儿子留在身边照顾，然而他最终还是失去了他的儿子，因为他的儿子本来就不属于这里。失子之痛，让悉达多开始真正理解和同情俗尘的情感，不再那么聪明，不再那么傲慢，而是更为温和，更富同情。</p><blockquote><p>心中的创伤仍久久地隐隐作痛。悉达多的船客中有许多是与自己的儿女同行。每见一位有儿女相伴的行客，他都忍不住心中嫉妒；他想：那么多人都拥有这巨大的幸福——为什么我偏偏没有? 甚至那些恶人、盗贼和劫匪都有儿女相伴，连他们都可以爱自己的孩子并为他们的孩子所爱，为什么我却独独没有? 悉达多此时的思维竟如此幼稚，如此缺乏逻辑，他与凡俗的人们竟变得如此相像。 现在他待人的态度与从前不同：不再那么聪明，不再那么傲慢，而是变得更为温和，更为好奇并且更富于同情。 现在，当他送那些庸常的行客们(商人、兵士和女人)渡河时，他觉得那些人不再如从前那样显得陌生。尽管他并不理解或拥有他们的思想与观念，但他却与他们同样有着生命的冲动和欲望。尽管他已达到高度自律的境界并且成功地忍耐着最后的伤痛，而他却感到这些尘俗的人们是自己的平等兄弟。他们的虚荣、欲望以及平凡琐事不再显得荒谬，而是变得可以理解，可以热爱，甚至值得尊敬。</p></blockquote><p>悉达多继续聆听河水，向河水学习。</p><blockquote><p>于是悉达多更用心去听。水中他父亲的形象，他自己的形象以及他儿子的形象汇流在一起，迦摩罗的形象也显现并随流而去，乔文达的形象，还有诸多其他人的形象纷纷涌现并消失。所有人的形象都融入不息的河水，河水包容了所有人的追求与渴念，欲望与苦难。于是河水之声也充满了渴求：充满了刺心的痛楚，充满了无厌足的贪欲。河水向自己的目标流去。……他不再去分辨不同的音声——诸如愉悦之声与哀泣之声，童稚之声与雄浑之声；所有思慕者的哀叹，智者的欢笑，愤怒者的叫喊，濒死者的呻吟都融入彼此，互为纠结与交织，以千万种方式缠绕在一起，而所有的音声，所有的目标，所有的渴望，所有的善与恶，悲伤与欢乐，所有这一切共同构成了统一的世界，所有这一切共同交融成万物奔流不息的进程，所有这一切共同谱成了生命永恒的旋律。……当他不再着意分辨悲叹与欢笑，当他的心灵不再执着于任何一种特定的音声并不再任其占据他的自我，当他倾听所有的一切，倾听圆融与统一，正当此时，那宏大的万音交响之歌只包含一个字“唵”(Om)——圆满之音。</p></blockquote><p>悉达多在河水之声中，有了第三次觉醒，并且得到了最终的救赎，从此他委身于时间与生命之流中，充满慈悲与同情，与万物和谐如一。</p><p>全书的最后，有一场悉达多布道时的论述，很长，却异常精彩。多年之后，都已经年迈的乔文达和悉达多再次相遇，乔文达发现他往日朋友的脸上充满了宁静，他显然已经得道了，于是乔文达便询问他该如何求道。</p><p>悉达多论述了三点：</p><p><strong>智慧不可言传，而需亲身体会</strong></p><blockquote><p>是的，我曾有过不少观念与知识。有时，在一日之内或一个时辰之内，我会体验到智慧，正如人们从内心感受到生命。我有过许多思想，但我觉得很难对你讲述。然而有一种思想给我以很深的印象。乔文达，即智慧无法言传。智者们试图传授的智慧听起来总是十分愚蠢。……知识可以传授，但智慧不能。人们可以寻见智慧，在生命中体现出智慧，以智慧自强，以智慧来创造奇迹，但人们不可能去传授智慧。我年少时就有过这种疑问，正是我的怀疑驱使我远离教师们。我还有过一种思想，乔文达，你又会认为那是 开玩笑或只是一种愚蠢的念头：就是说，每一真理的反面也同样真实。比如说，只有偏面的真理才能形诸于言辞；事实上，以语言表达或思维的一切都只能是偏面的，只是半个真理而已，它们都缺乏完备、圆融与统一；当佛陀世尊宣讲关于世界的教义，他不得不把世界分为轮回与涅槃，虚幻与真如，痛苦与救赎。人别无选择，对于那些要传授教义的导师们来说尤其如此。而世界自身则遍于我之内外，从不片面。从未有一人或一事纯属轮回或者纯属涅槃，从未有一人完全是圣贤或是罪人。世界之所以表面如此是因为我们有一种幻觉，即认为时间是某种真实之物。时间并无实体，乔文达，我曾反复悟到这一点。而如果时间并非真实，那么仿佛存在于现世与永恒，痛苦与极乐，善与恶之间的分界线也只是一种幻象。</p></blockquote><p><strong>世界万物皆为圆满，一切皆是必然</strong></p><blockquote><p>我是罪人，你也是罪人，而罪人有朝一日会成为梵天，有朝一日会证得涅槃，有朝一日会成佛；这‘有朝一日’是某种幻象，那只是一种比较而已，罪人并不是在趋于佛境，他并没有不断演进，尽管我们的感官只能如此感知事物。不，潜在的佛性已然存在于罪人身上，他的未来已然存在。我们必须认识到隐藏于你、我以及所有人中潜在的佛性。乔文达，世界并非不完善，或者正沿着通向完善的漫漫长路缓缓发展。不，世界在每一瞬间都是完美的：所有罪孽都已然领受神恩，所有孩童都是潜在的老人，所有婴儿都已打上死亡的印记，而所有的垂死者——必获永恒的生命。一个人不可能认清另一个人已然修到何等境界。佛存在于劫匪与赌徒身上，而劫匪亦存在于婆罗门身上。 在极深禅定之中，人可以除灭时间并同时经历所有过去、现在与未来，于是一切皆善，一切完美，一切即梵。因此，我认为一切的存在皆为至善——无论是死与生，无论罪孽与虔诚，无论智慧或是蠢行，一切皆是必然，一切只须我的欣然赞同，一切只需我的理解与爱心；因而万物于我皆为圆满，世上无物可侵害于我。</p></blockquote><p><strong>爱是世上最重要的</strong></p><blockquote><p>乔文达，我可以去爱一枚石子，一棵树或一片树皮，这些都是“物”。一个人可以去爱世上之物，但一个人不能去爱词句。所以教义于我毫于用处。那些教义没有软硬的感觉，没有颜色，没有尖角，没有气息和味道，它们只是一些词句而已，可能就是这一点阻碍你得到内心的宁静。也许世上词句过多，因为甚至连救赎、德行、轮回与涅槃都只是词句，乔文达。涅槃并非实在之物，世上只存在涅槃的名相。……更坦白地说，我也不是很注重思想，我更注重“物”。例如，这个渡口曾经住着一个人，他是我的前辈与导师。他是一个虔诚的人，多年以来他一直仅仅信奉这条河，他发觉河水之声与他交流，于是他师从于河水，而河水则教导他，培养他。这条河对于他似乎是一位神。多年以来，他并没有明白每阵清风，每朵白云，每只小鸟和每只甲虫都同样神圣，而且与这令人尊崇的河流一样能给人以启迪。但当这位虔诚的人飘然进入林中，他彻悟了一切。没有任何导师与书本，他比你我理解得更多。而这只是因为他信奉了一条河流。……乔文达，我感觉爱是世上最重要的。研究这个世界，解释它或是鄙弃它，对于大思想家或许很重要；但我以为唯一重要的就是去爱这个世界，而不是去鄙弃它。我们不应彼此仇视，而应以爱、赞美与尊重来善待世界，善待我们自身以及一切生命。</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>看完最后这一整段论述，我突然想起《金刚经》里的一段：无我相，无人相，无众生相，无寿者相。万物皆是虚无，又皆是实在，这个世界就是这样摆在面前，它不会因为我们的好恶而变得更好或者更坏，甚至这个世界就没有好坏之说，因为好坏标准都是人定的，而人的观念又都是一时的。所以这世界在每一刻都是圆满的，我们能做的就是感受它，接纳它，进而爱它。</p><p>我对佛学仅知皮毛，但是全书有一点我是无比赞同的——<strong>佛不是坐而悟道的</strong>，悉达多要摒弃自我，要感知梵天，就要先体验俗尘荒诞，而后知众生有爱，而后知万物有灵。所谓「得道」，不是读经书习教义，而是对生活（乃至生命）体验的深刻理解。</p><p>黑塞对于东方哲学这种超脱的概念，理解深刻，而又自成体系。没有什么救世主，没有什么超度者，佛性，或者说神性，就蕴藏在每一个人身上，这就是这个世界的完美之处。我们只有自我救赎，而唯一能阻碍你得到内心宁静的，也只有你自己。这个世界本身就已经蕴含着神圣了，去发现它，接纳它，理解它，最终爱它。</p><p><strong>一切皆是必然，于是一切只须我的欣然赞同；万物皆为圆满，于是世上无物可侵害于我。</strong></p><p><br><br></p><p>我听便灵魂与肉体的安排，</p><p>去经历罪孽，追逐肉欲和财富，</p><p>去贪慕虚荣，以陷入最羞耻的绝望，</p><p>以学会放弃挣扎，学会热爱世界。</p><p>我不再将这个世界与我所期待的，</p><p>塑造的圆满世界比照，</p><p>而是接受这个世界，</p><p>爱它，属于它。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://www.zhihu.com/people/findingsea&quot;&gt;findingsea&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近终于看了心仪已久的《悉达多》，先说读后感受：&lt;strong&gt;这很可能会是我今年看过的最好的一本书了&lt;/strong&gt;，五星推荐。黑塞对东方哲学的理解相当深刻，尤其最后一场悉达多与乔文达坐而论道，可以说透彻淋漓，很久没看到这么精彩的大段论述。&lt;/p&gt;
&lt;p&gt;故事其实不复杂，讲的就是一个古印度贵族青年悉达多，不追求财富地位，一心只想追求心灵的宁静，于是孤身展开了求道之旅。其实跟佛陀的故事很像。黑塞用悉达多的三次觉醒来阐述了他对佛教求道的理解。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文全篇是有点长，如果对书的内容想自己体会的，可以跳过介绍部分，直接翻到最后总结，是我对《悉达多》全书的概括性体会。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>Docker高级篇</title>
    <link href="http://example.com/2022/08/08/Docker%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    <id>http://example.com/2022/08/08/Docker%E9%AB%98%E7%BA%A7%E7%AF%87/</id>
    <published>2022-08-08T14:13:15.000Z</published>
    <updated>2022-08-21T16:15:27.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker-复杂安装详说"><a href="#Docker-复杂安装详说" class="headerlink" title="Docker 复杂安装详说"></a>Docker 复杂安装详说</h2><h3 id="安装MySQL主从复制"><a href="#安装MySQL主从复制" class="headerlink" title="安装MySQL主从复制"></a>安装MySQL主从复制</h3><h4 id="主从复制的简介"><a href="#主从复制的简介" class="headerlink" title="主从复制的简介"></a>主从复制的简介</h4><p>在实际的生产中，为了解决Mysql的单点故障已经提高MySQL的整体服务性能，一般都会采用<strong>「主从复制」</strong>。</p><p>比如：在复杂的业务系统中，有一句sql执行后导致锁表，并且这条sql的的执行时间有比较长，那么此sql执行的期间导致服务不可用，这样就会严重影响用户的体验度。</p><p>主从复制中分为<strong>「主服务器（master）「和」从服务器（slave）」</strong>，<strong>「主服务器负责写，而从服务器负责读」</strong>，Mysql的主从复制的过程是一个<strong>「异步的过程」</strong>。</p><p>这样读写分离的过程能够是整体的服务性能提高，即使写操作时间比较长，也不影响读操作的进行。</p><span id="more"></span><h4 id="为什么需要主从复制"><a href="#为什么需要主从复制" class="headerlink" title="为什么需要主从复制"></a>为什么需要主从复制</h4><ol><li>在业务复杂的系统中，有这么一个情景，有一句sql语句需要锁表，导致暂时不能使用读服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读。这样，即使主库出现了锁表的情景，通过读从表也可以保证业务的正常运作。</li><li>做数据热备</li><li>架构的扩展。业务量越来越大，I/O访问频率过高，单击无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能</li></ol><p>【MySQL锁表】</p><ul><li>锁表的原因：一个程序执行了对表的insert、update或者delete操作还未commite时，另一个程序也对同一个表进行相同的操作，则此时会发生资源正忙的异常，也就是锁表。</li><li>锁表的原理：数据库使用独占式封锁机制，当执行上面的语句时，对表进行锁住，直到发生commite或者回滚或者退出数据库用户<ul><li> A程序执行了对 tableA 的 insert ，并还未 commite时，B程序也对tableA 进行insert 则此时会发生资源正忙的异常，就是锁表</li><li>锁表常发生于并发而不是并行（并行时，一个线程操作数据库时，另一个线程是不能操作数据库的，cpu 和i/o 分配原则）</li></ul></li></ul><h4 id="什么是MySQL的主从复制"><a href="#什么是MySQL的主从复制" class="headerlink" title="什么是MySQL的主从复制"></a>什么是MySQL的主从复制</h4><p>MySQL的主从复制是指数据可以从一个MySQL数据库服务器节点复制到一个多或个从节点。MySQL默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据中的所有数据库或特定的数据库，或特定的表。</p><h4 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h4><p>首先放一张Mysql主从复制的原理图，总的来说Mysql的主从复制原理还是比较好理解的，原理非常的简单。</p><p><img src="1.png"></p><p><strong>原理：</strong></p><ol><li>master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中</li><li>slave服务器会在一定时间间隔内对master二进制进行探测其是否发生改变，如果发生改变，则开始一个I/OThread请求master二进制事件</li><li>同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/OThread和SQLThread将进入睡眠状态，等待下一次被唤醒。</li></ol><p><strong>也就是说：</strong></p><ul><li>从库会生成两个线程，一个I/O线程，一个SQL线程</li><li>I/O线程会去请求主库的binlog，并将得到的binlog写到本地的relay-log（中继日志）文件中</li><li>主库会生成一个log dump线程，用来给从库I/O线程传binlog</li><li>SQL线程，会读取relay log文件中的日志，并解析成sql语句逐一执行</li></ul><p><strong>注意：</strong></p><ol><li>master将操作的语句记录到binlog日志中，然后授予slave远程连接的权限（master一定开启binlog二进制日志功能；通常为了数据安全考虑，slave也开启binlog功能）</li><li>slave开启两个线程：IO线程和SQL线程。其中，IO线程负责读取master的binlog内容到中继日志relay log里；SQL线程负责从relay log日志读取binlog内容，并更新到slave的数据库里，这样就能保证slave数据和master数据保持一致了</li><li>MySQL复制至少需要两个MySQL的服务，当然MySQL服务可以分布在不同的服务器上，也可以在一台服务器上启动多个服务。</li><li>MySQL复制最好确保master和slave服务器上的MySQL版本相同（如果不能满足版本一致，那么要保证master主节点的版本低于slave从节点的版本）</li><li>master和slave两节点间时间需同步</li></ol><p><strong>具体步骤：</strong></p><ol><li>从库通过手工执行change mastar to 语句连接主库，提供了连接的用户一切条件（user、password、port、ip），并且让从库知道，二进制日志的起点位置（file名 position号）；start slave</li><li>从库的IO线程和主库的dump线程建立连接</li><li>从库根据change mastar to语句提供的file名和position号，IO线程向主库发起binlog的请求</li><li>主库dump线程根据从库的请求，将本地binlog以events的方式给从库IO线程</li><li>从库IO线程接收binlog events，并存放到本地relay-log中，传送过来的信息，会记录到master.info中</li><li>从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info中，默认情况下，已经应用过的relay会自动被清理purge</li></ol><p>Mysql的主从复制中主要有三个线程：<code>master（binlog dump thread）、slave（I/O thread 、SQL thread）</code>，Master一条线程和Slave中的两条线程。</p><p><code>master（binlog dump thread）</code>主要负责Master库中有数据更新的时候，会按照<code>binlog</code>格式，将更新的事件类型写入到主库的<code>binlog</code>文件中。</p><p>并且，Master会创建<code>log dump</code>线程通知Slave主库中存在数据更新，这就是为什么主库的binlog日志一定要开启的原因。</p><p><code>I/O thread</code>线程在Slave中创建，该线程用于请求Master，Master会返回binlog的名称以及当前数据更新的位置、binlog文件位置的副本。</p><p>然后，将<code>binlog</code>保存在 <strong>「relay log（中继日志）」</strong> 中，中继日志也是记录数据更新的信息。</p><p>SQL线程也是在Slave中创建的，当Slave检测到中继日志有更新，就会将更新的内容同步到Slave数据库中，这样就保证了主从的数据的同步。</p><p>以上就是主从复制的过程，当然，主从复制的过程有不同的策略方式进行数据的同步，主要包含以下几种：</p><ol><li><strong>「同步策略」</strong>：Master会等待所有的Slave都回应后才会提交，这个主从的同步的性能会严重的影响。</li><li><strong>「半同步策略」</strong>：Master至少会等待一个Slave回应后提交。</li><li><strong>「异步策略」</strong>：Master不用等待Slave回应就可以提交。</li><li><strong>「延迟策略」</strong>：Slave要落后于Master指定的时间。</li></ol><p>对于不同的业务需求，有不同的策略方案，但是一般都会采用最终一致性，不会要求强一致性，毕竟强一致性会严重影响性能。</p><h4 id="主从搭建步骤"><a href="#主从搭建步骤" class="headerlink" title="主从搭建步骤"></a>主从搭建步骤</h4><ol><li><p>新建主服务器容器实例3307</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 3307:3306 --name mysql-master \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/data:/var/lib/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=admin \</span><br><span class="line">-d biarms/mysql:5.7.30-linux-arm64v8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志路径：mysql-master/log </span></span><br><span class="line"><span class="comment"># 数据路径：mysql-master/data</span></span><br><span class="line"><span class="comment"># 配置路径：mysql-master/conf</span></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=root 指定root账户密码为root</span></span><br></pre></td></tr></table></figure></li><li><p>进入 <code>/mydata/mysql-master/conf</code> 目录下新建my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置server_id，同一局域网中需要唯一</span></span><br><span class="line">server_id=101</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定不需要同步的数据库名称</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志功能</span></span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志使用内存大小（事物）</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"></span><br><span class="line"><span class="comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure></li><li><p>修改完配置后重启master实例</p><p><code>sudo docker restart mysql-master</code></p></li><li><p>进入mysql-master容器</p><p><code>sudo docker exec -it b1ff5b9d1011 /bin/bash</code></p><p><code>mysql -uroot -padmin</code></p></li><li><p>master容器实例内创建数据同步用户</p><p><code>CREATE USER &#39;william&#39;@&#39;%&#39;IDENTIFIED BY &#39;admin&#39;;</code></p><p>给用户授权</p><p><code>GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO &#39;william&#39;@&#39;%&#39;;</code></p></li><li><p>新建从服务器容器实例3308</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 3308:3306 --name mysql-slave \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/data:/var/lib/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=admin \</span><br><span class="line">-d biarms/mysql:5.7.30-linux-arm64v8</span><br></pre></td></tr></table></figure></li><li><p>进入 <code>/mydata/mysql-slave/conf</code> 目录下新建my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置server_id，同一局域网中需要唯一</span></span><br><span class="line">server_id=102</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定不需要同步的数据库名称</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其他数据库实例的Master时使用</span></span><br><span class="line">log-bin=mall-mysql-slave1-bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志使用内存大小（事物）</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"></span><br><span class="line"><span class="comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"></span><br><span class="line"><span class="comment">## relay_log配置中继日志</span></span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## log_salve_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class="line">log_slave_updates=1</span><br><span class="line"></span><br><span class="line"><span class="comment">## slave设置为只读（具有super权限的用户除外)</span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure></li><li><p>修改完配置后重启slave实例</p><p><code>sudo docker restart mysql-slave</code></p></li><li><p>在主数据库中查看主从同步状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mall-mysql-bin.000001 |      154 |              | mysql            |                   |</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>进入mysql-salve容器</p><p><code>sudo docker exec -it mysql-slave /bin/bash</code></p><p><code>mysql -uroot -padmin</code></p></li><li><p>在从数据库中配置主从复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host=&#x27;10.211.55.3&#x27;,master_user=&#x27;william&#x27;,master_password=&#x27;admin&#x27;,master_port=3307,master_password=&#x27;mall-mysql-bin.000001&#x27;,master_log_pos=154,master_connect_retry=30;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>master_host：主数据库的IP地址；</li><li>master_port：主数据库的运行端口；</li><li>master_user：在主数据库创建的用于同步数据的用户账号；</li><li>master_password：在主数据库创建的用于同步数据的用户密码；</li><li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</li><li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</li><li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li></ul></li><li><p>在从数据库中查看主从同步状态</p><p><code>show slave status \G;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 10.211.55.3</span><br><span class="line">                  Master_User: william</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File:</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: mall-mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File:</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 0</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID:</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State:</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时从机的IO_Running/SQL_Running还未开始同步</span></span><br><span class="line">Slave_IO_Running: No</span><br><span class="line">Slave_SQL_Running: No</span><br></pre></td></tr></table></figure></li><li><p>在从数据库中开启主从同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看从数据库状态发现已经同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Connecting to master</span><br><span class="line">                  Master_Host: 10.211.55.3</span><br><span class="line">                  Master_User: william</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File:</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: mall-mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File:</span><br><span class="line">             Slave_IO_Running: Connecting</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 0</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1045</span><br><span class="line">                Last_IO_Error: error connecting to master &#x27;william@10.211.55.3:3307&#x27; - retry-time: 30  retries: 2</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID:</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp: 220814 13:31:06</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Connecting</span><br><span class="line">Slave_SQL_Running: Yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slave_IO_Running: Connecting 提示需要对主从库进行 flush privileges</span></span><br></pre></td></tr></table></figure></li><li><p>主从复制测试</p><ul><li><p>主机新建库-&gt;使用库-&gt;新建表-&gt;插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use db01;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table t1(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(1,&#x27;z3&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>从机使用库-&gt;查看记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use db01;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="安装redis集群（大厂面试题-分布式存储案例）"><a href="#安装redis集群（大厂面试题-分布式存储案例）" class="headerlink" title="安装redis集群（大厂面试题-分布式存储案例）"></a>安装redis集群（大厂面试题-分布式存储案例）</h3><h2 id="Dockerfile-解析"><a href="#Dockerfile-解析" class="headerlink" title="Dockerfile 解析"></a>Dockerfile 解析</h2><h3 id="Dockerfile-是什么"><a href="#Dockerfile-是什么" class="headerlink" title="Dockerfile 是什么"></a>Dockerfile 是什么</h3><p>Dockerfile 是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>如果我们想拥有一个增强型的docker镜像，就需要多次添加功能然后commit。这样非常繁琐，而且也很消耗IO</p><p><img src="Dockerfile.png"></p><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><p><code>https://docs.docker.com/engine/reference/builder</code></p><h4 id="构建三步骤"><a href="#构建三步骤" class="headerlink" title="构建三步骤"></a>构建三步骤</h4><ul><li>编写Dockerfile</li><li>docker build 命令构建镜像</li><li>docker run 依照新编写好的镜像运行容器实例</li></ul><h3 id="Dockerfile-构建过程解析"><a href="#Dockerfile-构建过程解析" class="headerlink" title="Dockerfile 构建过程解析"></a>Dockerfile 构建过程解析</h3><h4 id="Dockerfile-的基础内容知识"><a href="#Dockerfile-的基础内容知识" class="headerlink" title="Dockerfile 的基础内容知识"></a>Dockerfile 的基础内容知识</h4><ol><li>每条关键字指令都<font color="OrangeRed">必须为大写字母</font>且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行提交</li></ol><h4 id="Docker-执行-Dockerfile-的大致流程"><a href="#Docker-执行-Dockerfile-的大致流程" class="headerlink" title="Docker 执行 Dockerfile 的大致流程"></a>Docker 执行 Dockerfile 的大致流程</h4><ol><li>Docker 从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似 docker commit 的操作提交一个新的镜像层</li><li>docker 再基于刚提交的镜像运行一个新的容器</li><li>执行 Dockerfile 中的下一条指令直到所有指令都执行完成</li></ol><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段</p><ul><li>Dockerfile 是软件的原材料</li><li>Docker 镜像是软件的交付品</li><li>Docker 容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</li></ul><p>Dockerfile 面向开发，Docker 镜像称为交付标准，Docker 容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><p><img src="dockerfile%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png"></p><ol><li>Dockerfile：需要定义一个Dockerfile，Dockerfile 定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制）等等；</li><li>Docker 镜像：在用 Dockerfile 定义一个文件后，docker build 时会产生一个Docker镜像，当运行Docker镜像时会真正开始提供服务；</li><li>Docker 容器：容器时直接提供服务的；</li></ol><h3 id="Dockerfile-常用保留字指令"><a href="#Dockerfile-常用保留字指令" class="headerlink" title="Dockerfile 常用保留字指令"></a>Dockerfile 常用保留字指令</h3><p>参考 tomcat8 的 Dockerfile 入门：<code>https://github.com/docker-library/tomcat</code></p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>基础镜像，当前新镜像时基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是from</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tomcat 镜像来自于 amazoncorretto 版本号为8</span></span><br><span class="line"><span class="keyword">FROM</span> amazoncorretto:<span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>镜像维护者的姓名和邮箱地址</p><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><ul><li><p>容器构建时需要运行的命令</p></li><li><p>两种格式</p><ul><li><p>shell 格式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;命令行命令&gt;</span></span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure></li><li><p>exec 格式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;可执行文件&quot;</span>,<span class="string">&quot;参数1&quot;</span>,<span class="string">&quot;参数2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;,&quot;dev&quot;,&quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>RUN 是在 docker build 时运行</p></li></ul><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>当前容器直接对外暴露的端口</p><p>作用：</p><ul><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li><li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p><p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;工作目录路径&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$HOME</span></span></span><br></pre></td></tr></table></figure><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>指定该镜像以什么样的用户去执行，如果都不指定，默认是root</p><p>指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>用来在构建镜像过程中设置环境变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如1：</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/tomcat</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$CATALINA_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如2：以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span></span><br></pre></td></tr></table></figure><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p><p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p><ul><li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li><li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li></ul><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>**[–chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。</p><p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>容器数据卷，用于数据保存和持久化工作。</p><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;路径&gt;</span></span><br></pre></td></tr></table></figure><p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p><strong>作用</strong>：指定容器启动后要做的事情</p><p><strong>注意</strong>：<font color="orangered">如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</font></p><p><strong>CMD 容器启动命令</strong></p><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;,&quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动catalina.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>与RUN命令的区别</strong></p><ul><li>CMD 是在 docker run 时运行</li><li>RUN 是在 docker build 时运行</li></ul><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>类似于 CMD 指令，<font color="orangered">但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</font></p><p><strong>但是, 如果运行 docker run 时使用了 –entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。</strong></p><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;&lt;executeable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]</span></span><br></pre></td></tr></table></figure><p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设已通过 Dockerfile 构建了 nginx:test 镜像：</span></span><br><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>] <span class="comment"># 定参</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="comment"># 变参 </span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th>是否传参</th><th>按照Dockerfile编写执行</th><th>传参运行</th></tr></thead><tbody><tr><td>Docker命令</td><td>docker run nginx:test</td><td>docker run nginx:test -c /etc/nginx/new.conf</td></tr><tr><td>衍生出的实际命令</td><td>nginx -c /etc/nginx/nginx.conf</td><td>nginx -c /etc/nginx/new.conf</td></tr></tbody></table><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="自定义镜像-mycentosjava8"><a href="#自定义镜像-mycentosjava8" class="headerlink" title="自定义镜像 mycentosjava8"></a>自定义镜像 mycentosjava8</h4><p><strong>要求</strong></p><ol><li>Centos7 镜像具备 vim、ifconfig、jdk8</li><li>JDK 下载镜像地址<ul><li>官网：<a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></li><li><a href="https://mirrors.yangxingzhen.com/jdk/">https://mirrors.yangxingzhen.com/jdk/</a></li></ul></li></ol><p><strong>编写</strong></p><p>准备镜像：<code>sudo docker pull centos:7</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ifconfig命令查看网络IP</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装java8以及lib库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD 是相对路径jar，把jdk-8u171-linux-x64.tar.gz添加到容器中，安装包必须要和Dockerfile文件同在一个位置</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;success--------------ok&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p><strong>构建</strong></p><p><code>docker build -t 新镜像名字:TAG .</code> </p><p>注意：TAG 后面有一个空格，一个点</p><p><strong>运行</strong></p><p><code>sudo docker build -t centosjava8:1.0 .</code></p><p><strong>再体会 UnionFS（联合文件系统）</strong></p><h4 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h4><p>虚悬镜像：构建镜像或者删除镜像的时候，出现一些错误，导致仓库名、标签都是<none>。俗称dangling image</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 dockerfile 写一个虚悬镜像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;Action is success!&#x27;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM ubuntu</span><br><span class="line"> ---&gt; 27941809078c</span><br><span class="line">Step 2/2 : CMD <span class="built_in">echo</span> <span class="string">&#x27;Action is success!&#x27;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 6d81af912655</span><br><span class="line">Removing intermediate container 6d81af912655</span><br><span class="line"> ---&gt; ff77ab86dc99</span><br><span class="line">Successfully built ff77ab86dc99</span><br><span class="line"></span><br><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY       TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">&lt;none&gt;           &lt;none&gt;    ff77ab86dc99   8 seconds ago    77.8MB</span><br></pre></td></tr></table></figure><p><strong>单独查看虚悬镜像</strong></p><p><code>sudo docker image ls -f dangling=true</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker image ls -f dangling=<span class="literal">true</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">&lt;none&gt;       &lt;none&gt;    ff77ab86dc99   2 minutes ago   77.8MB</span><br></pre></td></tr></table></figure><p><strong>删除虚悬镜像</strong></p><p>虚悬镜像已经失去存在价值，可以删除</p><p>删除所有的虚悬镜像：<code>docker image prune</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker image prune</span><br><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">Deleted Images:</span><br><span class="line">deleted: sha256:ff77ab86dc99b1d14f961856aab31e4fdd4407fa09c393150cb30608a248c35e</span><br><span class="line"></span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><h4 id="自定义镜像-myubuntu"><a href="#自定义镜像-myubuntu" class="headerlink" title="自定义镜像 myubuntu"></a>自定义镜像 myubuntu</h4><ul><li>编写：编写Dockerfile文件</li><li>构建：docker build -t 新镜像名字:TAG .</li><li>运行：docker run -it 新镜像名字:TAG</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ifconfig命令查看网络IP</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装java8以及lib库</span></span><br><span class="line"><span class="comment"># RUN apt-get -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD 是相对路径jar，把jdk-8u71-linux-x64.tar 添加到容器中，安装包必须要和Dockerfile文件在同一个路径下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;指定路径为：<span class="variable">$MYPATH</span>&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----------------------success-----------------------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><h2 id="Docker-微服务实战"><a href="#Docker-微服务实战" class="headerlink" title="Docker 微服务实战"></a>Docker 微服务实战</h2><h3 id="通过IDEA新建一个普通微服务模块"><a href="#通过IDEA新建一个普通微服务模块" class="headerlink" title="通过IDEA新建一个普通微服务模块"></a>通过IDEA新建一个普通微服务模块</h3><ol><li>建Module</li><li>改POM</li><li>写YML</li><li>主启动</li><li>业务类</li></ol><h3 id="通过Dockerfile发布微服务部署到docker容器"><a href="#通过Dockerfile发布微服务部署到docker容器" class="headerlink" title="通过Dockerfile发布微服务部署到docker容器"></a>通过Dockerfile发布微服务部署到docker容器</h3><ul><li><p>IDEA工具里面搞定微服务jar包</p></li><li><p>编写Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像使用java</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件，并链接到容器的/tmp</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为mydocker.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> docker_boot-0.0.1-SNAPSHOT.jar mydocker.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">&#x27;touch /mydocker.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/mydocker.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露6001端口作为微服务</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6001</span></span><br></pre></td></tr></table></figure></li><li><p>构建镜像</p><p><code>docker build -t mydocker:1.0 .</code></p></li><li><p>运行容器</p><p><code>docker run -d -p 6001:6001 mydocker:1.0</code></p><p>关闭防火墙</p><p><code>systemctl stop firewalld</code></p><p>重启docker</p><p><code>systemctl restart docker</code></p><p>再次运行容器</p><p><code>docker run -d -p 6001:6001 mydocker:1.0</code></p></li><li><p>访问测试</p></li></ul><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><h3 id="Docker-网络是什么"><a href="#Docker-网络是什么" class="headerlink" title="Docker 网络是什么"></a>Docker 网络是什么</h3><ul><li><p>Docker 不启动，默认网络情况</p><ul><li>ens33</li><li>lo</li><li>Virbr0</li></ul></li><li><p>Docker 启动后，网络情况：<code>docker network ls</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">56db7d5b5e57   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host      host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Docker-网络常用基本命令"><a href="#Docker-网络常用基本命令" class="headerlink" title="Docker 网络常用基本命令"></a>Docker 网络常用基本命令</h3><h4 id="All命令"><a href="#All命令" class="headerlink" title="All命令"></a>All命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network -h</span><br><span class="line">Flag shorthand -h has been deprecated, please use --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker network COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><p><code>sudo docker network ls</code></p><h4 id="查看网络源数据"><a href="#查看网络源数据" class="headerlink" title="查看网络源数据"></a>查看网络源数据</h4><p><code>sudo docker network inspect xxx网络名字</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-07-31T19:34:57.185264192+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;3bbcd1f874b5bb2b2a3931d3dd77182d239a5a012dd0e54f58e5cb383701990c&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;youthful_knuth&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;fa27541860ae4069a4836cada063b6201249b98b8ce1604dcb6efca9adfa8eb4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;b1ff5b9d1011dc2f6de7e4899442d8efc38a76b86933983b071a020fc233de46&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mysql-master&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;edc486f5c0659ed61fdc5d2f1653922e492053452966eb3fb410cb078e7d2ce0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;e64e1fb8ed15a85e0fcaf7a68a0ea15ce1f14a8d78b49b3ae7b3851f172f7262&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;redis&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;ea6963aba7fe73b636ec9a0f0bc1e9b18b8db5769915f707c5774820b81e7a65&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;ef9e0baaac004ea0d6de19bd507559a33a23b8b795b6caebe2d7335ab2ed8afb&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mysql-slave&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;746db7d5d1f13066f8240c65925663d3718994b23c199ed8b2b6107c561c0923&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="删除网络"><a href="#删除网络" class="headerlink" title="删除网络"></a>删除网络</h4><p><code>sudo docker network rm xxx网络名字</code></p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network create aa_network</span><br><span class="line">e3a2619e37e49fc43f8dd85948521d418523d9d00949ab0af62ff1822008eb94</span><br><span class="line"></span><br><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME         DRIVER    SCOPE</span><br><span class="line">e3a2619e37e4   aa_network   bridge    <span class="built_in">local</span></span><br><span class="line">56db7d5b5e57   bridge       bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host         host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none         null      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">$ sudo docker network rm aa_network</span><br><span class="line">aa_network</span><br><span class="line"></span><br><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">56db7d5b5e57   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host      host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure><h3 id="Docker-网络能干嘛"><a href="#Docker-网络能干嘛" class="headerlink" title="Docker 网络能干嘛"></a>Docker 网络能干嘛</h3><ul><li>容器间的互联和通信以及端口映射</li><li>容器IP变动时候，可以通过服务名直接网络通信而不受影响</li></ul><h3 id="Docker-网络网络模式"><a href="#Docker-网络网络模式" class="headerlink" title="Docker 网络网络模式"></a>Docker 网络网络模式</h3><h3 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h3><ul><li>bridge模式：使用–network bridge指定，默认使用docker0</li><li>host模式：使用–network host指定</li><li>none模式：使用–network none指定</li><li>container模式：使用–network container:NAME或者容器ID指定</li></ul><table><thead><tr><th>网络模式</th><th>简介</th></tr></thead><tbody><tr><td>bridge</td><td>为每一个容器分配、设置IP等，并将容器连接到一个<code>docker0</code>。虚拟网桥，默认为该模式。</td></tr><tr><td>host</td><td>容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口</td></tr><tr><td>none</td><td>容器有独立的 Network namespace，但并没有对其进行任何网络设置，如分配 veth pair 和网桥连接，IP 等。</td></tr><tr><td>container</td><td>新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口范围等</td></tr></tbody></table><h3 id="容器实例内默认网络IP生产规则"><a href="#容器实例内默认网络IP生产规则" class="headerlink" title="容器实例内默认网络IP生产规则"></a>容器实例内默认网络IP生产规则</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>创建两个Ubuntu容器实例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --name u1 ubuntu bash</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it --name u2 ubuntu bash</span><br><span class="line"></span><br><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE                               COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">b5c4415e625e   ubuntu                              <span class="string">&quot;bash&quot;</span>                   11 seconds ago   Up 11 seconds                                               u2</span><br><span class="line">ee6a2e0a644e   ubuntu                              <span class="string">&quot;bash&quot;</span>                   2 minutes ago    Up 2 minutes                                                u1</span><br></pre></td></tr></table></figure><ol start="2"><li>查看docker inspect 容器ID or 容器名字</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect u1 | tail -n 20</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;0118eb49dd28512ab82800f51c69bdaf5932c81bd334c072c97ff5c05226203c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.6&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:06&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ sudo docker inspect u2 | tail -n 20</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;272a0f885c5cdabb0561d814af50874fbb2f6dbad1ec32c407133edca6268f73&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:07&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li><p>关闭u2实例，新建u3实例，查看ip变化。</p><p>可见，u3容器实例的IP地址和u2容器实例的IP地址相同</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker rm -f u2</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it --name u3 ubuntu bash</span><br><span class="line"></span><br><span class="line">$ sudo docker inspect u3 | tail -n 20</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;a4fb4ecd447b4ab54b7cb490a4ac230cd5df6477aaa6baa5db94ea68e9542c6f&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:07&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><font color="orange"><strong>Docker 容器内部的IP是有可能会发生改变的</strong></font></p><h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><h4 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h4><p><strong>bridge是什么</strong></p><ul><li><p>Docker 服务默认会创建一个<code>docker0</code>网桥（其上有一个 docker0 内部接口），该桥接网络的名称为 docker0，它在<strong>内核层</strong>连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到<strong>同一个物理网络</strong>。Docker 默认指定了 docker0 接口的IP地址和子网掩码，<strong>让主机和容器之间可以通过网桥互相通信</strong></p></li><li><p>查看 bridge 网络的详细信息，并通过 grep 获取名称项</p><p><code>sudo docker network inspect bridge | grep name</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network inspect bridge | grep name</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br></pre></td></tr></table></figure></li><li><p>ifconfig</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig | grep docker</span><br><span class="line">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br></pre></td></tr></table></figure></li></ul><p><strong>bridge案例</strong></p><ol><li><p>说明</p><ul><li><p>Docker 使用Linux桥接，在宿主机虚拟一个Docker容器网桥（docker0），Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信</p></li><li><p><code>docker run</code> 的时候，没有指定<code>network</code>的话，默认使用的网桥模式就是bridge，使用的就是docker0。在宿主机<code>ifconfig</code>就可以看到<code>docker0</code>和自己<code>create</code>的<code>network</code> eth0、eth1、eth2…代表网卡1、网卡2、网卡3…，lo代表127.0.0.1，即<code>localhost</code>，inet addr 用来表示网卡的IP地址</p></li><li><p>网桥<code>docker0</code>创建一对对等虚拟设备接口，一个叫<code>veth</code>，另一个叫<code>eth0</code>，成对匹配</p><ul><li><p>整个宿主机的网桥模式都是<code>docker0</code>，类似一个交换机有一堆接口，每个接口叫<code>veth</code>，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此连通（这样一对接口叫 veth pair）</p></li><li><p>每个容器实例内部也有一块网卡，每个接口叫 eth0</p></li><li><p>docker0 上面的每个 veth匹配某个容器实例内部的 eth0，两两配对，一一匹配</p></li></ul></li></ul><p>通过上述，将宿主机上所有容器都连接到这个内部网络上，两个容器在同一个网络下，会从这个罔顾炎下各自拿到分配的IP，此时两个容器的网络是互通的</p><p><img src="dockernetwork.png"></p></li><li><p>代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class="line">$ sudo docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure></li><li><p>两两匹配验证</p><p><img src="bridge1.png"></p><p><img src="bridge2.png"></p><p><img src="dockerbridge.png"></p></li></ol><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p><strong>host 是什么</strong></p><p>直接使用宿主机的IP地址与外界进行通信，不再需要额外进行NAT转换</p><p><strong>host 案例</strong></p><ol><li><p>说明</p><ul><li>容器将不会获得一个独立的 Network Namespace，而是和宿主机共用一个 Network Namespace。<font color="orange">容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口。</font></li></ul></li><li><p>代码</p><ul><li><p>警告 ⚠️</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br><span class="line">WARNING: Published ports are discarded when using host network mode</span><br><span class="line">c3ab7f5659606f0cfe7ca6c452e605b1b8158aff4db1c81845908303ae566baf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们用host网络时，会弹出警告：发布的端口是不被推荐的</span></span><br></pre></td></tr></table></figure><p><img src="host.png"></p><p><strong>问题：</strong></p><p>docker 启动时总是遇见标题中的警告</p><p><strong>原因：</strong></p><p>docker 启动时指定 <code>--network=host</code> 或 <code>-net=host</code>，如果还指定了 <code>-p</code> 映射端口，那这个时候就会有此警告。</p><p>并且通过-p设置的参数将不会起任何作用，端口号会以主机端口号为主，重复时则递增。</p><p><strong>解决：</strong></p><p>解决的办法就是使用docker的其他网络模式，例如<code>--network=bridge</code>，这样就可以解决问题，或者直接无视</p></li><li><p>正确 ✅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker -d --network host --name tomcat83 billygoo/tomcat8-jdk8 </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器的网关、IP地址为空</span></span><br><span class="line">$ sudo docker inspect tomcat83 | tail -f 20</span><br><span class="line"><span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器内部，查看网络会发现，容器的ip addr 与宿主机的ip addr 一样</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>无之前的配对显示，看容器实例内部</p><p>进入容器内部，查看网络会发现，容器的ip addr 与宿主机的ip addr 一样</p></li><li><p>没有设置-p的端口映射了，如何访问启动的tomcat83？？</p><p><code>http://宿主机IP:8080</code></p><p>在CentOS里面默认的火狐浏览器访问容器内的tomcat83看到访问成功，因为此时容器的IP借用主机的，所以容器共享宿主机网络IP，这样的好处是外部主机与容器可以直接通信</p></li></ol><h4 id="none"><a href="#none" class="headerlink" title="none"></a>none</h4><ol><li><p>none是什么</p><p><strong>禁用网络功能，只有IO标识（就是127.0.0.1表示本地回环）</strong></p></li><li><p>none案例</p><p><code>sudo docker run -d -p 8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8</code></p></li></ol><h4 id="container"><a href="#container" class="headerlink" title="container"></a>container</h4><ol><li><p>Container是什么</p><p>新建的容器和已经存在的一个容器共享一个网络IP配置而不是和宿主机共享。</p><p>新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p><p><img src="networkcontainer.png"></p></li><li><p>错误案例 ❌</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 8085:8080 --name tomcat85 billygoo/tomcat8-jdk8</span><br><span class="line">sudo docker run -d -p 8086:8080 --network container:tomcat85 --name tomcat86 billygoo/tomcat8-jdk8</span><br><span class="line">docker: Error response from daemon: conflicting options: port publishing and the container <span class="built_in">type</span> network mode.</span><br><span class="line">See <span class="string">&#x27;docker&#x27;</span> run --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 相当于tomcat86和tomcat85公用同一个ip同一个端口，导致端口冲突</span></span><br></pre></td></tr></table></figure><p>本案例并不适合用tomcat进行演示</p></li><li><p>正确案例 :heavy_check_mark:</p><p>Alpine Linux 是一款独立的、非商用的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。因小巧、简单、安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小五脏俱全，镜像非常小巧，不到6M的大小，所以特别适合容器打包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it --name alpine1 alpine /bin/sh</span><br><span class="line">sudo docker run -it --network container:alpine1 --name alpine2 alpine /bin/sh</span><br></pre></td></tr></table></figure><p><img src="container1.png"></p><p>假如此时关闭alpine1，再看看alpine2</p><p><img src="container2.png"></p></li></ol><h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><ol><li> 没用自定义网络</li></ol><ul><li><p>案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class="line">$ docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8</span><br><span class="line"><span class="comment"># 上述成功启动并用docker exec进入各自容器实例内部</span></span><br></pre></td></tr></table></figure></li><li><p>问题</p><p>按照IP地址ping是OK的</p><p><img src="%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C1.png"></p><p>按照服务名ping不通</p><p><img src="%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C2.png"></p></li></ul><ol start="2"><li><p>用了自定义网络</p><ul><li><p>自定义桥接网络，自定义网络默认使用的是桥接网络bridge</p></li><li><p>新建自定义网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network create zzyy_network</span><br><span class="line">89a510a9014b5f51d232e546d3f69ea7e70c80f6d8a22563f4f9ddab36565ff5</span><br><span class="line"></span><br><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">56db7d5b5e57   bridge         bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host           host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none           null      <span class="built_in">local</span></span><br><span class="line">89a510a9014b   zzyy_netwrok   bridge    <span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>新建容器加入上一步新建的自定义网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -p 8081:8080 --network zzyy_network --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class="line">$ sudo docker run -d -p 8082:8080 --networl zzyy_network --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure></li><li><p>互相ping测试</p><p><img src="%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C3.png"></p></li></ul></li><li><p>自定义网络的问题结论</p><p><font color=orange>自定义网络本身就维护好了主机名和IP的对应关系（IP和域名都能通）</font></p></li></ol><h3 id="Docker平台架构图解"><a href="#Docker平台架构图解" class="headerlink" title="Docker平台架构图解"></a>Docker平台架构图解</h3><h3 id="整体说明"><a href="#整体说明" class="headerlink" title="整体说明"></a>整体说明</h3><p>从其架构和运行流程来看，Docker是一个 C/S 模式的架构，后端是一个耦合架构，众多模块各司其职</p><p>Docker 运行的基本流程为：</p><ol><li>用户使用 Docker Clinet 与 Docker Daemon 建立通信，并发送请求给后者</li><li>Docker Daemon 作为 Docker 架构中的主体部分，首先提供Docker Server的功能使其可以接受Docker Client的请求</li><li>Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式存在</li><li>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver将下载镜像以 Graph 的形式存储</li><li>当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境</li><li>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Exec driver 来完成</li><li>Libcontainer 是一项独立的容器管理包，Network dirver 以及 Exec driver 都是通过 LibContainer 来实现具体对容器进行的操作</li></ol><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="docker%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png"></p><h2 id="Docker-Compose-容器编排"><a href="#Docker-Compose-容器编排" class="headerlink" title="Docker-Compose 容器编排"></a>Docker-Compose 容器编排</h2><h3 id="Docker-Compose是什么"><a href="#Docker-Compose是什么" class="headerlink" title="Docker-Compose是什么"></a>Docker-Compose是什么</h3><p>Docker-Compose是Docker官方的开源项目，负责实现对Docker容器集群的快速编排</p><p>Compose 是 Docker 公司推出的一个工具软件，可以管理多个Docker容器组成一个应用。你需要定义一个YAML格式的配置文件docker-compose.yml，写好多个容器之间的调用关系。然后，只要一个命令，就能同事启动/关闭这些容器。</p><h3 id="Docker-Compose能干嘛"><a href="#Docker-Compose能干嘛" class="headerlink" title="Docker-Compose能干嘛"></a>Docker-Compose能干嘛</h3><p>docker建议我们每一个容器中只运行一个服务，因为docker容器本身占用的资源极少，所以最好是将每个服务单独分割开来，但是我们又面临了一个问题？</p><p>如果我们需要同事部署好多个服务，难道要每个服务单独写一个dockerfile然后在构建镜像，构建容器，这样累都累死了，所以docker官方给我们提供了docker-compose多服务部署工具</p><p>例如要实现一个Web微服务项目，除了Web服务容器本身，往往还需要再加上后端的数据库mysql服务容器，redis服务器，注册中心eureka，甚至还包括负载均衡容器等等……</p><p>Compose允许用户通过一个单独的docker-compose.yml模板文件（YAML格式）来定义一组相关联的应用容器为一个项目（project）</p><p>可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker-Compose解决了容器与容器之间如何管理编排的问题。</p><h3 id="Docker-Compose安装步骤"><a href="#Docker-Compose安装步骤" class="headerlink" title="Docker-Compose安装步骤"></a>Docker-Compose安装步骤</h3><ul><li><p>官网 <a href="https://docs.docker.com/compose/compose-file/compose-file-v3">https://docs.docker.com/compose/compose-file/compose-file-v3</a></p></li><li><p>官网下载 <a href="https://docs.docker.com/compose/install">https://docs.docker.com/compose/install</a></p></li><li><p>安装步骤</p><p>使用 <code>curl</code> 将 Compose 文件下载到 <code>/usr/local/bin</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>下载完成后，将该文件设置为可执行文件</p><p><code>sudo chmod +x /usr/local/bin/docker-compose</code></p><p>运行下面的命令验证是否安装成功并查看Compose的版本：</p><p><code>docker-compose --version</code></p><p>输出界面如下：</p><p><code>docker-compose version 1.25.0, build unknown</code></p></li><li><p>卸载步骤</p><p><code>sudo rm /usr/local/bin/docker-compose</code></p></li></ul><h3 id="Compose核心概念"><a href="#Compose核心概念" class="headerlink" title="Compose核心概念"></a>Compose核心概念</h3><ul><li>一文件：docker-compose.yml</li><li>两要素<ul><li>服务：一个个应用容器实例，比如订单微服务、库存微服务、MySQL微服务、Nginx容器或者redis容器</li><li>工程：由一组关联的应用容器组成的一个完整业务单元，在docker-compose.yml文件中定义</li></ul></li></ul><h3 id="Compose使用的三个步骤"><a href="#Compose使用的三个步骤" class="headerlink" title="Compose使用的三个步骤"></a>Compose使用的三个步骤</h3><ul><li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li><li>使用docker-compose.yml定义一个完整业务单元，安排好整体应用中的各个容器服务</li><li>最后，执行docker-compose up命令来启动并运行整个应用程序，完成意见部署上线</li></ul><h3 id="Compose常用命令"><a href="#Compose常用命令" class="headerlink" title="Compose常用命令"></a>Compose常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -h<span class="comment"># 查看帮助</span></span><br><span class="line">docker-compose up<span class="comment"># 启动所有docker-compose服务</span></span><br><span class="line">docker-compose up -d<span class="comment"># 启动所有docker-compose服务并后台运行</span></span><br><span class="line">docker-compose down<span class="comment"># 停止并删除容器、网络、卷、镜像</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> yml里面的服务id<span class="comment"># 进入容器实例内部 docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span></span><br><span class="line">docker-compose ps<span class="comment"># 展示当前docker-compose编排过的运行的所有容器</span></span><br><span class="line">docker-compose top<span class="comment"># 展示当前docker-compose编排过得容器进程</span></span><br><span class="line">docker-compose logs yml里面的服务id<span class="comment"># 查看容器输出日志</span></span><br><span class="line">docker-compose config<span class="comment"># 检查配置</span></span><br><span class="line">docker-compose config -q<span class="comment"># 检查配置，有问题才有输出</span></span><br><span class="line">docker-compose restart<span class="comment"># 重启服务</span></span><br><span class="line">docker-compose start<span class="comment"># 启动服务</span></span><br><span class="line">docker-compose stop<span class="comment"># 停止服务</span></span><br></pre></td></tr></table></figure><h3 id="Compose编排微服务"><a href="#Compose编排微服务" class="headerlink" title="Compose编排微服务"></a>Compose编排微服务</h3><h4 id="改造升级微服务工程docker-boot"><a href="#改造升级微服务工程docker-boot" class="headerlink" title="改造升级微服务工程docker_boot"></a>改造升级微服务工程docker_boot</h4><h4 id="不用Compose"><a href="#不用Compose" class="headerlink" title="不用Compose"></a>不用Compose</h4><h4 id="swagger测试"><a href="#swagger测试" class="headerlink" title="swagger测试"></a>swagger测试</h4><h4 id="上面成功了，有哪些问题？"><a href="#上面成功了，有哪些问题？" class="headerlink" title="上面成功了，有哪些问题？"></a>上面成功了，有哪些问题？</h4><h4 id="使用Compose"><a href="#使用Compose" class="headerlink" title="使用Compose"></a>使用Compose</h4><h2 id="Docker-轻量级可视化工具-Portainer"><a href="#Docker-轻量级可视化工具-Portainer" class="headerlink" title="Docker 轻量级可视化工具 Portainer"></a>Docker 轻量级可视化工具 Portainer</h2><h2 id="Docker-容器监控之-Cadvisor-InfluxDB-Granfana"><a href="#Docker-容器监控之-Cadvisor-InfluxDB-Granfana" class="headerlink" title="Docker 容器监控之 Cadvisor+InfluxDB Granfana"></a>Docker 容器监控之 Cadvisor+InfluxDB Granfana</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker-复杂安装详说&quot;&gt;&lt;a href=&quot;#Docker-复杂安装详说&quot; class=&quot;headerlink&quot; title=&quot;Docker 复杂安装详说&quot;&gt;&lt;/a&gt;Docker 复杂安装详说&lt;/h2&gt;&lt;h3 id=&quot;安装MySQL主从复制&quot;&gt;&lt;a href=&quot;#安装MySQL主从复制&quot; class=&quot;headerlink&quot; title=&quot;安装MySQL主从复制&quot;&gt;&lt;/a&gt;安装MySQL主从复制&lt;/h3&gt;&lt;h4 id=&quot;主从复制的简介&quot;&gt;&lt;a href=&quot;#主从复制的简介&quot; class=&quot;headerlink&quot; title=&quot;主从复制的简介&quot;&gt;&lt;/a&gt;主从复制的简介&lt;/h4&gt;&lt;p&gt;在实际的生产中，为了解决Mysql的单点故障已经提高MySQL的整体服务性能，一般都会采用&lt;strong&gt;「主从复制」&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如：在复杂的业务系统中，有一句sql执行后导致锁表，并且这条sql的的执行时间有比较长，那么此sql执行的期间导致服务不可用，这样就会严重影响用户的体验度。&lt;/p&gt;
&lt;p&gt;主从复制中分为&lt;strong&gt;「主服务器（master）「和」从服务器（slave）」&lt;/strong&gt;，&lt;strong&gt;「主服务器负责写，而从服务器负责读」&lt;/strong&gt;，Mysql的主从复制的过程是一个&lt;strong&gt;「异步的过程」&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这样读写分离的过程能够是整体的服务性能提高，即使写操作时间比较长，也不影响读操作的进行。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>爱的五种语言</title>
    <link href="http://example.com/2022/08/07/%E7%88%B1%E7%9A%84%E4%BA%94%E7%A7%8D%E8%AF%AD%E8%A8%80/"/>
    <id>http://example.com/2022/08/07/%E7%88%B1%E7%9A%84%E4%BA%94%E7%A7%8D%E8%AF%AD%E8%A8%80/</id>
    <published>2022-08-07T02:18:15.000Z</published>
    <updated>2022-08-07T15:24:33.750Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-OKuqZzDY" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="521416693" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><br/><p>爱大致可以分为五种语言——肯定的言辞、精心的时刻、接受礼物、服务的行动、身体的接触。</p><p>我们每个人的爱语都是不同的，比如我的爱语是精心的时刻，那我就更希望我的爱人能够多花时间陪我，不管是做任何事，只要是肯认真地陪我。我就认为他是爱我的、关系我的，这样会使我的爱箱常满。</p><p>常有人说，婚姻是爱情的坟墓，其实是我们不懂得说第二种爱的语言。如果你的爱语是精心的时刻，那么你肯定会专心地陪着爱人做任何事。你在用你的方式爱着对方，同时你也希望对方用同样的方式对待你。</p><p>其实，这只是你的爱语。对于对方来说，他可能并不太对这种爱的方式感冒。</p><p>这时候，我们都须竭力学习第二种爱的语言——即对方的爱语，如果我们要他感受到我们所传达的爱，我们就必须以他的爱语来表达。</p><span id="more"></span><h3 id="肯定的言辞"><a href="#肯定的言辞" class="headerlink" title="肯定的言辞"></a>肯定的言辞</h3><p>首先需要澄清的是：<strong>肯定的言辞并非是用口头的称赞来使你的配偶替你做事。</strong>爱的目的，不是得到你想要的，而是为了你所爱之人的福祉，去做什么。</p><p>肯定的言辞分为：<strong>鼓励的话语</strong>、<strong>仁慈的话语</strong>、<strong>谦和的话语</strong>、<strong>其他肯定的方言</strong>这四种</p><h4 id="鼓励的话语"><a href="#鼓励的话语" class="headerlink" title="鼓励的话语"></a>鼓励的话语</h4><p>给予口头的赞赏，是向你配偶表达肯定言词的一种方式。另外一种用语就是鼓励的话。鼓励这个字表示[激起某人的勇气]，我们所有的人都有一些缺乏安全感的地方。缺乏勇气，常阻碍我们去成就一些积极想去做的事。可能在你配偶缺乏安全感的地方，有潜在之能力，正等着你用鼓励的话语来激发。</p><p>对于鼓励的话语，需要注意的是：<strong>不是用鼓励的话语来向配偶施加压力，强迫他去做你要求他做的事。而是鼓励他去发展他已经有的兴趣。</strong>∂</p><h4 id="仁慈的话语"><a href="#仁慈的话语" class="headerlink" title="仁慈的话语"></a>仁慈的话语</h4><p>“说话的方式是极度重要的。一位古代的贤人曾说：「回答柔和，使怒消退。」当你的配偶发怒、烦乱、说话火爆的时候，如果你选择做有爱心的人，你不会火上加油，反而是以柔和的声音作为回报。你会把他说的话，当做有关他感觉的讯息；你会让他告诉你，他的伤痛、怒气、以及对事情的认知：你会设法置身于他的处境，经由他的双眼来看事情；然后，你会柔和、用爱心回答，你了解他为什么会有那样的感觉。如果是你冒犯了他，你愿意认错，请求饶恕；如果你的动机和他所了解的不一样，你可以和善地解释你的动机。你会寻求了解和重修旧好，而不是证明你自己的认知，是对所发生的事情之唯一诠释。这才是成熟的爱：如果我们企求一个成长的婚姻，这即是我们切望的健康之爱。</p><p>爱是不保存犯错的记录；爱是不提过去的失败。我们没有一个人是完美的；在婚姻中，我们并非总是做最好或对的事。有时候，我们在做事或说话时，伤了配偶；我们无法擦掉过去，只能承认、同意那是错误的，并且请求饶恕，试着改变。除了承认自己的失败并请求饶恕，我们无法再做任何事来减轻配偶的伤痛。当我们自己被配偶亏待了，她痛苦地认错，且要求饶恕后，我们可以选择公义或是饶恕。如果选择了公义去报复，要她为错误付代价，那么我们就是使自己成为法官，使她成为罪犯，亲密的关系就变成不可能了；但如果选择了饶恕，亲密关系就可以恢复。饶恕才是爱的方式。”</p><h4 id="谦和的话语"><a href="#谦和的话语" class="headerlink" title="谦和的话语"></a>谦和的话语</h4><p>“爱是提出请求，而非要求。若我要求我的配偶，我就变成了父亲或母亲，而他则成了孩子。只有父母亲才告诉三岁的孩子应该做什么；事实上，是必须做什么。那是应该的，因为三岁的孩子，还不知道如何在靠不住的人生大海中航行。可是，在婚姻中，我们是平等、成年的伙伴。我们虽不完美，可是我们已成年，而且是合伙人。如果，我们要发展亲密关系，我们需要知道彼此的愿望；如果，我们想要彼此相爱，我们需要知道对方要的是什么。”</p><p>“当你向配偶提出请求，是在肯定他或她的价值和能力。你等于在本质上表明，她有些什么，或者可以做些什么；这对你是有意义、有价值的。可是，当你提出的是要求，你就不是在爱人，而成了暴君。你的配偶不但不觉得被肯定，反感到被贬低了。请求带着选择；你的配偶可以选择成全你的请求，或者否决它，因为爱永远是一个选择，那是使爱有意义的原因。知道我的配偶如此爱我，愿意成全我的某一个请求；在情绪上，那表达了她关心我、尊重我、仰慕我，而且要做什么事来使我高兴。我们不能经由要求，得到情感上的爱；事实上，配偶也许会依从我们的要求，可是那并不是爱的表示。那是一种惧怕、愧疚、或者什么其它情绪的行动，但不是爱。因此，请求制造了表示爱的可能性，而要求则扼杀了那样的可能性。”</p><h4 id="其他肯定的方言"><a href="#其他肯定的方言" class="headerlink" title="其他肯定的方言"></a>其他肯定的方言</h4><p>“你可能也要试试给予不直接的肯定言词；就是当你的配偶不在场的时候，说些夸赞他或她的话。最后，总有人告诉你的配偶，而你会得到爱的满分。告诉你的丈母娘，你的妻子有多好；当她告诉她女儿的时候会更精彩，你甚至会得到更高的分数。除此之外，有你配偶在场的时候，当着别人的面肯定他(或她)；当你为某一成就，得到公开荣誉的时候，一定要跟你的配偶分享这份功劳。你也可以试试手写肯定的言词：写出来的东西，有让人重复阅读的好处。”</p><h3 id="精心的时刻"><a href="#精心的时刻" class="headerlink" title="精心的时刻"></a>精心的时刻</h3><p>精心时刻的中心意思是“同在一起”。不单指接近……同在一起乃是跟彼此注意力的焦点有关。即<strong>给予某人全部的注意力。</strong></p><h4 id="集中注意力"><a href="#集中注意力" class="headerlink" title="集中注意力"></a>集中注意力</h4><p>能够给你的配偶“精心时刻”的关键在于注意力要集中，特别是在这个信息化、快节奏的时代。</p><p>精心时刻的意义，并非指我们必须用所有共处的时间，凝视着对方；而应该是说，两人同心一起做什么，并且给予对方全部的注意力。参与的那项活动是次要的，重要的是花时间关注对方的情感，而活动只是创造那种同在一起的感觉的载体。</p><h4 id="精心的会话"><a href="#精心的会话" class="headerlink" title="精心的会话"></a>精心的会话</h4><p>精心的会话是指具有同理心的对话，两个人在友善、不受干扰的环境中，分享他们的经验、思想、感觉和愿望。</p><p>“精心会话跟第一种爱的语言，是很不同的。肯定言词的焦点是我们在说什么，而精心会话的焦点是我们在听什么。如果我要以精心时刻来表达对你的爱，在那段交谈的时间，我会专心让你吐露心声，而且具有同理心地倾听你所要说的话。我会问些问题，但不是以不耐烦的方式，而是以真实的渴望去问，为要了解你的思想、感觉和愿望。”</p><p>有时候我们的爱人会一直跟我们诉工作或者生活上的苦，其他她要的不是解决问题的建议，而是能够了解她的不易。很多男生多会为自己的女友出谋划策，认为如果你不想采取我的建议，就不要再跟我谈这件事。但是<strong>婚姻是一种关系，而非一个待完成的方案，或是一个待解决的问题。这种关系要求具有同理心的倾听，以了解对方的思想、感觉和愿望为目的。</strong>当对方要求我们提供建议的时候，我们才该必须提供建议，并且绝不可带着优越感的骄傲。</p><p>下面是简短的建议：</p><ol><li><p>当配偶说话的时候，保持眼光的接触 那可以防止你心不在焉，而且传达对你全部的注意力。</p></li><li><p>不要一边听配偶说话，一边做别的事记住，精心的时刻，是给予某人你全部的注意力。如果你在看什么、阅读什么、或者做什么非常有兴趣的事，无法分神，马上告诉他(她)实话。一种正面的方式可以是：「我知道你要跟我说话，我有兴趣要听，而且，我要给你我全部的注意力。现在我没法子，可如果你给我十分钟完成这件事，我可以坐下来听你说话。」多数的配偶会尊重这样的请求。</p></li><li><p>注意听感觉 问你自己：「我的配偶正体验什么样的情绪？」当你认为你有了答案，就确定它。例如：「听起来好象你觉得失望，因为我忘记了……。」这不仅给了他机会说明他的感觉，也传达了你在专心地听他说话。</p></li><li><p>观察肢体语言 紧握的拳头、颤抖的双手、眼泪、皱眉头、和眼神的转动可以给你一些有关对方感觉的线索。有时候言词表示了某种信息，但在肢体语言上却诉说着另一种信息。可请求说明，以确定你知道对方真正在想些什么、感觉到什么。拒绝插嘴最近的一个研究指出，一般人听人说话，只过了十七秒钟，就会插嘴、发表自己的意见。当配偶讲话的时候，如果要给对方全部的注意力，就要避免为自己辩护、口出恶言责难对方、或者武断地表示自己的立场。目标是发掘配偶的思想和感觉，不是保卫自己或者矫正对方，而是了解他(她)。</p></li></ol><h4 id="学习说话"><a href="#学习说话" class="headerlink" title="学习说话"></a>学习说话</h4><p>“精心之会话，不仅需要具同理心的倾听，还需要自我表白。当一个妻子说：「但愿我的丈夫愿意说话。我从不知道他在想什么，或者他觉得怎么样。」她祈求着亲密感，要感觉跟丈夫接近。可是如果她不认识一个人，她怎么能感觉与他接近呢？为了使她感觉到被爱，他必须学习表白自己。如果她的主要爱语是精心的时刻，而她的方言是精心的会话；那么她的情绪爱箱永不会被填满，除非他能告诉太太他的思想和感觉。”</p><p>“自我表白对我们有些人来说，是不容易的。许多成年人，从小生长在一个没有鼓励、甚至责备他们表达自己思想和感觉的家庭中；要求一个玩具，得到的响应却是父母长篇大论说家用如何拮据的唠叨话；这个孩子带着愧疚失望地走开了，只因为他有一个愿望；因此，他很快地学会了，不去表达自己的愿望。当他表示怒气的时候，父母以严厉和责难的话作为回报；于是这孩子就学会了，表示愤怒的情绪是不恰当的。如果使这个孩子对表示失望(因为他不能跟父亲到店里买东西)也觉得愧疚，他就学会压抑自己的失望。在这种成长背景下进入成年期，我们很多人就习惯去否认自己的感觉，跟情绪的自我失去了连系。”</p><h4 id="精心之活动"><a href="#精心之活动" class="headerlink" title="精心之活动"></a>精心之活动</h4><p>“精心之活动，可以包括任何你们个人、或者两人同有兴趣的事：其中强调的不是你们做什么，而是你们为什么做它：它的目的是两人一起经历什么事，事后觉得：「他关心我。他愿意跟我一起做我喜欢的事，而且他有正面的态度。」那就是爱，对有些人，那是最响亮的爱。”</p><p>“一个精心活动之必要成分是：(一)至少你们之中一人想作这活动，(二)另一个人也愿意做这活动，(三)你们俩都知道为何要一同作活动：藉同在一起的机会来表达爱。”</p><h3 id="接受礼物"><a href="#接受礼物" class="headerlink" title="接受礼物"></a>接受礼物</h3><p>礼物是爱的视觉象征。如果你的配偶主要的爱语是接受礼物。那么，你就可以称为送礼物的高手。</p><p>“礼物不需要是昂贵的，也不需要每个星期送一次。对于某些人，礼物的价值与钱币的价值无关，只与爱的程度有关。”</p><p>摘录来自<br>爱的五种语言<br>电子书免费赠送:行行微信491256034<br>此材料可能受版权保护。</p><p>接受礼物分为：最好的投资、把自己当作礼物</p><p>“礼物可以是买来的、找到的、或者自制的。丈夫在路旁停下来，为妻子摘一朵野花，他为自己找到了一种爱的表示；除非，他的妻子对野花过敏。对于负担得了的人，用不到五块钱，你可以买一张美丽的卡片。对于负担不起的人，你可以自制一张。在废纸堆里找张纸，从中间对折，用剪刀剪出一个心形，写上「我爱你」，然后签上你的名字。礼物不需要是昂贵的。”</p><h4 id="最好的投资"><a href="#最好的投资" class="headerlink" title="最好的投资"></a>最好的投资</h4><p>“如果，你发觉你配偶主要的爱的语言，是接受礼物；那么，你也许会发现，为他或她买礼物，是你能做的最好投资。”</p><h4 id="把自己当作礼物"><a href="#把自己当作礼物" class="headerlink" title="把自己当作礼物"></a>把自己当作礼物</h4><p>“有一种无形的礼物，有时候胜过那可以拿在手里的礼物；我称之「自己就是礼物」，或以「在场作伴」为厚礼。当你的配偶需要你的时候，你就在那里陪伴：这对主要爱的语言是接受礼物的人，传达了响亮的信息。”</p><h3 id="服务的行动"><a href="#服务的行动" class="headerlink" title="服务的行动"></a>服务的行动</h3><p>“所谓服务的行动，是指你的配偶想要你做的事。你设法借着替他(她)服务，而使他(她)高兴；借着替他(她)做事，而表示你对他(她)的爱。”</p><p><strong>在服务的行动中，我们需要请求对方的帮助，而非要求对方。请求会引导爱，而要求却阻碍爱的流通。</strong></p><p>爱是自由地付出，是不能被要求的。我们可以请求对方什么事，可是绝不可以要求任何事。</p><p>不要得不到爱人的帮助而刻意的批评对方，因为批评是一种无效的祈求爱的方式。</p><h3 id="身体的接触"><a href="#身体的接触" class="headerlink" title="身体的接触"></a>身体的接触</h3><p>我们早就知道，身体的接触是沟通情感的一种方式。在儿童发展方面，无数的研究下了这样的结论：有人拥抱、有人亲吻的婴孩，比那些长期没人理会、没能接受身体抚触的婴孩，在情绪发展上会来得健康。</p><p>“在婚姻中的爱抚可以有很多形式。因为触觉接受器散布全身，所以用充满之爱来抚触你的配偶，几乎任何部位，都可以是爱的表示。这并不是说，所有的触摸都是同等的，仍有某些特别的方式，会带给你的配偶更多的乐趣。当然，你最好的老师是你的配偶；毕竟，她才是你企求去爱的那一位，她最知道什么是自己所谓的爱的触摸。莫坚持以自己的方式和时间去抚摸她，要学习说她爱的方言。对你配偶而言，也许有些触摸是不舒服或者讨厌的；若继续坚持那样的抚摸，则传达与爱相反的信息，等于是说明了你感受不到她的需要，而且你对她所认为的愉快的事不关心。不要再犯这样的错；错误地相信带给你快乐的触摸，也会带给配偶快乐。</p><p>爱的抚摸是要明确且全神贯注的；比如；搓揉背部，或者性爱前的游戏、进入行房的高潮。另一方面，爱的抚摸可以是含蓄的，只需要短短的一刻；比如：当你倒咖啡给他的时候，把手放在他的肩头；你们在厨房“中擦身而过时，轻触到对方的身体。显然明确之爱的抚摸要花较多的时间；不仅在实际的抚摸上，而且培养你逐渐了解如何以这种方式向你的配偶表达爱。如果背部的按摩，能大声地向你的配偶传达爱，那么，你为了成为一个好的按摩者所花的时间、金钱和精力，都值得了。如果行房是你配偶的主要方言，阅读和讨论做爱的艺术，将会增强你对爱的表达。</p><p>含蓄之爱的抚摸，需要的时间较少，可是得多花心思；尤其是如果你主要的爱的语言，并非身体的抚摸，而如果你也不是从一个「抚摸的」家庭里长大，当你们在看喜欢的电视节目时，坐在沙发上彼此相靠紧些，并不需要额外的对话，但效果却如大声在传达你的爱。当你穿过房间时配偶正坐在那儿，抚摸他，只需要一分钟。你们出门时要彼此抚摸；回家的时候，也是一样。那可以只是短短的一吻或拥抱，但却从你的抚摸表达了深情。</p><p>一旦你发现配偶主要的爱语是身体的接触以后，就只有你的想象力可以限制你表达爱的方式了。而发现抚摸身体的新方式和新地方，总可以成为令人兴奋的挑战。如果，过去你不是一个「桌面下的抚摸者」，你可能会发现，那样将会为你们外出的晚餐添上火花。如果你不习惯在公众场合牵手，你也许会发现，漫步经过停车场时，你可以填满你配偶情感的爱箱。如果，你们通常不是一坐进车子里就亲吻的话，你也许会发现，那会使你的旅游乐趣无穷。在你的配偶外出购物前拥抱她，不仅可以表示爱，也会使她早些回家。在新的地方尝试新的身体接触，并且让你的配偶告诉你他的反应，他是否觉得那是愉快的。记住，他说的才算数；你在学习说的是他的语言。”</p><h4 id="身体接触的本质"><a href="#身体接触的本质" class="headerlink" title="身体接触的本质"></a>身体接触的本质</h4><p>“这时代的特征显示出性开放和性自由的特性。在那样的自由下，我们已经证明开放的婚姻(配偶双方有自由与其它人有性的亲密关系)是不真实的。那些不以道德观点来反对的人，最终仍会以情感的观点来反对。在我们对亲密和爱的需求中，有某些成分不允许我们给配偶这样的自由。当我们察觉自己的配偶在性方面跟某人有牵连时，那种情感上的痛苦是十分深刻，而且婚姻的亲密感将消逝无踪。在辅导人员的档案里满是这样的记录；丈夫或妻子设法努力解决因配偶的不忠实所引致的情感创伤。那种创伤对一个主要爱语是身体接触的人来说，更加剧烈。他深深渴望得到的(经由身体的抚摸而表达的爱)，现在却被别人硬是夺走。他的情绪爱箱不仅虚空，还被暴怒打得满是窟窿。为了满足那些情绪的需要，尚需要大加整修一番。”</p><h4 id="危机与身体的接触"><a href="#危机与身体的接触" class="headerlink" title="危机与身体的接触"></a>危机与身体的接触</h4><p>“所有的婚姻都会经历危机；如同父母的去世是不可避免的，车祸每年使千万人伤残和死亡，疾病对人一视同仁；失望是人生的一部分。在危机中你能为配偶做的最重要的事，是爱他或她。如果你配偶主要爱的语言，是身体的接触；在她哭的时候，没有任何事比搂着她更重要了。你说的话也许不算什么，可是你的抚触会传达你的关心。危机为表示爱提供了一个独特的机会，在危机过去很久以后，你温柔的抚触仍然会被记得；而你若是藉此来表示，可能永不会被忘记。”</p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-OKuqZzDY&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;521416693&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;br/&gt;

&lt;p&gt;爱大致可以分为五种语言——肯定的言辞、精心的时刻、接受礼物、服务的行动、身体的接触。&lt;/p&gt;
&lt;p&gt;我们每个人的爱语都是不同的，比如我的爱语是精心的时刻，那我就更希望我的爱人能够多花时间陪我，不管是做任何事，只要是肯认真地陪我。我就认为他是爱我的、关系我的，这样会使我的爱箱常满。&lt;/p&gt;
&lt;p&gt;常有人说，婚姻是爱情的坟墓，其实是我们不懂得说第二种爱的语言。如果你的爱语是精心的时刻，那么你肯定会专心地陪着爱人做任何事。你在用你的方式爱着对方，同时你也希望对方用同样的方式对待你。&lt;/p&gt;
&lt;p&gt;其实，这只是你的爱语。对于对方来说，他可能并不太对这种爱的方式感冒。&lt;/p&gt;
&lt;p&gt;这时候，我们都须竭力学习第二种爱的语言——即对方的爱语，如果我们要他感受到我们所传达的爱，我们就必须以他的爱语来表达。&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>写在七夕后——关于爱情的一些感受</title>
    <link href="http://example.com/2022/08/04/%E5%86%99%E5%9C%A8%E4%B8%83%E5%A4%95%E5%90%8E%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E7%88%B1%E6%83%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E5%8F%97/"/>
    <id>http://example.com/2022/08/04/%E5%86%99%E5%9C%A8%E4%B8%83%E5%A4%95%E5%90%8E%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E7%88%B1%E6%83%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E5%8F%97/</id>
    <published>2022-08-03T16:19:14.000Z</published>
    <updated>2022-08-08T12:59:11.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-fZuRgzIF" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1330348068" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><br/><center>南有乔木，不可休思；汉有游女，不可求思。<br>汉之广矣，不可泳思；江之永矣，不可方思。<br>翘翘错薪，言刈其楚；之子于归，言秣其马。<br>汉之广矣，不可泳思；江之永矣，不可方思。<br>翘翘错薪，言刈其蒌；之子于归，言秣其驹。<br>汉之广矣，不可泳思；江之永矣，不可方思。</center><span id="more"></span><br><p>下面的话送给自己时刻惊醒，转自罗翔老师的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">“哎呦，他回我微信晚了一点，是不是不喜欢我了呀。”</span><br><span class="line">“哎呦，我对领导没有称您，称了个你，他会不会瞧不起我呀。”</span><br><span class="line">每天这种小心思呀，每天都在猜啊。所以呢，这就很痛苦的。</span><br><span class="line">你的胸襟啊，要开阔一点。</span><br><span class="line">说白了你在别人心目中没有那么重要。</span><br><span class="line">或者说呢，你也不要在乎别人把你当做什么。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">大家找对象的时候，一定要看他接人待物。一定要看他对弱者，有没有同理心。要看他对弱者，有没有发自内心的那种尊重。</span><br><span class="line">因为你想一想，如果他见到弱者，见到一些社会地位不如他的人。就那种趾高气昂，就是那种瞧不起，总有一天他也会瞧不起你的。</span><br><span class="line">当你有利用价值的时候，他瞧得起。当你没有利用价值的时候，麻烦他还不一脚把你踹了，然后再找下一个。</span><br><span class="line">所以，这就是为什么人一定最重要的——是要找一个发自内心的去尊重自己的人，这种尊重是需要选择的，这种尊重是需要训练的。</span><br></pre></td></tr></table></figure><hr><p>这里转载知乎一篇文章，用于以后再遇到以为是爱情的时候，一定要看看之前的经验与教训。 <a href="https://www.zhihu.com/question/281088793/answer/866631807">https://www.zhihu.com/question/281088793/answer/866631807</a></p><p>渣男吧</p><p>就是标榜着自己有情伤，很受伤，忘不了前任，满足不了现任，惦记着别人的一群人。对于他们来说，爱不是治愈心灵、相互陪伴、获得成长的要素，而是成了证明自己、填补空虚、消遣时间的手段。小姑娘心目中向往的爱情早就被妖魔化了。</p><p>为什么会喜欢渣男？</p><p>因为你的圣母心。</p><p>因为你得不到。</p><p>因为你在这段关系里更想要。</p><p>渣男们惯用的套路就是撩完就走，从不给你实质性的发展，让你欲罢不能。偶像剧的套路他们敢用，肉麻的情话他们敢说，一两句甜言蜜语，一两个关怀倍至的动作……</p><p>清醒以后想想，他啥也没给过你，你却一直错觉他给了你整个世界。</p><p>每个人都觉得自己在渣男那里特殊特别独一无二。</p><p>而他们最让人讨厌，也最让人欲罢不能的，无非就是给了你很多期待。</p><p>当一个人对另一个人有了期待，就有了爱情。</p><p>所以总会有女孩深陷其中，又不甘心，想要通过各种方式反败为胜，让渣男爱上自己，然后梦想着虐死他，玩死他。</p><p>方法就是：嘴甜，心狠，以其人之道 还治其人之身。</p><p>具体来说：</p><p>第一步、调整心态</p><p>放弃自己的执念。</p><p>不要幻想好结果，不要期待回应，扼杀所有happy ending 的可能性。</p><p>他只是个可有可无的配菜而已……</p><p>默念这句话三百遍。</p><p>好的心态其实已经赢了大半。</p><p>第二步、认真规划自己的生活</p><p>找到自己超爱的一件事，音乐、书法、读书、跑步、打球、背单词、跳舞……什么都好。</p><p>姑娘你可别告诉我你没啥兴趣，就爱谈恋爱，千万别。</p><p>要自己能沉住气去做这件事，并且能够做到投入以及逐渐缓和情绪。</p><p>这个习惯会在大部分时候帮到你。</p><p>当你做好以上两点了，就可以开始第三步了。</p><p>第三步、没事儿就撩撩他</p><p>尺度可大可小，可柔可刚，当你调整好心态的时候，就看自己的心情了。</p><p>记笔记：对男人来说，崇拜比爱更受用。</p><p>适时懂他理解他，你是他的红颜也是他的迷妹。</p><p>聊着聊着就去洗澡或者干脆消失也不是不可以。</p><p>不用事事有回应，每天有晚安。</p><p>电话可以不接。信息可以不回。</p><p>记笔记：不要患得患失，不要得失心太重，要有姜太公钓鱼 的心态。</p><p>另：不要沉迷于网聊。要克制。</p><p>至于要不要约会，当然要啊。</p><p>如此聊上一段时间，渣男会约你的，但是注意频率。五次去两次，十次去三次，对于切记不要去他想去的地方，而是由你主导。</p><p>约会的时候，偶尔的身体接触，继续发自内心的崇拜，让他跟你在一起开心又美好。</p><p>相信我，当你啥也不图，只求他死的时候，你们的约会一定会特别美好的，</p><p>此时。</p><p>划重点：保持清醒，任何时候心态不能崩，不要陷入温柔乡，不要陷入自己的幻想，你是来虐他的，玩玩而已的事情不要把自己玩进去了。</p><p>然后重复第一步，第二步，第三步。</p><p>嗯……</p><p>最爽的部分应该就是，渣男不渣，浪子回头，鱼塘放生，浴火重生之际，你亲口告诉他的那句：我们还是当朋友吧！</p><p>没有第四步。没有happy ending 。</p><p>就算他浪子回头，也不值得你心软。</p><p>这就是一场你死我活的战斗。</p><p>背后的逻辑就是：他爱的是啥也不图的你，可是谈恋爱这种事不可能啥也不图吧？短期做做样子还行，长期过日子毕竟不优惠。</p><p>所以啊！虐完就撤，效果更好哦！</p><p>然鹅，能花费精力做这件事的人，多半不能真正地狠下心来去虐他玩他。因为还在乎嘛……不在乎你也不会看，也不会想。</p><p>道理很简单，如果你真的清醒了，会发现在他们身上哪怕多花一秒钟都是浪费，世界这么美好，为什么不去关注下更有意义的事情呢？</p><p>珍爱生命远离渣男</p><p>话烂理不烂，费这个劲挽回一条吃屎的狗，不太划算啊姑娘。</p><p>有这个精力虐他，我早就找到更好的男朋友了，下一个永远更好，哈哈哈哈哈哈</p><hr><p>转载的文章到此结束</p><p>下面是给那些值得爱的人，但却不喜欢你的人（表白失败）看的。</p><p><code>喜欢是相互的，每个人都有选择爱或不爱的权利，我们不能因为自己的自私而剥夺了，自己喜欢的人不喜欢你的权利。</code></p><p>希望我在之后能</p><p>也是一篇知乎网友朋友写个她的文章节选 <a href="https://www.zhihu.com/question/308871102/answer/726470702">https://www.zhihu.com/question/308871102/answer/726470702</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我一直都觉得你是一个勇敢，很大胆地表达自己的观点，自己情感的人。所以这次你也很勇敢的表达了自己对有好感的异性的感情，虽然最后没有得到一个比较好的结果，但是我觉得也没有必要急于否定自己，或者是否定这段时间的付出，又或者是否定对方。不要否定自己，因为你很优秀，他没有珍惜是他的损失，他以后不定能遇到比你更好的人，而你一定可以遇到比他更好的男生。不要否定你的付出，因为你努力通过行动去表达了自己对他的感情，算是一种对自己感情负责任的表现，因为如果你没有付出，只是口头表达，最后被拒绝了，你可能还会后悔是不是自己表现得不够，没有让对方感受到。不要否定自己他，因为他是你虚幻了很多年的异性，否定他就等于否定了自己的品味，他拒绝你其实也可以说是负责任的一种表现吧，如果没有那种感觉，但是为了不辜负你而答应在一起的话，更加让人难过。希望你以后回想起这段经历，不是觉得自己啥伙食怎么不好，而......</span><br></pre></td></tr></table></figure><hr><p>下面是梁永安老师的话，前提是双向奔赴才值得用一生去爱吧。</p><p>很多人在年轻的时候，不甘于用一生爱一个人，总觉得爱一个人亏。</p><p>其实是不成熟的体现。</p><p>俄罗斯作家，普希金在《叶普盖尼·奥涅金》中描写过这样一位经典女性——达吉雅娜。</p><p>她在一个外省，看到莫斯科来的，一位英俊青年。她觉得完全是一个阳光普照的存在。</p><p>所以她情不自禁的就给他写了一封情书，表达自己的爱慕。</p><p>作为一生中的第一次，弥足珍贵。</p><!--more--><p>但是奥涅金拿到的时候呢，觉得自己未来还有很多很多，特别美好的打开。</p><p>他不愿意把自己锁在这里，所以奥涅金后来很客气地拒绝了她。</p><p>后来奥涅金经历了后面那么多各种各样的阴晴风雨，相遇了各种各样的人。他才知道他当年遇到的达吉雅娜，是多么的珍贵。</p><p>所以说<strong>人一辈子可以经历很多很多，但是爱情有时候只给你一次机会，这次失去了，你就全部都失去了。</strong></p><p>米兰·昆德拉的小说《不能承受的生命之轻》中出有一种人的爱情，就像一个旅行家，像个收藏家，他喜欢各种不同的类别，喜欢各种各样的差异。</p><p>所以所有的女性对他来说，好像都是要去自己去体尝的。</p><p>实际上这样的一种感觉，或者这样一种<strong>追求新鲜感，有时候只有快乐，它不包含幸福的定义。</strong></p><p>我们今天的一个青年生活里面，就这种选择太多，有时候会使我们的心态，发生很大的变化。</p><p>说到底，我们活的是肤浅的。</p><p>这种新鲜感，它的特点都是在一个生活的表面。</p><p>我以前我记得，我们中国人，开始出国国际旅行。当时的旅行项目里面，十天带你转遍欧洲八九个城市。</p><p>它就追求的是，我来过了。但是真正你来过没有呢？其实不见得。</p><p>在这个世界上，你表面上你有很多，其实啥也没拥有。</p><p>很多人他觉得，好像一个人可以爱很多很多人。其实我觉得一个人一辈子，爱一个人，你都爱不过来。</p><p>因为对方的生活，对方的生命，每个人都是一个无穷地成长。</p><p>今天很多人所谓的爱情，没有建立起生命关系。</p><p>只建立起消费关系，对方让我愉悦就完事了，新鲜劲没了，然后又得再换，他就丧失了爱的能力。</p><p>他只能一辈子追逐那个新鲜感，所以搞得最后疲惫不堪。</p><p>从我来说，<strong>新鲜感不是和很多人经历第一次，而是和同一个人经历很多第一次。</strong></p><p>这就是说，真爱就是唯一的那一个。</p><p>爱一个人就像爱一棵桃树一样，从一个种子，然后一直生长下来，最后开花结果。年年月月，经历了那么多风风雨雨，阴阴晴晴。</p><p>我们的生命说到底，每个人生命自身也是一棵树一样。</p><p>这就是伴陪，两个人互相之间的，生命之间的关系，就建立起来了。</p><p><strong>生命之树长青是需要相守的，需要很深的专注。</strong></p><p>什么叫亏？</p><p>你就在一个浅体验里面，浅生活里面，不断地去滑动。你一生就是一个蹩脚的溜冰者，整个都在表层。</p><p>从来没有和一个人真正体会幸福。</p><p>留下的全是，浮光掠影，这个才叫真正的亏。</p><p>你遇到真爱，就不会觉得，和这个人在一起很亏。</p><p>所以我们说到底怎么去判断，能不能和一个人相守一生？</p><p>最主要的是要看到这个人，对你是否具有唯一性。</p><p>我们现在很多恋爱里面，说对方哪点好也说不出来，不好能说出一堆来，但是就是喜欢他。</p><p>按照你原来的脑子里面的，所设定的爱人来说，一点都不合格。</p><p>但是你偏偏就是爱上他，偏偏就是跟他在一起。</p><p>所以这就是我们说爱情里面，具有的一个很真实的，发自生命深处的，这样一种感情。</p><p>所以我们说前面那种说爱一个人是不是亏了，他就是在比较。</p><p>他就好像是一个衡量，一个很理性的，可以量化的。</p><p>其实真正的爱它不是这样的。</p><p>两个人他相遇的时候，我觉得有一个基本的东西——就是两个人很自然，很轻松。</p><p>爱情本身它有个特点，就说它无言的部分，没有说出来的东西互相能体会。</p><p>所以，轻松就轻松在这里，天然的。互相看到心里就非常的舒展，非常的明亮。</p><p><strong>在一个值得爱的人身上，你可以感受到生活的无限。</strong></p><p>因为好的爱情就是这样，它的细节，它的生活里面油盐柴米，它生活里面的分分秒秒，它都有温度。</p><p>它都把一个生活和世界联系起来了，所以这个时候你绝对不是说，好像只是在狭小的，一个获得里边。</p><p>而是你是在一个不断地，跟这个世界交互，互相之间，互相拥有的这么一个关系，这么一种生命感。</p><p>所以在这个过程里边，我们要珍惜。</p><hr><p>最近几个月遇到了一个渣男同事，好在今天终于算是清醒过来。</p><p>满嘴都是谎言，什么情伤、什么忘不了前任、什么不敢谈恋爱。然而现实却是撩着4个人。</p><p>每个人身上都好好的品质和方面，比如他的少年感，放荡不羁，自信与自卑相随。</p><p>但改变不了养鱼的事实。</p><p>最后祝愿他能止步于公司的那个小姐姐吧。</p><p>如果真的喜欢你，又怎会一直吊着你，又怎会有时候对你爱答不理，又怎会满嘴谎言。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.bilibili.com/video/BV1vV411j7i3?spm_id_from=333.999.header_right.fav_list.click&vd_source=7edae3cd790e850cc7836ab5c5d9ac4b"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-fZuRgzIF&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;1330348068&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;br/&gt;

&lt;center&gt;
南有乔木，不可休思；汉有游女，不可求思。&lt;br&gt;
汉之广矣，不可泳思；江之永矣，不可方思。&lt;br&gt;
翘翘错薪，言刈其楚；之子于归，言秣其马。&lt;br&gt;
汉之广矣，不可泳思；江之永矣，不可方思。&lt;br&gt;
翘翘错薪，言刈其蒌；之子于归，言秣其驹。&lt;br&gt;
汉之广矣，不可泳思；江之永矣，不可方思。
&lt;/center&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>好用的shell脚本</title>
    <link href="http://example.com/2022/07/31/%E5%A5%BD%E7%94%A8%E7%9A%84shell%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2022/07/31/%E5%A5%BD%E7%94%A8%E7%9A%84shell%E8%84%9A%E6%9C%AC/</id>
    <published>2022-07-31T12:46:10.000Z</published>
    <updated>2022-07-31T13:05:41.086Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="批量修改文件名"><a href="#批量修改文件名" class="headerlink" title="批量修改文件名"></a>批量修改文件名</h3><p>原始文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_1_finished.jpg  file_2_finished.jpg  file_3_finished.jpg</span><br></pre></td></tr></table></figure><p><strong>批量修改文件名</strong></p><p>将所有文件名的 <code>_finished</code> 去掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for file in `ls *.jpg`</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">    # echo $file|sed &#x27;s/_finished//g&#x27;</span><br><span class="line"></span><br><span class="line">    mv $file `echo $file|sed &#x27;s/_finished//g&#x27;`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><span id="more"></span><p>修改后的文件名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_1.jpg  file_2.jpg  file_3.jpg</span><br></pre></td></tr></table></figure><p><strong>批量添加文件名</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls|awk -F &quot;.&quot; &#x27;&#123;print &quot;mv&quot;,$0,$1&quot;_finished.&quot;$2&#125;&#x27;|bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;mv&quot;</span> 拼成了mv修改命令</span></span><br><span class="line">mv file_1.jpg file_1_finished.jpg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |bash 由bash执行命令</span></span><br></pre></td></tr></table></figure><p><strong>rename方法</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改前的文件名称：file_1_finished.jpg  file_2_finished.jpg  file_3_finished.jpg</span></span><br><span class="line"></span><br><span class="line">rename &quot;_finished&quot; &quot;&quot; *.jpg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改后的文件名称：file_1.jpg  file_2.jpg  file_3.jpg</span></span><br></pre></td></tr></table></figure><h3 id="删除find后的文件名"><a href="#删除find后的文件名" class="headerlink" title="删除find后的文件名"></a>删除find后的文件名</h3><p><code>find ./ -name filename -exec rm -rf &#123;&#125; \;</code></p><p>(1) “./“ 表示从当前目录开始递归查找</p><p>(2) “ -name ‘*.exe’ “根据名称来查找，要查找所有以.exe结尾的文件夹或者文件</p><p>(3) “ -type f “查找的类型为文件</p><p>(4) “-print” 输出查找的文件目录名</p><p>(5) 最主要的是是-exec了，-exec选项后边跟着一个所要执行的命令，表示将find出来的文件或目录执行该命令。<br>exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{}，一个空格和一个，最后是一个分号.</p><h3 id="为每个文件夹下的文件生成list绝对路径"><a href="#为每个文件夹下的文件生成list绝对路径" class="headerlink" title="为每个文件夹下的文件生成list绝对路径"></a>为每个文件夹下的文件生成list绝对路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(base) [yujing@capricorn 8k16bitLeft]$ ls</span><br><span class="line">办公室  虫  厨房  纯音乐  地铁  歌曲人声  公交车  核酸  火车  街道  雷雨声  马路边  鸟  人声  食堂  手机铃声  洗衣机  装修</span><br><span class="line"></span><br><span class="line">(base) [yujing@capricorn 8k16bitLeft]$ list=<span class="string">&quot;.list&quot;</span></span><br><span class="line"></span><br><span class="line">(base) [yujing@capricorn 8k16bitLeft]$ <span class="keyword">for</span> file <span class="keyword">in</span> `ls`; <span class="keyword">do</span> ls `<span class="built_in">pwd</span>`/<span class="variable">$file</span>/* &gt; ../$file<span class="variable">$list</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">(base) [yujing@capricorn voice]$ ls</span><br><span class="line">8k16bitLeft  虫.list    纯音乐.list  歌曲人声.list  核酸.list  街道.list    马路边.list  人声.list  手机铃声.list  装修.list</span><br><span class="line">办公室.list  厨房.list  地铁.list    公交车.list    火车.list  雷雨声.list  鸟.list      食堂.list  洗衣机.list</span><br></pre></td></tr></table></figure><h3 id="检测磁盘IO"><a href="#检测磁盘IO" class="headerlink" title="检测磁盘IO"></a>检测磁盘IO</h3><p><code>iostat命令</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost unimrcp]<span class="comment"># iostat</span></span><br><span class="line">Linux 3.10.0-1062.4.1.el7.x86_64 (localhost.localdomain) 07/21/2022 _x86_64_(24 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           4.63    0.00    0.84    0.61    0.00   93.91</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">sdb              30.54       558.87       219.60 4631847649 1820013606</span><br><span class="line">sdc               0.00         0.00         0.00       4372          0</span><br><span class="line">sda              18.88       105.91       843.55  877787772 6991263568</span><br><span class="line">dm-0             31.27       558.82       219.44 4631447628 1818731803</span><br><span class="line">dm-1              0.05         0.04         0.15     366288    1279052</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>监控IO日志，每1秒执行一次，3次后停止监控</p><p><code>iostat -d 1 3</code></p><p>每一秒检测一次sdb盘的io，将日志存放在io.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125; ;<span class="keyword">do</span> `iostat | grep <span class="string">&quot;sdb&quot;</span> &gt;&gt; io.log`;sleep 1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="截取日志中间几行到几行"><a href="#截取日志中间几行到几行" class="headerlink" title="截取日志中间几行到几行"></a>截取日志中间几行到几行</h3><p>从第3000行开始，显示1000行，即显示3000~3999行</p><p><code>cat 文件名 | tail -n +3000 | head -n 1000</code></p><p><strong>通过sed查看，推荐</strong></p><p><code>sed -n &#39;10,20p&#39; 文件名</code></p><p>查看该文件10-20行</p><blockquote><p><a href="http://c.biancheng.net/linux/sed.html">sed命令妙用</a></p></blockquote><h3 id="只显示文件最后一行或只显示第一行"><a href="#只显示文件最后一行或只显示第一行" class="headerlink" title="只显示文件最后一行或只显示第一行"></a>只显示文件最后一行或只显示第一行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示第一行</span></span><br><span class="line">sed -n <span class="string">&#x27;1p&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 显示最后一行</span></span><br><span class="line">sed -n <span class="string">&#x27;$p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure><h3 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我自己写的脚本，还请海涵</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">获取当前时间</span></span><br><span class="line">date1=`date &quot;+%Y%m%d%H%M%S&quot;`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">========================配置==============================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mrcp原始日志</span></span><br><span class="line">path_m=&quot;/usr/local/unimrcp/log/unimrcpserver-00.log&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vcg原始日志</span></span><br><span class="line">path_v=&quot;/log/qy/qy.log&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果存放路径</span></span><br><span class="line">result=&quot;/usr/local/unimrcp/result/&quot;$date1&#x27;/&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">========================配置==============================</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建日期路径</span></span><br><span class="line">mkdir -p $result</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------io-------------------------------</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    # 检测umc进程，如果进程消失，停止所有监控</span><br><span class="line">    UMC_PID=`ps -ef | grep -v grep |grep &quot;./umc&quot; | awk &#x27;&#123;print $2;exit&#125;&#x27;`</span><br><span class="line">    if [ -n &quot;$UMC_PID&quot; ]; then</span><br><span class="line">        printf &quot;`date &quot;+%Y-%m-%d %H:%M:%S&quot;`\t&quot; &gt;&gt; $result&quot;io.log&quot;</span><br><span class="line">        iostat |grep sdb | awk &#x27;&#123;print $1 &quot;\t\t\t&quot; $4 &quot;\t\t\t&quot; $5&#125;&#x27;&gt;&gt; $result&quot;io.log&quot;</span><br><span class="line">        sleep 1</span><br><span class="line">    else</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">处理IO日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat $result<span class="variable">$date1</span><span class="string">&quot;_io.log&quot;</span> | grep sdb | awk <span class="string">&#x27;&#123;print $1 &quot;\t\t\t&quot; $4 &quot;\t\t\t&quot; $5&#125;&#x27;</span> &gt; <span class="variable">$result</span><span class="string">&quot;ioDone.log&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印IO日志路径</span></span><br><span class="line">echo &quot;io监控完毕，日志存放路径：&quot;$result&quot;io.log&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------提取日志--------------------------</span></span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;path_v&#125;&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;开始提取vcg日志&quot;</span><br><span class="line"></span><br><span class="line">    #获取vcg对应的行号</span><br><span class="line">    nu_start=`grep -n &quot;request=http:&quot; $path_v | sed -n &#x27;$p&#x27; | awk -F &#x27;:&#x27; &#x27;&#123;print $1;exit&#125;&#x27;`</span><br><span class="line">    echo &quot;VCG开始行号：$nu_start&quot;</span><br><span class="line"></span><br><span class="line">    #获取最后的行号</span><br><span class="line">    nu_end=`cat $path_v |wc -l`</span><br><span class="line">    echo &quot;VCG结束行号：$nu_end&quot;</span><br><span class="line"></span><br><span class="line">    #截取日志</span><br><span class="line">    sed -n &quot;$&#123;nu_start&#125;,$&#123;nu_end&#125;p&quot; $path_v &gt; $result&quot;vcg.log&quot;</span><br><span class="line"></span><br><span class="line">    #提取结果</span><br><span class="line">    echo &quot;vcg提取结果存放路径：&quot;$result&quot;vcg.log&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;path_m&#125;&quot; ]</span><br><span class="line">then</span><br><span class="line"></span><br><span class="line">    echo &quot;开始提取mrcp日志&quot;</span><br><span class="line">    #获取mrcp日志对应的行号</span><br><span class="line">    nu_start=`grep -n &quot;VCG success&quot; $path_m | sed -n &#x27;$p&#x27; | awk -F &#x27;:&#x27; &#x27;NR==1&#123;print $1&#125;&#x27;`</span><br><span class="line">    echo &quot;MRCP开始行号：$nu_start&quot;</span><br><span class="line"></span><br><span class="line">    #获取最后的行号</span><br><span class="line">    nu_end=`cat $path_m|wc -l`</span><br><span class="line">    echo &quot;MRCP结束行号：$nu_end&quot;</span><br><span class="line"></span><br><span class="line">    #截取日志</span><br><span class="line">    sed -n &quot;$&#123;nu_start&#125;,$&#123;nu_end&#125;p&quot; $path_m &gt; $result&quot;mrcp.log&quot;</span><br><span class="line"></span><br><span class="line">    #提取关键日志信息</span><br><span class="line">    grep -E &quot;VCG success|vcg ret&quot; $result&quot;mrcp.log&quot; | awk &#x27;&#123;print $2&#125;&#x27;|sed &#x27;s/\(.*\)\(:\)/\1\./&#x27; &gt; $result&quot;result_mrcp.log&quot;</span><br><span class="line"></span><br><span class="line">    #提取结果</span><br><span class="line">    echo &quot;mrcp提取结果存放路径：&quot;$result&quot;result_mrcp.log&quot;</span><br><span class="line">    cat $result&quot;result_mrcp.log&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="使用dd命令快速生成大文件或者小文件的方法"><a href="#使用dd命令快速生成大文件或者小文件的方法" class="headerlink" title="使用dd命令快速生成大文件或者小文件的方法"></a>使用dd命令快速生成大文件或者小文件的方法</h3><ol><li>dd命令可以轻易实现创建指定大小的文件，如</li></ol><p><code>dd if=/dev/zero of=test bs=1M count=1000</code></p><p>在当前目录下会生成一个1000M的test文件，文件内容为全0（因从/dev/zero中读取，/dev/zero为0源），但是这样为实际写入硬盘，文件产生速度取决于硬盘读写速度，如果欲产生超大文件，速度很慢。在某种场景下，我们只想让文件系统认为存在一个超大文件在此，但是并不实际写入硬盘则可以</p><p><code>dd if=/dev/zero of=test bs=1M count=0 seek=100000</code></p><p>此时创建的文件在文件系统中的显示大小为100000MB，但是并不实际占用block，因此创建速度与内存速度相当，seek的作用是跳过输出文件中指定大小的部分，这就达到了创建大文件，但是并不实际写入的目的。当然，因为不实际写入硬盘，所以你在容量只有10G的硬盘上创建100G的此类文件都是可以的。</p><ol start="2"><li>随机生成1百万个1K的文件</li></ol><p><code>seq 1000000 | xargs -i dd if=/dev/zero of=&#123;&#125;.dat bs=1024 count=1 </code></p><p>dd命令功能很强大具体可以参考 <a href="http://www.cnblogs.com/licheng/archive/2008/03/21/1116492.html">http://www.cnblogs.com/licheng/archive/2008/03/21/1116492.html</a></p><p>转载自： <a href="http://blog.csdn.net/cywosp/article/details/9674757">http://blog.csdn.net/cywosp/article/details/9674757</a></p><h3 id="查看当前路径下的进程"><a href="#查看当前路径下的进程" class="headerlink" title="查看当前路径下的进程"></a>查看当前路径下的进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep `pwd`</span><br></pre></td></tr></table></figure><h3 id="根据进程号查看当前程序路径"><a href="#根据进程号查看当前程序路径" class="headerlink" title="根据进程号查看当前程序路径"></a>根据进程号查看当前程序路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwdx 18337</span><br></pre></td></tr></table></figure><h3 id="为每个文件单独打包"><a href="#为每个文件单独打包" class="headerlink" title="为每个文件单独打包"></a>为每个文件单独打包</h3><p><a href="https://www.runoob.com/linux/linux-comm-xargs.html">xargs</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每个文件都单独打包</span></span><br><span class="line">ls |xargs -i tar zcvf &#123;&#125;.tar.gz &#123;&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar解压文件夹下的所有tar.gz文件</span></span><br><span class="line">ls *.tar.gz | xargs -n1 -I &#123;&#125; tar xzvf &#123;&#125; -C ..</span><br></pre></td></tr></table></figure><ul><li><p><code>ls *.tar.gz</code>         列出所有的压缩包</p></li><li><p><code>xargs -n1</code>        一次只使用一个argument</p></li><li><p><code>-I &#123;&#125;</code>                 用符号{}代表上面的argument</p></li><li><p><code>tar xzvf &#123;&#125;</code>        解压缩每一个压缩包</p></li><li><p><code>-C ..</code>                输出路径，这里是父路径</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;批量修改文件名&quot;&gt;&lt;a href=&quot;#批量修改文件名&quot; class=&quot;headerlink&quot; title=&quot;批量修改文件名&quot;&gt;&lt;/a&gt;批量修改文件名&lt;/h3&gt;&lt;p&gt;原始文件名&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;file_1_finished.jpg  file_2_finished.jpg  file_3_finished.jpg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;批量修改文件名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将所有文件名的 &lt;code&gt;_finished&lt;/code&gt; 去掉&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for file in `ls *.jpg`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # echo $file|sed &amp;#x27;s/_finished//g&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mv $file `echo $file|sed &amp;#x27;s/_finished//g&amp;#x27;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="shell" scheme="http://example.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>python 文件去重</title>
    <link href="http://example.com/2022/07/31/python-%E6%96%87%E4%BB%B6%E5%8E%BB%E9%87%8D/"/>
    <id>http://example.com/2022/07/31/python-%E6%96%87%E4%BB%B6%E5%8E%BB%E9%87%8D/</id>
    <published>2022-07-31T12:39:00.000Z</published>
    <updated>2022-07-31T12:42:37.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@File    :   txt_deduplication.py    </span></span><br><span class="line"><span class="string">@Contact :   wangweiqing@pachiratech.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Modify Time      @Author    @Version    @Description</span></span><br><span class="line"><span class="string">------------      -------    --------    -----------</span></span><br><span class="line"><span class="string">2020/11/16 17:54   wangwq      1.0         None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">SOURCE_FILE = <span class="string">&#x27;//User//william//Desktop//allname.txt&#x27;</span></span><br><span class="line">TARGET_FILE = SOURCE_FILE + <span class="string">&#x27;.new&#x27;</span></span><br><span class="line">RM_FILE = SOURCE_FILE + <span class="string">&#x27;.remove&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distinct_txt</span>():</span></span><br><span class="line">    repetition_dict = &#123;&#125;</span><br><span class="line">    content_set = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SOURCE_FILE, <span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(TARGET_FILE, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> g:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                <span class="keyword">if</span> line <span class="keyword">in</span> content_set:</span><br><span class="line">                    repetition_dict[row + <span class="number">1</span>] = line</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    g.write(line)</span><br><span class="line">                    content_set.add(line)</span><br><span class="line">                row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(<span class="built_in">str</span>(row + <span class="number">1</span>))</span><br><span class="line">    length = length <span class="keyword">if</span> length &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(RM_FILE, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;此文件记录了重复行消息。\nrow | content \n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> row, content <span class="keyword">in</span> repetition_dict.items():</span><br><span class="line">            f.write(<span class="string">&quot;&#123;0:&gt;&#123;1&#125;&#125; | &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(row, length, content))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;去重开始。。。&#x27;</span>)</span><br><span class="line">        distinct_txt()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;去重结束。success&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请查看如下文件，原文件：%s，去重后的文件：%s, 删除行的文件：%s&#x27;</span> %(SOURCE_FILE, TARGET_FILE, RM_FILE))</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&quot;去重失败，原因：%s&quot;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&quot;去重失败，原因：%s&quot;</span>, e)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>呼兰河传</title>
    <link href="http://example.com/2022/07/20/%E5%91%BC%E5%85%B0%E6%B2%B3%E4%BC%A0/"/>
    <id>http://example.com/2022/07/20/%E5%91%BC%E5%85%B0%E6%B2%B3%E4%BC%A0/</id>
    <published>2022-07-20T14:31:29.000Z</published>
    <updated>2022-07-20T14:46:02.352Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>摘抄自矛盾</p></blockquote><p><code>   呼兰河这小城里边，以前住着我的祖父，现在埋着我的祖父。      我生的时候，祖父已经六十多岁了，我长到四五岁，祖父就快七十了，我还没有长到二十岁，祖父就七八十岁了。祖父一过了八十，祖父就死了。      从前那后花园的主人，而今不见了。老主人死了，小主人逃荒去了。      那园里的蝴蝶，蚂蚱，蜻蜓，也许还是年年仍旧，也许现在完全荒凉了。      小黄瓜，大倭瓜，也许还是年年地种着，也许现在根本没有了。      那早晨的露珠是不是还落在花盆架上。那午间的太阳是不是还照着那大向日葵，那黄昏时候的红霞是不是还会一会工夫会变出来一匹马来，一会工夫会变出来一匹狗来，那么变着。      这一些不能想像了。      听说有二伯死了。      老厨子就是活着年纪也不小了。      东邻西舍也都不知怎样了。      至于那磨坊里的磨官，至今究竟如何，则完全不晓得了。      以上我所写的并没有什么优美的故事，只因他们充满我幼年的记忆，忘却不了，难以忘却，就记在这里了。</code></p><span id="more"></span><p>本书通过一位解事情颇早的单纯小女孩向我们展现了，民国初年，在东北的呼兰河县百姓一年又一年的简单生活。</p><p>一年之中，他们很有规律的过生活；一年之中，必定有跳大神，唱秧歌，放河灯，野台戏子，四月十八日娘娘庙大会……这些热闹隆重的节日，而这些节日也和他们的日常生活一样多么单调而呆板。</p><p>呼兰河这小城的生活科又不是没有音响和色彩的。</p><p>大街小巷，每一茅舍内，每一篱笆后边，充满了唠叨，争吵，苦笑，乃至梦呓。一年四季，依着那些走马灯似的挨次到来的隆重热闹的节日，在灰黯的日常生活的背景前，呈现了粗线条的大红大绿的带有原始性的色彩。</p><p>呼兰河的人民当然多是良善的。</p><p>他们照着几千年传下来的习惯而思索，而活着；他们有时也许显得麻木，但实在他们也颇敏感而琐细，芝麻大的事他们也会议论或者争吵三天三夜而不休。他们有时也许显得愚昧而蛮横，但实在他们并没没有害人或自害的意思，他们是按照他们认为做合理的方法，“该怎么办就怎么办”。</p><p>他们对于老胡家的小团圆媳妇的不幸遭遇，当然很同情，我们怜惜她，我们为她叫委屈，同时我们也憎恨——但憎恨的对象不是小团圆媳妇的婆婆，我们只觉得这婆婆也可怜，她同样是“照着几千年传下来的习惯而思索，而活着”的一个牺牲者。她的“立场”，她的叫人觉得可恨而又可怜的地方，在她“心安理得地花了五十吊”请那骗子——云游道人给小团圆媳妇治病的时候，就由她自己申说得明明白白：</p><p>她来到我家，我没给她气受，那家的团圆媳妇不受气，一天打八顿，骂三场，可是我也打过她，那是我给她一个下马威，我只打了她一个多月，虽然说我打得狠了一点，可是不狠那能够规矩出一个好人来。我也是不愿意狠打她的，打的连喊带叫的，我是为她着想，不打得狠一点，她是不能够中用的。……</p><p>这老胡家的婆婆为什么坚信她的小团圆媳妇必得狠狠地“管教”呢？小团圆媳妇有些什么地方叫她老人家看着不顺眼呢？因为那小团圆媳妇第一天来到老胡家就由街坊公论判定她是“太大方了”，“一点也不知道羞，头一天来到了婆家，吃饭就吃三碗”，而且“十四岁就长得那么高”也是不合规律，——因为街坊公论说：这小团圆媳妇不像个小团圆媳妇，所以更使她婆婆坚信非严加管教不可，而且更因为“只想给她一个下马威”的时候，这“太大方”的小团圆媳妇居然不服管教——带哭连喊，说要回“家”去，——所以不得不狠狠地打了她一个月。</p><p>街坊们当然也都是和那小团圆媳妇无怨无仇，都是为了她好，——要她像一个小团圆媳妇。所以当这小团圆媳妇被“管教”成病的时候，不但她的婆婆肯舍大把的钱为她治病（跳神，各种偏方），而重街坊也热心地给她出主意。</p><p>而结果呢？结果是把一个“黑忽忽的，笑呵呵的”名为十四岁其实不过十二，可实在长得比普通十四岁的女孩子又高大又结实的小团圆媳妇给活生生“送回老家去”！</p><p>呼兰河小城的生活是充满了各种各样的声响和色彩的，可有时刻板单调。</p><p>呼兰河小城的生活是寂寞的。</p><p>萧红的童年生活就是在这种的寂寞环境中过去的。这在她心灵上留的烙印有那么深，自然不言而喻。</p><p>无意识地违背了“几千年传下来的习惯而思索，而生活”的老胡家的小团圆媳妇终于死了，有意识地反抗着几千年传下来的习惯而思索，而生活的萧红则以含泪的微笑回忆这寂寞的小城，怀着寂寞的心情，在悲壮的斗争的大时代。</p><p>也许有人会觉得《呼兰河传》不是一部小说。 </p><p>他们也许会这样说：没有贯串全书的线索，故事和人物都是零零碎碎，都是片段的，不是整个的有机体。 </p><p>也许又有人觉得《呼兰河传》好像是自传，却又不完全像自传。 </p><p>但是我却觉得正因其不完全像自传，所以更好，更有意义。 </p><p>而且我们不也可以说：要点不在《呼兰河传》不像是一部严格意义的小说，而在它于这“不像”之外，还有些别的东西——一些比“像”一部小说更为“诱人”些的东西：它是一篇叙事诗，一幅多彩的风土画，一串凄婉的歌谣。 </p><p>有讽刺，也有幽默。开始读时有轻松之感，然而愈读下去心头就会一点一点沉重起来。可是，仍然有美，即使这美有点病态，也仍然不能不使你眩惑。 </p><p>也许你要说《呼兰河传》没有一个人物是积极性的。都是些甘愿做传统思想的奴隶而又自怨自艾的可怜虫，而作者对于他们的态度也不是单纯的。她不留情地鞭笞他们，可是她又同情他们：她给我们看，这些屈服于传统的人多么愚蠢而顽固——有的甚至于残忍，然而他们的本质是良善的，他们不欺诈，不虚伪，他们也不好吃懒做，他们极容易满足。有二伯，老厨子，老胡家的一家子，漏粉的那一群，都是这样的人物。他们都像最下等的植物似的，只要极少的水份，土壤，阳光——甚至没有阳光，就能够生存了，磨官冯歪嘴子是他们中间生命力最强的一个——强的使人不禁想赞美他。然而在冯歪嘴子身上也找不出什么特别的东西。除了生命力特别顽强，而这是原始性的顽强。 </p><p>如果让我们在《呼兰河传》找作者思想的弱点，那么，问题恐怕不在于作者所写的人物都缺乏积极性，而在于作者写这些人物的梦魇似的生活时给人们以这样一个印象：除了因为愚昧保守而自食其果，这些人物的生活原也悠然自得其乐，在这里，我们看不见封建的剥削和压迫，也看不见日本帝国主义那种血腥的侵略。而这两重的铁枷，在呼兰河人民生活的比重上，该也不会轻于他们自身的愚昧保守罢？ </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;摘抄自矛盾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;   呼兰河这小城里边，以前住着我的祖父，现在埋着我的祖父。      我生的时候，祖父已经六十多岁了，我长到四五岁，祖父就快七十了，我还没有长到二十岁，祖父就七八十岁了。祖父一过了八十，祖父就死了。      从前那后花园的主人，而今不见了。老主人死了，小主人逃荒去了。      那园里的蝴蝶，蚂蚱，蜻蜓，也许还是年年仍旧，也许现在完全荒凉了。      小黄瓜，大倭瓜，也许还是年年地种着，也许现在根本没有了。      那早晨的露珠是不是还落在花盆架上。那午间的太阳是不是还照着那大向日葵，那黄昏时候的红霞是不是还会一会工夫会变出来一匹马来，一会工夫会变出来一匹狗来，那么变着。      这一些不能想像了。      听说有二伯死了。      老厨子就是活着年纪也不小了。      东邻西舍也都不知怎样了。      至于那磨坊里的磨官，至今究竟如何，则完全不晓得了。      以上我所写的并没有什么优美的故事，只因他们充满我幼年的记忆，忘却不了，难以忘却，就记在这里了。&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://example.com/2022/07/11/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/07/11/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-07-10T16:17:08.000Z</published>
    <updated>2022-08-08T14:11:03.859Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><strong>镜像（image）</strong></p><p>Docker镜像（Image）就是一个<strong>只读</strong>的模板。镜像可以用来创建Docker容器，<strong>一个镜像可以创建很多容器。</strong></p><p>它也相当于一个root文件系统。比如官方镜像CentOs:7就包含了一套CentOs:7最小系统的root文件系统。</p><p>相当于容器的“源代码”，<font color="red">docker镜像文件类似于Java的类模板，而docker容器实例类似于Java中new出来的实例对象。</font></p><span id="more"></span><p><strong>容器（container）</strong></p><ul><li><p>从面向对象角度</p><p>Docker利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器就是用镜像创建的运行实例。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p></li><li><p>从镜像容器角度</p><p><font color="red">可以把容器看做是一个简易版的Linux环境</font>（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p></li><li><p>仓库（Repository）</p><p>仓库（Repository）是<font color="red">集中存放镜像</font>文件的场所。</p><p>类似于 <strong>Maven</strong> 仓库，存放各种 <strong>jar</strong> 包的地方；</p><p><strong>GitHub</strong> 仓库，存放各种 <strong>git</strong> 项目的地方；</p><p><strong>Docker</strong> 公司提供的官方 <strong>registry</strong> 被称为 <strong>Docker Hub</strong>，存放各种进项模板的地方。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p><p>最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/)%EF%BC%8C%E5%AD%98%E6%94%BE%E4%BA%86%E6%95%B0%E9%87%8F%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E4%BE%9B%E7%94%A8%E6%88%B7%E4%B8%8B%E8%BD%BD%E3%80%82%E5%9B%BD%E5%86%85%E7%9A%84%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93%E5%8C%85%E6%8B%AC%E9%98%BF%E9%87%8C%E4%BA%91">https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云</a> 、网易云等。</p></li><li><p>总结</p><p><font color="blue">需要正确的理解仓库/镜像/容器这几个概念:</font></p><p><font color="blue">Docker</font></p><ul><li>本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</li></ul><p><font color="blue">Image</font></p><ul><li>文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</li></ul><p><font color="blue">镜像文件</font></p><ul><li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</li></ul><p><font color="blue">容器实例</font></p><ul><li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li></ul><p><font color="blue">仓库</font></p><ul><li>就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</li></ul></li></ul><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h3 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker状态</span></span><br><span class="line">sudo systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker概要信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker总体帮助文档</span></span><br><span class="line">docker --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker命令帮助文档</span></span><br><span class="line">docker 具体命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li><p><code>docker images</code>：列出本地主机上的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a：列出本地所有的镜像（含历史映像层）</span><br><span class="line">-q：只显示镜像ID</span><br></pre></td></tr></table></figure></li><li><p><code>docker search 某个xxx镜像名字</code>：</p><p>网站：<a href="https://hub.docker.com/">https://hub.docker.com</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker search [options] 镜像名字</span><br><span class="line"></span><br><span class="line"><span class="comment"># options说明</span></span><br><span class="line">--<span class="built_in">limit</span>：只列出N个镜像，默认25个</span><br><span class="line">docker search --<span class="built_in">limit</span> 5 redis</span><br></pre></td></tr></table></figure></li><li><p><code>docker pull 某个xxx镜像名字</code>：下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法1：+TAG 镜像版本号</span></span><br><span class="line">docker pull 镜像名字[:TAG]</span><br><span class="line"><span class="comment"># 例如：docker pull redis:6.0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法2：下载最新版latest</span></span><br><span class="line">docker pull 镜像名字</span><br></pre></td></tr></table></figure></li><li><p><code>docker system df</code>：查看镜像、容器、数据卷所占空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          1         1         9.136kB   0B (0%)</span><br><span class="line">Containers      2         0         0B        0B</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     0         0         0B        0B</span><br><span class="line"></span><br><span class="line"><span class="comment"># Images 镜像有几个</span></span><br><span class="line"><span class="comment"># Containers 容器有几个</span></span><br><span class="line"><span class="comment"># Local Volumes 本地卷</span></span><br><span class="line"><span class="comment"># Build Cache 构建的缓存</span></span><br></pre></td></tr></table></figure></li><li><p><code>docker rmi 某个xxx镜像名字ID</code>：删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-f 强制删除</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除单个镜像</span></span><br><span class="line">docker rmi -f 镜像ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多个镜像</span></span><br><span class="line">docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部</span></span><br><span class="line">docker rmi -f $(docker images -qa)</span><br><span class="line"><span class="comment"># $() 引用命令</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>问题：docker虚悬镜像是什么？</strong></p><ul><li><p>仓库名、标签都是<none>的镜像，俗称虚悬镜像<code>dangling image</code>，工作中没有什么用，建议删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">&lt;none&gt;   &lt;none&gt;    18e5af790473   9 months ago   9.14kB</span><br></pre></td></tr></table></figure></li></ul><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><ul><li><p>新建+启动容器</p><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># options 说明</span></span><br><span class="line">--name=<span class="string">&quot;容器新名字&quot;</span>为容器指定一个名称</span><br><span class="line">-d:后台运行容器并返回容器ID，即启动守护式容器（后台运行）</span><br><span class="line"></span><br><span class="line">-i: 以交互模式运行容器，通常与-t同时使用</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与-同时使用</span><br><span class="line">即启动交互式容器（前台有伪终端，等待交互），退出终端输入：<span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">-P：随机端口映射</span><br><span class="line">-p：指定端口映射</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用镜像ubuntu:latest 以交互模式启动一个容器，在容器内执行bash命令</span></span><br><span class="line">$ sudo docker run -it ubuntu bash</span><br><span class="line">root@908d43950860:/<span class="comment"># ps -ef</span></span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 13:00 pts/0    00:00:00 bash</span><br><span class="line">root           9       1  0 13:00 pts/0    00:00:00 ps -ef</span><br><span class="line">root@908d43950860:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>列出当前所有正在运行的容器</p><p><code>docker ps [OPTIONS]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># options 说明</span></span><br><span class="line">-a：列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">-l：显示最近创建的容器</span><br><span class="line">-n：显示最近n个创建的容器</span><br><span class="line">-q：静默模式，只显示容器编号</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --name=myyu1 ubuntu bash</span><br><span class="line">root@96e714997794:/<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED          STATUS          PORTS     NAMES</span><br><span class="line">96e714997794   ubuntu    <span class="string">&quot;bash&quot;</span>    45 seconds ago   Up 45 seconds             myyu1</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONTAINER ID 容器名</span></span><br><span class="line"><span class="comment"># IMAGE 镜像名</span></span><br><span class="line"><span class="comment"># COMMAND 运行的命令</span></span><br><span class="line"><span class="comment"># CREATED 运行时间</span></span><br><span class="line"><span class="comment"># PORTS 暴露端口号</span></span><br><span class="line"><span class="comment"># NAMES 名称</span></span><br></pre></td></tr></table></figure></li><li><p>退出容器</p><p><code>exit</code>：run进入容器，exit退出，容器会停止</p><p><code>ctrl+p+q</code>：run进入容器，ctrl+p+q退出，容器不会停止</p></li><li><p>启动已停止运行的容器</p><p><code>docker start 容器ID或容器名</code></p></li><li><p>重启容器</p><p><code>docker restart 容器ID或容器名</code></p></li><li><p>停止容器</p><p><code>docker stop 容器ID或容器名</code></p></li><li><p>强制停止容器</p><p><code>docker kill 容器ID或容器名</code></p></li><li><p>删除已停止的容器</p><p><code>docker rm 容器ID</code></p></li><li><p>一次性删除多个容器实例</p><p><code>docker rm -f $(docker ps -aq)</code> 或者 <code>docker ps -aq | xargs docker rm</code></p></li></ul><h3 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h3><h4 id="启动守护式容器（后台服务器）"><a href="#启动守护式容器（后台服务器）" class="headerlink" title="启动守护式容器（后台服务器）"></a>启动守护式容器（后台服务器）</h4><p><code>docker run -d 容器名</code> </p><p><strong>注意</strong></p><p>使用镜像ubuntu:lates以后台启动一个容器</p><p><code>sudo docker run -d ubuntu</code></p><p>问题：使用<code>sudo docker ps -a </code> 进行查看，发现容器已经退出</p><p><strong>很重要说明一点：<font color="red">Docker容器后台运行，就必须有一个前台进程</font></strong></p><p>容器运行的命令如果不是那些<strong>一直挂起的命令（比如运行top、tail），就是会自动退出的</strong></p><p>这个是Docker的机制问题，比如你的web容器，我们以nginx为例，正常情况下：</p><p>我们配置启动服务只需要启动响应的service即可，例如<code>service nginx start</code></p><p>但是，这样做 nginx 为后台进程模式运行，就导致docker前台没有运行的应用。</p><p>这样的容器后台启动后，会立即自杀因为他觉得他无事可做了</p><p>所以，最佳的解决方案是：**<font color="red">将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示还有交互操作，别中断。</font>**</p><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p><code>docker logs 容器ID</code></p><h4 id="查看容器内部运行的进程"><a href="#查看容器内部运行的进程" class="headerlink" title="查看容器内部运行的进程"></a>查看容器内部运行的进程</h4><p><code>docker top 容器ID</code></p><h4 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h4><p><code>docker inspect 容器ID</code></p><h4 id="进入正在运行的容器并以命令行交互"><a href="#进入正在运行的容器并以命令行交互" class="headerlink" title="进入正在运行的容器并以命令行交互"></a><strong>进入正在运行的容器并以命令行交互</strong></h4><p><code>docker exec -it 容器ID /bin/bash</code>  推荐使用</p><p>重新进入 <code>docker attach 容器ID</code></p><p>上述两个区别：</p><ul><li><p>attach 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器停止。</p></li><li><p>exec 是在容器中打开新的终端，并且可以启动新的进程，用exit退出，不会导致容器停止。</p></li><li><p>从容器内拷贝文件到主机上</p><p><code>docker cp 容器ID:容器内路径 目的主机路径</code></p></li></ul><h4 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h4><ul><li>export 导出容器的内容留作为一个tar归档文件 [对应import命令]</li><li>import 从tar包中的内容创建一个新的文件系统再导入为镜像 [对应export]</li></ul><p><strong>案例</strong></p><p>export</p><p><code>docker export 容器ID &gt; 文件名.tar</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/william/DYJ</span><br><span class="line"></span><br><span class="line">$ sudo docker images</span><br><span class="line">[sudo] password <span class="keyword">for</span> william:</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat        latest    b64abfdee99c   6 months ago    668MB</span><br><span class="line">ubuntu        latest    d5ca7a445605   8 months ago    65.6MB</span><br><span class="line">hello-world   latest    18e5af790473   9 months ago    9.14kB</span><br><span class="line">redis         6.0.8     d4deb73856a2   20 months ago   98.5MB</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it ubuntu /bin/bash</span><br><span class="line">root@69d281c34a71:/<span class="comment"># %</span></span><br><span class="line"></span><br><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">69d281c34a71   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   30 seconds ago   Up 30 seconds             friendly_kapitsa</span><br><span class="line"></span><br><span class="line">$ sudo docker <span class="built_in">export</span> 69d281c34a71 &gt; adcd.tar.gz</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">adcd.tar.gz   git  java  python  shell</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  import </p><p><code>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</span></span><br><span class="line">$ cat adcd.tar.gz | docker import - william/ubuntu</span><br><span class="line">sha256:8c2d3dca3bda65e49ad314f30f56c6ae3b7ff5c65d83e6f61d8af87979269b20</span><br></pre></td></tr></table></figure><h3 id="小总结-常用命令"><a href="#小总结-常用命令" class="headerlink" title="小总结-常用命令"></a>小总结-常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line"></span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line"></span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line"></span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line"></span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line"></span><br><span class="line">diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化</span><br><span class="line"></span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line"></span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line"></span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line"></span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line"></span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line"></span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line"></span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line"></span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line"></span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line"></span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line"></span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line"></span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line"></span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line"></span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line"></span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line"></span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line"></span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line"></span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"></span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line"></span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line"></span><br><span class="line">rmi       Remove one or more images       # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line"></span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line"></span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line"></span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line"></span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line"></span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line"></span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line"></span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line"></span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line"></span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line"></span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><h4 id="镜像是分层的"><a href="#镜像是分层的" class="headerlink" title="镜像是分层的"></a>镜像是分层的</h4><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层下载</p><p><img src="1.png"></p><h4 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h4><p>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，他支持<font color="red">对文件系统的修改作为一次提交来一层层的叠加，</font>同时可以将不同目录挂载到同一个虚拟文件系统下（unite several disectories into a single virtual filesystem）Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><h4 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h4><p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 </p><p><strong>问题</strong>：平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？</p><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p><h4 id="Docker为什么要采用这种分层结构？"><a href="#Docker为什么要采用这种分层结构？" class="headerlink" title="Docker为什么要采用这种分层结构？"></a>Docker为什么要采用这种分层结构？</h4><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p><p>比如说多个镜像都从相同的base镜像构建而来，那么Docker Host只需要在磁盘上保存同时，内存也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h3 id="Docker分层重要理解"><a href="#Docker分层重要理解" class="headerlink" title="Docker分层重要理解"></a>Docker分层重要理解</h3><p><strong><font color="coral">Docker镜像层都是只读的，容器层是可写的。</font></strong></p><p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都被叫镜像层。</p><p>所以，对容器的改动——无论添加、删除、还是修改文件都只会发成在容器层中。只有容器层是可写的，容器层下面的所有镜像层都只是可读的。</p><p><img src="2.png"></p><h3 id="Docker镜像commit操作案例"><a href="#Docker镜像commit操作案例" class="headerlink" title="Docker镜像commit操作案例"></a>Docker镜像commit操作案例</h3><ul><li>docker commit 提交容器副本使之称为一个新的镜像</li><li><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</code></li></ul><p>案例演示：ubunt容器安装vim</p><ul><li>从Hub上下载ubuntu镜像到本地并成功运行</li><li>原始的默认ubuntu镜像不带vim命令</li><li>外网连通的情况下，安装vim</li><li>安装完成后，commit我们自己的新镜像</li><li>启动我们的镜像并和原来的对比</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[william@arch ~]$ sudo docker run -it ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line">root@57a82b1d18d4:/<span class="comment"># apt-get update</span></span><br><span class="line"></span><br><span class="line">root@57a82b1d18d4:/<span class="comment"># apt-get -y install vim</span></span><br><span class="line"></span><br><span class="line">root@57a82b1d18d4:/<span class="comment"># vim 123.txt</span></span><br><span class="line"></span><br><span class="line">[william@arch ~]$  sudo docker commit -m=<span class="string">&quot;add vim cmd&quot;</span> -a=<span class="string">&quot;william&quot;</span> 57a82b1d18d4 william/ubuntu:1.1</span><br><span class="line"></span><br><span class="line">[william@arch ~]$ sudo docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY       TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">william/ubuntu   1.1       33d04ddcdce9   34 seconds ago   84.1MB</span><br></pre></td></tr></table></figure><h2 id="本地镜像发布到阿里云"><a href="#本地镜像发布到阿里云" class="headerlink" title="本地镜像发布到阿里云"></a>本地镜像发布到阿里云</h2><h3 id="本地镜像发布到阿里云流程"><a href="#本地镜像发布到阿里云流程" class="headerlink" title="本地镜像发布到阿里云流程"></a>本地镜像发布到阿里云流程</h3><p><img src="3.png"></p><h3 id="镜像的生成方法"><a href="#镜像的生成方法" class="headerlink" title="镜像的生成方法"></a>镜像的生成方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.commit方法</span></span><br><span class="line"><span class="comment"># docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</span></span><br><span class="line">sudo docker commit -a william -m <span class="string">&quot;Vim ubuntu&quot;</span> 镜像ID ubuntu-vim:1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.docker file 之后学</span></span><br></pre></td></tr></table></figure><h3 id="将本地镜像推送到阿里云"><a href="#将本地镜像推送到阿里云" class="headerlink" title="将本地镜像推送到阿里云"></a>将本地镜像推送到阿里云</h3><h4 id="创建仓库镜像"><a href="#创建仓库镜像" class="headerlink" title="创建仓库镜像"></a>创建仓库镜像</h4><ul><li><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances">选择控制台，进入容器镜像服务</a></p></li><li><p>选择个人实例</p></li><li><p>命名空间</p></li><li><p>仓库名称</p></li><li><p>进入管理界面获得脚本</p><p><img src="4.png"></p></li></ul><h4 id="将镜像推送到阿里云"><a href="#将镜像推送到阿里云" class="headerlink" title="将镜像推送到阿里云"></a>将镜像推送到阿里云</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">ubuntu-vim   1.1       7c0e2d4866ee   14 seconds ago   161MB</span><br><span class="line">redis        latest    97772dcef71b   6 days ago       111MB</span><br><span class="line">ubuntu       latest    a7870fd478f4   5 weeks ago      69.2MB</span><br><span class="line">tomcat       latest    b64abfdee99c   6 months ago     668MB</span><br><span class="line">redis        6.0.8     d4deb73856a2   20 months ago    98.5MB</span><br><span class="line"></span><br><span class="line">$ sudo docker login --username=william117 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">$ sudo docker tag 7c0e2d4866ee registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:1.1</span><br><span class="line">$ sudo docker push registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:1.1</span><br></pre></td></tr></table></figure><h3 id="将阿里云上的镜像下载到本地"><a href="#将阿里云上的镜像下载到本地" class="headerlink" title="将阿里云上的镜像下载到本地"></a>将阿里云上的镜像下载到本地</h3><p><code>sudo docker pull registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:[镜像版本号]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:1.1</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it 7c0e2d4866ee /bin/bash</span><br></pre></td></tr></table></figure><h2 id="本地镜像发布到私有库"><a href="#本地镜像发布到私有库" class="headerlink" title="本地镜像发布到私有库"></a>本地镜像发布到私有库</h2><h3 id="本地镜像发布到私有库流程"><a href="#本地镜像发布到私有库流程" class="headerlink" title="本地镜像发布到私有库流程"></a>本地镜像发布到私有库流程</h3><p><img src="5.png"></p><h3 id="私有库是什么"><a href="#私有库是什么" class="headerlink" title="私有库是什么"></a>私有库是什么</h3><p> Docker Registry是官方提供的工具，可以用于构建私有镜像仓库</p><ol><li><p>官方Docker Hub地址：<a href="https://hub.docker.com/%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E8%AE%BF%E9%97%AE%E5%A4%AA%E6%85%A2%E4%BA%86%E4%B8%94%E5%87%86%E5%A4%87%E8%A2%AB%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%96%E4%BB%A3%E7%9A%84%E8%B6%8B%E5%8A%BF%EF%BC%8C%E4%B8%8D%E5%A4%AA%E4%B8%BB%E6%B5%81%E3%80%82">https://hub.docker.com/，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。</a></p></li><li><p>Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。</p></li></ol><h3 id="将本地镜像推送到私有库"><a href="#将本地镜像推送到私有库" class="headerlink" title="将本地镜像推送到私有库"></a>将本地镜像推送到私有库</h3><ol><li><p>下载镜像Docker Registry</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker pull registry</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/registry</span><br><span class="line">b48a9fe99aba: Pull complete</span><br><span class="line">095878aa44ca: Pull complete</span><br><span class="line">04df0d597e2b: Pull complete</span><br><span class="line">e0594d0cd6d6: Pull complete</span><br><span class="line">94a758d8738a: Pull complete</span><br><span class="line">Digest: sha256:169211e20e2f2d5d115674681eb79d21a217b296b43374b8e39f97fcf866b375</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> registry:latest</span><br><span class="line">docker.io/library/registry:latest</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   11 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li><li><p>运行私有库Registry，相当于本地有个私有的Docker Hub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，仓库被创建在容器的/var/lib/registry目录下，建议自行用容器卷映射，方便与宿主机联调</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -d -p 5000:5000 -v /home/william/myregistry/:/home/<span class="built_in">test</span> --privileged=<span class="literal">true</span> registry</span><br><span class="line">7a74ca4f7bc3bde701d7921c861bd4f799c6e6255e9aa661127bfda1d09b7977</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">7a74ca4f7bc3   registry   <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   16 seconds ago   Up 16 seconds   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   mystifying_joliot</span><br></pre></td></tr></table></figure></li><li><p>案例演示创建一个新镜像，ubuntu安装ifconfig命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行ubuntu</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -it ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu容器执行ifconfig命令，发现并没有该命令</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># ifconfig</span></span><br><span class="line">bash: ifconfig: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新ubuntu容器源</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># apt update</span></span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports jammy InRelease [270 kB]</span><br><span class="line">Get:2 http://ports.ubuntu.com/ubuntu-ports jammy-updates InRelease [114 kB]</span><br><span class="line">Get:3 http://ports.ubuntu.com/ubuntu-ports jammy-backports InRelease [99.8 kB]</span><br><span class="line">Get:4 http://ports.ubuntu.com/ubuntu-ports jammy-security InRelease [110 kB]</span><br><span class="line">Get:5 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 Packages [1758 kB]</span><br><span class="line">Get:6 http://ports.ubuntu.com/ubuntu-ports jammy/restricted arm64 Packages [24.2 kB]</span><br><span class="line">Get:7 http://ports.ubuntu.com/ubuntu-ports jammy/universe arm64 Packages [17.2 MB]</span><br><span class="line">Get:8 http://ports.ubuntu.com/ubuntu-ports jammy/multiverse arm64 Packages [224 kB]</span><br><span class="line">Get:9 http://ports.ubuntu.com/ubuntu-ports jammy-updates/restricted arm64 Packages [81.1 kB]</span><br><span class="line">Get:10 http://ports.ubuntu.com/ubuntu-ports jammy-updates/universe arm64 Packages [234 kB]</span><br><span class="line">Get:11 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main arm64 Packages [580 kB]</span><br><span class="line">Get:12 http://ports.ubuntu.com/ubuntu-ports jammy-updates/multiverse arm64 Packages [1250 B]</span><br><span class="line">Get:13 http://ports.ubuntu.com/ubuntu-ports jammy-backports/universe arm64 Packages [5812 B]</span><br><span class="line">Get:14 http://ports.ubuntu.com/ubuntu-ports jammy-security/universe arm64 Packages [108 kB]</span><br><span class="line">Get:15 http://ports.ubuntu.com/ubuntu-ports jammy-security/restricted arm64 Packages [61.7 kB]</span><br><span class="line">Get:16 http://ports.ubuntu.com/ubuntu-ports jammy-security/main arm64 Packages [269 kB]</span><br><span class="line">Fetched 21.2 MB <span class="keyword">in</span> 1min 8s (310 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">16 packages can be upgraded. Run <span class="string">&#x27;apt list --upgradable&#x27;</span> to see them.</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu容器安装net-tools</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># apt install net-tools</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  net-tools</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 16 not upgraded.</span><br><span class="line">Need to get 207 kB of archives.</span><br><span class="line">After this operation, 774 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 net-tools arm64 1.60+git20181103.0eebece-1ubuntu5 [207 kB]</span><br><span class="line">Fetched 207 kB <span class="keyword">in</span> 5s (38.9 kB/s)</span><br><span class="line">debconf: delaying package configuration, since apt-utils is not installed</span><br><span class="line">Selecting previously unselected package net-tools.</span><br><span class="line">(Reading database ... 4389 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../net-tools_1.60+git20181103.0eebece-1ubuntu5_arm64.deb ...</span><br><span class="line">Unpacking net-tools (1.60+git20181103.0eebece-1ubuntu5) ...</span><br><span class="line">Setting up net-tools (1.60+git20181103.0eebece-1ubuntu5) ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu容器执行ifconfig命令</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 15090  bytes 22180068 (22.1 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3322  bytes 183806 (183.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该有net-tools工具的ubuntu镜像，创建成一个新的镜像</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker commit -m=<span class="string">&quot;ifconfig cmd add&quot;</span> -a=<span class="string">&quot;william&quot;</span> db6c8a0b2695 ubuntu:1.2</span><br><span class="line">sha256:07bca3d7c4a16461b32f57c09a306d9b597bb39c39d6f0dc7d2b1bc8489781f5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地镜像仓库</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">ubuntu                                                1.2       07bca3d7c4a1   8 seconds ago   104MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   11 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li><li><p>curl验证私服库上有什么镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">54549fde7be3   ubuntu     <span class="string">&quot;/bin/bash&quot;</span>              41 minutes ago   Up 41 minutes                                               cool_wilbur</span><br><span class="line">7a74ca4f7bc3   registry   <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   42 minutes ago   Up 42 minutes   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   mystifying_joliot</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ curl -XGET http://10.211.55.3:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure></li><li><p>将新镜像ubuntu:1.2修改符合私服规范的Tag</p><p><code>docker tag 镜像:Tag Host:Port/Repository:Tag</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker tag ubuntu:1.2 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">10.211.55.3:5000/ubuntu                               1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">ubuntu                                                1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   12 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件使之支持http</p><p>Docker默认不允许http方式推送镜像。所以我们需要配置/etc/docker/daemon.json来取消限制</p><p><strong>修改完后不生效，建议重启Docker。Docker重启后，所有Docker容器将会停止。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lsq7tfu3.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 上面是之前配置的阿里云镜像加速器，我们需要在阿里云镜像加速器下面写上&quot;insecure-registries&quot;:[&quot;10.211.55.3:5000&quot;]</span></span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lsq7tfu3.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;10.211.55.3:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker后需要重新运行私服仓库</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -d -p 5000:5000 -v /home/william/DYJ/myregistry/:/home/<span class="built_in">test</span> --privileged=<span class="literal">true</span> registry</span><br><span class="line">3bbcd1f874b5bb2b2a3931d3dd77182d239a5a012dd0e54f58e5cb383701990c</span><br></pre></td></tr></table></figure></li><li><p>push推送到私服库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker push 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">The push refers to repository [10.211.55.3:5000/ubuntu]</span><br><span class="line">d53c1aceb6e1: Pushed</span><br><span class="line">13e8c0db60e7: Pushed</span><br><span class="line">1.2: digest: sha256:af7b0352137dcbe7c9ea4de6c4c9e438dd8bba885e6937ad1e97cd53a0fc1913 size: 741</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">10.211.55.3:5000/ubuntu                               1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">ubuntu                                                1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   12 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li><li><p>再次curl验证私服库上有什么镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ curl -XGET http://10.211.55.3:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;ubuntu&quot;</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p>pull到本地并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地镜像以作验证</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker rmi -f 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">Untagged: 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">Untagged: 10.211.55.3:5000/ubuntu@sha256:af7b0352137dcbe7c9ea4de6c4c9e438dd8bba885e6937ad1e97cd53a0fc1913</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker rmi -f ubuntu:1.2</span><br><span class="line">Untagged: ubuntu:1.2</span><br><span class="line">Deleted: sha256:07bca3d7c4a16461b32f57c09a306d9b597bb39c39d6f0dc7d2b1bc8489781f5</span><br><span class="line">Deleted: sha256:ad133ac82d25ca03ee07e8fb53055321eb9ef89b13ce9bbefa957cf90bf76454</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker镜像</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   12 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从私服库拉取ubuntu镜像，注意Tag号要带上</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker pull 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">1.2: Pulling from ubuntu</span><br><span class="line">ed02c6ade914: Already exists</span><br><span class="line">07b9b2314dd0: Pull complete</span><br><span class="line">Digest: sha256:af7b0352137dcbe7c9ea4de6c4c9e438dd8bba885e6937ad1e97cd53a0fc1913</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">10.211.55.3:5000/ubuntu:1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果忘记了版本号，可以通过curl http://仓库IP:5000/v2/镜像名称/tags/list 查看</span></span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:/etc/docker$ curl http://10.211.55.3:5000/v2/ubuntu/tags/list</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ubuntu&quot;</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;1.2&quot;</span>]&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h2><h3 id="坑：容器卷记得加入-–privilege-true"><a href="#坑：容器卷记得加入-–privilege-true" class="headerlink" title="坑：容器卷记得加入 [–privilege=true]"></a><font color="red"><strong>坑：容器卷记得加入 [–privilege=true]</strong></font></h3><p>为什么要开启权限</p><p>Docker挂载主机目录访问如果出现<font color="red">cannot open directory .: Permission denied</font></p><p>解决办法：在挂载目录后多加一个–privilege=true参数即可</p><p>如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为。</p><p>在SELinux里面挂载目录被禁止掉了，如果要开启，我们一般使用–privilege=true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p><h3 id="回顾-本地镜像发布到私有库，参数V"><a href="#回顾-本地镜像发布到私有库，参数V" class="headerlink" title="回顾 [本地镜像发布到私有库，参数V]"></a>回顾 [本地镜像发布到私有库，参数V]</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -d -p 5000:5000 -v /william/myregistry/:/tmp/registry --privileged=<span class="literal">true</span> registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#v 添加自定义的容器卷</span></span><br><span class="line"><span class="comment"># /william/myregistry/ 宿主机路径</span></span><br><span class="line"><span class="comment"># /tmp/registryDocker容器内路径</span></span><br><span class="line"><span class="comment"># --privilege=true放开权限，运行容器实例以后，完成了容器和宿主机的某个绝对路径互通，实现了信息共享</span></span><br></pre></td></tr></table></figure><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p>Docker容器数据卷，即Docker Volume（卷）</p><p>当Docker容器运行的时候，会产生一些列的数据文件，这些数据文件会在关闭Docker容器时，直接消失的。但是其中产生部分的数据内容，我们是希望能够把它给保存起来，另做它用的。</p><p><code>关闭Docker容器=删除内部除了image底层数据的其他全部内容，即删库跑路</code></p><p>所以我们期望：</p><ul><li>将应用于运行的环境打包形成容器运行，伴随着容器运行产生的数据，我们希望这些数据能够持久化。</li><li>希望容器之间也能够实现数据的共享</li></ul><p>Docker容器产生的数据同步到本地，这样关闭容器的时候，数据是在本地的，不会影响数据的安全性。</p><p>Docker的容器卷技术也就是将容器内部目录和本地目录进行一个同步，即挂载。</p><p><code>总结：容器的持久化和同步化操作，容器之间也是可以数据共享的（但是注意挂载不是等于同步！！！）</code></p><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但补数据联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：</p><p>卷的设计目的就是<font color="red">数据的持久化</font>，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><ul><li><p>一句话：有点类似我们Redis里面的rdb和aof文件</p></li><li><p>将docker容器内的数据保存进宿主机的磁盘中</p></li><li><p>运行一个带有容器卷存储功能的容器实例</p><p><code>docker run -it --privileged=true -v /宿主机绝对路径目录: /容器内目录 镜像名</code></p></li></ul><h3 id="容器数据卷能干嘛"><a href="#容器数据卷能干嘛" class="headerlink" title="容器数据卷能干嘛"></a>容器数据卷能干嘛</h3><p>将docker容器内的数据保存进宿主机的磁盘中，完成敏感数据和重要数据的持久化和备份</p><p>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。为了能保存数据在Docker中我们使用卷。</p><p><strong>特点:</strong></p><ul><li><p>数据卷可在容器之间共享或重用数据</p></li><li><p>卷中的更改可以直接生效</p><ul><li>相较于docker cp更方便</li></ul></li><li><p>数据卷中的更改不会包含在镜像的更新中</p></li><li><p>数据卷的生命周期一直持续到没有容器使用为止</p></li></ul><p><img src="6.png"></p><h3 id="数据卷案例"><a href="#数据卷案例" class="headerlink" title="数据卷案例"></a>数据卷案例</h3><h4 id="宿主-vs-容器之间映射添加容器卷"><a href="#宿主-vs-容器之间映射添加容器卷" class="headerlink" title="宿主 vs 容器之间映射添加容器卷"></a>宿主 vs 容器之间映射添加容器卷</h4><p>直接添加命令</p><ul><li><p>命令</p><p>查看容器卷：<code>sudo docker volume ls</code></p><p><code>sudo docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录 镜像名 </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -it -v /home/william/DYJ/myregistry/:/home/<span class="built_in">test</span> ubuntu /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>查看数据卷是否挂载成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@27776923a655:~<span class="comment"># cd /home/test</span></span><br><span class="line">root@27776923a655:/home/<span class="built_in">test</span><span class="comment"># touch hello.txt</span></span><br></pre></td></tr></table></figure><p><code>docker inspect 容器ID</code>        将容器的版本、属性信息以Json串的形式暴露</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES</span><br><span class="line">27776923a655   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   18 hours ago   Up 18 hours             tender_kilby</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker inspect 27776923a655</span><br><span class="line">...</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/william/DYJ/myregistry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/home/test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></li><li><p>容器和宿主机之间数据共享</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ <span class="built_in">pwd</span></span><br><span class="line">/home/william/DYJ/myregistry</span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ ls</span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id="读写规则映射添加说明"><a href="#读写规则映射添加说明" class="headerlink" title="读写规则映射添加说明"></a>读写规则映射添加说明</h4><ol><li><p>读写（默认）</p><ul><li><code>sudo docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:rw 镜像名</code></li><li>默认同上案例，默认就是rw</li></ul></li><li><p>只读</p><ul><li>容器实例内部被限制，只能读取不能写</li><li>如果此时宿主机写入内容，可以同步给容器内，容器可以读取到</li><li><code>sudo docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</code></li><li>ro = read only</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker run -it --privileged=<span class="literal">true</span> -v /home/william/DYJ/myregistry:/home/<span class="built_in">test</span>:ro ubuntu</span><br><span class="line">[sudo] password <span class="keyword">for</span> william:</span><br><span class="line">root@97b22f619d7d:/<span class="comment"># cd /home/test/</span></span><br><span class="line">root@97b22f619d7d:/home/<span class="built_in">test</span><span class="comment"># ls</span></span><br><span class="line">1.txt  2.txt  3.txt  hello.txt</span><br><span class="line">root@97b22f619d7d:/home/<span class="built_in">test</span><span class="comment"># touch 4.txt</span></span><br><span class="line">touch: cannot touch <span class="string">&#x27;4.txt&#x27;</span>: Read-only file system</span><br></pre></td></tr></table></figure></li></ol><h4 id="卷的继承和共享"><a href="#卷的继承和共享" class="headerlink" title="卷的继承和共享"></a>卷的继承和共享</h4><ol><li><p>容器1完成和宿主机的映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker run -it --privileged=<span class="literal">true</span> -v /home/william/DYJ/myregistry:/home/<span class="built_in">test</span> --name tender_kilby ubuntu</span><br></pre></td></tr></table></figure></li><li><p>容器2继承容器1的卷规则</p><p><code>docker run -it --privileged=true --volumes-from 父类 --name u2 ubuntu</code></p><ul><li>父类为要u2容器继承的容器名称</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ docker run -it --privileged=<span class="literal">true</span> --volumes-from u1 --name u2 ubuntu</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker run -it --privileged=<span class="literal">true</span> --volumes-from tender_kilby --name u2 ubuntu</span><br><span class="line"></span><br><span class="line">root@20699ce4cbc1:/<span class="comment"># cd /home/test/</span></span><br><span class="line"></span><br><span class="line">root@20699ce4cbc1:/home/<span class="built_in">test</span><span class="comment"># ls</span></span><br><span class="line">1.txt  2.txt  3.txt  hello.txt</span><br></pre></td></tr></table></figure><ul><li>容器1停止后，容器2还会和宿主机挂载同样的路径</li><li>容器1恢复后，会同步容器2和宿主机的文件</li></ul></li></ol><h2 id="Docker常规安装简介"><a href="#Docker常规安装简介" class="headerlink" title="Docker常规安装简介"></a>Docker常规安装简介</h2><h3 id="总体步骤"><a href="#总体步骤" class="headerlink" title="总体步骤"></a>总体步骤</h3><ul><li>搜索镜像</li><li>拉去镜像</li><li>查看镜像</li><li>启动镜像</li><li>停止容器</li><li>移除容器</li></ul><h3 id="安装-tomcat"><a href="#安装-tomcat" class="headerlink" title="安装 tomcat"></a>安装 tomcat</h3><ol><li><p>docker hub上查找镜像</p><p>或者使用命令<code>docker search tomcat</code></p></li><li><p>从docker hub上拉取tomcat镜像到本地</p><p><code>docker pull tomcat</code></p></li><li><p>docker images查看是否有拉取到的tomcat</p><p><code>docker images tomcat</code></p></li><li><p>使用tomcat镜像创建容器实例（也叫运行镜像）</p><p><code>docker run -it -p 8080:8080 tomcat</code></p><ul><li>-p 小写，主机端口:docker容器端口</li><li>-P 大写，随机分配端口</li><li>-i 交互</li><li>-t 终端</li><li>-d 后台</li></ul><p>通过-P进行演示：主机端口为49153映射到tomcat容器端口8080</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[william@arch ~]$ sudo docker run -it -P tomcat</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[william@arch ~]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">22747fb85b75   tomcat        <span class="string">&quot;catalina.sh run&quot;</span>        22 hours ago   Up 22 hours   0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp   lucid_mccarthy</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问tomcat首页</p><ul><li><p><strong>问题</strong>：访问 192.168.80.130:49153 出现 404 错误</p></li><li><p>解决方法：</p><ul><li>可能没有映射端口或者没有关闭防火墙</li><li>把 webapps.dist 目录换成 webapps</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看tomcat容器ID</span></span><br><span class="line">[william@arch ~]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">22747fb85b75   tomcat        <span class="string">&quot;catalina.sh run&quot;</span>        22 hours ago   Up 22 hours   0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp   lucid_mccarthy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入该容器</span></span><br><span class="line">[william@arch ~]$ sudo docker <span class="built_in">exec</span> -it 22747fb85b75 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除/usr/local/tomcat 目录下的webapps目录</span></span><br><span class="line">root@22747fb85b75:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># rm -rf webapps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将webapps.dist更改为webapps</span></span><br><span class="line">root@22747fb85b75:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># mv webapps.dist/ webapps</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\William\AppData\Roaming\Typora\typora-user-images\image-20220803125107969.png" alt="image-20220803125107969"></p></li></ul></li><li><p>免修改版说明</p></li></ol><ul><li><p>安装tomcat8</p><p><code>docker pull billygoo/tomcat8-jdk8</code></p></li><li><p>运行tomcat8</p><p><code>docker run -d -p 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8</code></p></li></ul><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><ol><li><p>docker hub 上面查找mysql镜像</p><p>或者<code>docker search mysql</code></p></li><li><p>从docker hub上（阿里云加速器）拉去mysql镜像到本地标签为5.7</p><p><code>docker pull mysql:5.7</code></p></li><li><p>使用mysql5.7镜像创建容器（也叫运行镜像）</p><ul><li><p>使用命令出处 <strong>hub.docker.com/_/mysql</strong></p><p><code>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</code></p><p><font color="Darkorange"><strong>docker启动的端口号，可能被主机占用了，导致docker起不来</strong></font></p><p>进入mysql</p><p><code>docker exec -it some-mysql /bin/bash</code></p><p><code>mysql -uroot -p</code></p></li><li><p>简单版（不推荐）</p><ul><li><p>建库、建表插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use db01;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; create table aa(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into aa values(1,&#x27;z3&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br></pre></td></tr></table></figure></li><li><p>外部Win11连接运行在docker上的mysql容器实例服务</p></li><li><p>问题</p><ul><li><p>插入中文数据时报错：</p><p>docker上默认字符集编码隐患</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;character%&#x27;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>删除容器后，里面的mysql数据怎么办？</p><p>删除后就该跑路了</p></li></ul></li></ul></li><li><p>实战版</p><ul><li><p>新建mysql容器实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[william@arch ~]$ docker run -d -p 3306:3306 --privileged=<span class="literal">true</span> -v /home/william/DYJ/docker/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql -v /home/william/DYJ/docker/mysql/data:/var/lib/mysql -v /home/william/DYJ/docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql mysql:5.7</span><br></pre></td></tr></table></figure><p>记录一次启动mysql失败的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[william@arch ~]$ sudo docker run -d -P --privileged=<span class="literal">true</span> -v /home/william/DYJ/docker/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql -v /home/william/DYJ/docker/mysql/data:/var/lib/mysql -v /home/william/DYJ/docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql1 mysql:5.7</span><br><span class="line">docker: Error response from daemon: Conflict. The container name <span class="string">&quot;/mysql1&quot;</span> is already <span class="keyword">in</span> use by container <span class="string">&quot;2651888e8211ebe53a49bdea5c8ea8a3a41b08d83cea5d92ac8ba509830b1610&quot;</span>. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示这个容器已经被使用，必须删除或者重命名才能使用该容器。如果我们使用docker ps 会发现下面更本没有容器</span></span><br><span class="line"></span><br><span class="line">[william@arch ~]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用docker ps -l 则会显示最新创建的容器包括所有状态</span></span><br><span class="line">[william@arch ~]$ sudo docker ps -l</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS    PORTS     NAMES</span><br><span class="line">2651888e8211   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 minutes ago   Created             mysql1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后便可启动</span></span><br><span class="line">[william@arch ~]$ sudo docker rm 2651888e8211</span><br></pre></td></tr></table></figure></li><li><p>新建my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[william@arch conf]$ <span class="built_in">cd</span> /home/william/DYJ/docker/mysql/conf</span><br><span class="line"></span><br><span class="line">[william@arch conf]$ vim my.cnf</span><br><span class="line"></span><br><span class="line">[william@arch conf]$ cat my.cnf</span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server=utf8_general_ci</span><br><span class="line">character_set_server=utf8</span><br></pre></td></tr></table></figure></li><li><p>重新启动mysql容器实例，再重新进入并查看字符编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[william@arch conf]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                                                                        NAMES</span><br><span class="line">75eba7aaa729   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   6 minutes ago   Up 6 minutes   0.0.0.0:49155-&gt;3306/tcp, :::49155-&gt;3306/tcp, 0.0.0.0:49154-&gt;33060/tcp, :::49154-&gt;33060/tcp   mysql1</span><br><span class="line">22747fb85b75   tomcat      <span class="string">&quot;catalina.sh run&quot;</span>        29 hours ago    Up 29 hours    0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp                                                  lucid_mccarthy</span><br><span class="line">57a82b1d18d4   ubuntu      <span class="string">&quot;/bin/bash&quot;</span>              2 weeks ago     Up 2 weeks                                                                                                  busy_jennings</span><br><span class="line">[william@arch conf]$ sudo docker restart 75eba7aaa729</span><br><span class="line">75eba7aaa729</span><br><span class="line"></span><br><span class="line">[william@arch conf]$ sudo docker <span class="built_in">exec</span> -it 75eba7aaa729 bash</span><br><span class="line"></span><br><span class="line">bash-4.2<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.39 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;character%&#x27;</span>;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>新建库新建表，再插入中文测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use db01;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; create table bb(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 没法打中文的话，就远程连接</span><br><span class="line">mysql&gt; GRANT ALL ON *.* TO user@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into bb values(1,&#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bb;</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | name   |</span><br><span class="line">+------+--------+</span><br><span class="line">|    1 | 张三   |</span><br><span class="line">+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>结论：</p><ul><li><font color="Darkorange">docker安装完MySQL并run出容器后，建议请先修改完字符集编码后，再新建mysql库-表-插入数据</font></li><li>数据库最好指定端口号，不要使用-P</li></ul></li><li><p>假如将当前容器实例删除，再重来一次，之前建的db01实例还有吗？</p><p>依然存在</p></li></ul></li></ul></li></ol><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><ol><li><p>从docker hub上（阿里云加速器）拉取redis镜像到本地标签为6.0.8</p><p>或者<code>docker pull redis:6.0.8</code></p></li><li><p>入门命令</p><p><code>docker run -d -p 6379:6379 redis:6.0.8</code></p><p><code>docker exec -it e6df68a8353a /bin/bash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@e6df68a8353a:/data<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>命令提醒：容器卷记得加入 <code>--privileged=true</code></p></li><li><p>在CentOS宿主机下新建目录<code>/app/redis</code></p><p><code>mkdir -p /app/redis</code></p></li><li><p>将一个redis.conf文件模板拷贝进<code>/app/redis</code>目录下</p><p><code>cp /home/william/DYJ/redis-6.0.8/redis.conf /app/redis</code></p></li><li><p><code>/app/readis</code>目录下修改redis.conf文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1.允许redis外地连接</span><br><span class="line">注释掉 #bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 2.将daemonize yes 设置成 no，或者注释掉（因为该配置和docker run中 -d 参数冲突，会导致容器一直启动失败）</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 3.开启redis数据持久化（可选）</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 4.关闭保护模式（可选）</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></li><li><p>使用redis6.0.8镜像创建容器（也叫运行镜像）</p><p><code>sudo docker run -p 6379:6379 --name redis --privileged=true -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -p 6379:6379 --name redis --privileged=<span class="literal">true</span> -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">e64e1fb8ed15a85e0fcaf7a68a0ea15ce1f14a8d78b49b3ae7b3851f172f7262</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">e64e1fb8ed15   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   14 seconds ago   Up 13 seconds   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   redis</span><br><span class="line">3bbcd1f874b5   registry      <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   8 days ago       Up 8 days       0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   youthful_knuth</span><br></pre></td></tr></table></figure></li><li><p>测试redis-cli连接上来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker <span class="built_in">exec</span> -it redis /bin/bash</span><br><span class="line"></span><br><span class="line">root@e64e1fb8ed15:~<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>请证明docker启动使用了我们自己指定的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.将宿主机的 redis.conf 中 databases 16 更改为 10</span></span><br><span class="line">databases 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.在docker redis-cli中输入</span></span><br><span class="line">127.0.0.1:6379[10]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[10]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过这种方式可以证明docker使用了我们自己指定的配置文件</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker的基本组成&quot;&gt;&lt;a href=&quot;#Docker的基本组成&quot; class=&quot;headerlink&quot; title=&quot;Docker的基本组成&quot;&gt;&lt;/a&gt;Docker的基本组成&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;镜像（image）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker镜像（Image）就是一个&lt;strong&gt;只读&lt;/strong&gt;的模板。镜像可以用来创建Docker容器，&lt;strong&gt;一个镜像可以创建很多容器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它也相当于一个root文件系统。比如官方镜像CentOs:7就包含了一套CentOs:7最小系统的root文件系统。&lt;/p&gt;
&lt;p&gt;相当于容器的“源代码”，&lt;font color=&quot;red&quot;&gt;docker镜像文件类似于Java的类模板，而docker容器实例类似于Java中new出来的实例对象。&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>随机生成句子</title>
    <link href="http://example.com/2022/06/20/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%8F%A5%E5%AD%90/"/>
    <id>http://example.com/2022/06/20/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%8F%A5%E5%AD%90/</id>
    <published>2022-06-20T15:14:45.000Z</published>
    <updated>2022-06-20T15:16:03.211Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存在，存在则删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_exists</span>():</span></span><br><span class="line">    file_path = <span class="string">&#x27;/root/file&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        os.remove(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装句子生成</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_sentence</span>(<span class="params">i</span>):</span></span><br><span class="line">    f = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line">    s = f.sentence(nb_words=i, variable_nb_words=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将句子与标签拼接，生成文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_document</span>(<span class="params">sentence_list</span>):</span></span><br><span class="line">    create_paragraph = <span class="string">&#x27;&lt;audio src=&quot;询问.wav&quot;&gt;&#123;&#125;&lt;/audio&gt;&#123;&#125;&lt;audio src=&quot;金额.wav&quot;&gt;&#123;&#125;&lt;/audio&gt;&#123;&#125;&lt;audio src=&quot;请您在.wav&quot; &gt;&#123;&#125;&lt;/audio&gt;&#123;&#125;&lt;audio src=&quot;逾期提醒.wav&quot; &gt;&#123;&#125;&lt;/audio&gt;\n&#x27;</span>.<span class="built_in">format</span>(*sentence_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/root/file&#x27;</span>,<span class="string">&#x27;at&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(create_paragraph)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    file_exists()</span><br><span class="line"></span><br><span class="line">    concurrent_time = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入并发次数：&quot;</span>))</span><br><span class="line">    loop_time = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入循环次数：&quot;</span>))</span><br><span class="line"></span><br><span class="line">    word_list = [<span class="number">21</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">5</span>,<span class="number">33</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(loop_time*concurrent_time):</span><br><span class="line">        sentence_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> word_list:</span><br><span class="line">            data = create_sentence(i)</span><br><span class="line">            sentence_list.append(data)</span><br><span class="line">        create_document(sentence_list)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>小时候的爱好</title>
    <link href="http://example.com/2022/03/22/%E5%B0%8F%E6%97%B6%E5%80%99%E7%9A%84%E7%88%B1%E5%A5%BD/"/>
    <id>http://example.com/2022/03/22/%E5%B0%8F%E6%97%B6%E5%80%99%E7%9A%84%E7%88%B1%E5%A5%BD/</id>
    <published>2022-03-22T14:45:41.000Z</published>
    <updated>2022-03-22T15:06:12.663Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>无意中看到了绘画书，突然好想画画啊，也算是圆了小时候没钱买画笔的一个梦想吧。</p><p>然后油画全套差不多200左右突然就心疼起自己的钱来…</p><p>明明吃饭、出去玩、买别的都挺舍得的😂，是否有一丝当年老妈的感触呢？</p><p>也可能我并没有准备好，所以没有下定决心要买吧。</p><p>不过我觉得我能按照书上的教程画个八九不离十吧应该。</p><span id="more"></span><p>从小就挺喜欢画画的，但是没有老师教，也没有钱买材料。之前看到过漫画教程的书籍，没想到让我发现了油画书（世上还有这种东西？）</p><p>那么我儿时的水彩梦是不是也能实现呢？</p><p>所以会有人送我一套绘画工具吗？（不要脸🤪）</p><p><img src="1.png"></p><p>初步打算天气缓和起来的时候在画吧。</p><p>现在要学习数字电路和操作系统，等之后应该能用树莓派做个什么东西出来吧。（树莓派现在能涨价400%真的挺离谱的，已经是理财产品了）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;无意中看到了绘画书，突然好想画画啊，也算是圆了小时候没钱买画笔的一个梦想吧。&lt;/p&gt;
&lt;p&gt;然后油画全套差不多200左右突然就心疼起自己的钱来…&lt;/p&gt;
&lt;p&gt;明明吃饭、出去玩、买别的都挺舍得的😂，是否有一丝当年老妈的感触呢？&lt;/p&gt;
&lt;p&gt;也可能我并没有准备好，所以没有下定决心要买吧。&lt;/p&gt;
&lt;p&gt;不过我觉得我能按照书上的教程画个八九不离十吧应该。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>3.19雪中长城</title>
    <link href="http://example.com/2022/03/19/3-19%E9%9B%AA%E4%B8%AD%E9%95%BF%E5%9F%8E/"/>
    <id>http://example.com/2022/03/19/3-19%E9%9B%AA%E4%B8%AD%E9%95%BF%E5%9F%8E/</id>
    <published>2022-03-19T14:46:51.000Z</published>
    <updated>2022-03-20T14:10:07.103Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>好想变强，好想好好睡觉，好想走遍山河。</p><p>最近感觉自己越来越闲鱼了，上班之外基本啥也没有做，读书学习都没了兴趣。</p><p>现在唯一要等的就是花开了吧，唯一还有动力能做的就是游玩计划了吧。</p><p>苦瓜柠檬茶很好喝，苦瓜清甜而不苦，加上柠檬带有一丝微微的酸甜，还有冰能很好维持这种味道就久而不消散，以至于很久之后感觉嘴巴里还是清香甘甜的。</p><p>这个冬季，在每个雪天，去过了北京自然博物馆、天坛、故宫、香山、黑龙潭、北京游乐公园、长城</p><p>所以我能变成更好的那个自己吗</p><span id="more"></span><p><img src="1.jpg"></p><p><img src="2.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好想变强，好想好好睡觉，好想走遍山河。&lt;/p&gt;
&lt;p&gt;最近感觉自己越来越闲鱼了，上班之外基本啥也没有做，读书学习都没了兴趣。&lt;/p&gt;
&lt;p&gt;现在唯一要等的就是花开了吧，唯一还有动力能做的就是游玩计划了吧。&lt;/p&gt;
&lt;p&gt;苦瓜柠檬茶很好喝，苦瓜清甜而不苦，加上柠檬带有一丝微微的酸甜，还有冰能很好维持这种味道就久而不消散，以至于很久之后感觉嘴巴里还是清香甘甜的。&lt;/p&gt;
&lt;p&gt;这个冬季，在每个雪天，去过了北京自然博物馆、天坛、故宫、香山、黑龙潭、北京游乐公园、长城&lt;/p&gt;
&lt;p&gt;所以我能变成更好的那个自己吗&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>ADB命令大全</title>
    <link href="http://example.com/2022/03/11/ADB%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://example.com/2022/03/11/ADB%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2022-03-11T15:29:59.000Z</published>
    <updated>2022-03-11T15:31:59.967Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://zhuanlan.zhihu.com/p/89060003">知乎：木头人</a></p></blockquote><p>常用命令用于速查，都是经常需要用到的，没有接触过adb命令从第二节开始看，对每个命令有详细解释。</p><h2 id="1-常用命令："><a href="#1-常用命令：" class="headerlink" title="1. 常用命令："></a>1. 常用命令：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">adb devices #查看连接设备</span><br><span class="line"></span><br><span class="line">adb -s cf27456f shell # 指定连接设备使用命令</span><br><span class="line"></span><br><span class="line">adb install test.apk # 安装应用</span><br><span class="line"></span><br><span class="line">adb install -r demo.apk #重新安装现有应用，保留其数据。</span><br><span class="line"></span><br><span class="line">adb uninstall cn.com.test.mobile #卸载应用，需要指定包</span><br><span class="line"></span><br><span class="line">adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件</span><br><span class="line"></span><br><span class="line">adb shell pm list packages #列出手机装的所有app 的包名</span><br><span class="line"></span><br><span class="line">adb shell pm list packages -3 #列出除了系统应用的第三方应用包名</span><br><span class="line"></span><br><span class="line">adb shell pm clear cn.com.test.mobile #清除应用数据与缓存</span><br><span class="line"></span><br><span class="line">adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用</span><br><span class="line"></span><br><span class="line">adb shell dumpsys package #包信息Package Information</span><br><span class="line"></span><br><span class="line">adb shell dumpsys meminfo #内存使用情况Memory Usage</span><br><span class="line"></span><br><span class="line">adb shell am force-stop cn.com.test.mobile #强制停止应用</span><br><span class="line"></span><br><span class="line">adb logcat #查看日志</span><br><span class="line"></span><br><span class="line">adb logcat -c #清除log 缓存</span><br><span class="line"></span><br><span class="line">adb reboot #重启</span><br><span class="line"></span><br><span class="line">adb get-serialno #获取序列号</span><br><span class="line"></span><br><span class="line">adb shell getprop ro.build.version.release #查看Android 系统版本</span><br><span class="line"></span><br><span class="line">adb shell top -s 10 #查看占用内存前10 的app</span><br><span class="line"></span><br><span class="line">adb push &lt;local&gt; &lt;remote&gt; #从本地复制文件到设备</span><br><span class="line"></span><br><span class="line">adb pull &lt;remote&gt; &lt;local&gt; #从设备复制文件到本地</span><br><span class="line"></span><br><span class="line">adb bugreport #查看bug 报告</span><br><span class="line"></span><br><span class="line">adb help #查看ADB 帮助</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2-1-连接设备"><a href="#2-1-连接设备" class="headerlink" title="2.1 连接设备"></a>2.1 连接设备</h2><p><strong>adb [-d|-e|-s <serialNumber>] <command></strong></p><p>连接指定设备</p><p>参数：</p><p>-d 指定当前唯一通过USB 连接的Android 设备为命令目标</p><p>-e 指定当前唯一运行的模拟器为命令目标</p><p>-s <serialNumber> 指定相应serialNumber 号的设备/模拟器为命令目标</p><p>command 为所需对设备执行的命令</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line">cf263b7f device</span><br><span class="line">emulator<span class="literal">-5554</span> offline</span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.6</span>:<span class="number">5555</span> device</span><br><span class="line"><span class="variable">$adb</span> <span class="literal">-s</span> cf263b7f <span class="comment">#连接cf264b8f 设备</span></span><br></pre></td></tr></table></figure><p>adb devices 查看已连接的设备信息, 上面已经连接3台设备。</p><h2 id="2-2-查看信息"><a href="#2-2-查看信息" class="headerlink" title="2.2 查看信息"></a>2.2 查看信息</h2><p><strong>2.2.1 查看版本设备</strong></p><p><strong>adb version</strong> 查看adb 版本信息</p><p><strong>adb devices</strong> 查看adb 连接设备</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">1226959</span>f device</span><br><span class="line"><span class="number">3426422</span>f offline</span><br></pre></td></tr></table></figure><p>注意：offline 表示设备未连接成功或无响应，device 设备已连接</p><p><strong>adb shell getprop ro.product.model</strong> 查看设备型号</p><p><strong>adb get-serialno</strong> 获取设备序列号</p><p><strong>adb bugreport</strong> 查看bug 报告</p><p><strong>adb logcat</strong> 查看日志</p><p><strong>adb shell wm size</strong> 查看屏幕分辨率</p><p><strong>adb shell wm density</strong> 查看屏幕密度</p><p><strong>2.2.2 查看应用信息</strong></p><p><strong>adb shell pm list packages</strong> 列出手机装的所有app 的包名</p><p><strong>adb shell pm list packages -s</strong> 列出系统应用的所有包名</p><p><strong>adb shell pm list packages -3</strong> 列出除了系统应用的第三方应用包名</p><p><strong>adb shell pm list packages | find “test” win</strong> 列出手机装带有的test的包</p><p><strong>adb shell pm list packages | grep ‘test’ linux</strong> 列出手机装带有的test的包</p><p><strong>adb shell cat */sys/class/net/wlan0/address*</strong> 获取MAC 地址, 根据系统版本参数可能不同</p><p><strong>adb shell getprop ro.build.version.release</strong> 查看Android 系统版本</p><p><strong>adb shell dumpsys activity services [<packagename>]</strong> 查看正在运行的Services</p><p><packagename> 参数不是必须的，指定<packagename> 表示查看与某个包名相关的Services，不指定表示查看所有Services。</p><p><packagename> 不一定要给出完整的包名，比如运行adb shell dumpsys activity services org.zhihu，那么包名org.zhihu.demo1、org.zhihu.demo2 和org.zhihu 等相关的Services 都会列出来。</p><h2 id="2-3-app-安装和卸载"><a href="#2-3-app-安装和卸载" class="headerlink" title="2.3 app 安装和卸载"></a>2.3 app 安装和卸载</h2><p><strong>2.3.1 app 安装：</strong></p><p><strong>adb install <apkfile></strong> 参数apkfile 为.apk 文件名称</p><p><strong>adb install -r *test.apk*</strong> 保留数据和缓存文件，重新安装apk</p><p><strong>adb install -s *test.apk*</strong> 安装apk 到sd 卡</p><p><strong>2.3.2 app 卸载</strong></p><p><strong>adb uninstall <package></strong> 参数package 为软件包名称</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> uninstall cn.com.test.mobile</span><br><span class="line"> </span><br><span class="line"><span class="comment">#  卸载app 但保留数据和缓存文件</span></span><br><span class="line"><span class="variable">$adb</span> uninstall <span class="literal">-k</span> ccn.com.test.mobile </span><br></pre></td></tr></table></figure><h2 id="2-4-启动停止服务"><a href="#2-4-启动停止服务" class="headerlink" title="2.4 启动停止服务"></a>2.4 启动停止服务</h2><p><strong>adb start-server</strong></p><p>启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server</p><p><strong>adb kill-server</strong></p><p>停止adb server</p><p><strong>adb -P <port> start-server</strong></p><p>指定adb server 的网络端口port （默认为5037）启动服务</p><h2 id="2-5-与应用交互"><a href="#2-5-与应用交互" class="headerlink" title="2.5 与应用交互"></a>2.5 与应用交互</h2><p><strong>adb shell pm clear <packagename></strong></p><p>清除应用数据与缓存</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell pm <span class="built_in">clear</span> cn.com.test.mobile</span><br></pre></td></tr></table></figure><p><strong>adb shell am force-stop <packagename></strong></p><p>强制停止应用</p><p>示例：强制停止微信</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure><p><strong>adb shell am <command></strong></p><p>command 命令详解</p><blockquote><p>command 用途<br>start [options] <INTENT> 启动 <INTENT> 指定的 Activity<br>startservice [options] <INTENT> 启动 <INTENT> 指定的 Service<br>broadcast [options] <INTENT> 发送 <INTENT> 指定的广播<br>force-stop <packagename> 停止 <packagename> 相关的进程</p></blockquote><p><INTENT> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应,用于决定 intent 对象的选项如下：</p><blockquote><p>-a <ACTION> 指定 action，如android.intent.action.VIEW<br>-c <CATEGORY> 指定 category，如android.intent.category.APP_CONTACTS<br>-n <COMPONENT> 指定完整 component 名，用于明确指定启动哪个 Activity，如<br><a href="https://link.zhihu.com/?target=http://com.example.app/.ExampleActivity">com.example.app/.ExampleActivity</a></p></blockquote><p><strong>2.5.1 启动 Activity</strong></p><p><strong>adb shell am start [options] <INTENT></strong></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#指定完整 component 名，用于明确指定启动哪个Activity</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> &lt;COMPONENT&gt;  </span><br><span class="line">如： <span class="comment">#表示调起微信主界面</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> com.tencent.mm/.ui.LauncherUI  </span><br></pre></td></tr></table></figure><p><strong>2.5.2 启动 Service</strong></p><p><strong>adb shell am startservice [options] <INTENT></strong></p><p>示例： 表示调起微信的某 Service。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am startservice <span class="literal">-n</span> com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</span><br></pre></td></tr></table></figure><p><strong>2.5.3 发送广播</strong></p><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>adb shell am broadcast [options] <INTENT></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向所有组件广播 BOOT_COMPLETED (开机广播)</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED   </span><br><span class="line"><span class="comment">#如：只向 org.mazhuang.boottimemeasure/.BootCompletedReceiver 广播 BOOT_COMPLETED：</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED <span class="literal">-n</span> org.mazhuang.boottimemeasure/.BootCompletedReceiver</span><br></pre></td></tr></table></figure><p>系统预定义的广播：</p><p><img src="https://pic4.zhimg.com/80/v2-c1eb5c565ef8dbea3610dc7957225917_1440w.jpg" alt="img">Android 系统预定义广播</p><p><strong>2.5.4 强制停止应用</strong></p><p><strong>adb shell am force-stop <packagename></strong></p><p><em>示例：</em></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 查询出包名</span></span><br><span class="line"><span class="variable">$adb</span> shell pm list packages </span><br><span class="line">.....</span><br><span class="line"><span class="comment"># 强制停止微信</span></span><br><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure><h2 id="2-6-文件管理"><a href="#2-6-文件管理" class="headerlink" title="2.6 文件管理"></a><strong>2.6 文件管理</strong></h2><p><strong>2.6.1 复制设备里的文件到电脑</strong></p><p><strong>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</strong></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> pull /sdcard/abc.mp4  ~/tmp/</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>小技巧</strong>：设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在 adb shell 里获取 root 权限后，先 cp /path/on/device /sdcard/filename 将文件复制到 sdcard，然后 adb pull /sdcard/filename /path/on/pc。</em></p></blockquote><p><strong>2.6.2 复制电脑里的文件到设备</strong></p><p><strong>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</strong></p><p><strong>示例：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> push  e:/ss.au3  /<span class="keyword">data</span>/local/tmp/</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>小技巧</strong>：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push /path/on/pc /sdcard/filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp /sdcard/filename /path/on/device</em></p></blockquote><h2 id="2-7-使用ADB命令模拟按键-输入"><a href="#2-7-使用ADB命令模拟按键-输入" class="headerlink" title="2.7 使用ADB命令模拟按键/输入"></a><strong>2.7 使用ADB命令模拟按键/输入</strong></h2><p><strong>adb shell input keyevent <keycode></strong></p><p>keycode位操作参数，不同的 keycode 能实现不同的功能</p><p>完整的功能见：<a href="https://link.zhihu.com/?target=https://developer.android.com/reference/android/view/KeyEvent.html">https://developer.android.com/reference/android/view/KeyEvent.html</a></p><p>keycode 能实现不同的功能，对应的编码如下：</p><p><img src="https://pic3.zhimg.com/80/v2-19f07a6dc7f9b589c0ca808be3302e32_1440w.jpg" alt="img">keycode 列表</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">26</span>  <span class="comment">#电源键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">82</span>  <span class="comment">#菜单键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">3</span>  <span class="comment">#HOME 键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">4</span> <span class="comment">#返回键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">24</span> <span class="comment">#增加音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">25</span> <span class="comment">#降低音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">164</span> <span class="comment">#静音</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">85</span>  <span class="comment">#播放/暂停</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">86</span> <span class="comment">#停止播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">87</span> <span class="comment">#播放下一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">88</span> <span class="comment">#播放上一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">126</span> <span class="comment">#恢复播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">127</span> <span class="comment">#暂停播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">224</span> <span class="comment">#点亮屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">223</span> <span class="comment">#熄灭屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input swipe <span class="number">300</span> <span class="number">1000</span> <span class="number">300</span> <span class="number">500</span>  <span class="comment">#滑动解锁，向上滑动手势解锁</span></span><br><span class="line"><span class="comment">#参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标 </span></span><br><span class="line"><span class="variable">$adb</span> shell input text hello <span class="comment">#焦点处于某文本框时输入文本</span></span><br></pre></td></tr></table></figure><h2 id="2-8-查看日志"><a href="#2-8-查看日志" class="headerlink" title="2.8 查看日志"></a><strong>2.8 查看日志</strong></h2><h3 id="2-8-1-Android-日志"><a href="#2-8-1-Android-日志" class="headerlink" title="2.8.1 Android 日志"></a><strong>2.8.1 Android 日志</strong></h3><p><strong>[adb] logcat [<option>] … [<filter-spec>] …</strong></p><p>*<strong>按级别过滤日志*</strong></p><p>按某级别过滤日志则会将该级别及以上的日志输出，Android 日志的优先级如下：</p><blockquote><p>V —— Verbose（最低，输出得最多）<br>D —— Debug<br>I —— Info<br>W —— Warning<br>E —— Error<br>F —— Fatal<br>S —— Silent（最高，啥也不输出）</p></blockquote><p>示例：输出W之上的日志，W,E,F,S</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat *:W</span><br></pre></td></tr></table></figure><p>*<strong>按 tag 和级别过滤日志*</strong></p><p><filter-spec> 可以由多个 <tag>[:priority] 组成</p><p>示例：输出 tag ActivityManager 的 I 以上级别日志，输出tag MyApp的D 以上级别日志，及其它 tag 的 S 级别日志（即屏蔽其它 tag 日志）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat ActivityManager:I MyApp:D *:S</span><br></pre></td></tr></table></figure><p>*<strong>日志格式*</strong></p><p><strong>adb logcat -v <format></strong></p><p>指定日志输出格式</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> &lt;format&gt;  指定日志输出格式</span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> brief   <span class="comment">#默认格式,&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> <span class="keyword">process</span> <span class="comment">#&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> tag  <span class="comment">#&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> raw  <span class="comment">#&lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> time  <span class="comment">#&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> threadtime <span class="comment">#&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long  <span class="comment">#[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt;:] &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long ActivityManager:I *:S  <span class="comment">#指定格式可与上面的过滤同时使用</span></span><br></pre></td></tr></table></figure><p>*<strong>清空日志*</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-c</span></span><br></pre></td></tr></table></figure><p><strong>2.8.2 内核日志</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dmesg  </span><br></pre></td></tr></table></figure><p>查看内核日志</p><h2 id="2-9-查看设备信息"><a href="#2-9-查看设备信息" class="headerlink" title="2.9 查看设备信息"></a><strong>2.9 查看设备信息</strong></h2><h3 id="2-9-1-型号"><a href="#2-9-1-型号" class="headerlink" title="2.9.1 型号"></a><strong>2.9.1 型号</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.product.model</span><br></pre></td></tr></table></figure><h3 id="2-9-2-电池状况"><a href="#2-9-2-电池状况" class="headerlink" title="2.9.2 电池状况"></a><strong>2.9.2 电池状况</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys battery</span><br></pre></td></tr></table></figure><h3 id="2-9-3-屏幕分辨率"><a href="#2-9-3-屏幕分辨率" class="headerlink" title="2.9.3 屏幕分辨率"></a><strong>2.9.3 屏幕分辨率</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm size</span><br></pre></td></tr></table></figure><h3 id="2-9-4-屏幕密度"><a href="#2-9-4-屏幕密度" class="headerlink" title="2.9.4 屏幕密度"></a><strong>2.9.4 屏幕密度</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm density</span><br></pre></td></tr></table></figure><h3 id="2-9-5-显示屏参数"><a href="#2-9-5-显示屏参数" class="headerlink" title="2.9.5 显示屏参数"></a><strong>2.9.5 显示屏参数</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys window displays</span><br></pre></td></tr></table></figure><h3 id="2-9-6-android-id"><a href="#2-9-6-android-id" class="headerlink" title="2.9.6 android_id"></a><strong>2.9.6 android_id</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell settings get secure android_id</span><br></pre></td></tr></table></figure><h3 id="2-9-7-IMEI"><a href="#2-9-7-IMEI" class="headerlink" title="2.9.7 IMEI"></a><strong>2.9.7 IMEI</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys iphonesubinfo</span><br><span class="line"><span class="comment">#而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</span></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="variable">$service</span> call iphonesubinfo <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-9-8-Android-系统版本"><a href="#2-9-8-Android-系统版本" class="headerlink" title="2.9.8 Android 系统版本"></a><strong>2.9.8 Android 系统版本</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure><h3 id="2-9-9-IP-地址"><a href="#2-9-9-IP-地址" class="headerlink" title="2.9.9 IP 地址"></a><strong>2.9.9 IP 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell ifconfig | find “Mask”</span><br><span class="line"><span class="variable">$adb</span> shell ifconfig wlan0 <span class="comment">#设备连着 WiFi，可以使用如下命令来查看局域网 IP</span></span><br><span class="line"><span class="variable">$adb</span> shell netcfg <span class="comment"># 上面两个无结果可以用这个，查看网络连接状态</span></span><br></pre></td></tr></table></figure><h3 id="2-9-10-Mac-地址"><a href="#2-9-10-Mac-地址" class="headerlink" title="2.9.10 Mac 地址"></a><strong>2.9.10 Mac 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /sys/<span class="class"><span class="keyword">class</span>/<span class="title">net</span>/<span class="title">wlan0</span>/<span class="title">address</span> # 设备不同可能地址不同</span></span><br></pre></td></tr></table></figure><h3 id="2-9-11-CPU-信息"><a href="#2-9-11-CPU-信息" class="headerlink" title="2.9.11 CPU 信息"></a><strong>2.9.11 CPU 信息</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure><h3 id="2-9-12-内存信息"><a href="#2-9-12-内存信息" class="headerlink" title="2.9.12 内存信息"></a><strong>2.9.12 内存信息</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/meminfo</span><br></pre></td></tr></table></figure><h3 id="2-9-13更多硬件与系统属性"><a href="#2-9-13更多硬件与系统属性" class="headerlink" title="2.9.13更多硬件与系统属性"></a><strong>2.9.13更多硬件与系统属性</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop</span><br></pre></td></tr></table></figure><p><strong>adb shell getprop &lt;属性名&gt;</strong></p><p>也可以</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | grep ro.product.cpu.abi</span><br><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | find “ro.product.cpu.abi”</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-1991d0e88f480209f16d87c8dabf69b5_1440w.jpg" alt="img"></p><h2 id="2-10-修改设置"><a href="#2-10-修改设置" class="headerlink" title="2.10 修改设置"></a><strong>2.10 修改设置</strong></h2><p>修改设置之后，运行恢复命令仍然不太正常，可以运行 adb reboot 重启设备或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p><h3 id="2-10-1分辨率"><a href="#2-10-1分辨率" class="headerlink" title="2.10.1分辨率"></a><strong>2.10.1分辨率</strong></h3><p><strong>adb shell wm size *480x1024*</strong> #将分辨率修改为 480px * 1024px</p><p><strong>adb shell wm size reset</strong> #恢复原分辨率</p><h3 id="2-10-2屏幕密度"><a href="#2-10-2屏幕密度" class="headerlink" title="2.10.2屏幕密度"></a><strong>2.10.2屏幕密度</strong></h3><p><strong>adb shell wm density *160*</strong> #屏幕密度修改为 160dpi</p><p><strong>adb shell wm density reset</strong> #恢复原屏幕密度</p><h3 id="2-10-3显示区域"><a href="#2-10-3显示区域" class="headerlink" title="2.10.3显示区域"></a><strong>2.10.3显示区域</strong></h3><p><strong>adb shell wm overscan *0,0,0,100*</strong></p><p># 四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 100px留白</p><p><strong>adb shell wm overscan reset</strong> #恢复显示区域</p><h3 id="2-10-4-关闭-USB-调试模式"><a href="#2-10-4-关闭-USB-调试模式" class="headerlink" title="2.10.4 关闭 USB 调试模式"></a><strong>2.10.4 关闭 USB 调试模式</strong></h3><p><strong>adb shell settings put global adb_enabled 0</strong></p><p>使用命令无法恢复调试模式，只能通过手动</p><h3 id="2-10-5-状态栏和导航栏的显示隐藏"><a href="#2-10-5-状态栏和导航栏的显示隐藏" class="headerlink" title="2.10.5 状态栏和导航栏的显示隐藏"></a><strong>2.10.5 状态栏和导航栏的显示隐藏</strong></h3><p><strong>adb shell settings put global policy_control <key-values></strong></p><p><key-values> 可由如下几种键及其对应的值组成，格式为 <key1>=<value1>:<key2>=<value2></p><p>key 键对应的值</p><p><img src="https://pic3.zhimg.com/80/v2-bd196a935a4b328d77fdfef289dc1926_1440w.jpg" alt="img"></p><p>这些键对应的值可则如下值用逗号组合</p><p><img src="https://pic1.zhimg.com/80/v2-a88f429d1bdaccbae6f7feeef65546d8_1440w.jpg" alt="img"></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置在所有界面下都同时隐藏状态栏和导航栏</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.full=*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置在包名为 com.package1 和 com.package2 的应用里隐藏状态栏，在除了包名为 com.package3 的所有应用里隐藏导航栏。</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,<span class="literal">-com</span>.package3</span><br></pre></td></tr></table></figure><h2 id="2-11-实用功能"><a href="#2-11-实用功能" class="headerlink" title="2.11 实用功能"></a><strong>2.11 实用功能</strong></h2><h3 id="2-11-1屏幕截图"><a href="#2-11-1屏幕截图" class="headerlink" title="2.11.1屏幕截图"></a><strong>2.11.1屏幕截图</strong></h3><p><strong>adb exec-out screencap -p &gt; img.png</strong> # 老版本无exec-out命令，只适合于新版的截图</p><p><strong>adb shell screencap -p /sdcard/img.png</strong> # 老版本截图先保存在设备端</p><p><strong>adb pull /sdcard/img.png</strong> # 通过pull拷贝到本地</p><p>screencap 参数：</p><p>参数 含义</p><p>-p 指定保存文件为 png 格式</p><p>-d display-id 指定截图的显示屏编号（有多显示屏的情况下）</p><h3 id="2-11-2录制屏幕"><a href="#2-11-2录制屏幕" class="headerlink" title="2.11.2录制屏幕"></a><strong>2.11.2录制屏幕</strong></h3><p><strong>#</strong> 默认录制时间和最长录制时间都是180s</p><p><strong>adb shell screenrecord /sdcard/filename.mp4</strong></p><p>screenrecord 参数：</p><p>参数 含义</p><p>–size WIDTHxHEIGHT 视频的尺寸，比如 1280x720，默认是屏幕分辨率。</p><p>–bit-rate RATE 视频的比特率，默认是 4Mbps。</p><p>–time-limit TIME 录制时长，单位秒。</p><p>–verbose 输出更多信息。</p><p><strong>2.11.3 重新挂载 system 分区为可写</strong></p><p><strong>注：需要 root 权限</strong></p><p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p><p>步骤：</p><p>1.进入 shell 并切换到 root 用户权限。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure><p>2.查看当前分区挂载情况。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mount</span></span><br><span class="line">输出如下</span><br><span class="line">.....</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /acct cgroup rw,relatime,cpuacct <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=<span class="number">750</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=<span class="number">755</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /dev/cpuctl cgroup rw,relatime,cpu <span class="number">0</span> <span class="number">0</span></span><br><span class="line">/dev/block/mtdblock0 /system ext4 ro,seclabel,relatime,<span class="keyword">data</span>=ordered <span class="number">0</span> <span class="number">0</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>找到其中我们关注的带 <strong>/system</strong> 的那一行：</p><p>3.重新挂载。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mount</span> <span class="literal">-o</span> remount,rw <span class="literal">-t</span> yaffs2 /dev/block/mtdblock0 /system</span><br></pre></td></tr></table></figure><p><strong>2.11.4 查看连接过的 WiFi 密码</strong></p><p><strong>注：需要 root 权限</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$cat</span> /<span class="keyword">data</span>/misc/wifi/*.conf</span><br></pre></td></tr></table></figure><p><strong>2.11.5设置系统日期和时间</strong></p><p><strong>注：需要 root 权限</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$date</span> <span class="literal">-s</span> <span class="number">20190531.131600</span>  <span class="comment">#将系统日期和时间更改为 2019 年 05 月 31 日 13 点 16 分 00 秒。</span></span><br></pre></td></tr></table></figure><p><strong>2.11.6 重启手机</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure><p><strong>2.11.7 检测设备是否已 root</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure><p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p><p><strong>2.11.8 使用 Monkey 进行压力测试</strong></p><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向 &lt;packagename&gt; 指定的应用程序发送 500 个伪随机事件</span></span><br><span class="line"><span class="variable">$adb</span> shell monkey <span class="literal">-p</span> &lt;packagename&gt; <span class="literal">-v</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><p>monkey 官方文档 <a href="https://link.zhihu.com/?target=https://developer.android.com/studio/test/monkey.html">https://developer.android.com/studio/test/monkey.html</a></p><p><strong>2.11.9 开启/关闭 WiFi</strong></p><p><strong>注：需要 root 权限</strong></p><p>开启 WiFi：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi enable</span><br></pre></td></tr></table></figure><p>关闭 WiFi：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi disable</span><br></pre></td></tr></table></figure><h2 id="2-12刷机相关命令"><a href="#2-12刷机相关命令" class="headerlink" title="2.12刷机相关命令"></a><strong>2.12刷机相关命令</strong></h2><p><strong>注：不要随便操作，没实验过无法保证成功</strong></p><h3 id="2-12-1重启到-Recovery-模式"><a href="#2-12-1重启到-Recovery-模式" class="headerlink" title="2.12.1重启到 Recovery 模式"></a><strong>2.12.1重启到 Recovery 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure><h3 id="2-12-2从-Recovery-重启到-Android"><a href="#2-12-2从-Recovery-重启到-Android" class="headerlink" title="2.12.2从 Recovery 重启到 Android"></a><strong>2.12.2从 Recovery 重启到 Android</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure><h3 id="2-12-3重启到-Fastboot-模式"><a href="#2-12-3重启到-Fastboot-模式" class="headerlink" title="2.12.3重启到 Fastboot 模式"></a><strong>2.12.3重启到 Fastboot 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot bootloader</span><br></pre></td></tr></table></figure><h3 id="2-12-4通过-sideload-更新系统"><a href="#2-12-4通过-sideload-更新系统" class="headerlink" title="2.12.4通过 sideload 更新系统"></a><strong>2.12.4通过 sideload 更新系统</strong></h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p><p>以 Recovery 模式下更新为例：</p><p>1.重启到 Recovery 模式。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure><p>2.在设备的 Recovery 界面上操作进入 Apply update-Apply from ADB。</p><p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 Apply update from ADB。</p><p>3.通过 adb 上传和更新系统。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> sideload &lt;path<span class="literal">-to</span><span class="literal">-update</span>.zip&gt;</span><br></pre></td></tr></table></figure><h2 id="2-13-更多-adb-shell-命令"><a href="#2-13-更多-adb-shell-命令" class="headerlink" title="2.13 更多 adb shell 命令"></a><strong>2.13 更多 adb shell 命令</strong></h2><h3 id="2-13-1查看进程"><a href="#2-13-1查看进程" class="headerlink" title="2.13.1查看进程"></a><strong>2.13.1查看进程</strong></h3><p>adb shell ps</p><h3 id="2-13-2查看实时资源占用情况"><a href="#2-13-2查看实时资源占用情况" class="headerlink" title="2.13.2查看实时资源占用情况"></a><strong>2.13.2查看实时资源占用情况</strong></h3><p>adb shell top</p><p>top命令参数如下：</p><p>使用方法: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</p><blockquote><p>-m num 最多显示多少个进程<br>-n num 刷新多少次后退出<br>-d num 刷新时间间隔（单位秒，默认值 5）<br>-s col 按某列排序（可用 col 值：cpu, vss, rss, thr）<br>-t 显示线程信息<br>-h 显示帮助文档</p></blockquote><p><strong>2.13.3其它</strong></p><p><img src="https://pic1.zhimg.com/80/v2-6044fe28a519255e62608e7ea542e65c_1440w.jpg" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/89060003&quot;&gt;知乎：木头人&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用命令用于速查，都是经常需要用到的，没有接触过adb命令从第二节开始看，对每个命令有详细解释。&lt;/p&gt;
&lt;h2 id=&quot;1-常用命令：&quot;&gt;&lt;a href=&quot;#1-常用命令：&quot; class=&quot;headerlink&quot; title=&quot;1. 常用命令：&quot;&gt;&lt;/a&gt;1. 常用命令：&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb devices #查看连接设备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb -s cf27456f shell # 指定连接设备使用命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb install test.apk # 安装应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb install -r demo.apk #重新安装现有应用，保留其数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb uninstall cn.com.test.mobile #卸载应用，需要指定包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell pm list packages #列出手机装的所有app 的包名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell pm list packages -3 #列出除了系统应用的第三方应用包名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell pm clear cn.com.test.mobile #清除应用数据与缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell dumpsys package #包信息Package Information&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell dumpsys meminfo #内存使用情况Memory Usage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell am force-stop cn.com.test.mobile #强制停止应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb logcat #查看日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb logcat -c #清除log 缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb reboot #重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb get-serialno #获取序列号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell getprop ro.build.version.release #查看Android 系统版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell top -s 10 #查看占用内存前10 的app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb push &amp;lt;local&amp;gt; &amp;lt;remote&amp;gt; #从本地复制文件到设备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb pull &amp;lt;remote&amp;gt; &amp;lt;local&amp;gt; #从设备复制文件到本地&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb bugreport #查看bug 报告&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb help #查看ADB 帮助&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="软件测试" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
