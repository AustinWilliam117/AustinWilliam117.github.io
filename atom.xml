<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒙珣的博客</title>
  
  <subtitle>我很久未试过这么接近一个人了，虽然我知道这条路不是很远。我知道不久我就会下车，可是这一分钟我觉得好暖。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-29T12:49:59.533Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蒙珣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 两数之和II-输入有序数组</title>
    <link href="http://example.com/2021/11/29/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/11/29/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-11-29T12:48:13.000Z</published>
    <updated>2021-11-29T12:49:59.533Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h4><p>给定一个已按照 <strong>非递减顺序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p><p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><span id="more"></span><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">numbers</span> = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], <span class="attr">target</span> = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">解释：<span class="number">2</span> 与 <span class="number">7</span> 之和等于目标数 <span class="number">9</span> 。因此 <span class="attr">index1</span> = <span class="number">1</span>, <span class="attr">index2</span> = <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = <span class="comment">[2,3,4]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[1,3]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = <span class="comment">[-1,0]</span>, target = -1</span><br><span class="line">输出：<span class="comment">[1,2]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type numbers: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>思考</strong></p><p>写两个for循环，然后将每个列表的两个值一一相加，直到得出目标值。</p><p>通过enumerate()得出下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type numbers: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        num = <span class="built_in">len</span>(numbers)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,num):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,num):</span><br><span class="line">                <span class="keyword">if</span> numbers[i]+numbers[k] == target:</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>,k+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>但这样并没有通过，超出了时间限制，还记得二分查找吗？</p><p><strong>非递归二分查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params"><span class="built_in">list</span>,item</span>):</span></span><br><span class="line">    <span class="comment"># 列表的头和尾，代表着数组范围的最小和最大</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当找到item的时候，low是小于high，也有可能相等</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high)//<span class="number">2</span></span><br><span class="line">        <span class="comment"># 取数组的中间值</span></span><br><span class="line">        guess = <span class="built_in">list</span>[mid]</span><br><span class="line">        <span class="comment"># 如果中间值等于索引值，那么就返回中间值的下标</span></span><br><span class="line">        <span class="keyword">if</span> guess == item:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果中间值&gt;索引值，因为不包含中间值，所以最大范围high=中间值的下标往左移1位</span></span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果中间值&lt;索引值，因为不包含中间值，所以最小范围low=中间值的下标往右移1位</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(my_list,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改进后             </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(numbers)-<span class="number">1</span>      </span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> numbers[left] + numbers[right] == target:                </span><br><span class="line">                <span class="keyword">return</span> [left+<span class="number">1</span>, right+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> numbers[left] + numbers[right] &lt; target:</span><br><span class="line">                left = left + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = right - <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>附递归二分查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params"><span class="built_in">list</span>,data</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line">    mid = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>[mid] &gt; data:</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="built_in">list</span>[<span class="number">0</span>:mid],data)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">list</span>[mid] &lt; data:</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="built_in">list</span>[mid+<span class="number">1</span>:],data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br></pre></td></tr></table></figure><p><strong>java双指针</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.length - <span class="number">1</span>; i &lt; j;) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[i] + numbers[j];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) j--;</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;167-两数之和-II-输入有序数组&quot;&gt;&lt;a href=&quot;#167-两数之和-II-输入有序数组&quot; class=&quot;headerlink&quot; title=&quot;167. 两数之和 II - 输入有序数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/&quot;&gt;167. 两数之和 II - 输入有序数组&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个已按照 &lt;strong&gt;非递减顺序排列&lt;/strong&gt; 的整数数组 &lt;code&gt;numbers&lt;/code&gt; ，请你从数组中找出两个数满足相加之和等于目标数 &lt;code&gt;target&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;函数应该以长度为 &lt;code&gt;2&lt;/code&gt; 的整数数组的形式返回这两个数的下标值&lt;em&gt;。&lt;/em&gt;&lt;code&gt;numbers&lt;/code&gt; 的下标 &lt;strong&gt;从 1 开始计数&lt;/strong&gt; ，所以答案数组应当满足 &lt;code&gt;1 &amp;lt;= answer[0] &amp;lt; answer[1] &amp;lt;= numbers.length&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你可以假设每个输入 &lt;strong&gt;只对应唯一的答案&lt;/strong&gt; ，而且你 &lt;strong&gt;不可以&lt;/strong&gt; 重复使用相同的元素。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>蛤蟆先生去看心理医生</title>
    <link href="http://example.com/2021/11/28/%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%8C%BB%E7%94%9F/"/>
    <id>http://example.com/2021/11/28/%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%8C%BB%E7%94%9F/</id>
    <published>2021-11-28T14:27:23.000Z</published>
    <updated>2021-11-28T14:27:56.732Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>python zip()函数</title>
    <link href="http://example.com/2021/11/28/python-zip-%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/11/28/python-zip-%E5%87%BD%E6%95%B0/</id>
    <published>2021-11-28T14:21:05.000Z</published>
    <updated>2021-11-28T14:22:12.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol><li>zip含有两种，其中一种是zip()——压缩，另外一种是zip(* )——解压</li><li>zip 函数在 Python 2 和 Python 3 中是有所不同的：<ul><li>在 Python 3.x 中为了减少内存，zip() 返回的是一个对象object。如果需展示列表，需手动 list() 转换。</li><li>在Python2.x中返回的是一个列表list。</li></ul></li></ol><span id="more"></span><p><strong>语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">zip</span>([iterable, ...])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>iterable：一个序列或其他的可迭代对象</p><p><strong>功能</strong></p><p>将可迭代的对象作为参数，将对象中对应的元素打包成一个个<strong>元组</strong>，然后返回由这些元组组成的<strong>列表</strong>。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。（可利用 * 号操作符，可以将元组解压为列表。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>=([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip压缩</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1=<span class="built_in">zip</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># zip解压</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2=<span class="built_in">zip</span>(*<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出压缩后的a1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a1)</span><br><span class="line">[([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],), ([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>],)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出解压后的a2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a2)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1</span><br><span class="line">&lt;<span class="built_in">zip</span> <span class="built_in">object</span> at <span class="number">0x7f273dc97200</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">zip</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>在LeetCode上有一道题（14.Longest Common Prefix），使用set()与zip()函数是最快的解决方法，时间复杂度也是最小的。<a href="https://leetcode.com/problems/longest-common-prefix/">https://leetcode.com/problems/longest-common-prefix/</a> 。下面贴出解答方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longsetCommonPrefix</span>(<span class="params">strs</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化一个字符串s，用来接受无门要求的最长的公共前缀</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 先判断strs是不是一个空字符串，如果是，则返回 ”“</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(list(zip(strs)))</span></span><br><span class="line">    <span class="comment"># print(list(zip(*strs)))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 利用zip(*)函数对字符串strs进行解压，得到一个列表，再遍历该列表</span></span><br><span class="line">    <span class="comment"># 该列表是由字符串strs每个元素打包成一个一个元组，然后再将这些元组解压（拆分）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">zip</span>(*strs):</span><br><span class="line">    <span class="comment"># 3. 对zip解压得到的列表中的每个元素用set()创建一个无序不重复的元素集合</span></span><br><span class="line">    <span class="comment"># 判断每个集合的长度是否为1，如果为1，则说明是公共前缀，并入字符串s中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 利用集合创建一个无序不重复的元素集</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(each)) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># print(set(each))</span></span><br><span class="line">            s += each[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>调用longestCommonPrefix()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大公共前缀为：%s&quot;</span> %longsetCommonPrefix(<span class="built_in">str</span>))</span><br></pre></td></tr></table></figure><p>下面是Python的运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;flower&#x27;</span>,), (<span class="string">&#x27;flow&#x27;</span>,), (<span class="string">&#x27;flight&#x27;</span>,)]</span><br><span class="line">[(<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>), (<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>), (<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;i&#x27;</span>), (<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)]</span><br><span class="line">&#123;<span class="string">&#x27;f&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line">最大公共前缀为：fl</span><br></pre></td></tr></table></figure><blockquote><p>转载自：<a href="https://blog.csdn.net/weixin_44412496/article/details/97925652">https://blog.csdn.net/weixin_44412496/article/details/97925652</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;zip含有两种，其中一种是zip()——压缩，另外一种是zip(* )——解压&lt;/li&gt;
&lt;li&gt;zip 函数在 Python 2 和 Python 3 中是有所不同的：&lt;ul&gt;
&lt;li&gt;在 Python 3.x 中为了减少内存，zip() 返回的是一个对象object。如果需展示列表，需手动 list() 转换。&lt;/li&gt;
&lt;li&gt;在Python2.x中返回的是一个列表list。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>python中sys.argv[]的用法简明解释</title>
    <link href="http://example.com/2021/11/28/python%E4%B8%ADsys-argv-%E7%9A%84%E7%94%A8%E6%B3%95%E7%AE%80%E6%98%8E%E8%A7%A3%E9%87%8A/"/>
    <id>http://example.com/2021/11/28/python%E4%B8%ADsys-argv-%E7%9A%84%E7%94%A8%E6%B3%95%E7%AE%80%E6%98%8E%E8%A7%A3%E9%87%8A/</id>
    <published>2021-11-28T08:49:14.000Z</published>
    <updated>2021-11-28T08:50:42.089Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python中 sys.argv[]的用法简明解释</p><p>   因为是看书自学的python，开始后不久就遇到了这个引入的模块函数，且一直在IDLE上编辑了后运行，试图从结果发现它的用途，然而结果一直都是没结果，也在网上查了许多，但发现这个问题的比较详细的解释只有一个版本，大部分都是转载和复制的。给的都是简明python教程上那个一长串代码的例子，说看了就明白了，可我看得晕头转向的还是没真正明白，只知道“sys.argv[0]表示代码本身文件路径”这点，其实还是不明其意。后来经过大量努力，多方求教才真正明悟了，谨以记录和分享，希望能从另一个角度给同在求索过程中的同学一点启发。</p><span id="more"></span><p>　　sys.argv[]说白了就是一个从程序外部获取参数的桥梁，这个“外部”很关键，所以那些试图从代码来说明它作用的解释一直没看明白。因为我们从外部取得的参数可以是多个，所以获得的是一个列表（list)，也就是说sys.argv其实可以看作是一个列表，所以才能用[]提取其中的元素。其第一个元素是程序本身，随后才依次是外部给予的参数。</p><p>下面我们通过一个极简单的test.py程序的运行结果来说明它的用法。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>#test.py</span><br><span class="line"><span class="symbol">2 </span></span><br><span class="line"><span class="symbol">3 </span>import sys</span><br><span class="line"><span class="symbol">4 </span>a=sys.argv[<span class="number">0</span>]</span><br><span class="line"><span class="symbol">5 </span><span class="keyword">print</span>(a)</span><br></pre></td></tr></table></figure><p>将test.py保存在c盘的根目录下。</p><p>在程序中找到 ‘运行’-&gt;点击-&gt;输入”cmd”-&gt;回车键  进入控制台命令窗口（如下图），先输入cd c:\  (作用是将命令路径改到c盘根目录)，然后输入test.py运行我们刚刚写的程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">william@DESKTOP:~/DYJ/Python$ python3 test.py</span><br><span class="line">test.py</span><br></pre></td></tr></table></figure><p>得到的结果是C:\test.py，这就是0指代码（即此.py程序）本身的意思。</p><p>然后我们将代码中0改为1 :</p><p>a=sys.argv[1]</p><p>保存后，再从控制台窗口运行，这次我们加上一个参数，输入：test.py what</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">william@DESKTOP-MDEKEAT:~/DYJ/Python$ python3 test.py what</span><br><span class="line">what</span><br></pre></td></tr></table></figure><p> 得到的结果就是我们输入的参数what，看到这里你是不是开始明白了呢。</p><p>那我们再把代码修改一下：</p><p>a=sys.argv[2：]</p><p>保存后，再从控制台窗台运行程序，这次多加几个参数，以空格隔开:</p><p>test.py a b c d e f</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">william@DESKTOP-MDEKEAT:~/DYJ/Python$ python3 test.py a b c d e f</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure><p>得到的结果为[‘b’, ’c’, ’d’, ’e’, ’f’]</p><p>应该大彻大悟了吧。Sys.argv[ ]其实就是一个列表，里边的项为用户输入的参数，关键就是要明白这参数是从程序外部输入的，而非代码本身的什么地方，要想看到它的效果就应该将程序保存了，从外部来运行程序并给出参数。</p><p><a href="http://www.cnblogs.com/aland-1415/p/7128121.html">Python3 从入门到开车</a></p><blockquote><p><a href="https://www.cnblogs.com/aland-1415/p/6613449.html">https://www.cnblogs.com/aland-1415/p/6613449.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python中 sys.argv[]的用法简明解释&lt;/p&gt;
&lt;p&gt;   因为是看书自学的python，开始后不久就遇到了这个引入的模块函数，且一直在IDLE上编辑了后运行，试图从结果发现它的用途，然而结果一直都是没结果，也在网上查了许多，但发现这个问题的比较详细的解释只有一个版本，大部分都是转载和复制的。给的都是简明python教程上那个一长串代码的例子，说看了就明白了，可我看得晕头转向的还是没真正明白，只知道“sys.argv[0]表示代码本身文件路径”这点，其实还是不明其意。后来经过大量努力，多方求教才真正明悟了，谨以记录和分享，希望能从另一个角度给同在求索过程中的同学一点启发。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>爱的艺术</title>
    <link href="http://example.com/2021/11/27/%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://example.com/2021/11/27/%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/</id>
    <published>2021-11-27T12:41:10.000Z</published>
    <updated>2021-11-28T14:26:21.636Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这本书值得反复阅读，第一遍阅读很多地方都不是很明白，加上一些事情耽搁，没有写笔记。导致现在忘得差不多了，如果有时间我会再读一遍，然后补上书评。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>python __name__==&#39;__main__&#39;作用详解</title>
    <link href="http://example.com/2021/11/27/python-name-main-%E4%BD%9C%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2021/11/27/python-name-main-%E4%BD%9C%E7%94%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-27T09:43:15.000Z</published>
    <updated>2021-11-27T09:53:34.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在阅读别人写的自定义模块时，经常会看到有如下这行判断语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br></pre></td></tr></table></figure><p>这行代码的作用是什么呢？本节就详解讲解以下它的作用。</p><span id="more"></span><p>一般情况下，当我们写完自定义的模块之后，都会写一个测试代码，检验一些模块中各个功能是否能够成功运行。例如，创建一个 candf.py 文件，并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">摄氏度和华氏度的相互转换模块</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c2f</span>(<span class="params">cel</span>):</span></span><br><span class="line">    fah = cel * <span class="number">1.8</span> + <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> fah</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2c</span>(<span class="params">fah</span>):</span></span><br><span class="line">    cel = (fah - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">    <span class="keyword">return</span> cel</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据：0 摄氏度 = %.2f 华氏度&quot;</span> % c2f(<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据：0 华氏度 = %.2f 摄氏度&quot;</span> % f2c(<span class="number">0</span>))</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>单独运行此模块文件，可以看到如下运行结果：</p><p>测试数据：0 摄氏度 = 32.00 华氏度<br>测试数据：0 华氏度 = -17.78 摄氏度</p><p>在 candf.py 模块文件的基础上，在同目录下再创建一个 demo.py 文件，并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> candf</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;32 摄氏度 = %.2f 华氏度&quot;</span> % candf.c2f(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;99 华氏度 = %.2f 摄氏度&quot;</span> % candf.f2c(<span class="number">99</span>))</span><br></pre></td></tr></table></figure><p>运行 demo.py 文件，其运行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">测试数据：0 摄氏度 = 32.00 华氏度</span><br><span class="line">测试数据：0 华氏度 = -17.78 摄氏度</span><br><span class="line">32 摄氏度 = 89.60 华氏度</span><br><span class="line">99 华氏度 = 37.22 摄氏度</span><br></pre></td></tr></table></figure><p>可以看到，<a href="http://c.biancheng.net/python/">Python</a>解释器将模块（candf.py）中的测试代码也一块儿运行了，这并不是我们想要的结果。想要避免这种情况的关键在于，要让 Python 解释器知道，当前要运行的程度代码，是模块文件本身，还是导入模块的其它程序。</p><p>为了实现这一点，就需要使用 Python 内置的系统变量 __name__，它用于标识所在模块的模块名。例如，在 demo.py 程序文件中，添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(__name__)</span><br><span class="line"><span class="built_in">print</span>(candf.__name__)</span><br><span class="line">其运行结果为：</span><br><span class="line">__main__</span><br><span class="line">candf</span><br></pre></td></tr></table></figure><p>可以看到，当前运行的程序，其 <strong>name</strong> 的值为 __main__，而导入到当前程序中的模块，其 <strong>name</strong> 值为自己的模块名。</p><p>因此，<code>if __name__ == &#39;__main__&#39;:</code> 的作用是确保只有单独运行该模块时，此表达式才成立，才可以进入此判断语法，执行其中的测试代码；反之，如果只是作为模块导入到其他程序文件中，则此表达式将不成立，运行其它程序时，也就不会执行该判断语句中的测试代码。</p><blockquote><p>转载自：<a href="http://c.biancheng.net/view/4643.html">http://c.biancheng.net/view/4643.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在阅读别人写的自定义模块时，经常会看到有如下这行判断语句：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&amp;#x27;__main__&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这行代码的作用是什么呢？本节就详解讲解以下它的作用。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>江南逢李龟年</title>
    <link href="http://example.com/2021/11/25/%E6%B1%9F%E5%8D%97%E9%80%A2%E6%9D%8E%E9%BE%9F%E5%B9%B4/"/>
    <id>http://example.com/2021/11/25/%E6%B1%9F%E5%8D%97%E9%80%A2%E6%9D%8E%E9%BE%9F%E5%B9%B4/</id>
    <published>2021-11-25T14:29:44.000Z</published>
    <updated>2021-11-25T15:19:03.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-EtIdEVvT" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="816965" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><center>岐王宅里寻常见，</br></br>崔九堂前几度闻。</br></br>正是江南好风景，</br></br>落花时节又逢君。</br></center><span id="more"></span><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.bilibili.com/video/BV1Mh41147ty?spm_id_from=333.999.0.0"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-EtIdEVvT&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;816965&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;/br&gt;



&lt;center&gt;
岐王宅里寻常见，&lt;/br&gt;&lt;/br&gt;
崔九堂前几度闻。&lt;/br&gt;&lt;/br&gt;
正是江南好风景，&lt;/br&gt;&lt;/br&gt;
落花时节又逢君。&lt;/br&gt;
&lt;/center&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="诗词歌赋" scheme="http://example.com/tags/%E8%AF%97%E8%AF%8D%E6%AD%8C%E8%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>python enumerate()说明</title>
    <link href="http://example.com/2021/11/25/python-enumerate-%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2021/11/25/python-enumerate-%E8%AF%B4%E6%98%8E/</id>
    <published>2021-11-25T13:55:15.000Z</published>
    <updated>2021-11-25T14:07:18.988Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="enumerate-说明"><a href="#enumerate-说明" class="headerlink" title="enumerate()说明"></a>enumerate()说明</h2><ul><li><p>enumerate()是python的内置函数</p></li><li><p>enumerate在字典上是枚举、列举的意思</p></li><li><p>对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值</p></li></ul><span id="more"></span><ul><li><p>enumerate多用于在for循环中得到计数</p></li><li><p>例如对于一个seq，得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>,seq[<span class="number">0</span>]),(<span class="number">1</span>,seq[<span class="number">1</span>]),(<span class="number">2</span>,seq[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li><p>enumerate()返回一个enumerate对象，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">enumerate</span>(seq)</span><br><span class="line">&lt;<span class="built_in">enumerate</span> <span class="built_in">object</span> at <span class="number">0x7f74995b8140</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="enumerate-使用"><a href="#enumerate-使用" class="headerlink" title="enumerate()使用"></a>enumerate()使用</h2><ul><li><p>如果对一个列表，既要遍历索引又要遍历元素时，首先可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&quot;这&quot;</span>,<span class="string">&quot;是&quot;</span>,<span class="string">&quot;一个&quot;</span>,<span class="string">&quot;测试&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i,list1[i])</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> 这</span><br><span class="line"><span class="number">1</span> 是</span><br><span class="line"><span class="number">2</span> 一个</span><br><span class="line"><span class="number">3</span> 测试</span><br></pre></td></tr></table></figure></li><li><p>上述方法有些累赘，利用enumerate()会更加直接和优美：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&quot;这&quot;</span>,<span class="string">&quot;是&quot;</span>,<span class="string">&quot;一个&quot;</span>,<span class="string">&quot;测试&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(index,item)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> 这</span><br><span class="line"><span class="number">1</span> 是</span><br><span class="line"><span class="number">2</span> 一个</span><br><span class="line"><span class="number">3</span> 测试</span><br></pre></td></tr></table></figure></li><li><p>enumerate还可以接收第二个参数，用于指定索引起始值，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&quot;这&quot;</span>,<span class="string">&quot;是&quot;</span>,<span class="string">&quot;一个&quot;</span>,<span class="string">&quot;测试&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1,<span class="number">1</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(index,item)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> 这</span><br><span class="line"><span class="number">2</span> 是</span><br><span class="line"><span class="number">3</span> 一个</span><br><span class="line"><span class="number">4</span> 测试</span><br></pre></td></tr></table></figure></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果要统计文件的行数，可以这样写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="built_in">len</span>(<span class="built_in">open</span>(filepath,<span class="string">&#x27;r&#x27;</span>).readlines())</span><br></pre></td></tr></table></figure><p>这种方法简单，但是可能比较慢，当文件比较大时甚至不能工作。</p><p>可以利用enumerate()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">open</span>(filepath,<span class="string">&#x27;r&#x27;</span>)):</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>转载自：<a href="https://www.cnblogs.com/oddcat/articles/9630404.html">https://www.cnblogs.com/oddcat/articles/9630404.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;enumerate-说明&quot;&gt;&lt;a href=&quot;#enumerate-说明&quot; class=&quot;headerlink&quot; title=&quot;enumerate()说明&quot;&gt;&lt;/a&gt;enumerate()说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;enumerate()是python的内置函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;enumerate在字典上是枚举、列举的意思&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 最长公共前缀</title>
    <link href="http://example.com/2021/11/24/leetcode-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>http://example.com/2021/11/24/leetcode-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</id>
    <published>2021-11-24T15:00:38.000Z</published>
    <updated>2021-11-24T15:08:47.751Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;fl&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>示例 2：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;&quot;</span></span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>大概有这五种思路, 一般都会采用第四种, 但是耗时太多</p><p>1、所求的最长公共前缀子串一定是每个字符串的前缀子串。所以随便选择一个字符串作为标准，把它的前缀串，与其他所有字符串进行判断，看是否是它们所有人的前缀子串。这里的时间性能是O(m*n*m)。</p><p>2、列出所有的字符串的前缀子串，将它们合并后排序，找出其中个数为n且最长的子串。时间性能为O(n*m+m*n*log(m*n))</p><p>3、纵向扫描：从下标0开始，判断每一个字符串的下标0，判断是否全部相同。直到遇到不全部相同的下标。时间性能为O(n*m)。</p><p>4、横向扫描：前两个字符串找公共子串，将其结果和第三个字符串找公共子串……直到最后一个串。时间性能为O(n*m)。</p><p>5、借助trie字典树。将这些字符串存储到trie树中。那么trie树的第一个分叉口之前的单分支树的就是所求。</p><p>python两种让你拍大腿的解法，时间复杂度你想象不到，短小精悍。 1、利用python的max()和min()，在Python里字符串是可以比较的，按照ascII值排，举例abb， aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    s1 = <span class="built_in">min</span>(strs)</span><br><span class="line">    s2 = <span class="built_in">max</span>(strs)</span><br><span class="line">    <span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(s1):</span><br><span class="line">        <span class="keyword">if</span> x != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> s2[:i]</span><br><span class="line">    <span class="keyword">return</span> s1</span><br></pre></td></tr></table></figure><p>2、利用python的zip函数，把str看成list然后把输入看成二维数组，左对齐纵向压缩，然后把每项利用集合去重，之后遍历list中找到元素长度大于1之前的就是公共前缀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    ss = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">set</span>, <span class="built_in">zip</span>(*strs)))</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(ss):</span><br><span class="line">        x = <span class="built_in">list</span>(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        res = res + x[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;/p&gt;
&lt;p&gt;如果不存在公共前缀，返回空字符串 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;keyword&quot;&gt;strs&lt;/span&gt; = [&lt;span class=&quot;string&quot;&gt;&amp;quot;flower&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;flow&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;flight&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;string&quot;&gt;&amp;quot;fl&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 亲密字符串</title>
    <link href="http://example.com/2021/11/23/leetcode-%E4%BA%B2%E5%AF%86%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2021/11/23/leetcode-%E4%BA%B2%E5%AF%86%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-11-23T14:11:39.000Z</published>
    <updated>2021-11-23T14:13:38.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="859-亲密字符串"><a href="#859-亲密字符串" class="headerlink" title="859. 亲密字符串"></a><a href="https://leetcode-cn.com/problems/buddy-strings/">859. 亲密字符串</a></h4><p>给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。</p><p>交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i != j ，接着交换 s[i] 和 s[j] 处的字符。</p><ul><li>例如，在 “abcd” 中交换下标 0 和下标 2 的元素可以生成 “cbad” 。</li></ul><span id="more"></span><p><strong>示例 1：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ab&quot;</span>, <span class="keyword">goal</span> = <span class="string">&quot;ba&quot;</span></span><br><span class="line">输出：true</span><br><span class="line">解释：你可以交换 s[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span> 和 s[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span> 生成 <span class="string">&quot;ba&quot;</span>，此时 s 和 <span class="keyword">goal</span> 相等。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ab&quot;</span>, <span class="keyword">goal</span> = <span class="string">&quot;ab&quot;</span></span><br><span class="line">输出：false</span><br><span class="line">解释：你只能交换 s[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span> 和 s[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span> 生成 <span class="string">&quot;ba&quot;</span>，此时 s 和 <span class="keyword">goal</span> 不相等。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;aa&quot;</span>, <span class="keyword">goal</span> = <span class="string">&quot;aa&quot;</span></span><br><span class="line">输出：true</span><br><span class="line">解释：你可以交换 s[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span> 和 s[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span> 生成 <span class="string">&quot;aa&quot;</span>，此时 s 和 <span class="keyword">goal</span> 相等。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;aaaaaaabc&quot;</span>, <span class="attr">goal</span> = <span class="string">&quot;aaaaaaacb&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;= s.length, goal.length &lt;= 2 * 104</li><li>s 和 goal 由小写英文字母组成</li></ul><p><strong>思路</strong></p><ol><li>字符串长度不相等, 直接返回false</li><li>字符串相等的时候, 只要有重复的元素就返回true</li><li>A, B字符串有不相等的两个地方, 需要查看它们交换后是否相等即可.</li></ol><p><strong>参考答案</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buddyStrings</span>(<span class="params">self, s, goal</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type goal: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 长度不同直接false</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="built_in">len</span>(goal): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 由于必须交换一次，在相同的情况下，交换相同的字符</span></span><br><span class="line">        <span class="keyword">if</span> s == goal <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">set</span>(goal)) &lt; <span class="built_in">len</span>(goal): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用 zip 进行匹配对比，挑出不同的字符对</span></span><br><span class="line">        dif = [(a, b) <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(s, goal) <span class="keyword">if</span> a != b]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对数只能为2，并且对称，如 (a,b)与(b,a)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(dif) == <span class="number">2</span> <span class="keyword">and</span> dif[<span class="number">0</span>] == dif[<span class="number">1</span>][::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/buddy-strings">https://leetcode-cn.com/problems/buddy-strings</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;859-亲密字符串&quot;&gt;&lt;a href=&quot;#859-亲密字符串&quot; class=&quot;headerlink&quot; title=&quot;859. 亲密字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/buddy-strings/&quot;&gt;859. 亲密字符串&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。&lt;/p&gt;
&lt;p&gt;交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i != j ，接着交换 s[i] 和 s[j] 处的字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，在 “abcd” 中交换下标 0 和下标 2 的元素可以生成 “cbad” 。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Happy Birthday</title>
    <link href="http://example.com/2021/11/22/Happy-Birthday/"/>
    <id>http://example.com/2021/11/22/Happy-Birthday/</id>
    <published>2021-11-22T12:37:45.000Z</published>
    <updated>2021-11-23T14:05:42.542Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天是我的生日，其实我不喜欢过生日。因为除了我妈没有人记得，也没有人在乎过。</p><p>记得小时候，我12岁的生日我记得很清楚，因为那天我奶奶祭祖，我感觉很隆重，我爸还请了亲戚们吃饭。但我似乎并不是这次的主角，除了大姐没有人跟我说生日快乐。</p><p>最让我感动的一次生日是大一的时候，因为那次我和一个好友的生日是同一天。他下午给我送了礼物，但是我并不在寝室，于是让细心的室友发现了我的“秘密”。</p><span id="more"></span><p>那天天气很冷，我上完晚课加上去实验室自习已是晚上十点。其实那天我猜到了室友可能知道我的生日了，当我回到寝室时，还是被感动的落了泪。第一次有人给我真正的过生日，还给我买了蛋糕。</p><p>简单却温馨</p><p>好像很多人都不爱过生日，因为没人记得，没人会记得，因为很麻烦，会尴尬，因为没有钱，送不起。</p><p>但其实我们要的不是礼物，仅仅是一句生日快乐。</p><p>今天又是我的生日了，没有告诉别人，下班的时候偷偷给自己买了个蛋糕。其实，你不说别人怎么会记得呢，不过一个人有时候也挺好的。</p><p>一个普通平常的一天，如果自己都忘了，谁又能重视呢。</p><p>生日快乐！！！</p><p><img src="1.jpeg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天是我的生日，其实我不喜欢过生日。因为除了我妈没有人记得，也没有人在乎过。&lt;/p&gt;
&lt;p&gt;记得小时候，我12岁的生日我记得很清楚，因为那天我奶奶祭祖，我感觉很隆重，我爸还请了亲戚们吃饭。但我似乎并不是这次的主角，除了大姐没有人跟我说生日快乐。&lt;/p&gt;
&lt;p&gt;最让我感动的一次生日是大一的时候，因为那次我和一个好友的生日是同一天。他下午给我送了礼物，但是我并不在寝室，于是让细心的室友发现了我的“秘密”。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>为什么有些朋友，走着走着就散了</title>
    <link href="http://example.com/2021/11/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%9B%E6%9C%8B%E5%8F%8B%EF%BC%8C%E8%B5%B0%E7%9D%80%E8%B5%B0%E7%9D%80%E5%B0%B1%E6%95%A3%E4%BA%86/"/>
    <id>http://example.com/2021/11/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%9B%E6%9C%8B%E5%8F%8B%EF%BC%8C%E8%B5%B0%E7%9D%80%E8%B5%B0%E7%9D%80%E5%B0%B1%E6%95%A3%E4%BA%86/</id>
    <published>2021-11-21T14:52:22.000Z</published>
    <updated>2021-11-23T12:39:15.405Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>01</strong></p><p>可能这样说有些无奈，但<strong>很多友情确实是阶段性的，时间和空间是扼杀友情最大的两个“杀手”。</strong></p><p>曾经，时间和空间的撮合，让我们共享了一段结伴的愉快旅程，<strong>到了分岔路口的时候，你说要去海里看鲸，我说要去林间看鹿，于是就此分道扬镳。</strong></p><p>但我们并不是一夕之间陌生的，刚开始，我们还保持着联系，你给我看看鲸的照片，我和你说说鹿的样貌。但<strong>在不再参与彼此的生活之后，话题的开启渐渐变得困难，从前的默契渐渐不再。</strong></p><span id="more"></span><p>很多次，浮于表面的对话、不再及时的回复、戛然而止的聊天，让彼此都分明感到这种联系成了一种打扰。<strong>成年人有一种精细的敏感和贴心的自觉，一旦感受到对方的退意和冷淡，自己便也很少再主动了，毕竟，大家都忙。</strong></p><p>所以你看，其实什么也没发生，<strong>没有具体的波澜，没有大吵一架，甚至没有结束语，但我们就是不再联系了</strong>，然后，我们不仅消失在了彼此的生活里，也模糊在了彼此的记忆中。</p><p>在时间的冲刷和距离的阻隔下，我们和那个人的联系就这样默默地、悄悄地、势不可挡地斩断了。</p><p><strong>“被推着走，跟着生活流，来年陌生的，是昨日最亲的某某。”</strong>大概，这就是“初闻不识曲中意，再闻已是曲中人”。</p><p><strong>02</strong></p><p>虽然有些直接，但还是要承认，<strong>好友间关系变淡的原因之一，是社会资源、地位、见识差距变大，你的苦闷他无法理解，他的彷徨对你而言，又可能是某种变相的炫耀。</strong></p><p>两个人无话可说，只能叙旧，直到过去被反复咀嚼，淡而无味，又碍于情面，怕被指责势利，还要勉强维持点赞的情分。</p><p><strong>当然，有很多超越阶级的友谊，但两者的见识和思辨力，一定是对等的。</strong>许多年少时的朋友，只能被拿来怀念；许多因为恩情而结缘的人，也只适合报恩。<strong>朋友是需要交换观点的人，而不仅仅是交换感情。</strong></p><p>我越来越觉得，<strong>要从同路者中寻找朋友，而不是硬拽着朋友一道上路。到了分岔口，温柔道别就好，过年时发一句“新年吉祥”，也好过两个人口不对心地把酒话桑麻。</strong>（作者：倪一宁）</p><p><strong>03</strong></p><p><strong>在各奔前程的过程中，旧友不断流失，但在新的环境里，又未能建立起可以弥补这种流失的关系。</strong>我觉得，是这两者的合力，共同酿成了“失友”的感受。</p><p>很多人都有这样的体会吧：<strong>毕业工作后，认识新朋友这件事好像变得越来越困难了，交际圈也很难在工作外有所拓展。</strong>同事可以一起吃饭一起聊天一起玩，但真要成为特别好的知心朋友，似乎不容易。</p><p>这很正常，<strong>毕竟大家是因为工作而聚在一起的，而不是为了交朋友</strong>，况且，当友谊掺杂了公事，又会变得更复杂，顾虑也会更多。</p><p>但这些都不是最重要的，真正的问题好像是：<strong>我们越来越不愿意花精力去交朋友了。</strong>因为工作太累了，有时间就想自己待着多休息，不想在社交上花费力气；因为从零开始了解一个人太麻烦了，已经没有年少时的心气和热情了；因为自己的事情太多了，交朋友已经不是生活的重点了……</p><p><strong>旧的不断流失，新的未有补给</strong>，于是，朋友好像真的越来越少了。</p><p><strong>04</strong></p><p>失去一个朋友，除了因为生活轨迹的差异，也许还有一个内在的原因，那就是：<strong>对方不再是你认可的那个人了。</strong></p><p><strong>能成为朋友，一定有互相欣赏、互相影响、互相促进、互相依靠、互相带来能量和快乐这些因素</strong>，如果有一天，因为各种原因，我们已经无法从对方身上感受和汲取这些<strong>情绪价值</strong>，甚至对方的一些想法和做法是我们无法认可的，渐行渐远也许就在所难免了。</p><p>人生的际遇不断变化，行走其中的人也在不断变化。<strong>怀念过去，并不意味着要停在过去。</strong></p><p><strong>05</strong></p><p>有心理学家说，<strong>18-25岁是所谓的“成年初期”，这个年龄段主要“解决亲密与孤独的冲突”，我们需要朋友带来的亲密关系，以克服内心的孤独、迷茫和不确定感，冲开人生的一道道关卡。</strong>这一时期的交友因素，最重要的是<strong>“接近性”</strong>。</p><p>然后，随着年龄的增长，方向的差异，际遇的变化，<strong>曾经的“接近性”受到破坏，很多曾经的朋友疏于甚至失去联系。</strong></p><p>但是，随着时间推移，成年人的友情其实也在变化。</p><p>我们不再是曾经意气高喊“要做一辈子好朋友”的热血少年，我们不再是连上厕所都要约着一起的亲密同伴，我们更清楚自己想要什么，可以独立做出决定。在这个阶段，<strong>“相似性”</strong>成为更重要的因素，在一些专家看来，<strong>成年中期的友情，不再需要时刻相伴，关系被定义为：知道他在那里。</strong></p><p>是啊，<strong>真正可贵和难得的情谊，不会轻易被时空打败。</strong>哪怕人生的际遇疏离化了一些关系，哪怕彼此的联系不如往日频繁，哪怕已经许久未见，哪怕不能第一时间知晓你的近况，<strong>但在我需要你的时候，我知道你就在那里。</strong></p><p>也许，<strong>我们并没有“失去朋友”，我们只是换了一种方式去维系友情，更成熟地面对人生。</strong></p><p><strong>“大丈夫各乘风波，未始有极，哀乐且不足累上士之心，况小别乎？”</strong></p><p>别离是人生常态，身边的人也确实来来往往更迭不断，但<strong>总有一些人，已经陪伴了我们很久，还将陪伴我们更久。</strong></p><p><img src="1.jpeg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能这样说有些无奈，但&lt;strong&gt;很多友情确实是阶段性的，时间和空间是扼杀友情最大的两个“杀手”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经，时间和空间的撮合，让我们共享了一段结伴的愉快旅程，&lt;strong&gt;到了分岔路口的时候，你说要去海里看鲸，我说要去林间看鹿，于是就此分道扬镳。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但我们并不是一夕之间陌生的，刚开始，我们还保持着联系，你给我看看鲸的照片，我和你说说鹿的样貌。但&lt;strong&gt;在不再参与彼此的生活之后，话题的开启渐渐变得困难，从前的默契渐渐不再。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 分糖果</title>
    <link href="http://example.com/2021/11/11/leetcode-%E5%88%86%E7%B3%96%E6%9E%9C/"/>
    <id>http://example.com/2021/11/11/leetcode-%E5%88%86%E7%B3%96%E6%9E%9C/</id>
    <published>2021-11-11T14:03:06.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="575-分糖果"><a href="#575-分糖果" class="headerlink" title="575. 分糖果"></a><a href="https://leetcode-cn.com/problems/distribute-candies/">575. 分糖果</a></h4><p>Alice 有 n 枚糖，其中第 i 枚糖的类型为 candyType[i] 。Alice 注意到她的体重正在增长，所以前去拜访了一位医生。</p><p>医生建议 Alice 要少摄入糖分，只吃掉她所有糖的 n / 2 即可（n 是一个偶数）。Alice 非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。</p><p>给你一个长度为 n 的整数数组 candyType ，返回： Alice 在仅吃掉 n / 2 枚糖的情况下，可以吃到糖的最多种类数。</p><span id="more"></span><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：candyType = [1,1,2,2,3,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：Alice 只能吃 6 / 2 = 3 枚糖，由于只有 3 种糖，她可以每种吃一枚。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：candyType = [1,1,2,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：Alice 只能吃 4 / 2 = 2 枚糖，不管她选择吃的种类是 [1,2]、[1,3] 还是 [2,3]，她只能吃到两种不同类的糖。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：candyType = [6,6,6,6]</span><br><span class="line">输出：1</span><br><span class="line">解释：Alice 只能吃 4 / 2 = 2 枚糖，尽管她能吃 2 枚，但只能吃到 1 种糖。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>n == candyType.length</li><li>2 &lt;= n &lt;= 104</li><li>n 是一个偶数</li><li>-105 &lt;= candyType[i] &lt;= 105</li></ul><p>设糖果数为N，由于妹妹只能分到一半的糖果，所以答案不会超过n/2；另一方面，一共有M种，答案也不会超过M</p><p>若M &lt;= n/2，则每种糖果至少可分一颗给妹妹，此时最多能分M个糖果</p><p>若M &gt; n/2，只能分到n/2种糖果，每种糖果分一颗，此时最多能分n/2个糖果</p><p>贪心算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distrubuteCandies</span>(<span class="params">self,candyType</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">len</span>(<span class="built_in">set</span>(candyType)),<span class="built_in">len</span>(candyType)//<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;575-分糖果&quot;&gt;&lt;a href=&quot;#575-分糖果&quot; class=&quot;headerlink&quot; title=&quot;575. 分糖果&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/distribute-candies/&quot;&gt;575. 分糖果&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Alice 有 n 枚糖，其中第 i 枚糖的类型为 candyType[i] 。Alice 注意到她的体重正在增长，所以前去拜访了一位医生。&lt;/p&gt;
&lt;p&gt;医生建议 Alice 要少摄入糖分，只吃掉她所有糖的 n / 2 即可（n 是一个偶数）。Alice 非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。&lt;/p&gt;
&lt;p&gt;给你一个长度为 n 的整数数组 candyType ，返回： Alice 在仅吃掉 n / 2 枚糖的情况下，可以吃到糖的最多种类数。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>2021.11的雪</title>
    <link href="http://example.com/2021/11/07/2021-11%E7%9A%84%E9%9B%AA/"/>
    <id>http://example.com/2021/11/07/2021-11%E7%9A%84%E9%9B%AA/</id>
    <published>2021-11-07T12:40:26.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2021年11月06号晚，下了北京的第一场雪。（过年那段时间的不算哈）</p><p>我之前约了自然博物馆，因为之前鸽了两次，如果再去不就要被拉黑了。所以我早上顶着风雪，还好赶上了12：00入场。</p><span id="more"></span><p><img src="1.jpg"><br></br></p><p><img src="2.jpg"><br></br></p><p><img src="3.jpg"></p><p>礼品店的礼物好像已经不太适合我了（真的有点幼稚）。唉，可能没有童心了，不过这个狗狗还可以。</p><p><img src="4.jpg"><br></br></p><p><img src="6.jpg"></p><p>中午去了KFC，本来是想去吃火锅的，毕竟下雪嘛。但是一个人吃好像没啥感觉，索性就算了，下雪吃冰淇淋也很美的。</p><p><img src="5.jpg"></p><p>在吃饭的时候，就在想才13点啊，一会去哪逛呢？看了看地图，就去了天坛。雪后的天坛很美，后悔没有在早上就来，那时候还在下雪，而且人少，应该会更美。</p><p><img src="7.jpg"><br></br></p><p><img src="8.jpg"><br></br></p><p><img src="9.jpg"></p><p>今年秋天的叶子刚变黄，还没掉完，就下雪了。感觉夏-&gt;秋-&gt;冬都没几天</p><p><img src="10.jpg"></p><p>听说每年下雪去故宫等地方，因为冰锥下落而去整形外科的人很多，还好我没事…</p><p><img src="11.jpg"><br></br></p><p><img src="12.jpg"></p><p>好了，伴随着夕阳，我也要回家了。</p><p><img src="13.jpg"><br></br></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年11月06号晚，下了北京的第一场雪。（过年那段时间的不算哈）&lt;/p&gt;
&lt;p&gt;我之前约了自然博物馆，因为之前鸽了两次，如果再去不就要被拉黑了。所以我早上顶着风雪，还好赶上了12：00入场。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>三体：死神永生</title>
    <link href="http://example.com/2021/11/06/%E4%B8%89%E4%BD%93-%E6%AD%BB%E7%A5%9E%E6%B0%B8%E7%94%9F/"/>
    <id>http://example.com/2021/11/06/%E4%B8%89%E4%BD%93-%E6%AD%BB%E7%A5%9E%E6%B0%B8%E7%94%9F/</id>
    <published>2021-11-06T10:37:19.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>他们都说程心很圣母，但想想她也是被人推上去的。</p><p>在最开始不过是一个PIA（星防御理事会战略情报局）的管理层。维德提出送大脑，程心确实是想到了云天明，毕竟是熟悉的人，所以能想到。</p><span id="more"></span><p>至于云天明对程心的暗恋，不论多感人，不过是感动自己，感动观众而已。被喜欢的人不会因“爱”而感动，这里的爱是爱情的爱，而不是一个人对自己好的情感的爱。</p><p>其实，我们都知道我们被云天明感动的，不过也是一个人对另一个人好，而另外一个人完全不当回事。换做现实生活中的自己又何尝不是！对一个不爱你的人来说，你所做的一切什么都不是。你做出了很大的牺牲，仅仅是感动了她一下而已，觉得有愧于你，但那也不是想和你在一起。</p><p>对于云天明来说，他不需要这个。对于那些喜欢别人而不被他人所爱的人来说，也不需要这种感动。</p><p>之后，在竞选了执剑人的时候，确实是人们选择了圣母的程心。因为人们看到了她的善良，人们需要这种温柔的美。因为罗辑是那个”暴君“，人们害怕他，和平的年代人们总会这样。想想确实很可笑，但书中人人类，是我们每一个人的缩影。像是无法摆脱的枷锁，像是一条无形的锁链，到那个时候人们就是会做出这样的事。</p><p>不过有一点，程心确实被冲昏了头。就是当所有人都觉得程心可以的时候，程心自己也把这个问题想的太过简单了。她在联合国抱着婴儿说自己要竞选执剑人的那一刻，真的是不能忘记，或许将成为是一个经典。</p><p>在她刚刚成为执剑人的那一刻，三体就发起了进攻，她丢掉了遥控器，她按不下去。这其实也是很多人觉得她圣母的时候。但我们并不是程心，我们没有站在程心所站的位置，也没有经历过程心所经历的一切。这也并不是给程心开脱什么，毕竟当她看到被入侵的那一刻，她没有履行自己的职责就不是一个好的执剑人了。但试想一下自己，是否又能在那一刻按下遥控器让所有地球人，三体人全部陪葬呢？</p><p>要知道，当你按下去的那一刻，可能三体会出于报复，对地球进行毁灭性的打击，或者惨无人道的杀戮，又或者地球人自己对程心的谴责等等。毕竟黑暗森林的打击没有那么快么。虽然说三体入侵后对人类的侵占也是很没有人道的，最后竟然让人们互相蚕食。</p><p>想象一下吧，你在单位、学校、家庭等各种场合的畏首畏尾真的可以承担这个大任吗？程心也不过是和我们一样的人。</p><p>不过可能程心对云天明的一直都是一种依靠，而非爱情吧。因为从送星星到三个故事，她的感动都不是那种我想和你在一起，而是一种很温暖的依靠的感觉。这一点也能在最后去他们的那颗星星上可以体现，她渴望见到他，那就是喜欢他吗？并不是，因为看到关一帆的时候，她也有那种依靠感，毕竟当时以为全人类都没有了嘛。</p><p>不过最后云天明和AA在一起了，也是什么伦理剧哈哈哈。公开暗恋我的人，竟然跟我最好的闺蜜在一起了。也算是挺好吧，书中的剧情永远没有现实生活中离谱。</p><p>云天明能放下程心，开始自己的生活就已经很不错了。</p><p>最后程心留下5公斤的生态球，书中为一个开放结局，到底有没有重启不得而知。这样感觉程心也是一个被动型人格的人，容易受到他人的观念所左右。</p><p>说了好的情感话题，其实第三部，死神永生真的很好看，上演了全人类的猜忌、生存大戏。真的是大为震撼，不过还是感觉大刘在这方面刻画的比较少，可能编剧不让过？不过他自己没怎么写过这样的内容吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;他们都说程心很圣母，但想想她也是被人推上去的。&lt;/p&gt;
&lt;p&gt;在最开始不过是一个PIA（星防御理事会战略情报局）的管理层。维德提出送大脑，程心确实是想到了云天明，毕竟是熟悉的人，所以能想到。&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装多个版本JDK并设置默认版本</title>
    <link href="http://example.com/2021/11/03/Linux-%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%ACJDK%E5%B9%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2021/11/03/Linux-%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%ACJDK%E5%B9%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%89%88%E6%9C%AC/</id>
    <published>2021-11-03T12:32:36.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>一台设备不能同事运行两个 Java 版本</p></blockquote><ol><li><p>官网下载 JDK 版本，<code>jdk-8u181-linux-x64.tar.gz</code></p></li><li><p>使用 ssh 工具上传安装包到 Linux 系统，传至：<code>/usr/local</code></p></li><li><p>Linux 用户安装的程序一般放在 <code>/usr/local</code>下</p></li></ol><span id="more"></span><ol start="4"><li><p>使用命令解压：tar zxcf jdk-8u181-linux-x64.tar.gz， 解压安装包到 /usr/local/下</p></li><li><p>配置环境变量</p><p>用管理员用户root对 /etc/profile进行编辑，添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181   -- jdk所在目录</span><br><span class="line">export JRE_HOME=/usr/local/jdk1.8.0_181/jre -- jre所在目录</span><br><span class="line">export CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>退出vim编辑器，使环境设置立即生效 <code>source /etc/profile</code></p></li><li><p>使用<code>java -version</code>命令查看档期那系统正在使用的java版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ~]# java -version</span><br><span class="line">java version &quot;1.7.0&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.170, mixed mode)</span><br></pre></td></tr></table></figure><p>发现并不是新安装的jdk版本，使用命令更改当前系统使用的jdk版本</p><p><code>alternatives --config java</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ~]# alternatives --config java</span><br><span class="line"></span><br><span class="line">There are 3 programs which provide &#x27;java&#x27;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">*+ 1           /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java</span><br><span class="line">   2           /usr/lib/jvm/jre-1.6.0-openjdk.x86_64/bin/java</span><br><span class="line">   3           /usr/lib/jvm/jre-1.5.0-gcj/bin/java</span><br></pre></td></tr></table></figure><p>没有新安装的1.8.1版本jdk，需要使用命令将新安装的jdk放入到java bin中</p><p><code>alternatives --install /usr/bin/java java /usr/local/jdk1.8.0_181/bin/java 4</code></p><p>再使用<code>alternatives --config java</code>，此时可以看到新安装的 版本，然后选择即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ~]# alternatives --config java</span><br><span class="line"></span><br><span class="line">There are 4 programs which provide &#x27;java&#x27;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">*+ 1           /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java</span><br><span class="line">   2           /usr/lib/jvm/jre-1.6.0-openjdk.x86_64/bin/java</span><br><span class="line">   3           /usr/lib/jvm/jre-1.5.0-gcj/bin/java</span><br><span class="line">   4           /usr/local/jdk1.8.0_181/bin/java</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or type selection number: 4</span><br><span class="line">[root@CentOS ~]# java -version</span><br><span class="line">java version &quot;1.8.0_181&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一台设备不能同事运行两个 Java 版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;官网下载 JDK 版本，&lt;code&gt;jdk-8u181-linux-x64.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 ssh 工具上传安装包到 Linux 系统，传至：&lt;code&gt;/usr/local&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux 用户安装的程序一般放在 &lt;code&gt;/usr/local&lt;/code&gt;下&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>存在的艺术</title>
    <link href="http://example.com/2021/11/03/%E5%AD%98%E5%9C%A8%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://example.com/2021/11/03/%E5%AD%98%E5%9C%A8%E7%9A%84%E8%89%BA%E6%9C%AF/</id>
    <published>2021-11-03T12:27:34.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>请读原著，作者的思想仅能通过原著获得。还没有读这本书，先占个坑，目前正在读他的另一本《爱的艺术》</p></blockquote><p>传统精神分析的另一危险，</p><p>在于这样一个事实。</p><p>即病人往往只是生成想做出改变。</p><p>如果他患有恼人的症状，</p><p>如失眠、阳痿、恐惧当权者、</p><p>与异性关系不愉快</p><p>或只是感觉萎靡不振，</p><p>他当然希望能摆脱这些。</p><p>谁不想呢？</p><span id="more"></span></br><p>但他不愿意经历</p><p>在成长和孤独中必须要经历的痛苦。</p><p>他是如何面对该困境呢？</p><p>他期望着只需遵循“基本规则”</p><p>不费考虑，</p><p>想到什么就说什么</p><p>以为这样就可以被治愈，</p><p>无疼痛，也无需努力 </p></br><p>总之，他认为通过谈话就可以被“救赎”。</p><p>但世上没有这样的事情。</p><p>如果不曾经历痛苦或不愿意经历，</p><p>没有人能够成长，</p><p>也没有人能追求到</p><p>任何值得追求到的东西。</p></br><hr><p>如果他仍是一个人，</p><p>而非一件物品时，</p><p>这个人就会有孤独感、无力感，</p><p>与现今社会有隔离感。</p></br><p>正因为清醒，</p><p>他才不禁感到痛苦，</p><p>尽管他可以体验喜悦和明晰的瞬间，</p><p>而这些是他“正常”的同代人体会不到的。</p></br><p>得神经症也不令人意外，</p><p>因为这个健全的人</p><p>生活在一个疯狂的社会，</p><p>而不是以前那种一个病态的人</p><p>试图让自己适应一个病态的社会</p><p>所引发的神经症。</p></br><p>在对他对自己做进一步分析的过程中，</p><p>也就是说，在更加独立更加自主的过程中，</p><p>他的神经质症状会自愈。</p><p>说到底，各种神经症的发生都意味着</p><p>一个人没能解开存在之谜。</p><hr><p>每天早晨应该进行至少三十分钟的自我分析，</p><p>如果可能的话，</p><p>尽量在相同的时间和地点，</p><p>并应尽量避免外界的干扰。</p></br><p>在不得不等待，</p><p>或“无事可做”，</p><p>或在地铁里、飞机上时，</p><p>都可以进行，</p><p>而不是马上去阅读一本杂志，</p><p>和别人聊天或者做白日梦。</p><p>BGM</p><p>Olafur Arnalds - Agust</p><p>Robert Haigh - Clear Water</p><p>Martin Ermen - Gymnpedie Nr.1</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;请读原著，作者的思想仅能通过原著获得。还没有读这本书，先占个坑，目前正在读他的另一本《爱的艺术》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统精神分析的另一危险，&lt;/p&gt;
&lt;p&gt;在于这样一个事实。&lt;/p&gt;
&lt;p&gt;即病人往往只是生成想做出改变。&lt;/p&gt;
&lt;p&gt;如果他患有恼人的症状，&lt;/p&gt;
&lt;p&gt;如失眠、阳痿、恐惧当权者、&lt;/p&gt;
&lt;p&gt;与异性关系不愉快&lt;/p&gt;
&lt;p&gt;或只是感觉萎靡不振，&lt;/p&gt;
&lt;p&gt;他当然希望能摆脱这些。&lt;/p&gt;
&lt;p&gt;谁不想呢？&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>时间在流动</title>
    <link href="http://example.com/2021/11/01/%E6%97%B6%E9%97%B4%E5%9C%A8%E6%B5%81%E5%8A%A8/"/>
    <id>http://example.com/2021/11/01/%E6%97%B6%E9%97%B4%E5%9C%A8%E6%B5%81%E5%8A%A8/</id>
    <published>2021-11-01T01:30:00.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-BYZCfDQn" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="16964043" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><p>回想过去一年，时间的齿轮永不停歇的转动，一圈又一圈 。</p><p>当我听着2020年的歌单的时候，我感觉不出那是什么时候听到的。</p><p>感觉很遥远，但仔细想想也不过一年。</p><p>一年！活着好像没有什么感觉，一切瞬息万变，一切好像有没有变。</p><p>时间的尺度上，我太渺小了。</p><p>我感到很孤独，很无助，很害怕。</p><span id="more"></span></br><p>感觉我有很多事情没有做，但每一个都没能抓住。</p><p>人他在时间的缝隙中悄然流逝。</p><p>我无能为力，我孤立无援。</p><p>我甚至没有一个可以诉说，可以倾听的对象。</p></br><p>每天上下班只有看书，或者书为我打造的世界中，勉强喘息。</p><p>已经是十一月的深秋了，说明这一年已经快要结束。</p><p>可是这一年的伊始，我还是历历在目啊，仿佛就在昨天。</p><p>时间在我不经意间流逝了，我无能为力</p></br><p>每一天都是上一天的叠加，然后把他们压扁成一天，甚至只有一道微弱的痕迹。</p></br><p>关于未来的打算</p><p>我想考研，圆自己一个梦，铺平以后的路。</p><p>我想去考公务员，然后可有混吃等死。</p><p>这样我有更多的时间做自己喜欢的事情，或者虚度光阴。</p><p>不再用怕35岁的中年危机。</p></br><p>或许我能在这几年拥有一段爱情，但我不敢开始，也太想开始。</p><p>我害怕拥有，害怕失去。</p><p>害怕拥有他阻碍了我的发展，害怕失去他丢失了好不容易好转的我。</p></br><p>2021.11.1 9:30</p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-BYZCfDQn&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;16964043&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;/br&gt;

&lt;p&gt;回想过去一年，时间的齿轮永不停歇的转动，一圈又一圈 。&lt;/p&gt;
&lt;p&gt;当我听着2020年的歌单的时候，我感觉不出那是什么时候听到的。&lt;/p&gt;
&lt;p&gt;感觉很遥远，但仔细想想也不过一年。&lt;/p&gt;
&lt;p&gt;一年！活着好像没有什么感觉，一切瞬息万变，一切好像有没有变。&lt;/p&gt;
&lt;p&gt;时间的尺度上，我太渺小了。&lt;/p&gt;
&lt;p&gt;我感到很孤独，很无助，很害怕。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>生活就是这样，凄迷中藏着希望，阴冷中透着温暖。</title>
    <link href="http://example.com/2021/10/30/%E7%94%9F%E6%B4%BB%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%EF%BC%8C%E5%87%84%E8%BF%B7%E4%B8%AD%E8%97%8F%E7%9D%80%E5%B8%8C%E6%9C%9B%EF%BC%8C%E9%98%B4%E5%86%B7%E4%B8%AD%E9%80%8F%E7%9D%80%E6%B8%A9%E6%9A%96%E3%80%82/"/>
    <id>http://example.com/2021/10/30/%E7%94%9F%E6%B4%BB%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%EF%BC%8C%E5%87%84%E8%BF%B7%E4%B8%AD%E8%97%8F%E7%9D%80%E5%B8%8C%E6%9C%9B%EF%BC%8C%E9%98%B4%E5%86%B7%E4%B8%AD%E9%80%8F%E7%9D%80%E6%B8%A9%E6%9A%96%E3%80%82/</id>
    <published>2021-10-30T14:56:23.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-RNKhtMXm" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1495052210" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><blockquote><p>您已偏离路线，已为您重新规划，请在合适的位置掉头。</p></blockquote><span id="more"></span><p>记得小时候，我珍藏着一包红包，但是表弟看见了，一直找我要。我当然是不肯给的，可以父命难为，再说还有舅舅、舅妈看着我呢。于是便给了他，让他好好珍惜。</p><p>可能轻易得到的东西，在他人眼里便是一文不值吧，看得我那叫一个心疼。</p><p>可是过了这么久，十几年了吧。对我来说，那早就是轻易就能得到的东西。）</p><p>时间总会淡忘一切，在时间的尺度上，再在乎的东西，经过岁月的沉淀都会退去颜色。</p><p>时间让自己更为强大，强大到不再在意那个东西，那个人了。</p><p>对于那个强大的自己来说，有则为生活增添光彩，没有生活也有滋有味</p><p>不过，那时候的自己，是真的。现在的自己也是真的，只是可怜年少单纯、傻傻的自己一去不复还。</p><p>我很高兴，我成长了！我也很难过，我成长了</p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-RNKhtMXm&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;1495052210&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;/br&gt;

&lt;blockquote&gt;
&lt;p&gt;您已偏离路线，已为您重新规划，请在合适的位置掉头。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>时光飞逝，我已不再年少</title>
    <link href="http://example.com/2021/10/25/%E6%97%B6%E5%85%89%E9%A3%9E%E9%80%9D%EF%BC%8C%E6%88%91%E5%B7%B2%E4%B8%8D%E5%86%8D%E5%B9%B4%E5%B0%91/"/>
    <id>http://example.com/2021/10/25/%E6%97%B6%E5%85%89%E9%A3%9E%E9%80%9D%EF%BC%8C%E6%88%91%E5%B7%B2%E4%B8%8D%E5%86%8D%E5%B9%B4%E5%B0%91/</id>
    <published>2021-10-25T14:08:15.000Z</published>
    <updated>2021-11-11T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-MuZDmYiv" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="442315772" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><p>今天和苗帅聊天，发现已经快11月了。这一年过的好快，快到我没有留下什么影响。</p><p>还记得年初，北京漫天的黄沙，好像就在不久前。也许3月的时候，和现在一样冷而产生的错觉吧。</p><span id="more"></span><p><img src="1.jpg" alt="3.15号的黄沙"></p><center>3.15号的黄沙</center></br><p>只记得北京的7月，下班还能迎着夕阳，每天都会带雨伞，以防突如其来的大雨。</p><p>似乎这一切，都在不久前，但仔细想想却也是3个月前的事情了。</p><p>时间过的好快，快到你稍有不备，它就会偷偷从你身边溜走，当你回想起来的时候，感叹时间是那么遥远。</p><p><img src="2.jpg" alt="7.8号的雷雨天"></p><center>7.8号的雷雨天</center></br><p>每天重复的日子，似乎都堆叠成了一天，只有那些特别的天气，才能让我觉得那是另外一天。也许因为这样，我才会觉得那些日子似乎才在昨天吧。</p><p>10年前的自己，和10年后的自己有什么区别呢？还是那个天真、单纯的傻孩子罢了。但年龄、长相、婚姻、周围的人，又时刻提醒着我，已经不再是那个小孩子了。</p><p>哎！</p><p>怎么说呢，以前挺想回到小时候的，但现在又不太想了，不知道是为什么。</p><p>不过希望，我能好好爱自己。那个小时候的自己已经长大了，可能他的心还没有，那也请现在的你多多照顾他吧。</p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-MuZDmYiv&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;442315772&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;/br&gt;

&lt;p&gt;今天和苗帅聊天，发现已经快11月了。这一年过的好快，快到我没有留下什么影响。&lt;/p&gt;
&lt;p&gt;还记得年初，北京漫天的黄沙，好像就在不久前。也许3月的时候，和现在一样冷而产生的错觉吧。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
</feed>
