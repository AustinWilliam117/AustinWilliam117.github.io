<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒙珣的博客</title>
  
  <subtitle>未来很长，当有勇气面对，当与自己和解。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-26T11:16:44.334Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蒙珣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>刀锋</title>
    <link href="http://example.com/2021/12/26/%E5%88%80%E9%94%8B/"/>
    <id>http://example.com/2021/12/26/%E5%88%80%E9%94%8B/</id>
    <published>2021-12-26T09:35:17.000Z</published>
    <updated>2021-12-26T11:16:44.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>“活着到底是为了什么，人生究竟有没有意义，还是只能可悲地任凭命运摆布？”</p></blockquote><p>《刀锋》这本书读下来，没有什么感受，甚至微信读书上都没写什么。</p><p>拉里在战友为他掩护而战死后，感受到了生命的无常，开始追寻生活的本源。为此不惜与自己的未婚妻伊莎贝尔分手，他每天都泡在图书馆10个小时左右，之后又在矿区，德国、法国、印度、中国等地，寻找答案。</p><span id="more"></span><p>在印度象神大师的点化后重回美国，抛手所有财产，过上了开出租车闲云野鹤的生活。</p><p>我觉得《刀锋》这本书，是想要读者和拉里一样找寻生命的本质。</p><p>你想过上怎样的生活，而为这样的生活应该怎样去做。</p><p>就像书中结尾所说：</p><blockquote><p>书中与我有关的人物无不如愿以偿：艾略特称为社交名流；伊莎贝尔凭着巨额财产，活跃于上流文化圈；格雷有了轻松赚钱的稳定工作，每日朝九晚六；苏珊·鲁维耶的生活无虞；苏菲求得一死；拉里获得幸福之道。</p></blockquote><p>或者人活着应该追求本性、本心吧，不要被社会、被人所裹挟。</p><p>下面分享一些好的句子</p><blockquote><p>剃刀边缘无比锋利，欲通过者无比艰辛；</p><p>事故智者常言，救赎之道难行。                                            ——《迦托 · 奥义书》</p></blockquote><blockquote><p>无论男女，不仅仅是代表自己，更反映出生的地域、是在城市亦或是农村学会走路、儿时常玩的游戏、从老一辈听来的传说、习惯的饮食、就读的学校、热衷的运动、阅读的诗篇与信仰的神祇，等等。凡此种种，均造就了一个人的样貌，光凭道听途说不可能通盘了解，比得亲身经历，进而融入自我生命。</p></blockquote><blockquote><p>他为人爽朗，笑口常开，但明眼人都不难发现，他这般友善聒噪的外表仅是面具，好掩饰精明的生意人形象。</p></blockquote><blockquote><p>成年人鲜少会想到，年轻人对我们的评价既无情却又中肯。</p></blockquote><blockquote><p>我并不怕犯错，搞不好会在其中一条冤枉路上，找到人生的目标。</p></blockquote><blockquote><p>“如果他真的爱你，就改为了你找份工作。”</p></blockquote><blockquote><p>有个男的这么献殷勤，任何女孩都会受宠若惊。一旦她发现身边的闺蜜们都巴不得嫁给他，我问你，谁能忍着不捷足先登呢？这就好像你去参加一场派对，虽然事前就知道会很无聊，点心又只有柠檬汁和饼干，但终究还是会前往，只因为没受邀请的好友都非常眼红。</p></blockquote><blockquote><p>可能不实用，也可能很实用，但是非常有趣。你真的很难想象，读懂《奥德赛》的原文又多么令人兴奋，仿佛只要踮起脚尖，伸出手来，就能碰到天上的星星。</p></blockquote><blockquote><p>同样有涂了睫毛膏的睫毛、画得鲜红的嘴唇、抹了胭脂的面颊、辛苦锻炼过的苗条身材、清晰立体的五官，以及如饥似渴的彷徨眼神，让人无法不察觉到，他们人生的唯一目的，就是尽力挽救逐渐消逝的风采。</p></blockquote><blockquote><p>人生如果不想随波逐流，就等于是场豪赌，失败的人不胜枚举，成功的人寥寥无几。</p></blockquote><blockquote><p>一般人在热恋时，常会编造各种借口，来说服自己凡事跟着感觉走。我猜想，这也许就是不幸的婚姻为何那么多的原因。就好像你明知道某人是骗子，但因为交情深厚，所以偏要把所有事情托付给他，只因不愿相信骗子会重视利益到牺牲友情，认为即使他对人再不老实，也绝不会辜负自己。</p></blockquote><blockquote><p>他说万物不是创造出来的，因为无只生无，并不生有，万物本身就是永恒的表征。这点还可以接受，但是他接着又说，善和恶都是神性的直接表征。</p></blockquote><blockquote><p>我和格雷一直都很幸福。他是个不可多得的丈夫。大萧条来临前，我们生活得开开心心的。我们喜欢交同样的朋友，也喜欢从事同样的活动，而且他对我非常体贴，有人这么对自己死心塌地，是很棒的事情。婚后到现在，他对我的爱从来没变过，而且觉得我是世上最完美的女人。他平时的温柔和细心，外人真的无法想象。他对我大方到不可思议，只要是好东西都会买给我。我们结婚这么多年，他从来没凶过我半句。我只能说自己真是太幸运了。</p></blockquote><blockquote><p>大城市里总会有许多自给自足的圈子，彼此不相往来，自成一个个小世界，仿佛是一座座孤岛，隔着无法横渡的海峡，成员互相依赖，过着自己的日子。</p></blockquote><blockquote><p><strong>“嗯，部分心理学家认为，意识是伴随着脑部活动出现的，但是不会反过来影响脑部活动。这就好比树木在水中的倒影，非得有树木才会存在，但是丝毫影响不了树木。有人说，爱情不一定要有激情，在我看来是胡说八道。所谓没有激情的爱情，根本就不是爱情，而是属于喜欢、体贴、共同的兴趣或是习惯。习惯尤其如此。两个人可以因为习惯而保持性关系，就像到了饭点肚子会饿一样。当然，性欲不一定要有爱情。性欲跟激情不同，而是自然而然的性本能，无异于人类其他本能。所以，只要有了天时地利，丈夫难免会出轨，太太却容易小题大做，实在是很傻。”</strong></p><p><strong>“难道只有男人会这样吗？”</strong></p><p><strong>我露出微笑。</strong></p><p><strong>“你真要问的话，我会说这样的现象不分男女。唯一不同之处是，对男人来说，露水姻缘可以不带情感；但对女人来说，还是会牵扯到情感。”</strong></p><p><strong>“那也得看是什么女人。”</strong></p><p><strong>我没搭腔，继续说下去。</strong></p><p><strong>“爱情如果跟激情分开，就不算是真的爱情，而是别的情感。燃起激情的火苗不是满足，而是阻碍。你想想，济慈告诉希腊古瓮上的情郎别难过，是什么意思呢？‘汝将永远爱恋，伊将永远娇美！’为什么呢？因为得不到呀。无论他再怎么疯狂追求，都追不到心爱的人，因为小两口困在大理石之中，成就了这件无情的艺术品。你和拉里对彼此的爱，就好比保罗与法兰契斯卡，或是罗密欧与朱丽叶，既单纯又自然。幸好，你们不是以悲剧收场。你嫁给了有钱人，拉里云游四海、探索世界，其中并没有激情的成分。”</strong></p><p><strong>“你怎么知道的？”</strong></p><p><strong>“激情是不计代价的。哲学家帕斯卡说过，感情自有离职参不透的理由。如果我的理解没错，这是指当感情受激情所控制，就会发明看似可信的理由，来证明可以为爱牺牲一切，置个人冗余于度外，忍受羞辱也甘愿。激情拥有毁灭的力量，摧毁了神话中的情侣，包括安东里与克里奥佩特拉、崔斯坦与伊索德、帕内尔与欧希亚。为了这股力量，激情就会凋零。届时才会出现怅然若失的感觉，发现虚掷了大半人生，饱受嫉妒伴随的痛苦，吞下种种责难辱骂，献出所有浓情爱意，掏空了灵魂的一切，岂料对方不过是个废物、笨蛋，或是自己编织梦想的借口，价值还不如一条口香糖。”</strong></p></blockquote><blockquote><p>我凭直觉认为，爱上他是很蠢的事，女人很可怜，常常一坠入情网，就变得不可爱了，所以我打定主意不能陷阱去。</p></blockquote><blockquote><p>我想对她来说，丈夫和孩子的死就等于是世界末日。她不顾自己的死活，甘愿沉沦于酗酒和滥交，只为了报复生命的残酷。她曾经有天堂般美好的生活，一夕破灭后，受不了平凡无趣的世界，绝望之余只好坠入地狱。我可以想象，她觉得既然再也喝不到天堂的琼浆玉露，倒不如让自己镇日与屎尿为伍。</p></blockquote><blockquote><p>吾不与人争，胜败均不值。<br>钟情大自然，次之为艺术。<br>生命之火暖双手，他日余烬消逝，吾可安然离去。</p></blockquote><blockquote><p><strong>自我牺牲的情感足以压倒一切，就连欲望和饥饿都相形见绌，这是对自我人格的最大肯定，就算因此走向灭亡也在所不惜。无论为什么牺牲，都无关紧要，值不值得也非重点。这就好比美酒，只是更令人陶醉；也好比爱情，只是更让人心碎；更好比罪恶，只是更加使人着迷。一个人牺牲自己的瞬间，比上帝还要伟大，因为上帝既是全知全能，怎么可能牺牲自己？顶多只能牺牲唯一的儿子。</strong></p></blockquote><blockquote><p>宝贝儿，走，去看那玫瑰<br>清晨才刚刚展开花蕊<br>裙般的花瓣沐浴着阳光，<br>恰好将夜色褪去<br>又绛染裙褶缕缕，如花般颜色的，正是您的面庞。<br>啊！只是一小会儿，<br>您看那花，宝贝儿，<br>她那凋零的美丽翩翩迟迟！<br>哦，自然竟也如恶妇般残忍，<br>仅仅朝夕之瞬，<br>这花便稍纵即逝！<br>宝贝儿，若是您信我的话，<br>就趁着青涩韶华<br>趁着如花灿烂的年岁<br>去采摘，采摘您青春的花朵：<br>因为时光会将您的美貌包裹，<br>一如他黯淡了这凋谢的玫瑰。</p></blockquote><blockquote><p>天空是一片深邃的蓝，闪烁着无数星斗，亮得惊人。我似乎打起了瞌睡，但感官仍旧清醒。忽然间，耳边传来一阵仓促又愤怒的声音，我的神智瞬间清醒起来。这是死亡的呼啸，世上没别的声音更教人敬畏。我走到床边，借着灯塔的光摸着艾略特的脉搏，他已经死了。我打开床头灯看着他，他的下巴张着，双眼睁开。我在帮他合上双眼前，先凝视了他一会儿，情绪涌上心头，几滴眼泪就这么滑落双颊。这位老友为人亲切和善，一生却是如此傻气、无用又微不足道，我想到这里就悲从中来。他出席过无数宴会，和许多王公贵族、爵士名流来往，如今都毫无意义，这些人早把他给忘了。</p></blockquote><blockquote><p>说也奇怪，许多人都饱受恐惧的煎熬。我不是指害怕身处密闭空间，或者害怕站在高处，而是害怕死亡，更惨的是害怕人生。他们多半看起来非常健康，生活富足且无所牵挂，却被恐惧折磨。我有时会觉得，这是最让人困扰的情绪，我一度自问，这是否植根于深沉的动物本能，自从远古先祖首次感受到生命的颤动后，就代代遗传了下来。</p></blockquote><blockquote><p>凡是对我有深远影响的人，几乎都是碰巧遇到的，但回想起来，却好像是命中注定，仿佛全是在我需要他们时出现的。</p></blockquote><blockquote><p>她的性情开朗、温和又热情，把性爱当成身体的本能，无异于吃喝拉撒睡，自己既能享受快感，也乐意给人快感。她就像个小动物，但是非常讨人喜欢，既漂亮又温驯。</p></blockquote><blockquote><p>女人哪！我原本总以为，男人若要靠女人卖身来养他，至少得身材壮硕且魅力十足，随时准备跟人动刀动枪；而如此矮小猥琐的家伙，外表看来顶多是个律师助理，竟有能耐在人满为患的小白脸圈子占有一席之地。</p></blockquote><blockquote><p>印度许多贤者后来也认知到人类的软弱，承认也可以运用爱和工作获得救赎，但是他们从没否认过，唯有知识才是最崇高又艰难的途径，因为知识仰赖人类最宝贵的能力，也就是理性。</p></blockquote><blockquote><p>我这辈子的奇特经验很多了：我曾多次走过鬼门关，多次陷入风流韵事，曾骑马沿着马可·波罗当年的道路穿越中亚抵达中国，曾在圣彼得堡一间客厅中，边喝着俄罗斯茶，边听着一名身穿黑外套条纹裤、说话轻声细语的小矮子，说他暗杀某公爵的过程，曾坐在西敏寺大厅中，聆听恬静温柔的海顿钢琴三重奏，外头则是炸弹轰隆隆的爆炸声。但是，种种遭遇都不及眼前的景象：我在一家装潢华美的餐馆中，坐在红丝绒椅子上，听着拉里谈论神和永恒，谈论何谓梵，以及无穷无尽的轮回。</p></blockquote><blockquote><p>女人最满意的职业还是婚姻</p></blockquote><blockquote><p>拉里已如他所愿，淹没于喧嚣激荡的人海，其中有众多矛盾与利益纠葛，有人迷失于失序的世界，有人坚信善良，有人外表笃定，有人内心彷徨，有人慈悲为怀，有人不知变通，有人轻信他人，有人防卫心重，有人恶劣，也有人慷慨，凡此种种构成了美国众生相。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“活着到底是为了什么，人生究竟有没有意义，还是只能可悲地任凭命运摆布？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《刀锋》这本书读下来，没有什么感受，甚至微信读书上都没写什么。&lt;/p&gt;
&lt;p&gt;拉里在战友为他掩护而战死后，感受到了生命的无常，开始追寻生活的本源。为此不惜与自己的未婚妻伊莎贝尔分手，他每天都泡在图书馆10个小时左右，之后又在矿区，德国、法国、印度、中国等地，寻找答案。&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="http://example.com/2021/12/25/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/12/25/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-25T06:12:58.000Z</published>
    <updated>2021-12-26T06:46:15.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-oPitYvcl" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="408814313" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><br><blockquote><p>那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。—— 王小波 《黄金时代》</p></blockquote><p>Happy New Year  2022年了！</p><p>说起来这一年过得好快啊，我还清晰记得我今年年初刚上班的场景，转眼这一年便悄然结束了。</p><span id="more"></span><p>回想起这一年我好像什么都没有做，记得我写过<a href="https://mengxun.club/2021/10/25/%E6%97%B6%E5%85%89%E9%A3%9E%E9%80%9D%EF%BC%8C%E6%88%91%E5%B7%B2%E4%B8%8D%E5%86%8D%E5%B9%B4%E5%B0%91/">《时光飞逝，我已不再年少》</a>当时就感觉这一年就这么静悄悄的过去了，什么都没有留下。</p><p>现在我想应该翻翻手机里这一年的照片，看看我还能记得什么。</p><h4 id="回忆这一年"><a href="#回忆这一年" class="headerlink" title="回忆这一年"></a>回忆这一年</h4><p><img src="1.jpeg"></p><center><small>2.13年初，和表弟一起在商场买鞋，当时感觉儿童NICK很喜感</small></center><br><p><img src="2.jpeg"></p><center><small>2.14，盗贼之海的朋友问我在干啥，于是拍了这张照片。虽然现在的字依然很丑...</small></center><br><p><img src="3.jpeg"></p><br><p><img src="4.jpeg"></p><center><small>3.10与3.15上班路上北京的晴天与黄沙</small></center><br><p><img src="5.jpeg"></p><center><small>4.12 晚上7点的北京</small></center><br><p><img src="6.jpeg"></p><center><small>4.17 上午8点30，加班路上的北京</small></center><br><p><img src="7.jpeg"></p><center><small>5.3 河北某小山景点</small></center><br><p><img src="8.jpeg"></p><center><small>5.3 山间小路</small></center><br><p><img src="9.jpeg"></p><center><small>5.3 山顶！又征服了一座山</small></center><br><p><img src="10.jpeg"></p><center><small>5.3 有些风景回头看也很美</small></center><br><p><img src="11.jpeg"></p><center><small>5.24 先给自己定个规划 (*╹▽╹*)</small></center><br><p><img src="12.jpeg"></p><center><small>5.26 18:55雨后天晴，有❤️</small></center><br><p><img src="13.jpeg"></p><center><small>6.13 找到了微信头像</small></center><br><p><img src="14.jpeg"></p><center><small>6.29 哈哈，我引以为傲的 ArchLinux Kde YYDS</small></center><br><p><img src="15.jpeg"></p><center><small>6.30 准备换工作 (・・。)ゞ</small></center><br><p><img src="16.jpeg"></p><center><small>7.1 建党百年，还有美丽的壁纸</small></center><br><p><img src="17.jpeg"></p><center><small>7.5 学习数字电路</small></center><br><p><img src="18.jpeg"></p><center><small>7.6 为我的键盘托PS怪猎图像</small></center><br><p><img src="19.jpeg"></p><center><small>7.8 苍天雷鸣</small></center><br><p><img src="20.jpeg"></p><center><small>7.24 与同事游颐和园</small></center><br><p><img src="21.jpeg"></p><center><small>7.24 好神圣的玉峰塔</small></center><br><p><img src="22.jpeg"></p><center><small>7.24 还记得小学来看过铜牛</small></center><br><p><img src="23.jpeg"></p><center><small>7.30 下午4点溜出去看看蓝天白云</small></center><br><p><img src="24.jpeg"></p><br><p><img src="25.jpeg"></p><br><p><img src="26.jpeg"></p><center><small>8.5 雨后的云</small></center><br><p><img src="27.jpeg"></p><center><small>8.17 如果你不开心就抬头看看天吧</small></center><br><p><img src="28.jpeg"></p><center><small>8.20 蓝天依旧</small></center><br><p><img src="29.jpeg"></p><center><small>8.22 鬼节和同事去看十三陵 (•̀⌄•́)</small></center><br><p><img src="30.jpeg"></p><center><small>8.24 开车注意限高啊</small></center><br><p><img src="31.jpeg"></p><center><small>8.26 〣( ºΔº )〣 那片云飘来后真的下雨了</small></center><br><p><img src="32.jpeg"></p><center><small>8.26 两条彩虹耶！</small></center><br><p><img src="33.jpeg"></p><center><small>8.26 雨后的景好美</small></center><br><p><img src="34.jpeg"></p><br><p><img src="35.jpeg"></p><center><small>8.26 雨后的云好壮观</small></center><br><p><img src="36.jpeg"></p><center><small>8.27 小白猫</small></center><br><p><img src="37.jpeg"></p><center><small>8.28 魔幻的清晨</small></center><br><p><img src="38.jpeg"></p><center><small>8.31 两只小老虎</small></center><br><p><img src="39.jpeg"></p><center><small>9.2 雨后的光明与黑暗</small></center><br><p><img src="40.jpeg"></p><center><small>9.5 国家博物馆</small></center><br><p><img src="41.jpeg"></p><center><small>9.5 人民大会堂</small></center><br><p><img src="42.jpeg"></p><center><small>9.5 天安门</small></center><br><p><img src="43.jpeg"></p><br><p><img src="44.jpeg"></p><center><small>10.10 高中时候的画</small></center><br><p><img src="45.jpeg"></p><center><small>10.16 好冷，不过去香山咯！</small></center><br><p><img src="46.jpeg"></p><center><small>10.16 于马连良墓一个人走进野山</small></center><br><p><img src="47.jpeg"></p><center><small>10.16 有时候一个人在山间散步，是一种满足与舒适。一路有鸟鸣有树荫，慢慢地走，想看看山上是什么，心里想着大不了回头。</small></center><br><p><img src="48.jpeg"></p><center><small>10.16 城市与山</small></center><br><p><img src="49.jpeg"></p><center><small>10.16 那是...电视塔！！！</small></center><br><p><img src="50.jpeg"></p><center><small>10.16 山重水复疑无路，柳暗花明又一村。原来，我爬了这么久的山，以为是山顶，却是半山腰。当我以为脱离文明的时候，却越来越接近文明。</small></center><br><p><img src="51.jpeg"></p><center><small>10.16 更高的地方！！！</small></center><br><p><img src="52.jpeg"></p><center><small>10.16 这条路又通向哪呢？不管了，大不了回头。</small></center><br><p><img src="53.jpeg"></p><center><small>10.16 瞭望塔！看火人！</small></center><br><p><img src="54.jpeg"></p><center><small>10.16 一抹红叶</small></center><br><p><img src="55.jpeg"></p><center><small>10.16 山顶！</small></center><br><p><img src="56.jpeg"></p><center><small>10.16 世上本无路，只不过是走的人多了，路就有了。脚真疼啊 ‹(⁽˙́ʷ˙̀⁾ )∨( ⁽˙́ʷ˙̀⁾)›</small></center><br><p><img src="57.jpeg"></p><center><small>10.16 你说那边是不是香山？</small></center><br><p><img src="58.jpeg"></p><center><small>10.16 Civilization！</small></center><br><p><img src="59.jpeg"></p><center><small>10.16 其实香山的小胡同也很惬意，住在这养老应该不错吧。</small></center><br><p><img src="60.jpeg"></p><center><small>10.16 咿！那里有座寺，不如去看看！</small></center><br><p><img src="61.jpeg"></p><br><p><img src="62.jpeg"></p><br><p><img src="63.jpeg"></p><br><p><img src="64.jpeg"></p><center><small>10.17 寺内风光</small></center><br><p><img src="65.jpeg"></p><center><small>10.16 于香山半山腰对看来时路</small></center><br><p><img src="66.jpeg"></p><center><small>10.16 想买粉色牌子，但是工作人员一直看着我...于是买了事业签</small></center><br><p><img src="67.jpeg"></p><center><small>10.16 回去的路，让我想到之前去成都锦里的时候，也是这般热闹。下次一定要带朋友来！</small></center><br><p><img src="68.jpeg"></p><center><small>10.25 念去去，千里烟波，暮霭沉沉楚天阔。但也没什么好留恋的</small></center><br><p><img src="69.jpeg"></p><center><small>10.31 秋天遍地金黄，下次一定要欣赏到！</small></center><br><p><img src="70.jpeg"></p><center><small>11.2 家人们，emmm...我的🍚量其实还蛮大的。</small></center><br><p><img src="71.jpeg"></p><center><small>11.3 试图寻找爱情真谛</small></center><br><p><img src="72.jpeg"></p><center><small>11.5 我觉得我蛮好看的...٩(๑˃̵ᴗ˂̵๑)۶</small></center><br><p><img src="73.jpeg"></p><center><small>11.6 ❄️</small></center><br><p><img src="74.jpeg"></p><center><small>11.7 再不去自然博物馆要被拉黑了</small></center><br><p><img src="75.jpeg"></p><center><small>11.7 不是霸王龙，但也很霸气就是了</small></center><br><p><img src="76.jpeg"></p><center><small>11.7 充满智慧的表情</small></center><br><p><img src="77.jpeg"></p><center><small>11.7 那里有个公园，反正没事做，不如去看看！</small></center><br><p><img src="78.jpeg"></p><center><small>11.7 他朝若是同淋雪，此生也算共白头。如果能和喜欢的人一起赏雪，一定是很美的事情吧。</small></center><br><p><img src="79.jpeg"></p><br><p><img src="80.jpeg"></p><p><br><img src="81.jpeg"></p><p><br><img src="82.jpeg"></p><p><br><img src="83.jpeg"></p><p><br><img src="84.jpeg"></p><p><br><img src="85.jpeg"></p><p><br><img src="86.jpeg"></p><p><br><img src="87.jpeg"></p><p><br><img src="88.jpeg"></p><p><br><img src="89.jpeg"></p><p><br><img src="91.jpeg"></p><p><br><img src="92.jpeg"></p><p><br><img src="93.jpeg"></p><p><br><img src="94.jpeg"></p><p><br><img src="95.jpeg"></p><p><br><img src="96.jpeg"></p><br><center><small>11.7 天坛雪景</small></center><br><p><img src="97.jpeg"></p><center><small>11.8 好想去敦煌</small></center><br><p><img src="98.jpeg"></p><center><small>11.20 西山森林公园</small></center><br><p><img src="99.jpeg"></p><center><small>11.22 生日快乐！</small></center><br><p><img src="100.jpeg"></p><center><small>11.26 雁栖湖，定入目标</small></center><br><p><img src="101.jpeg"></p><center><small>11.27 偶遇《面纱》于国家图书馆</small></center><br><p><img src="102.jpeg"></p><center><small>11.27 终于没人跟我抢了</small></center><br><p><img src="103.jpeg"></p><center><small>11.30 笼中鸟</small></center><br><p><img src="104.jpeg"></p><center><small>12.2 希望有一天我也能滑雪</small></center><br><p><img src="105.jpeg"></p><center><small>12.5 心动不如行动！</small></center><br><p><img src="106.PNG"></p><center><small>12.11 人生的意义是什么？《葬》剧照</small></center><br><p><img src="107.jpeg"></p><center><small>12.12 国家图书馆</small></center><br><p><img src="108.jpeg"></p><center><small>12.12 某个公园</small></center><br><p><img src="109.jpeg"></p><center><small>12.12 第一次去海底捞</small></center><br><p><img src="110.jpeg"></p><center><small>12.16 这就是美国电影里的，可以开车点餐的麦当劳吗</small></center><br><p><img src="111.jpeg"></p><center><small>12.16 多给了我一份鸡翅，但我没好意思说，因为100%会送我...最后也没吃完</small></center><br><p><img src="112.jpeg"></p><center><small>12.21 温暖的小屋</small></center><br><p><img src="113.jpeg"></p><center><small>12.23 终于抢到茅台了！！！开心到起飞</small></center><br><p>感觉2021年就像做了个梦一样，我好像从未经历。</p><h4 id="这一年，当然也看了很多书"><a href="#这一年，当然也看了很多书" class="headerlink" title="这一年，当然也看了很多书"></a>这一年，当然也看了很多书</h4><p>《麦田里的守望者》、《软件测试技术指南》、《汇编语言》、《献给阿尔吉侬的花束》、《球状闪电》、《从零开始学Selenium自动化测试》、《三体 黑暗深林》、《月亮与六便士》、《白鹿原》、《孽子》、《山体 死神永生》、《爱的艺术》、《蛤蟆先生去看心理医生》、《面纱》、《刀锋》</p><p><img src="129.png"></p><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>工作，学习，护肤，旅游，玩游戏好像都没停下，但又没有什么成就。面对诱惑我无力抵抗，但诱惑过后果断结束。</p><p>其实今年夏天也收获了一段感情，不过已经释怀很多。</p><p>今天我姐问我：如果一个你很喜欢的女生之后抽烟了，你还会再喜欢吗？</p><p>我说：如果能改的话就还在一起，如果改不掉就分手啊。</p><p>“成！没想到，你也挺有原则的”</p><p>想想之前有个人对我也是如此决绝，想必也是触犯到了人家的底线吧。</p><br><p>好好地爱自己。</p><p>2022，加油！好好生活吧！</p><h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><ul><li>每天10：30必须睡觉</li><li>5.1号去敦煌或者长白山</li><li>去凤凰岭</li><li>去雁栖湖</li><li>去滑雪</li><li>去泡温泉</li><li>拥有自己的相机</li><li>努力工作，好好赚钱</li><li>考研也不错</li><li>学好英语</li></ul><p>对了，今年的<a href="https://www.16personalities.com/ch">性格测试</a>我是 <a href="https://www.16personalities.com/ch/infp-%E4%BA%BA%E6%A0%BC">INFP_T</a></p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-oPitYvcl&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;408814313&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。—— 王小波 《黄金时代》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happy New Year  2022年了！&lt;/p&gt;
&lt;p&gt;说起来这一年过得好快啊，我还清晰记得我今年年初刚上班的场景，转眼这一年便悄然结束了。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>python 算法（持续更新）</title>
    <link href="http://example.com/2021/12/16/python-%E7%AE%97%E6%B3%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://example.com/2021/12/16/python-%E7%AE%97%E6%B3%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</id>
    <published>2021-12-16T14:54:41.000Z</published>
    <updated>2021-12-19T14:47:36.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归的两个特点：</p><ul><li>调用自身</li><li>结束条件</li></ul><span id="more"></span><h4 id="两个递归实例："><a href="#两个递归实例：" class="headerlink" title="两个递归实例："></a>两个递归实例：</h4><p><strong>先打印结果再调用自身</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    func1(x-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">func1(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>先调用自身再打印结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">  func2(x-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">func2(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="汉诺塔（hanoi）"><a href="#汉诺塔（hanoi）" class="headerlink" title="汉诺塔（hanoi）"></a>汉诺塔（hanoi）</h4><p><img src="hanoi.png"></p><p><strong>思考</strong></p><p>n个盘子时：</p><ol><li>把n-1个盘子从A经过C移动到B</li><li>把第n个盘子从A移动到C</li><li>把n-1个小盘子从B经过A移动到C</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n个盘子，a、b、c三个柱子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">n,a,b,c</span>):</span></span><br><span class="line">  <span class="comment"># 盘子的数量大于0，不然就减成负数了</span></span><br><span class="line">  <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 我们会通过很多步骤讲n-1个盘子经过c柱子移动到b柱子上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">    <span class="comment"># 再将最底下的盘子n移动到c上</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;moving form %s to %s&quot;</span> % (a,c))</span><br><span class="line">    <span class="comment"># 再将b柱子上的盘子经过a移动到c上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,b,a,c)</span><br><span class="line"> </span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> A to B</span><br><span class="line">moving <span class="keyword">from</span> C to B</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> B to A</span><br><span class="line">moving <span class="keyword">from</span> B to C</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="列表查找（Linear-Search）"><a href="#列表查找（Linear-Search）" class="headerlink" title="列表查找（Linear Search）"></a>列表查找（Linear Search）</h4><p>列表查找（线性表查找）：从列表中查找指定元素</p><ul><li>输入：列表、待查找元素</li><li>输出：元素下标（未找到元素时一般返回None或-1）</li></ul><p>内置列表查找函数：index（）</p><p>顺序查找：也叫线性查找，从列表第一个元素开始，顺序搜索，直到找到元素或搜索到列表最后一个元素为止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#传入一个列表，与要查找的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linearSearch</span>(<span class="params">li,val</span>):</span></span><br><span class="line">    <span class="keyword">for</span> ind,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">        <span class="keyword">if</span> v == val:</span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">val = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(LinearSearch(li,val))</span><br></pre></td></tr></table></figure><p><strong>时间复杂度：O(n)</strong></p><h4 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h4><p>二分查找：又叫折半查找，从有序列表的初始候选区<code>li[O:n]</code>开始 ，通过对待查找的值与候选区域中间值得比较，可以使候选区减少一半</p><p><strong>二分查找需要先排序，但是有可能排序时间要远多于线性查找O(n)，所以如果你对这个列表需要以后的多次查找，可以使用二分查找</strong></p><p>Python的内置查找函数：<code>.index()</code>是线性查找的，因为没办法确定列表是有序的</p><p><img src="BinarySearch.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span>(<span class="params">li,val</span>):</span></span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt;= right:<span class="comment"># 候选区有值就循环</span></span><br><span class="line">  mid = (left+right)//<span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> li[mid] &lt; val:</span><br><span class="line">    left = left[mid]+<span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">    right = right[mid]-<span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> li[mid] == val:</span><br><span class="line">    <span class="keyword">return</span> mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><strong>时间复杂度：O(logn)</strong></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>常见排序书算法</p><ol><li><p>排序Low B三人组</p><ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li></ul></li><li><p>排序NB三人组</p><ul><li>快速排序</li><li>堆排序</li><li>归并排序</li></ul></li><li><p>其他排序</p><ul><li><p>希尔排序</p></li><li><p>计数排序</p></li><li><p>基数排序</p></li></ul></li></ol><h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><ul><li>列表排序：将无序的列表变为有序的列表<ul><li>输入：列表</li><li>输出：有序列表</li></ul></li><li>升序与降序</li><li>内置排序函数：sort()</li></ul><h4 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h4><ul><li>列表每两个相邻的数，如果前面比后面大，则交换这两个数。</li><li>一趟排序完成后，则无序区减少一个数，有序区增加一个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span>(<span class="params">li</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(li)-i-<span class="number">1</span>:</span><br><span class="line">      <span class="keyword">if</span> li[k] &gt; li[k+<span class="number">1</span>]:</span><br><span class="line">        li[k],li[k+<span class="number">1</span>] = li[k+<span class="number">1</span>],li[k]</span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>,<span class="number">10000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">bubble_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><h4 id="选择排序-（Select-Sort）"><a href="#选择排序-（Select-Sort）" class="headerlink" title="选择排序 （Select Sort）"></a>选择排序 （Select Sort）</h4><ul><li>一趟排序记录最小的数，放到第一个位置</li><li>再一趟排序记录记录列表无序区最小的数，放到第二个位置</li><li>算法关键点：有序区和无序区、无序区最小数的位置</li></ul><p><strong>方法一「不推荐」</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">  li_new = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">    min_val = <span class="built_in">min</span>(li)</span><br><span class="line">    li_new.append(min_val)</span><br><span class="line">    li.remove(min_val)</span><br><span class="line">  <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure><ul><li>min()函数的时间复杂度为O(n)</li><li>remove()函数的时间复杂度为O(n)，因为删除列表的一个个数后，需要将被删除数后的其他数一一移动一个位置</li><li>因为新创建了一个列表，所以他的空间复杂度也增加了</li></ul><p><strong>方法二</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):<span class="comment"># i是第几趟</span></span><br><span class="line">    min_loc = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(li)):</span><br><span class="line"><span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">        min_loc = j</span><br><span class="line">    li[j],li[min_loc] = li[min_loc],li[j]</span><br><span class="line">  <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure><h4 id="插入排序（Inster-Sort）"><a href="#插入排序（Inster-Sort）" class="headerlink" title="插入排序（Inster Sort）"></a>插入排序（Inster Sort）</h4>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h3&gt;&lt;p&gt;递归的两个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用自身&lt;/li&gt;
&lt;li&gt;结束条件&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python数据结构" scheme="http://example.com/tags/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>python 装饰器</title>
    <link href="http://example.com/2021/12/14/python-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://example.com/2021/12/14/python-%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2021-12-14T13:55:21.000Z</published>
    <updated>2021-12-14T14:00:31.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">装饰器</a></h3><p>装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。大多数初学者不知道在哪儿使用它们，所以我将要分享下，哪些区域里装饰器可以让你的代码更简洁。 首先，让我们讨论下如何写你自己的装饰器。</p><p>这可能是最难掌握的概念之一。我们会每次只讨论一个步骤，这样你能完全理解它。</p><span id="more"></span><h4 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h4><p>首先我们来理解下 Python 中的函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hi())</span><br><span class="line"><span class="comment"># output: &#x27;hi yasoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span></span><br><span class="line">greet = hi</span><br><span class="line"><span class="comment"># 我们这里没有在使用小括号，因为我们并不是在调用hi函数</span></span><br><span class="line"><span class="comment"># 而是在将它放在greet变量里头。我们尝试运行下这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet())</span><br><span class="line"><span class="comment"># output: &#x27;hi yasoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果我们删掉旧的hi函数，看看会发生什么！</span></span><br><span class="line"><span class="keyword">del</span> hi</span><br><span class="line"><span class="built_in">print</span>(hi())</span><br><span class="line"><span class="comment">#outputs: NameError</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet())</span><br><span class="line"><span class="comment">#outputs: &#x27;hi yasoob&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="在函数中定义函数"><a href="#在函数中定义函数" class="headerlink" title="在函数中定义函数"></a>在函数中定义函数</h4><p>刚才那些就是函数的基本知识了。我们来让你的知识更进一步。在 Python 中我们可以在一个函数中定义另一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now you are inside the hi() function&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the greet() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the welcome() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(greet())</span><br><span class="line">    <span class="built_in">print</span>(welcome())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now you are back in the hi() function&quot;</span>)</span><br><span class="line"></span><br><span class="line">hi()</span><br><span class="line"><span class="comment">#output:now you are inside the hi() function</span></span><br><span class="line"><span class="comment">#       now you are in the greet() function</span></span><br><span class="line"><span class="comment">#       now you are in the welcome() function</span></span><br><span class="line"><span class="comment">#       now you are back in the hi() function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面展示了无论何时你调用hi(), greet()和welcome()将会同时被调用。</span></span><br><span class="line"><span class="comment"># 然后greet()和welcome()函数在hi()函数之外是不能访问的，比如：</span></span><br><span class="line"></span><br><span class="line">greet()</span><br><span class="line"><span class="comment">#outputs: NameError: name &#x27;greet&#x27; is not defined</span></span><br></pre></td></tr></table></figure><p>那现在我们知道了可以在函数中定义另外的函数。也就是说：我们可以创建嵌套的函数。现在你需要再多学一点，就是函数也能返回函数。</p><h4 id="从函数中返回函数"><a href="#从函数中返回函数" class="headerlink" title="从函数中返回函数"></a>从函数中返回函数</h4><p>其实并不需要在一个函数里去执行另一个函数，我们也可以将其作为输出返回出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the greet() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the welcome() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;yasoob&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> greet</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> welcome</span><br><span class="line"></span><br><span class="line">a = hi()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span></span><br><span class="line"><span class="comment">#现在试试这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line"><span class="comment">#outputs: now you are in the greet() function</span></span><br></pre></td></tr></table></figure><p>再次看看这个代码。在 if/else 语句中我们返回 greet 和 welcome，而不是 greet() 和 welcome()。为什么那样？这是因为当你把一对小括号放在后面，这个函数就会执行；然而如果你不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。 你明白了吗？让我再稍微多解释点细节。</p><p>当我们写下 **a = hi()**，hi() 会被执行，而由于 name 参数默认是 yasoob，所以函数 greet 被返回了。如果我们把语句改为 **a = hi(name = “ali”)**，那么 welcome 函数将被返回。我们还可以打印出 **hi()()**，这会输出 <strong>now you are in the greet() function</strong>。</p><h4 id="将函数作为参数传给另一个函数"><a href="#将函数作为参数传给另一个函数" class="headerlink" title="将函数作为参数传给另一个函数"></a>将函数作为参数传给另一个函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi yasoob!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSomethingBeforeHi</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing hi()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(func())</span><br><span class="line"></span><br><span class="line">doSomethingBeforeHi(hi)</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing hi()</span></span><br><span class="line"><span class="comment">#        hi yasoob!</span></span><br></pre></td></tr></table></figure><p>现在你已经具备所有必需知识，来进一步学习装饰器真正是什么了。装饰器让你在一个函数的前后去执行代码。</p><h4 id="你的第一个装饰器"><a href="#你的第一个装饰器" class="headerlink" title="你的第一个装饰器"></a>你的第一个装饰器</h4><p>在上一个例子里，其实我们已经创建了一个装饰器！现在我们修改下上一个装饰器，并编写一个稍微更有用点的程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapTheFunction</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line"></span><br><span class="line">        a_func()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br><span class="line"><span class="comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span></span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure><p>你看明白了吗？我们刚刚应用了之前学习到的原理。这正是 python 中装饰器做的事情！它们封装一个函数，并且用这样或者那样的方式来修改它的行为。现在你也许疑惑，我们在代码里并没有使用 <strong>@</strong> 符号？那只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用 <strong>@</strong> 来运行之前的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the @a_new_decorator is just a short way of saying:</span></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure><p>希望你现在对 Python 装饰器的工作原理有一个基本的理解。如果我们运行如下代码会存在一个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: wrapTheFunction</span></span><br></pre></td></tr></table></figure><p>这并不是我们想要的！Ouput输出应该是”a_function_requiring_decoration”。这里的函数被warpTheFunction替代了。它重写了我们函数的名字和注释文档(docstring)。幸运的是Python提供给我们一个简单的函数来解决这个问题，那就是functools.wraps。我们修改上一个例子来使用functools.wraps：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapTheFunction</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey yo! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logging</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,func</span>):</span></span><br><span class="line">    self.func = func</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self,*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[DEBUG]: enter &#123;&#125;()&quot;</span>.<span class="built_in">format</span>(self.func.__name__))</span><br><span class="line">    <span class="keyword">return</span> self.func(*args,**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(a,b,c)</span><br><span class="line"></span><br><span class="line">hello(<span class="string">&quot;hello,&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="string">&quot;morning&quot;</span>)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">&gt;&gt;&gt;[DEBUG]: enter hello()</span><br><span class="line">&gt;&gt;&gt;hello, good moring</span><br></pre></td></tr></table></figure><p>类装饰器也可以带参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logging</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, level</span>):</span></span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[&#123;0&#125;]: enter &#123;1&#125;()&quot;</span>.<span class="built_in">format</span>(self.level, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(<span class="params">level=<span class="string">&quot;TEST&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line">hello(<span class="string">&quot;hello,&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="string">&quot;morning&quot;</span>)</span><br><span class="line">-----------------------------</span><br><span class="line">&gt;&gt;&gt;[TEST]: enter hello()</span><br><span class="line">&gt;&gt;&gt;hello, good morning</span><br></pre></td></tr></table></figure><h4 id="装饰器嵌套"><a href="#装饰器嵌套" class="headerlink" title="装饰器嵌套"></a>装饰器嵌套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arg_fun</span>(<span class="params">sex</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">            func()</span><br><span class="line">            <span class="keyword">if</span> sex == <span class="string">&#x27;man&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;你不可以生孩子&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> sex == <span class="string">&#x27;woman&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;你可以生孩子&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;和你没关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> func2</span><br><span class="line">    <span class="keyword">return</span> func1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@arg_fun(<span class="params">sex=<span class="string">&#x27;man&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">man</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;好好上班, man&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@arg_fun(<span class="params">sex=<span class="string">&#x27;woman&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">woman</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;好好上班，woman&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@arg_fun(<span class="params">sex=<span class="string">&#x27;child&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">child</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;好好上学，child&#x27;</span>)</span><br><span class="line"></span><br><span class="line">man()</span><br><span class="line">woman()</span><br><span class="line">child()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/w3cnote/python-func-decorators.html&quot;&gt;装饰器&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。大多数初学者不知道在哪儿使用它们，所以我将要分享下，哪些区域里装饰器可以让你的代码更简洁。 首先，让我们讨论下如何写你自己的装饰器。&lt;/p&gt;
&lt;p&gt;这可能是最难掌握的概念之一。我们会每次只讨论一个步骤，这样你能完全理解它。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>模拟CPU内存占用</title>
    <link href="http://example.com/2021/12/13/%E6%A8%A1%E6%8B%9FCPU%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/"/>
    <id>http://example.com/2021/12/13/%E6%A8%A1%E6%8B%9FCPU%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</id>
    <published>2021-12-13T14:01:56.000Z</published>
    <updated>2021-12-13T14:10:04.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="模拟CPU占满"><a href="#模拟CPU占满" class="headerlink" title="模拟CPU占满"></a>模拟CPU占满</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 $(cat /proc/cpuinfo |grep &quot;physical id&quot; |wc -l)`; do dd if=/dev/zero of=/dev/null &amp; done</span><br></pre></td></tr></table></figure><h4 id="模拟CPU只占两核"><a href="#模拟CPU只占两核" class="headerlink" title="模拟CPU只占两核"></a>模拟CPU只占两核</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 2`; do dd if=/dev/zero of=/dev/null &amp; done</span><br></pre></td></tr></table></figure><h4 id="网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）"><a href="#网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）" class="headerlink" title="网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）"></a>网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）</h4><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为延迟 100 毫秒发送。</span></span><br><span class="line">1.tc qdisc add dev eth0 root netem delay 100ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将删除 eth0 网卡 的传输设置为延迟 100 毫秒发送。</span></span><br><span class="line">2.tc qdisc del dev eth0 root netem delay 100ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10ms 该命令将 eth0 网卡 的传输设置为延迟 100ms ± 10ms (90 ~ 110 ms 之间的任意值)发送。</span></span><br><span class="line">3.tc qdisc add dev eth0 root netem delay 100ms 10ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为 100ms ,同 时,大约有 30% 的包会延迟 ± 10ms 发送。</span></span><br><span class="line">4.tc qdisc add dev eth0 root netem delay 100ms 10ms 30%</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为随机丢掉 1% 的数据包</span></span><br><span class="line">5.tc qdisc add dev eth0 root netem loss 1%</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为随机丢掉 1% 的数据包,成功率为 30%</span></span><br><span class="line">6.tc qdisc add dev eth0 root netem loss 1% 30%</span><br></pre></td></tr></table></figure><h4 id="查看已经配置的网络条件"><a href="#查看已经配置的网络条件" class="headerlink" title="查看已经配置的网络条件"></a>查看已经配置的网络条件</h4><p><code>tc qdisc show dev eth0</code></p><h4 id="查看已经配置的网络条件-1"><a href="#查看已经配置的网络条件-1" class="headerlink" title="查看已经配置的网络条件"></a>查看已经配置的网络条件</h4><p><code>tc qdisc del dev eth0 root</code></p><h4 id="监控CPU、内存"><a href="#监控CPU、内存" class="headerlink" title="监控CPU、内存"></a>监控CPU、内存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 总的CPU</span></span><br><span class="line">nohup top -b -d 10 -n 240 | grep &quot;%Cpu(s)&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 总的内存</span></span><br><span class="line">nohup top -b -d 10 -n 240 | grep &quot;KiB Mem&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程监控</span></span><br><span class="line">nohup top -b -d 10 -n 180 | grep 进程号</span><br></pre></td></tr></table></figure><ul><li><p><code>nohup</code> 后台运行</p></li><li><p><code>-d</code> 几秒钟提取一次信息</p></li><li><p><code>-n</code> 总的提取次数</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;模拟CPU占满&quot;&gt;&lt;a href=&quot;#模拟CPU占满&quot; class=&quot;headerlink&quot; title=&quot;模拟CPU占满&quot;&gt;&lt;/a&gt;模拟CPU占满&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for i in `seq 1 $(cat /proc/cpuinfo |grep &amp;quot;physical id&amp;quot; |wc -l)`; do dd if=/dev/zero of=/dev/null &amp;amp; done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;模拟CPU只占两核&quot;&gt;&lt;a href=&quot;#模拟CPU只占两核&quot; class=&quot;headerlink&quot; title=&quot;模拟CPU只占两核&quot;&gt;&lt;/a&gt;模拟CPU只占两核&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for i in `seq 1 2`; do dd if=/dev/zero of=/dev/null &amp;amp; done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）&quot;&gt;&lt;a href=&quot;#网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）&quot; class=&quot;headerlink&quot; title=&quot;网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）&quot;&gt;&lt;/a&gt;网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）&lt;/h4&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux awk命令</title>
    <link href="http://example.com/2021/12/13/Linux-awk%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2021/12/13/Linux-awk%E5%91%BD%E4%BB%A4/</id>
    <published>2021-12-13T13:58:59.000Z</published>
    <updated>2021-12-13T14:09:55.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Linux-awk-命令"><a href="#Linux-awk-命令" class="headerlink" title="Linux awk 命令"></a>Linux awk 命令</h3><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具</p><p>之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p><span id="more"></span><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk [选项参数] <span class="string">&#x27;script&#x27;</span> var=value file(s)</span><br><span class="line">或</span><br><span class="line">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>log.txt文本内容如下：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> this <span class="built_in">is</span> a test</span><br><span class="line"><span class="number">3</span> Are you <span class="built_in">like</span> awk</span><br><span class="line">This<span class="comment">&#x27;s a test</span></span><br><span class="line"><span class="number">10</span> There are orange,apple,mongo</span><br></pre></td></tr></table></figure><p>用法一：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;[pattern] action&#125;&#x27;</span> &#123;filenames&#125;   <span class="meta"># 行匹配语句 awk <span class="string">&#x27;&#x27;</span> 只能用单引号</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每行按空格或TAB分割，输出文本中的1、4项</span></span><br><span class="line"> $ awk <span class="string">&#x27;&#123;print $1,$4&#125;&#x27;</span> log.txt</span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 a</span><br><span class="line"> 3 like</span><br><span class="line"> This<span class="string">&#x27;s</span></span><br><span class="line"><span class="string"> 10 orange,apple,mongo</span></span><br><span class="line"><span class="string"> # 格式化输出</span></span><br><span class="line"><span class="string"> $ awk &#x27;</span>&#123;<span class="built_in">printf</span> <span class="string">&quot;%-8s %-10s\n&quot;</span>,<span class="variable">$1</span>,<span class="variable">$4</span>&#125;<span class="string">&#x27; log.txt</span></span><br><span class="line"><span class="string"> ---------------------------------------------</span></span><br><span class="line"><span class="string"> 2        a</span></span><br><span class="line"><span class="string"> 3        like</span></span><br><span class="line"><span class="string"> This&#x27;</span>s</span><br><span class="line"> 10       orange,apple,mongo</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>用法二：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">awk</span> -F  <span class="comment">#-F相当于内置变量FS, 指定分割字符</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="string">&quot;,&quot;</span>分割</span></span><br><span class="line"><span class="meta"> $</span><span class="bash">  awk -F, <span class="string">&#x27;&#123;print $1,$2&#125;&#x27;</span>   log.txt</span></span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this is a test</span><br><span class="line"> 3 Are you like awk</span><br><span class="line"> This&#x27;s a test</span><br><span class="line"> 10 There are orange apple</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 或者使用内建变量</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> awk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; &#123;print $1,$2&#125;&#x27;</span>     log.txt</span></span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this is a test</span><br><span class="line"> 3 Are you like awk</span><br><span class="line"> This&#x27;s a test</span><br><span class="line"> 10 There are orange apple</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 使用多个分隔符.先使用空格分割，然后对分割结果再使用<span class="string">&quot;,&quot;</span>分割</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> awk -F <span class="string">&#x27;[ ,]&#x27;</span>  <span class="string">&#x27;&#123;print $1,$2,$5&#125;&#x27;</span>   log.txt</span></span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this test</span><br><span class="line"> 3 Are awk</span><br><span class="line"> This&#x27;s a</span><br><span class="line"> 10 There apple</span><br></pre></td></tr></table></figure><p>用法三：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">awk</span> -v  <span class="comment"># 设置变量</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -va=1 <span class="string">&#x27;&#123;print $1,$1+a&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">This&#x27;s 1</span><br><span class="line">10 11</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk -va=1 -vb=s <span class="string">&#x27;&#123;print $1,$1+a,$1b&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 3 2s</span><br><span class="line">3 4 3s</span><br><span class="line">This&#x27;s 1 This&#x27;ss</span><br><span class="line">10 11 10s</span><br></pre></td></tr></table></figure><p>用法四：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">awk -f </span><span class="template-variable">&#123;awk脚本&#125;</span><span class="xml"> </span><span class="template-variable">&#123;文件名&#125;</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> awk -f cal.awk <span class="built_in">log</span>.txt</span><br></pre></td></tr></table></figure><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">= += -= *= /= %= ^= **=</td><td align="left">赋值</td></tr><tr><td align="left">?:</td><td align="left">C条件表达式</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td></tr><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">~ 和 !~</td><td align="left">匹配正则表达式和不匹配正则表达式</td></tr><tr><td align="left">&lt; &lt;= &gt; &gt;= != ==</td><td align="left">关系运算符</td></tr><tr><td align="left">空格</td><td align="left">连接</td></tr><tr><td align="left">+ -</td><td align="left">加，减</td></tr><tr><td align="left">* / %</td><td align="left">乘，除与求余</td></tr><tr><td align="left">+ - !</td><td align="left">一元加，减和逻辑非</td></tr><tr><td align="left">^ ***</td><td align="left">求幂</td></tr><tr><td align="left">++ –</td><td align="left">增加或减少，作为前缀或后缀</td></tr><tr><td align="left">$</td><td align="left">字段引用</td></tr><tr><td align="left">in</td><td align="left">数组成员</td></tr></tbody></table><p>过滤第一列大于2的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$1&gt;2&#x27;</span> log.txt    <span class="comment">#命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输出</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This&#x27;s a test</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><p>过滤第一列等于2的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$1==2 &#123;print $1,$3&#125;&#x27;</span> log.txt    <span class="comment">#命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输出</span></span><br><span class="line">2 is</span><br></pre></td></tr></table></figure><p>过滤第一列大于2并且第二列等于’Are’的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&#x27;</span> log.txt    <span class="comment">#命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输出</span></span><br><span class="line">3 Are you</span><br></pre></td></tr></table></figure><hr><h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$n</td><td align="left">当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td align="left">$0</td><td align="left">完整的输入记录</td></tr><tr><td align="left">ARGC</td><td align="left">命令行参数的数目</td></tr><tr><td align="left">ARGIND</td><td align="left">命令行中当前文件的位置(从0开始算)</td></tr><tr><td align="left">ARGV</td><td align="left">包含命令行参数的数组</td></tr><tr><td align="left">CONVFMT</td><td align="left">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td></tr><tr><td align="left">ERRNO</td><td align="left">最后一个系统错误的描述</td></tr><tr><td align="left">FIELDWIDTHS</td><td align="left">字段宽度列表(用空格键分隔)</td></tr><tr><td align="left">FILENAME</td><td align="left">当前文件名</td></tr><tr><td align="left">FNR</td><td align="left">各文件分别计数的行号</td></tr><tr><td align="left">FS</td><td align="left">字段分隔符(默认是任何空格)</td></tr><tr><td align="left">IGNORECASE</td><td align="left">如果为真，则进行忽略大小写的匹配</td></tr><tr><td align="left">NF</td><td align="left">一条记录的字段的数目</td></tr><tr><td align="left">NR</td><td align="left">已经读出的记录数，就是行号，从1开始</td></tr><tr><td align="left">OFMT</td><td align="left">数字的输出格式(默认值是%.6g)</td></tr><tr><td align="left">OFS</td><td align="left">输出字段分隔符，默认值与输入字段分隔符一致。</td></tr><tr><td align="left">ORS</td><td align="left">输出记录分隔符(默认值是一个换行符)</td></tr><tr><td align="left">RLENGTH</td><td align="left">由match函数所匹配的字符串的长度</td></tr><tr><td align="left">RS</td><td align="left">记录分隔符(默认是一个换行符)</td></tr><tr><td align="left">RSTART</td><td align="left">由match函数所匹配的字符串的第一个位置</td></tr><tr><td align="left">SUBSEP</td><td align="left">数组下标分隔符(默认值是/034)</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;BEGIN&#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;&#x27;</span>  log.txt</span></span><br><span class="line">FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="line">---------------------------------------------</span><br><span class="line">log.txt    2    1         5    1</span><br><span class="line">log.txt    2    2         5    2</span><br><span class="line">log.txt    2    3         3    3</span><br><span class="line">log.txt    2    4         4    4</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk -F\<span class="string">&#x27; &#x27;</span>BEGIN&#123;<span class="built_in">printf</span> <span class="string">&quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;</span>,<span class="string">&quot;FILENAME&quot;</span>,<span class="string">&quot;ARGC&quot;</span>,<span class="string">&quot;FNR&quot;</span>,<span class="string">&quot;FS&quot;</span>,<span class="string">&quot;NF&quot;</span>,<span class="string">&quot;NR&quot;</span>,<span class="string">&quot;OFS&quot;</span>,<span class="string">&quot;ORS&quot;</span>,<span class="string">&quot;RS&quot;</span>;<span class="built_in">printf</span> <span class="string">&quot;---------------------------------------------\n&quot;</span>&#125; &#123;<span class="built_in">printf</span> <span class="string">&quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;</span>,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;<span class="string">&#x27;  log.txt</span></span></span><br><span class="line">FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="line">---------------------------------------------</span><br><span class="line">log.txt    2    1    &#x27;    1    1</span><br><span class="line">log.txt    2    2    &#x27;    1    2</span><br><span class="line">log.txt    2    3    &#x27;    2    3</span><br><span class="line">log.txt    2    4    &#x27;    1    4</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 输出顺序号 NR, 匹配文本行号</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> awk &#x27;</span>&#123;<span class="built_in">print</span> NR,FNR,<span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>&#125;<span class="string">&#x27; log.txt</span></span></span><br><span class="line">---------------------------------------------</span><br><span class="line">1 1 2 this is</span><br><span class="line">2 2 3 Are you</span><br><span class="line">3 3 This&#x27;s a test</span><br><span class="line">4 4 10 There are</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定输出分割符</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string">  awk &#x27;</span>&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$5</span>&#125;<span class="string">&#x27; OFS=&quot; $ &quot;  log.txt</span></span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 $ this $ test</span><br><span class="line">3 $ Are $ awk</span><br><span class="line">This&#x27;s $ a $</span><br><span class="line">10 $ There $</span><br></pre></td></tr></table></figure><hr><h2 id="使用正则，字符串匹配"><a href="#使用正则，字符串匹配" class="headerlink" title="使用正则，字符串匹配"></a>使用正则，字符串匹配</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出第二列包含 <span class="string">&quot;th&quot;</span>，并打印第二列与第四列</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2 ~ /th/ &#123;print $2,$4&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">this a</span><br></pre></td></tr></table></figure><p><strong>~ 表示模式开始。// 中是模式。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出包含 <span class="string">&quot;re&quot;</span> 的行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;/re/ &#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">3 Are you like awk</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure><hr><h2 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;BEGIN&#123;IGNORECASE=1&#125; /this/&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 this is a test</span><br><span class="line">This&#x27;s a test</span><br></pre></td></tr></table></figure><hr><h2 id="模式取反"><a href="#模式取反" class="headerlink" title="模式取反"></a>模式取反</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2 !~ /th/ &#123;print $2,$4&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">Are like</span><br><span class="line">a</span><br><span class="line">There orange,apple,mongo</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;!/th/ &#123;print $2,$4&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">Are like</span><br><span class="line">a</span><br><span class="line">There orange,apple,mongo</span><br></pre></td></tr></table></figure><hr><h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><p>关于 awk 脚本，我们需要注意两个关键词 BEGIN 和 END。</p><ul><li>BEGIN{ 这里面放的是执行前的语句 }</li><li>END {这里面放的是处理完所有的行后要执行的语句 }</li><li>{这里面放的是处理每一行时要执行的语句}</li></ul><p>假设有这么一个文件（学生成绩表）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat score.txt</span></span><br><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure><p>我们的 awk 脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat cal.awk</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/awk -f</span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line"> </span><br><span class="line">    printf &quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">运行中</span></span><br><span class="line">&#123;</span><br><span class="line">    math+=$3</span><br><span class="line">    english+=$4</span><br><span class="line">    computer+=$5</span><br><span class="line">    printf &quot;%-6s %-6s %4d %8d %8d %8d\n&quot;, $1, $2, $3,$4,$5, $3+$4+$5</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">运行后</span></span><br><span class="line">END &#123;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">    printf &quot;  TOTAL:%10d %8d %8d \n&quot;, math, english, computer</span><br><span class="line">    printf &quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看一下执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -f cal.awk score.txt</span></span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350</span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure><hr><h2 id="另外一些实例"><a href="#另外一些实例" class="headerlink" title="另外一些实例"></a>另外一些实例</h2><p>AWK 的 hello world 程序为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">BEGIN</span> &#123; <span class="attribute">print</span> <span class="string">&quot;Hello, world!&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>计算文件大小</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">$ ls -l *.txt | awk &#x27;&#123;sum+=$5&#125; END &#123;print sum&#125;&#x27;</span></span><br><span class="line"><span class="section">--------------------------------------------------</span></span><br><span class="line">666581</span><br></pre></td></tr></table></figure><p>从文件中找出长度大于 80 的行：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;length&gt;80&#x27; <span class="built_in">log</span>.txt</span><br></pre></td></tr></table></figure><p>打印九九乘法表</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq <span class="number">9</span> | sed <span class="string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="string">&#x27;&#x27;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;</span>%dx%d=%d<span class="literal">%s</span><span class="string">&quot;, i, NR, i*NR, i==NR?&quot;</span>\n<span class="string">&quot;:&quot;</span>\t<span class="string">&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多内容：</p><ul><li><a href="https://www.runoob.com/w3cnote/awk-work-principle.html">AWK 工作原理</a></li><li><a href="https://www.runoob.com/w3cnote/awk-arrays.html">AWK 数组</a></li><li><a href="https://www.runoob.com/w3cnote/awk-if-loop.html">AWK 条件语句与循环</a></li><li><a href="https://www.runoob.com/w3cnote/awk-user-defined-functions.html">AWK 用户自定义函数</a></li><li><a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html">AWK 内置函数</a></li><li><a href="https://www.runoob.com/w3cnote/8-awesome-awk-built-in-variables.html">8 个有力的 Awk 内建变量</a></li><li><a href="http://www.gnu.org/software/gawk/manual/gawk.html">AWK 官方手册</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Linux-awk-命令&quot;&gt;&lt;a href=&quot;#Linux-awk-命令&quot; class=&quot;headerlink&quot; title=&quot;Linux awk 命令&quot;&gt;&lt;/a&gt;Linux awk 命令&lt;/h3&gt;&lt;p&gt;AWK 是一种处理文本文件的语言，是一个强大的文本分析工具&lt;/p&gt;
&lt;p&gt;之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 转换成小写字母</title>
    <link href="http://example.com/2021/12/13/leetcode-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D/"/>
    <id>http://example.com/2021/12/13/leetcode-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D/</id>
    <published>2021-12-13T13:49:25.000Z</published>
    <updated>2021-12-13T13:50:26.960Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a><a href="https://leetcode-cn.com/problems/to-lower-case/">709. 转换成小写字母</a></h4><p>给你一个字符串 <code>s</code> ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p><span id="more"></span><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">输出：<span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;here&quot;</span></span><br><span class="line">输出：<span class="string">&quot;here&quot;</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;LOVELY&quot;</span></span><br><span class="line">输出：<span class="string">&quot;lovely&quot;</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s</code> 由 ASCII 字符集中的可打印字符组成</li></ul><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toLowerCase</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> s.lower()</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toLowerCase</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(i) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;= <span class="number">90</span>:</span><br><span class="line">                i = <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">32</span>)</span><br><span class="line">                res += <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += i</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;709-转换成小写字母&quot;&gt;&lt;a href=&quot;#709-转换成小写字母&quot; class=&quot;headerlink&quot; title=&quot;709. 转换成小写字母&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/to-lower-case/&quot;&gt;709. 转换成小写字母&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt; ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 搜索插入位置</title>
    <link href="http://example.com/2021/12/13/leetcode-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/12/13/leetcode-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-12-13T13:47:18.000Z</published>
    <updated>2021-12-13T13:48:31.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a></h4><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><span id="more"></span> <p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 5</span></span><br><span class="line"><span class="section">输出: 2</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 2</span></span><br><span class="line"><span class="section">输出: 1</span></span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 7</span></span><br><span class="line"><span class="section">输出: 4</span></span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 0</span></span><br><span class="line"><span class="section">输出: 0</span></span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [1], target = 0</span></span><br><span class="line"><span class="section">输出: 0</span></span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 为<strong>无重复元素</strong>的<strong>升序</strong>排列数组</li><li><code>-104 &lt;= target &lt;= 104</code></li></ul><p>思想：</p><p>log n 的时间复杂度为二分法，如果target在列表中没有，low=high，则插入位置为low与high重合点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :type nums: List[int]</span></span><br><span class="line"><span class="string">    :type target: int</span></span><br><span class="line"><span class="string">    :rtype: int</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (high + low)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            low = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> low</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;35-搜索插入位置&quot;&gt;&lt;a href=&quot;#35-搜索插入位置&quot; class=&quot;headerlink&quot; title=&quot;35. 搜索插入位置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/search-insert-position/&quot;&gt;35. 搜索插入位置&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;请必须使用时间复杂度为 &lt;code&gt;O(log n)&lt;/code&gt; 的算法。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 检测大写字母</title>
    <link href="http://example.com/2021/12/13/leetcode-%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D/"/>
    <id>http://example.com/2021/12/13/leetcode-%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D/</id>
    <published>2021-12-13T13:44:56.000Z</published>
    <updated>2021-12-13T13:46:34.528Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="520-检测大写字母"><a href="#520-检测大写字母" class="headerlink" title="520. 检测大写字母"></a><a href="https://leetcode-cn.com/problems/detect-capital/">520. 检测大写字母</a></h4><p>我们定义，在以下情况时，单词的大写用法是正确的：</p><ul><li>全部字母都是大写，比如 <code>&quot;USA&quot;</code> 。</li><li>单词中所有字母都不是大写，比如 <code>&quot;leetcode&quot;</code> 。</li><li>如果单词不只含有一个字母，只有首字母大写， 比如 <code>&quot;Google&quot;</code> 。</li></ul><p>给你一个字符串 <code>word</code> 。如果大写用法正确，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><span id="more"></span><p><strong>示例 1：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">&quot;USA&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">&quot;FlaG&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>word</code> 由小写和大写英文字母组成</li></ul><p><strong>分析</strong></p><p>如果第一个字母是大写，则后面的字母都是大写</p><p>如果第一个字母不是大写，则后面的字母都不是大写</p><p>Python写法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCapitalUse</span>(<span class="params">self,word</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        upper,lower = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(s) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(s) &lt;= <span class="number">90</span>:</span><br><span class="line">                upper += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lower += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> upper == <span class="number">0</span> <span class="keyword">or</span> lower == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(word[<span class="number">0</span>]) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(word[<span class="number">0</span>]) &lt;= <span class="number">90</span> <span class="keyword">and</span> lower == <span class="built_in">len</span>(word) -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>Python写法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">calss Solution(<span class="built_in">object</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detetCapitalUse</span>(<span class="params">self,word</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> word.upper()==word <span class="keyword">or</span> word.lower()==word <span class="keyword">or</span> word.title()==word</span><br></pre></td></tr></table></figure><p>C写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deteCapitaUse</span><span class="params">(<span class="keyword">char</span> * word)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 记录大写字母、小写字母最后出现的位置</span></span><br><span class="line">    <span class="keyword">int</span> lastUpperCharIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> lastLowerCharIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    wile(word[index])&#123;</span><br><span class="line">        <span class="keyword">if</span>(word[index] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; word[index] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            lastLowerCharIndex = index;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lastUpperCharIndex = index;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果一个单词里存在小写字母，且大写字母的位置不为0，则大写用法不正确</span></span><br><span class="line">    <span class="keyword">if</span>(lastUpperIndex &gt;= <span class="number">1</span> &amp;&amp; lastLowerCharIndex &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;520-检测大写字母&quot;&gt;&lt;a href=&quot;#520-检测大写字母&quot; class=&quot;headerlink&quot; title=&quot;520. 检测大写字母&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/detect-capital/&quot;&gt;520. 检测大写字母&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;我们定义，在以下情况时，单词的大写用法是正确的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部字母都是大写，比如 &lt;code&gt;&amp;quot;USA&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;单词中所有字母都不是大写，比如 &lt;code&gt;&amp;quot;leetcode&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;如果单词不只含有一个字母，只有首字母大写， 比如 &lt;code&gt;&amp;quot;Google&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;word&lt;/code&gt; 。如果大写用法正确，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>《葬》观后感</title>
    <link href="http://example.com/2021/12/12/%E3%80%8A%E8%91%AC%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://example.com/2021/12/12/%E3%80%8A%E8%91%AC%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</id>
    <published>2021-12-12T04:16:47.000Z</published>
    <updated>2021-12-13T14:16:52.428Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>《葬》观后感</p><blockquote><p>本片讲述了一个农村老太太在70岁大寿的时候，想让自己多年不见的儿子和小孙子回家，结果通知了两个儿子都没人回来，老太太就联合自己的女儿来了一场假死闹剧，结果两个儿子回家，一个着急走，一个急着分家产，这让老人伤透了心，而小孙子很孝顺却意外导致了老人的死亡。小孙子在奶奶死后也喜欢上了戏曲，但是小峰的妈妈却极力反对，看到戏曲的没落和家庭矛盾愈演愈烈，小孙子的情感和愿望也在不断被压制…….</p></blockquote><p>在B站偶然刷到了这部节选影片，可以看出来导演想要表达的东西有很多，通过大量对比的手法呈现给观众，可惜只有30分钟的影片无法承载这么大的内容，导致了影片讲述内容出现了杂而多的情况。什么都想讲，但又好像什么都没有讲，这也造成了影片中心思想没有突出的展示。</p><span id="more"></span><p>影片刚开始是家庭的破碎，妻子坐在屋内，丈夫将手中的离婚协议书撕碎，小峰穿过两人。这里可以看出，家庭出现了问题，一家三口都是独立的个体。妻子想要离婚，结束这段痛苦的过程，小峰没有支持谁，也没有反对，而是默然走过，像是许可了一切。丈夫从后面可以知道，他还有另外一个家庭，这也是妻子想要离婚的根本原因。但是为什么要撕碎离婚协议书呢？难道是为了面子吗？因为在后面可以看出他逃出农村后事业有成，可能是不想被人抓住把柄。</p><p>接着就是他们奔丧路上的桥段。小峰带上耳机没有听父亲放的戏曲，代表了他不喜欢戏曲文化，也体现了他对亲情的冷漠。小峰妈妈给丈夫喂香蕉，是否可以看出她其实不想离婚，还想维持这个家庭，离婚协议书也是无奈之举，不过丈夫并没有吃。这与之前撕碎离婚协议书形成了对比，与人物矛盾。小峰与家庭的矛盾，妻子与丈夫的矛盾。这里影片还没有说小峰与家庭的矛盾是什么，这也算是一条暗线。</p><p>回到农村后，从帮弟弟看车可以看出哥哥的虚荣心，很好的体现了小农村人民的市侩。当然这样的对比也在后面弟弟出钱准备丧事，哥哥想赚丧葬费有所体现。</p><p>当兄妹三人商讨丧葬事宜的时候，弟弟想的是尽快下葬，哥哥想的是丧葬要隆重，姐姐想的是不要通知村里人，先商讨清楚丧葬事情。这里可以看出他们兄妹三人的家庭观念也是各行其道，在家庭中每个人也是一个独立的个体，与小峰的小家庭呈现了映照。</p><p>弟弟想要尽快下葬，从之前看到母亲灵体哭丧而被工作电话打断可以看出，他对这个农村家庭其实是没有多少留念的，可以说他的下跪是给家人们看的，也可以说他是给这个社会看的，给他自己看的，想要维持这份表面上的礼，就像他撕碎了离婚协议书一样。影片中弟弟哭丧与电话中的欢喜的彩铃是导演做的众多戏剧冲突的一个，荒诞却又那么的现实。</p><p>哥哥想要举办隆重的葬礼，是为了能多捞丧葬费，这个不难看出。从开头的虚荣心，到之后的串通桑队，再到分房，以及奶奶口中的话也有体现。</p><p>不过姐姐这个人物个人认为没有表现得很到位，不知道是不是影片时长的原因。从开头与她娘设计让兄弟二人回家，到后来给她妈宽心多想想自己的好孙子。都体现出她想推动这个家的团结，或者说想要完成妈妈的心愿。当他们三人在屋外商讨丧葬事宜的时候，不通知乡里乡亲，也不下葬就表明了这次死亡有问题，当然至亲之人的去世，她脸上没有什么悲伤的情绪也可以说明此问题。</p><p>小峰对着奶奶的遗体认真的磕头，那种单纯与他的爸爸叔叔形成了对比。之后小峰找到了儿时青梅，双方的腼腆，话语间能说的只有儿时的回忆展现了她们之间已经山海相隔。</p><p>那句“你喜欢他吗？”</p><p>圆圆回答的却是</p><p>“他在镇上修车一个月不少赚呢！”</p><p>以及“22岁才刚大学毕业，还要找工作”</p><p>道出了农村的婚姻观念，与小峰向往的婚姻自由。回到农村的小峰熟悉的也只有儿时的记忆，从问路，到聊过去，再到在奶奶灵堂前说想回到小时候，一切已是物是人非。</p><p>影片的高潮在于小峰“误将”棺材盖盖而憋死了奶奶，其实当他为奶奶擦泪的时候已经就明白了奶奶假死，而奶奶假戏真做也说明了真心求死的心。不过这点其实我不能有所共鸣，很多人其实不太能理解，就算亲人真的想求死，但我们真的能下得去手吗，何况是这个世界上对自己最好的人？</p><p>当超现实中奶奶为小峰再唱一曲，与小峰最后的一抹微笑，像是体现两人的解脱。</p><p>农村的艳舞桥段，兄妹三人灵堂后打牌的桥段，小峰最后对葬礼上戏曲的痴迷，也诠释了他的单纯的心。说姐姐这个角色没有体现好是因为，后面出现了灵堂打牌，没有把弟妹当一家人。似乎她也不是很在乎，与之前为妈设计有冲突。如果往黑暗的一面想，她或许也是想分一份家产。</p><p>最让我震撼的是小峰最后在黄昏唱着《小苍娃》，戏曲声音哀婉动人。但圆圆却在坟前跳着现代舞曲，能看出来他们中有一个人不是真的在。也许圆圆是假的，代表了小峰怀念的圆圆，他走上了戏曲的道路，但没必要放着现代舞曲。或许小峰是假的，或者说他已经不在了，但圆圆也没必要在坟前跳舞吧。</p><p>小峰向往的自由与理想，在家人面前格格不入，与《月亮与六便士》有异曲同工之处。追求理想的过程中需要放弃一些重要的东西。我妈在看完这部短片后，也和小峰妈妈一样说不该学戏曲。</p><p>人生的理想到底该由社会决定，还是由我们自己呢？我会努力最求后者。</p><p>尽管30分钟的影片确实因为想要表达的内容太多而导致内容杂碎了，但也不失这是一部很好的影片，期待这部电影长片以及导演的其他作品。</p><p><img src="1.png"></p><p><small>2021.12.12 国家图书馆</small></p></br><p>导演剧情解析</p><blockquote><p>本片通过一场看似荒诞的农村闹剧映射出农村和城市在文化思想、家庭教育与家庭矛盾处理等等问题上的巨大差异，从而引发对目前社会结构的溯源与反思。影片用黑色幽默的方式讲述老人假死后，所有人为了自己的利益而慢慢裸露的人心。影片主人公小孙子从小是奶奶带大的，他的青春懵懂和纯真、对于农村淳朴的向往、对儿时玩伴的情窦初开、奶奶的思念以及在奶奶死后慢慢开始热爱的戏曲，都随着这场葬礼给埋葬了。压抑的家庭氛围下，每个人都在伪装自己，在看似光鲜亮丽的背后都是伤痕累累。小孙子的生活是沉重的，他一直活在家庭的“面子”里，他渴望自由想率性而活，结果生活让他疲惫不堪，埋葬的不只是乡愁还有人心。</p></blockquote></br><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.bilibili.com/video/BV1Lg411N7YV"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;《葬》观后感&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本片讲述了一个农村老太太在70岁大寿的时候，想让自己多年不见的儿子和小孙子回家，结果通知了两个儿子都没人回来，老太太就联合自己的女儿来了一场假死闹剧，结果两个儿子回家，一个着急走，一个急着分家产，这让老人伤透了心，而小孙子很孝顺却意外导致了老人的死亡。小孙子在奶奶死后也喜欢上了戏曲，但是小峰的妈妈却极力反对，看到戏曲的没落和家庭矛盾愈演愈烈，小孙子的情感和愿望也在不断被压制…….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在B站偶然刷到了这部节选影片，可以看出来导演想要表达的东西有很多，通过大量对比的手法呈现给观众，可惜只有30分钟的影片无法承载这么大的内容，导致了影片讲述内容出现了杂而多的情况。什么都想讲，但又好像什么都没有讲，这也造成了影片中心思想没有突出的展示。&lt;/p&gt;</summary>
    
    
    
    <category term="佳片分享" scheme="http://example.com/categories/%E4%BD%B3%E7%89%87%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>python 递归</title>
    <link href="http://example.com/2021/12/07/python-%E9%80%92%E5%BD%92/"/>
    <id>http://example.com/2021/12/07/python-%E9%80%92%E5%BD%92/</id>
    <published>2021-12-07T14:58:11.000Z</published>
    <updated>2021-12-07T15:22:40.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归的两个特点：</p><ul><li>调用自身</li><li>结束条件</li></ul><span id="more"></span><h4 id="两个递归实例："><a href="#两个递归实例：" class="headerlink" title="两个递归实例："></a>两个递归实例：</h4><p><strong>先打印结果再调用自身</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    func1(x-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">func1(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>先调用自身再打印结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">  func2(x-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">func2(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="汉诺塔（hanoi）"><a href="#汉诺塔（hanoi）" class="headerlink" title="汉诺塔（hanoi）"></a>汉诺塔（hanoi）</h4><p><img src="hanoi.png"></p><p><strong>思考</strong></p><p>n个盘子时：</p><ol><li>把n-1个盘子从A经过C移动到B</li><li>把第n个盘子从A移动到C</li><li>把n-1个小盘子从B经过A移动到C</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n个盘子，a、b、c三个柱子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">n,a,b,c</span>):</span></span><br><span class="line">  <span class="comment"># 盘子的数量大于0，不然就减成负数了</span></span><br><span class="line">  <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 我们会通过很多步骤讲n-1个盘子经过c柱子移动到b柱子上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">    <span class="comment"># 再将最底下的盘子n移动到c上</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;moving form %s to %s&quot;</span> % (a,c))</span><br><span class="line">    <span class="comment"># 再将b柱子上的盘子经过a移动到c上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,b,a,c)</span><br><span class="line"> </span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> A to B</span><br><span class="line">moving <span class="keyword">from</span> C to B</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> B to A</span><br><span class="line">moving <span class="keyword">from</span> B to C</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h3&gt;&lt;p&gt;递归的两个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用自身&lt;/li&gt;
&lt;li&gt;结束条件&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python数据结构" scheme="http://example.com/tags/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>说走就走的滑雪</title>
    <link href="http://example.com/2021/12/05/%E8%AF%B4%E8%B5%B0%E5%B0%B1%E8%B5%B0%E7%9A%84%E6%BB%91%E9%9B%AA/"/>
    <id>http://example.com/2021/12/05/%E8%AF%B4%E8%B5%B0%E5%B0%B1%E8%B5%B0%E7%9A%84%E6%BB%91%E9%9B%AA/</id>
    <published>2021-12-05T14:13:45.000Z</published>
    <updated>2021-12-05T14:42:15.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>突然想去滑雪了，于是…</p><p>我摔得好惨，就连魔术滑道都摔了2次，太丢人了😂</p><p>不过好在最终学会了双板，嗯应该学会了吧。第一次滑雪直接练习的中级赛道，下次有机会我想滑单板。</p><p>滑雪我有点上瘾了</p><span id="more"></span><p><img src="./3.jpeg"></p></br><p><img src="./4.jpeg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;突然想去滑雪了，于是…&lt;/p&gt;
&lt;p&gt;我摔得好惨，就连魔术滑道都摔了2次，太丢人了😂&lt;/p&gt;
&lt;p&gt;不过好在最终学会了双板，嗯应该学会了吧。第一次滑雪直接练习的中级赛道，下次有机会我想滑单板。&lt;/p&gt;
&lt;p&gt;滑雪我有点上瘾了&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>Linux tcpdump命令</title>
    <link href="http://example.com/2021/12/01/Linux-tcpdump%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2021/12/01/Linux-tcpdump%E5%91%BD%E4%BB%A4/</id>
    <published>2021-12-01T14:47:48.000Z</published>
    <updated>2021-12-01T15:24:13.628Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>tcpdump是一个强大的网络抓包Sniffer类工具，通常用在Linux系统中，Windows操作系统中也会使用，可以看作是WireShark的命令行版本。</p><p>tcdpump命令最初设计用于观察TCP/IP性能问题，它是一个用于截取网络分组，并输出分组内容的工具。tcpdump可以将网络中传送的数据包的报文头完全截获下来提供分析，它支持针对网络层、协议、主机、网络或端口的过滤，并提供and，or，not等逻辑语句来帮助用户去掉无用的信息。</p><span id="more"></span><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump [-adeflnNOpqStvx][-c&lt;数据包数目&gt;][-dd][-ddd][-F&lt;表达文件&gt;][-i&lt;网络界面&gt;][-r&lt;数据包文件&gt;][-s&lt;数据包大小&gt;][-tt][-T&lt;数据包类型&gt;][-vv][-w&lt;数据包文件&gt;][输出数据栏位]</span><br></pre></td></tr></table></figure><!--more--><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><p><code>tcpdump -i wlan0 -s 0 -w a.cap</code> //监听wlan0网卡上的全部流量，-s代表抓取包的大小，默认为抓取64,设置为0， 表示包有多大，抓多大。-w，表示抓取下来保存为，a.cap</p><p><code>tcpdump -r a.cpa</code></p><p><code>tcpdump -A -r a.cap</code> //以Ascall显示包文件</p><p><code>tcpdump -x -r a.cap</code> //以十六进制显示包文件</p><p><code>tcpdump -i eth0 tcp port 22</code> //监听tcp协议的，22端口</p><p>tcpdump—筛选</p><p><code>tcpdump -n -r http.cap | awk &#39;&#123;print $3&#125;&#39; |sort -u</code> // -n 表示只以ip地址的形式显示出来，不显示域名。awk 参数表示只显示第三列信息; sort表示去掉重复的</p><p><code>tcpdump -n src host 145.254.160.237 -r http.cap //source</code></p><p><code>tcpdump -n dst host 145.254.160.237 -r http.cap //destination</code></p><p><code>tcpdump -n udp port 53 -r http.cap</code> //使用udp 53端口就可以把所有的域名查询包显示出来</p><p><code>tcpdump -nX port 80 -r http.cap</code> //十六进制</p><p><code>tcpdump -A -n &#39;tcp[13] = 24&#39; -r http.cap</code> //筛选tcp包里面的ack和psh包</p><p>Linux tcpdump命令用于倾倒网络传输数据。</p><p>执行tcpdump指令可列出经过指定网络界面的数据包文件头，在Linux操作系统中，你必须是系统管理员。</p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>-a 尝试将网络和广播地址转换成名称。</li><li>-c&lt;数据包数目&gt; 收到指定的数据包数目后，就停止进行倾倒操作。</li><li>-d 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。</li><li>-dd 把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。</li><li>-ddd 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。</li><li>-e 在每列倾倒资料上显示连接层级的文件头。</li><li>-f 用数字显示网际网络地址。</li><li>-F&lt;表达文件&gt; 指定内含表达方式的文件。</li><li>-i&lt;网络界面&gt; 使用指定的网络截面送出数据包。</li><li>-l 使用标准输出列的缓冲区。</li><li>-n 不把主机的网络地址转换成名字。</li><li>-N 不列出域名。</li><li>-O 不将数据包编码最佳化。</li><li>-p 不让网络界面进入混杂模式。</li><li>-q 快速输出，仅列出少数的传输协议信息。</li><li>-r&lt;数据包文件&gt; 从指定的文件读取数据包数据。</li><li>-s&lt;数据包大小&gt; 设置每个数据包的大小。</li><li>-S 用绝对而非相对数值列出TCP关联数。</li><li>-t 在每列倾倒资料上不显示时间戳记。</li><li>-tt 在每列倾倒资料上显示未经格式化的时间戳记。</li><li>-T&lt;数据包类型&gt; 强制将表达方式所指定的数据包转译成设置的数据包类型。</li><li>-v 详细显示指令执行过程。</li><li>-vv 更详细显示指令执行过程。</li><li>-x 用十六进制字码列出数据包资料。</li><li>-w&lt;数据包文件&gt; 把数据包数据写入指定的文件。</li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>抓取所有的包</p><p><code>tcpdump -i any -n -w xxx.cap</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;tcpdump是一个强大的网络抓包Sniffer类工具，通常用在Linux系统中，Windows操作系统中也会使用，可以看作是WireShark的命令行版本。&lt;/p&gt;
&lt;p&gt;tcdpump命令最初设计用于观察TCP/IP性能问题，它是一个用于截取网络分组，并输出分组内容的工具。tcpdump可以将网络中传送的数据包的报文头完全截获下来提供分析，它支持针对网络层、协议、主机、网络或端口的过滤，并提供and，or，not等逻辑语句来帮助用户去掉无用的信息。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>面纱</title>
    <link href="http://example.com/2021/11/30/%E9%9D%A2%E7%BA%B1/"/>
    <id>http://example.com/2021/11/30/%E9%9D%A2%E7%BA%B1/</id>
    <published>2021-11-30T13:37:13.000Z</published>
    <updated>2021-12-04T10:56:06.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-dufIpOto" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="16139396" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><blockquote><p>50岁时毛姆写下这个近乎完美的爱情故事，因为每个人都在故事中找到了自己。这本小说讲述了爱情中所有的不美好：背叛、猜忌、报复，还有我们终将面对的离别与自我救赎。毛姆以他冷静得近乎刻薄的方式，将一个女人的堕落与觉醒刻画得淋漓尽致。凯蒂怎么也琢磨不透，文夫到底有没有发现她出轨的秘密偷情时门把手的转动、晚餐时意有所指的话语，还有突然要带她前往霍乱之地的决定，这些都让凯蒂的神经越绷越紧。终于，忍无可忍的她打算摊牌，离婚后投奔心爱的情人。然而面纱揭开，爱情的真相与人生的意义将她的天真击得粉碎。毛姆以他冷静得近乎刻薄的方式，将一个女人的堕落与觉醒刻画得淋漓尽致–在两个人的世界里，她只能选择爱他或者失去他，以填补心灵的空虛；但当她身处更为广袤的世界，目睹了生活的残酷和人性的光辉之后，才真正获<br>得了心灵的宁静和对自我的救赎。</p></blockquote><span id="more"></span><blockquote><p>你用面纱遮蔽他人的窥探，自己也难以一睹世界之真实。</p></blockquote><p>这本小说真是一部让人揪心的作品</p><p>沃尔特爱而不得，凯蒂的个人成长，查理的渣男行为都被描写的淋漓尽致</p><blockquote><p>“我对你不抱什么幻想，”他说，“我知道你愚蠢、轻浮、没有头脑，但是我爱你。我知道你的目标和理想既庸俗又普通，但是我爱你。我知道你是二流货色，但是我爱你。想一想真是好笑，我竭力去喜欢那些讨你喜欢的东西，忍受折磨也要对你隐瞒起自己，实际上我并不无知粗俗、不爱散播丑闻也不愚蠢。我知道你何等害怕智慧，便尽我所能让你觉得我是个大傻瓜，跟你认识的其他人一样。我知道你嫁给我只图一时利益，我是那样爱你，我不在乎。大多数人，就我所知，当他们爱一个人，却没有得到爱的回报时就会觉得委屈不平，甚至愈发愤怒和痛苦。我不是那样，我从来没有指望你爱我，我看不出任何理由让你爱我，我也从来没想过自己会被人爱。我很感激能被允许爱你，当我时常想起你高兴跟我在一起，或者当我发现你眼中闪烁着愉快的爱意时，我就会欣喜若狂。我尽量不让我的爱来烦扰你，我知道那会让我承受不起，所以我一直察言观色，留意我的爱让你厌烦的最初迹象。大部分丈夫认为那是一种权力，我却准备当成恩惠来接受。”</p></blockquote><p>个人认为沃尔特是一个很拧巴的人，当他知道凯蒂出轨后，他就带上了一副面具。他深爱着凯蒂，却不愿意过多的表达。毕竟对方是出轨者，他有自己的骄傲，但终究是败给了爱情。</p><blockquote><p>假如汤森太太向我保证她会跟她丈夫离婚，假如他给我一份书面承诺，保证在两份判决生效的一个星期内娶你，我就答应你。”</p></blockquote><blockquote><p>“你特别瞧不起我吧，沃尔特？”<br>“不。”他犹豫了一下，声音十分奇怪，“我瞧不起我自己。”</p><p>“因为我爱你。”</p></blockquote><p>他无疑用他自己的方式深爱着凯蒂，却让凯蒂觉得自己是一个客人，而非是家庭的一员。（找不到那一段话了）</p><p>我个人感觉他的爱太卑微、太深沉了，打动了千万读者读者，却打动不了凯蒂。其实，对于这一点没有人怪凯蒂，因为换做任何一个人可能都无法接受这样的爱吧。</p><p>一开始沃尔特是想与凯蒂一起死的，因为他们去瘟疫肆虐的湄潭府无疑是送死。这点凯蒂问过他，去过之后呢，他没有想过。在书的尾声，他也承认了自己当时确实想让她死在那里。</p><p>哎，何必呢。</p><p>凯蒂在修女院中获得了新生与成长。当他们渐渐拨开层层云雾，慢慢和解，凯蒂却怀了身孕。</p><blockquote><p>“我要生孩子了。”她说。</p><p>当她说出一句本以为会引发惊叹的话，他却习惯以沉默相对，这在她已见怪不怪，但从未像现在这样令她难以忍受。他什么也没说，也没做任何手势，脸上和那双黑眼睛里的神色没有任何变化，以表示他听见了。她突然有种想哭的冲动。如果一个男人爱他的妻子，他的妻子也爱他，在这样的时刻，他们本该受一种强烈的情感驱使着紧紧抱在一起。沉默令人不堪忍受，她耐不住了。</p><p>“我不知道为什么以前我从未想到这一点。我太愚蠢了，不过……由于种种原因……”</p><p>“你有多长时间……你估计什么时候分娩？”</p><p>这话似乎花了好大力气才从他嘴里说出来，她觉得他喉咙发干，就跟她自己一样。可恨的是她说起话来嘴唇一直打颤，如果他不是石头做的，这也该激发他的恻隐之心了吧。</p><p>“我估计已经有两三个月了。”</p><p>“我是那父亲吗？”</p><p>她倒吸一口冷气，他的声音里有一丝颤抖。他一贯冷静、自我克制，以至于微乎其微的情感表示都会让她震惊，这简直太可怕了。她不知为什么想到了在香港见过的一种仪器，上面有一根指针轻轻振动，人们告诉她那代表上千英里外发生了一场地震，想必上千人会丧失生命。她看着他，他面如死灰，这种苍白她以前见过一到两次。他低着头，稍稍看着一边。</p><p>“是吗？”</p></blockquote><p>算了，一切都是无言。</p><p>刚开始挺为沃尔特感到难过的，但后来慢慢发现他也是一个卑微的普通人，小说最后成长了的只有凯蒂一个人。他能原谅凯蒂的出轨，却无法视肚子里的孩子不见，最后我想他是自杀吧。</p><blockquote><p>别瞎忙了。我经过了一段艰难的路途，但现在已经全好了。”<br>凯蒂又等了一会儿，但只有沉默。他全然不动的样子撕扯着她凄苦的心。看见他竟那样毫无动静地躺着，太过让人害怕——他似乎已经准备好寂然进入坟墓。</p></blockquote><p>亲眼看见深爱之人的背叛，用永无休止的忙碌去麻痹自己破碎的心，把死亡看成最后解脱的沃尔特你太傻了。</p><blockquote><p>人生何其短暂，世界本来就充满了痛苦，人们却还是要折磨自己，这岂不是太可怜了吗？</p></blockquote><p>你是那个痴情的凯蒂，成为了口中的那只狗，而凯蒂则变成了善人。</p><blockquote><p>过去已经完结，逝者已然安息。这样是不是太过无情？她满心希望自己已经学会同情和博爱，即使不知道什么样的未来在等待着她，也感到内心有一股力量，无论将要发生什么，她都能带着轻松愉悦的心情去接受。接着，突然之间，全然说不清是何因由，那段旅行的回忆从她无意识的脑海深处浮现出来：她跟着可怜的沃尔特，两人一道前往那座饱受瘟疫摧残、让他丢了性命的城市——一天早上，天还没亮他们便坐上轿子出发。破晓之时，与其说她看到，不如说是凭直觉预见了那样一幅令人惊叹的美妙景致，一时缓和了她心里的痛苦，让尘世间的所有磨难都显得无关重要。太阳升起来，驱散了一片雾霭，她看见他们循着的那条小径蜿蜒向前，直到目力不及之处，穿插于稻田之间，横跨过一条小河，越过高低起伏的大地——也许她的过失，她做下的蠢事，还有她所遭受的不幸，并非一概徒劳无益，只要现在她能够遵循眼前这条让她依稀可辨的路。那不是亲切古怪的老沃丁顿所说的无所通达的道路，而是修道院那些可爱的修女谦卑地遵循的路——那是一条通往内心安宁的路。</p></blockquote><p>所有的伤、所有的恨都该慢慢学着与自己和解。现在失恋的男女也是一样啊，如果在所爱的人背叛自己后，能有勇气断掉一切，学着与自己和解是否能像凯蒂一样获得新生。</p></br><p><strong>与世界和解，与往事和解。</strong></p><p><strong>原谅该原谅的，忘记该忘记的。</strong></p><p><strong>记住该记住的，回忆该回忆的。</strong></p><p><strong>未来很长，当有勇气面对，当与自己和解。</strong></p></br><p>让我想到了两首歌：《一直很安静》和《路过人间》</p>    <div id="aplayer-zfLsFlMJ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="505997881" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br>    <div id="aplayer-krIJuaft" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1495052210" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><p><img src="1.jpg"></p><center><small>11.27号在国家图书馆无意间发现了这本书</small></center>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-dufIpOto&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;16139396&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;
    &gt;&lt;/div&gt;

&lt;/br&gt;

&lt;blockquote&gt;
&lt;p&gt;50岁时毛姆写下这个近乎完美的爱情故事，因为每个人都在故事中找到了自己。这本小说讲述了爱情中所有的不美好：背叛、猜忌、报复，还有我们终将面对的离别与自我救赎。毛姆以他冷静得近乎刻薄的方式，将一个女人的堕落与觉醒刻画得淋漓尽致。凯蒂怎么也琢磨不透，文夫到底有没有发现她出轨的秘密偷情时门把手的转动、晚餐时意有所指的话语，还有突然要带她前往霍乱之地的决定，这些都让凯蒂的神经越绷越紧。终于，忍无可忍的她打算摊牌，离婚后投奔心爱的情人。然而面纱揭开，爱情的真相与人生的意义将她的天真击得粉碎。毛姆以他冷静得近乎刻薄的方式，将一个女人的堕落与觉醒刻画得淋漓尽致–在两个人的世界里，她只能选择爱他或者失去他，以填补心灵的空虛；但当她身处更为广袤的世界，目睹了生活的残酷和人性的光辉之后，才真正获&lt;br&gt;得了心灵的宁静和对自我的救赎。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 两数之和II-输入有序数组</title>
    <link href="http://example.com/2021/11/29/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/11/29/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-11-29T12:48:13.000Z</published>
    <updated>2021-11-29T12:49:59.533Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h4><p>给定一个已按照 <strong>非递减顺序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p><p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><span id="more"></span><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">numbers</span> = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], <span class="attr">target</span> = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">解释：<span class="number">2</span> 与 <span class="number">7</span> 之和等于目标数 <span class="number">9</span> 。因此 <span class="attr">index1</span> = <span class="number">1</span>, <span class="attr">index2</span> = <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = <span class="comment">[2,3,4]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[1,3]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = <span class="comment">[-1,0]</span>, target = -1</span><br><span class="line">输出：<span class="comment">[1,2]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type numbers: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>思考</strong></p><p>写两个for循环，然后将每个列表的两个值一一相加，直到得出目标值。</p><p>通过enumerate()得出下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type numbers: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        num = <span class="built_in">len</span>(numbers)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,num):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,num):</span><br><span class="line">                <span class="keyword">if</span> numbers[i]+numbers[k] == target:</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>,k+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>但这样并没有通过，超出了时间限制，还记得二分查找吗？</p><p><strong>非递归二分查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params"><span class="built_in">list</span>,item</span>):</span></span><br><span class="line">    <span class="comment"># 列表的头和尾，代表着数组范围的最小和最大</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当找到item的时候，low是小于high，也有可能相等</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high)//<span class="number">2</span></span><br><span class="line">        <span class="comment"># 取数组的中间值</span></span><br><span class="line">        guess = <span class="built_in">list</span>[mid]</span><br><span class="line">        <span class="comment"># 如果中间值等于索引值，那么就返回中间值的下标</span></span><br><span class="line">        <span class="keyword">if</span> guess == item:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果中间值&gt;索引值，因为不包含中间值，所以最大范围high=中间值的下标往左移1位</span></span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果中间值&lt;索引值，因为不包含中间值，所以最小范围low=中间值的下标往右移1位</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(my_list,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改进后             </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(numbers)-<span class="number">1</span>      </span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> numbers[left] + numbers[right] == target:                </span><br><span class="line">                <span class="keyword">return</span> [left+<span class="number">1</span>, right+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> numbers[left] + numbers[right] &lt; target:</span><br><span class="line">                left = left + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = right - <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>附递归二分查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params"><span class="built_in">list</span>,data</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line">    mid = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>[mid] &gt; data:</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="built_in">list</span>[<span class="number">0</span>:mid],data)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">list</span>[mid] &lt; data:</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="built_in">list</span>[mid+<span class="number">1</span>:],data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br></pre></td></tr></table></figure><p><strong>java双指针</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.length - <span class="number">1</span>; i &lt; j;) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[i] + numbers[j];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) j--;</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;167-两数之和-II-输入有序数组&quot;&gt;&lt;a href=&quot;#167-两数之和-II-输入有序数组&quot; class=&quot;headerlink&quot; title=&quot;167. 两数之和 II - 输入有序数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/&quot;&gt;167. 两数之和 II - 输入有序数组&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个已按照 &lt;strong&gt;非递减顺序排列&lt;/strong&gt; 的整数数组 &lt;code&gt;numbers&lt;/code&gt; ，请你从数组中找出两个数满足相加之和等于目标数 &lt;code&gt;target&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;函数应该以长度为 &lt;code&gt;2&lt;/code&gt; 的整数数组的形式返回这两个数的下标值&lt;em&gt;。&lt;/em&gt;&lt;code&gt;numbers&lt;/code&gt; 的下标 &lt;strong&gt;从 1 开始计数&lt;/strong&gt; ，所以答案数组应当满足 &lt;code&gt;1 &amp;lt;= answer[0] &amp;lt; answer[1] &amp;lt;= numbers.length&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你可以假设每个输入 &lt;strong&gt;只对应唯一的答案&lt;/strong&gt; ，而且你 &lt;strong&gt;不可以&lt;/strong&gt; 重复使用相同的元素。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>蛤蟆先生去看心理医生</title>
    <link href="http://example.com/2021/11/28/%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%8C%BB%E7%94%9F/"/>
    <id>http://example.com/2021/11/28/%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%8C%BB%E7%94%9F/</id>
    <published>2021-11-28T14:27:23.000Z</published>
    <updated>2021-11-29T15:10:38.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>感谢妞妞给我推荐这本心理书，与自己和解。让我了解了很多心理学的知识，这个周六在统一写书评吧。</p><p>没想到在图书馆随便找的一本书——《面纱》太好看了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>python zip()函数</title>
    <link href="http://example.com/2021/11/28/python-zip-%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/11/28/python-zip-%E5%87%BD%E6%95%B0/</id>
    <published>2021-11-28T14:21:05.000Z</published>
    <updated>2021-11-28T14:22:12.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol><li>zip含有两种，其中一种是zip()——压缩，另外一种是zip(* )——解压</li><li>zip 函数在 Python 2 和 Python 3 中是有所不同的：<ul><li>在 Python 3.x 中为了减少内存，zip() 返回的是一个对象object。如果需展示列表，需手动 list() 转换。</li><li>在Python2.x中返回的是一个列表list。</li></ul></li></ol><span id="more"></span><p><strong>语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">zip</span>([iterable, ...])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>iterable：一个序列或其他的可迭代对象</p><p><strong>功能</strong></p><p>将可迭代的对象作为参数，将对象中对应的元素打包成一个个<strong>元组</strong>，然后返回由这些元组组成的<strong>列表</strong>。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。（可利用 * 号操作符，可以将元组解压为列表。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>=([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip压缩</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1=<span class="built_in">zip</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># zip解压</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2=<span class="built_in">zip</span>(*<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出压缩后的a1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a1)</span><br><span class="line">[([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],), ([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>],)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出解压后的a2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a2)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1</span><br><span class="line">&lt;<span class="built_in">zip</span> <span class="built_in">object</span> at <span class="number">0x7f273dc97200</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">zip</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>在LeetCode上有一道题（14.Longest Common Prefix），使用set()与zip()函数是最快的解决方法，时间复杂度也是最小的。<a href="https://leetcode.com/problems/longest-common-prefix/">https://leetcode.com/problems/longest-common-prefix/</a> 。下面贴出解答方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longsetCommonPrefix</span>(<span class="params">strs</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化一个字符串s，用来接受无门要求的最长的公共前缀</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 先判断strs是不是一个空字符串，如果是，则返回 ”“</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(list(zip(strs)))</span></span><br><span class="line">    <span class="comment"># print(list(zip(*strs)))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 利用zip(*)函数对字符串strs进行解压，得到一个列表，再遍历该列表</span></span><br><span class="line">    <span class="comment"># 该列表是由字符串strs每个元素打包成一个一个元组，然后再将这些元组解压（拆分）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">zip</span>(*strs):</span><br><span class="line">    <span class="comment"># 3. 对zip解压得到的列表中的每个元素用set()创建一个无序不重复的元素集合</span></span><br><span class="line">    <span class="comment"># 判断每个集合的长度是否为1，如果为1，则说明是公共前缀，并入字符串s中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 利用集合创建一个无序不重复的元素集</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(each)) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># print(set(each))</span></span><br><span class="line">            s += each[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>调用longestCommonPrefix()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大公共前缀为：%s&quot;</span> %longsetCommonPrefix(<span class="built_in">str</span>))</span><br></pre></td></tr></table></figure><p>下面是Python的运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;flower&#x27;</span>,), (<span class="string">&#x27;flow&#x27;</span>,), (<span class="string">&#x27;flight&#x27;</span>,)]</span><br><span class="line">[(<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>), (<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>), (<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;i&#x27;</span>), (<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)]</span><br><span class="line">&#123;<span class="string">&#x27;f&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line">最大公共前缀为：fl</span><br></pre></td></tr></table></figure><blockquote><p>转载自：<a href="https://blog.csdn.net/weixin_44412496/article/details/97925652">https://blog.csdn.net/weixin_44412496/article/details/97925652</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;zip含有两种，其中一种是zip()——压缩，另外一种是zip(* )——解压&lt;/li&gt;
&lt;li&gt;zip 函数在 Python 2 和 Python 3 中是有所不同的：&lt;ul&gt;
&lt;li&gt;在 Python 3.x 中为了减少内存，zip() 返回的是一个对象object。如果需展示列表，需手动 list() 转换。&lt;/li&gt;
&lt;li&gt;在Python2.x中返回的是一个列表list。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>python中sys.argv[]的用法简明解释</title>
    <link href="http://example.com/2021/11/28/python%E4%B8%ADsys-argv-%E7%9A%84%E7%94%A8%E6%B3%95%E7%AE%80%E6%98%8E%E8%A7%A3%E9%87%8A/"/>
    <id>http://example.com/2021/11/28/python%E4%B8%ADsys-argv-%E7%9A%84%E7%94%A8%E6%B3%95%E7%AE%80%E6%98%8E%E8%A7%A3%E9%87%8A/</id>
    <published>2021-11-28T08:49:14.000Z</published>
    <updated>2021-11-28T08:50:42.089Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python中 sys.argv[]的用法简明解释</p><p>   因为是看书自学的python，开始后不久就遇到了这个引入的模块函数，且一直在IDLE上编辑了后运行，试图从结果发现它的用途，然而结果一直都是没结果，也在网上查了许多，但发现这个问题的比较详细的解释只有一个版本，大部分都是转载和复制的。给的都是简明python教程上那个一长串代码的例子，说看了就明白了，可我看得晕头转向的还是没真正明白，只知道“sys.argv[0]表示代码本身文件路径”这点，其实还是不明其意。后来经过大量努力，多方求教才真正明悟了，谨以记录和分享，希望能从另一个角度给同在求索过程中的同学一点启发。</p><span id="more"></span><p>　　sys.argv[]说白了就是一个从程序外部获取参数的桥梁，这个“外部”很关键，所以那些试图从代码来说明它作用的解释一直没看明白。因为我们从外部取得的参数可以是多个，所以获得的是一个列表（list)，也就是说sys.argv其实可以看作是一个列表，所以才能用[]提取其中的元素。其第一个元素是程序本身，随后才依次是外部给予的参数。</p><p>下面我们通过一个极简单的test.py程序的运行结果来说明它的用法。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>#test.py</span><br><span class="line"><span class="symbol">2 </span></span><br><span class="line"><span class="symbol">3 </span>import sys</span><br><span class="line"><span class="symbol">4 </span>a=sys.argv[<span class="number">0</span>]</span><br><span class="line"><span class="symbol">5 </span><span class="keyword">print</span>(a)</span><br></pre></td></tr></table></figure><p>将test.py保存在c盘的根目录下。</p><p>在程序中找到 ‘运行’-&gt;点击-&gt;输入”cmd”-&gt;回车键  进入控制台命令窗口（如下图），先输入cd c:\  (作用是将命令路径改到c盘根目录)，然后输入test.py运行我们刚刚写的程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">william@DESKTOP:~/DYJ/Python$ python3 test.py</span><br><span class="line">test.py</span><br></pre></td></tr></table></figure><p>得到的结果是C:\test.py，这就是0指代码（即此.py程序）本身的意思。</p><p>然后我们将代码中0改为1 :</p><p>a=sys.argv[1]</p><p>保存后，再从控制台窗口运行，这次我们加上一个参数，输入：test.py what</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">william@DESKTOP-MDEKEAT:~/DYJ/Python$ python3 test.py what</span><br><span class="line">what</span><br></pre></td></tr></table></figure><p> 得到的结果就是我们输入的参数what，看到这里你是不是开始明白了呢。</p><p>那我们再把代码修改一下：</p><p>a=sys.argv[2：]</p><p>保存后，再从控制台窗台运行程序，这次多加几个参数，以空格隔开:</p><p>test.py a b c d e f</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">william@DESKTOP-MDEKEAT:~/DYJ/Python$ python3 test.py a b c d e f</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure><p>得到的结果为[‘b’, ’c’, ’d’, ’e’, ’f’]</p><p>应该大彻大悟了吧。Sys.argv[ ]其实就是一个列表，里边的项为用户输入的参数，关键就是要明白这参数是从程序外部输入的，而非代码本身的什么地方，要想看到它的效果就应该将程序保存了，从外部来运行程序并给出参数。</p><p><a href="http://www.cnblogs.com/aland-1415/p/7128121.html">Python3 从入门到开车</a></p><blockquote><p><a href="https://www.cnblogs.com/aland-1415/p/6613449.html">https://www.cnblogs.com/aland-1415/p/6613449.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python中 sys.argv[]的用法简明解释&lt;/p&gt;
&lt;p&gt;   因为是看书自学的python，开始后不久就遇到了这个引入的模块函数，且一直在IDLE上编辑了后运行，试图从结果发现它的用途，然而结果一直都是没结果，也在网上查了许多，但发现这个问题的比较详细的解释只有一个版本，大部分都是转载和复制的。给的都是简明python教程上那个一长串代码的例子，说看了就明白了，可我看得晕头转向的还是没真正明白，只知道“sys.argv[0]表示代码本身文件路径”这点，其实还是不明其意。后来经过大量努力，多方求教才真正明悟了，谨以记录和分享，希望能从另一个角度给同在求索过程中的同学一点启发。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>爱的艺术</title>
    <link href="http://example.com/2021/11/27/%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://example.com/2021/11/27/%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/</id>
    <published>2021-11-27T12:41:10.000Z</published>
    <updated>2021-11-28T14:26:21.636Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这本书值得反复阅读，第一遍阅读很多地方都不是很明白，加上一些事情耽搁，没有写笔记。导致现在忘得差不多了，如果有时间我会再读一遍，然后补上书评。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2021" scheme="http://example.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>python __name__==&#39;__main__&#39;作用详解</title>
    <link href="http://example.com/2021/11/27/python-name-main-%E4%BD%9C%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2021/11/27/python-name-main-%E4%BD%9C%E7%94%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-27T09:43:15.000Z</published>
    <updated>2021-11-27T09:53:34.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在阅读别人写的自定义模块时，经常会看到有如下这行判断语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br></pre></td></tr></table></figure><p>这行代码的作用是什么呢？本节就详解讲解以下它的作用。</p><span id="more"></span><p>一般情况下，当我们写完自定义的模块之后，都会写一个测试代码，检验一些模块中各个功能是否能够成功运行。例如，创建一个 candf.py 文件，并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">摄氏度和华氏度的相互转换模块</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c2f</span>(<span class="params">cel</span>):</span></span><br><span class="line">    fah = cel * <span class="number">1.8</span> + <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> fah</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2c</span>(<span class="params">fah</span>):</span></span><br><span class="line">    cel = (fah - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">    <span class="keyword">return</span> cel</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据：0 摄氏度 = %.2f 华氏度&quot;</span> % c2f(<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据：0 华氏度 = %.2f 摄氏度&quot;</span> % f2c(<span class="number">0</span>))</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>单独运行此模块文件，可以看到如下运行结果：</p><p>测试数据：0 摄氏度 = 32.00 华氏度<br>测试数据：0 华氏度 = -17.78 摄氏度</p><p>在 candf.py 模块文件的基础上，在同目录下再创建一个 demo.py 文件，并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> candf</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;32 摄氏度 = %.2f 华氏度&quot;</span> % candf.c2f(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;99 华氏度 = %.2f 摄氏度&quot;</span> % candf.f2c(<span class="number">99</span>))</span><br></pre></td></tr></table></figure><p>运行 demo.py 文件，其运行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">测试数据：0 摄氏度 = 32.00 华氏度</span><br><span class="line">测试数据：0 华氏度 = -17.78 摄氏度</span><br><span class="line">32 摄氏度 = 89.60 华氏度</span><br><span class="line">99 华氏度 = 37.22 摄氏度</span><br></pre></td></tr></table></figure><p>可以看到，<a href="http://c.biancheng.net/python/">Python</a>解释器将模块（candf.py）中的测试代码也一块儿运行了，这并不是我们想要的结果。想要避免这种情况的关键在于，要让 Python 解释器知道，当前要运行的程度代码，是模块文件本身，还是导入模块的其它程序。</p><p>为了实现这一点，就需要使用 Python 内置的系统变量 __name__，它用于标识所在模块的模块名。例如，在 demo.py 程序文件中，添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(__name__)</span><br><span class="line"><span class="built_in">print</span>(candf.__name__)</span><br><span class="line">其运行结果为：</span><br><span class="line">__main__</span><br><span class="line">candf</span><br></pre></td></tr></table></figure><p>可以看到，当前运行的程序，其 <strong>name</strong> 的值为 __main__，而导入到当前程序中的模块，其 <strong>name</strong> 值为自己的模块名。</p><p>因此，<code>if __name__ == &#39;__main__&#39;:</code> 的作用是确保只有单独运行该模块时，此表达式才成立，才可以进入此判断语法，执行其中的测试代码；反之，如果只是作为模块导入到其他程序文件中，则此表达式将不成立，运行其它程序时，也就不会执行该判断语句中的测试代码。</p><blockquote><p>转载自：<a href="http://c.biancheng.net/view/4643.html">http://c.biancheng.net/view/4643.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在阅读别人写的自定义模块时，经常会看到有如下这行判断语句：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&amp;#x27;__main__&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这行代码的作用是什么呢？本节就详解讲解以下它的作用。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
</feed>
