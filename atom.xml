<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒙珣的博客</title>
  
  <subtitle>未来很长，当有勇气面对，当与自己和解。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-12T15:45:09.336Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蒙珣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>启动docker容器后网络冲突的解决办法</title>
    <link href="http://example.com/2023/04/12/%E5%90%AF%E5%8A%A8docker%E5%AE%B9%E5%99%A8%E5%90%8E%E7%BD%91%E7%BB%9C%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2023/04/12/%E5%90%AF%E5%8A%A8docker%E5%AE%B9%E5%99%A8%E5%90%8E%E7%BD%91%E7%BB%9C%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2023-04-12T15:44:16.000Z</published>
    <updated>2023-04-12T15:45:09.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="查看启动容器的镜像源数据"><a href="#查看启动容器的镜像源数据" class="headerlink" title="查看启动容器的镜像源数据"></a>查看启动容器的镜像源数据</h3><p><code>docker inspect classify_service</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;docker-cluster-yml_default&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;classify_service&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;classify_service&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;3e4da4c588e0&quot;</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;1e720d1e75de556314b9bf0f81eae19f4fdb4b3e403d628632aa0ca73045087d&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;f8eab1e55b3ca4437510c6fbc53fb92e57b63091f3bca329fc7db97f23ff91d0&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.21.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.21.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: <span class="number">16</span>,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:15:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="查看IP信息"><a href="#查看IP信息" class="headerlink" title="查看IP信息"></a>查看IP信息</h3><p><code>ifconfig</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">br</span>-<span class="number">1</span>e<span class="number">720</span>d<span class="number">1</span>e<span class="number">75</span>de: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.21.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.21.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:fdff:fec<span class="number">1</span>:b<span class="number">29</span>d  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:fd:c<span class="number">1</span>:b<span class="number">2</span>:<span class="number">9</span>d  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">1153655</span>  bytes <span class="number">95446468</span> (<span class="number">91</span>.<span class="number">0</span> MiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">1462690</span>  bytes <span class="number">126927983</span> (<span class="number">121</span>.<span class="number">0</span> MiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">br</span>-f<span class="number">653</span>e<span class="number">2</span>f<span class="number">2</span>bfa<span class="number">1</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.20.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.20.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:<span class="number">86</span>ff:fe<span class="number">3</span>b:<span class="number">7</span>d  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">86</span>:<span class="number">3</span>b:<span class="number">00</span>:<span class="number">7</span>d  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">106</span>  bytes <span class="number">7060</span> (<span class="number">6</span>.<span class="number">8</span> KiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">944</span>  bytes <span class="number">42760</span> (<span class="number">41</span>.<span class="number">7</span> KiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">docker0</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.17.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.17.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:<span class="number">94</span>ff:fe<span class="number">7</span>a:<span class="number">9366</span>  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">94</span>:<span class="number">7</span>a:<span class="number">93</span>:<span class="number">66</span>  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">76579</span>  bytes <span class="number">61234293</span> (<span class="number">58</span>.<span class="number">3</span> MiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">137251</span>  bytes <span class="number">12661386</span> (<span class="number">12</span>.<span class="number">0</span> MiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到该容器IP是172.21.0.1，我们需要删除桥接网络接口，然后再重建docker IP网段</p><h3 id="删除桥接网络接口"><a href="#删除桥接网络接口" class="headerlink" title="删除桥接网络接口"></a>删除桥接网络接口</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y install bridge-utils</span><br><span class="line"></span><br><span class="line"><span class="attribute">brctl</span> delbr br-<span class="number">1</span>e<span class="number">720</span>d<span class="number">1</span>e<span class="number">75</span>de</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重建docker-IP-网段"><a href="#重建docker-IP-网段" class="headerlink" title="重建docker IP 网段"></a>重建docker IP 网段</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;default-address-pools&quot;</span> : [</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="string">&quot;base&quot;</span> : &quot;192.168.0.0/16&quot;,</span><br><span class="line">        <span class="string">&quot;size&quot;</span> : 24</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload <span class="meta">&amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>可以看到网段已经被修改</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">br</span>-f<span class="number">653</span>e<span class="number">2</span>f<span class="number">2</span>bfa<span class="number">1</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">172.20.0.1</span>  netmask <span class="number">255.255.0.0</span>  broadcast <span class="number">172.20.255.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:<span class="number">86</span>ff:fe<span class="number">3</span>b:<span class="number">7</span>d  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:<span class="number">86</span>:<span class="number">3</span>b:<span class="number">00</span>:<span class="number">7</span>d  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">17203</span>  bytes <span class="number">1580215</span> (<span class="number">1</span>.<span class="number">5</span> MiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">8742</span>  bytes <span class="number">1836663</span> (<span class="number">1</span>.<span class="number">7</span> MiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">docker0</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">192.168.1.1</span>  netmask <span class="number">255.255.255.0</span>  broadcast <span class="number">192.168.1.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe<span class="number">80</span>::<span class="number">42</span>:ffff:febc:c<span class="number">628</span>  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x<span class="number">20</span>&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">02</span>:<span class="number">42</span>:ff:bc:c<span class="number">6</span>:<span class="number">28</span>  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">333</span>  bytes <span class="number">38230</span> (<span class="number">37</span>.<span class="number">3</span> KiB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">608</span>  bytes <span class="number">47778</span> (<span class="number">46</span>.<span class="number">6</span> KiB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;查看启动容器的镜像源数据&quot;&gt;&lt;a href=&quot;#查看启动容器的镜像源数据&quot; class=&quot;headerlink&quot; title=&quot;查看启动容器的镜像源数据&quot;&gt;&lt;/a&gt;查看启动容器的镜像源数据&lt;/h3&gt;&lt;p&gt;&lt;code&gt;docker inspect classify_service&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;Networks&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&amp;quot;docker-cluster-yml_default&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPAMConfig&amp;quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;Links&amp;quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;Aliases&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&amp;quot;classify_service&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&amp;quot;classify_service&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&amp;quot;3e4da4c588e0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;NetworkID&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;1e720d1e75de556314b9bf0f81eae19f4fdb4b3e403d628632aa0ca73045087d&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;EndpointID&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;f8eab1e55b3ca4437510c6fbc53fb92e57b63091f3bca329fc7db97f23ff91d0&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;Gateway&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;172.21.0.1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;172.21.0.2&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPPrefixLen&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;IPv6Gateway&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;GlobalIPv6Address&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;GlobalIPv6PrefixLen&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;MacAddress&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;02:42:ac:15:00:02&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&amp;quot;DriverOpts&amp;quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用docker compose 安装mysql8</title>
    <link href="http://example.com/2023/04/12/%E4%BD%BF%E7%94%A8docker-compose-%E5%AE%89%E8%A3%85mysql8/"/>
    <id>http://example.com/2023/04/12/%E4%BD%BF%E7%94%A8docker-compose-%E5%AE%89%E8%A3%85mysql8/</id>
    <published>2023-04-12T15:40:47.000Z</published>
    <updated>2023-04-12T15:43:48.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p><code>docker pull mysql:8.0.18</code></p><h4 id="编写docker-compose"><a href="#编写docker-compose" class="headerlink" title="编写docker compose"></a>编写docker compose</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot; </span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    # 使用的镜像和TAG</span><br><span class="line">    image: mysql:8.0.18</span><br><span class="line">    # docker重启后，是否重启</span><br><span class="line">    restart: always</span><br><span class="line">    # 创建的容器名称</span><br><span class="line">    container_name: mysql8</span><br><span class="line">    # 指定端口号</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;33060:3306&quot;</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: admin</span><br><span class="line">    # 挂载卷</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/docker/mysql/conf:/etc/mysql/conf.d</span><br><span class="line">      - /data/docker/mysql/log:/var/log/mysql</span><br><span class="line">      - /data/docker/mysql/data:/var/lib/mysql</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="关闭mysql-binlog日志，最大连接数，表大小"><a href="#关闭mysql-binlog日志，最大连接数，表大小" class="headerlink" title="关闭mysql binlog日志，最大连接数，表大小"></a>关闭mysql binlog日志，最大连接数，表大小</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">pid-<span class="keyword">file</span>        = <span class="regexp">/var/</span>run<span class="regexp">/mysqld/my</span>sqld.pid</span><br><span class="line">socket          = <span class="regexp">/var/</span>run<span class="regexp">/mysqld/my</span>sqld.sock</span><br><span class="line">datadir         = <span class="regexp">/var/</span>lib/mysql</span><br><span class="line">secure-<span class="keyword">file</span>-priv= <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"># Custom config should go here</span><br><span class="line"></span><br><span class="line">max_connections = <span class="number">1000</span></span><br><span class="line">tmp_table_size=<span class="number">64</span>M</span><br><span class="line">max_heap_table_size=<span class="number">64</span>M</span><br><span class="line">skip-log-bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先进到mysql 中查看下binlog状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;log_bin&#x27;;</span><br><span class="line"></span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | ON    |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><p><code>/etc/mysql/my.cnf</code> 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不保存binlog日志</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;skip-log-bin&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表大小设置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;tmp_table_size=64M&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;max_heap_table_size=64M&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql 最大连接数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;max_connections = 1000&quot;</span> &gt;&gt; /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><p>重启docker mysql ，再次查看 <code>SHOW VARIABLES LIKE &#39;log_bin;&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | OFF   |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h4&gt;&lt;p&gt;&lt;code&gt;docker pull mysql:8.0.18&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;编写docker-compose&quot;&gt;&lt;a href=&quot;#编写docker-compose&quot; class=&quot;headerlink&quot; title=&quot;编写docker compose&quot;&gt;&lt;/a&gt;编写docker compose&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;version: &amp;quot;3&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;services:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 使用的镜像和TAG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image: mysql:8.0.18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # docker重启后，是否重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    restart: always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 创建的容器名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container_name: mysql8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 指定端口号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - &amp;quot;33060:3306&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      MYSQL_ROOT_PASSWORD: admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 挂载卷&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - /data/docker/mysql/conf:/etc/mysql/conf.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - /data/docker/mysql/log:/var/log/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - /data/docker/mysql/data:/var/lib/mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CH2-指令-计算机的语言下-过程支持</title>
    <link href="http://example.com/2023/04/04/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%B8%8B-%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81/"/>
    <id>http://example.com/2023/04/04/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%B8%8B-%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81/</id>
    <published>2023-04-04T14:48:36.000Z</published>
    <updated>2023-04-14T14:23:00.537Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="过程支持"><a href="#过程支持" class="headerlink" title="过程支持"></a>过程支持</h3><p>过程（procedure）或函数是程序员进行结构化编程的工具，两者均有助于提高程序的可理解性和代码的可重用性。过程允许程序员每次只需将精力集中在任务的一部分，由于参数能传递数值并返回结果，因此参数承担过程与其他程序、数据之间接口的角色。</p><span id="more"></span><p><img src="%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81.png"></p><br><h4 id="过程（函数）的执行过程"><a href="#过程（函数）的执行过程" class="headerlink" title="过程（函数）的执行过程"></a>过程（函数）的执行过程</h4><p>C语言中的函数（一种典型的<font color="orange">过程</font>）是结构化编程的强大工具</p><p>函数获取参数、执行运算、返回结果，就好比</p><p>侦探拿着一份计划书去执行任务，再带来想要的结果</p><br><p>1、主程序（调用者）将参数放在过程（被调用者）可以去用的特定位置 <u><strong>什么位置？</strong></u></p><p>2、主程序将控制权交给过程</p><p>3、过程申请并获得存储资源</p><p>4、过程执行</p><p>5、过程将结果的值放在主程序可以取用的特定位置 <u><strong>什么位置？</strong></u></p><p>6、过程把控制权返回给主程序，执行调用过程指令的下一条指令 <u><strong>怎么找到下个位置？</strong></u></p><br><h4 id="支持过程的三大寄存器"><a href="#支持过程的三大寄存器" class="headerlink" title="支持过程的三大寄存器"></a>支持过程的三大寄存器</h4><p>1、主程序（<font color="orange">调用者</font>）将参数放在过程（<font color="orange">被调用者</font>）可以取用的特定位置 <u><strong>什么位置？</strong></u></p><ul><li>4个<font color="orange">参数寄存器（argument reg）</font>$a0 ~ $a3</li></ul><p>5、过程将结果的值放在主程序可以取用的特定位置 <u><strong>什么位置?</strong></u></p><ul><li>2个<font color="orange">值寄存器（value reg）</font>$v0 ~ $v1</li></ul><p>6、过程把控制权返回给主程序，执行调用过程指令的下一条指令 <u><strong>怎么找到这个位置？</strong></u></p><ul><li>主程序把下一条指令的32位地址存入</li><li>1个<font color="orange">返回地址寄存器（return address reg）</font>$ra</li></ul><p><font color="grey">主程序通过什么指令，可以跳转到过程指令，并把下一条指令的地址存入 $ra ?  j+addi 吗？</font></p><br><h4 id="jal-jr-指令对-程序计数器"><a href="#jal-jr-指令对-程序计数器" class="headerlink" title="jal - jr 指令对 程序计数器"></a>jal - jr 指令对 程序计数器</h4><ul><li>$a0 ~ $a3：用于传递参数的4个参数寄存器</li><li>$v0 ~ $v1：用于返回值的两个值寄存器</li><li>$ra：用于返回起始点的返回地址寄存器</li></ul><p>除了分配这些寄存器之外，MIPS汇编语言还包括一条过程调用指令：跳转到某个地址的同时将下一条指令的地址保存在寄存器 $ra 中。这条<strong>跳转和链接指令</strong>（jump-and-link instruction）的格式为：</p><p><code>jal ProcedureAddress</code></p><p>指令中的链接部分表示指向调用点的地址或链接，以允许过程返回到合适的地址。存储在寄存器 $ra（31号寄存器）中的链接部分称为<strong>返回地址</strong>（return address）。返回地址是必须的，因为同一过程可能在程序的不同部分调用。</p><ul><li>跳转和链接指令：跳转到某个地址的同时将下一条指令的地址保存到寄存器 $ra 中的指令</li><li>返回地址：指向调用点的链接，使过程可以返回到合适的地址，在MIPS中它存储在寄存器 $ra 中</li></ul><p>为了支持这种情况，类似MIPS的计算机使用了寄存器跳转（jump register）指令 jr，用与 case 语句，表示无条件跳转到寄存器所指定的地址：</p><p><code>jr $ra</code></p><p>寄存器跳转指令跳转到存储在 $ra 寄存器中的地址——这正式我们所希望的。因此，调用程序或称为<strong>调用者</strong>（caller），将参数值放在 $a0 ~ $a3，然后使用 jar X 跳转到过程X（有时称为被调用者（callee））。被调用者执行运算，将结果放在 $v0 和 $v1，然后使用 jr $ra 指令将控制返回给调用者</p><ul><li>调用者：调用一个过程并为过程提供必要参数值的程序</li><li>被调用者：根据调用者提供的参数执行一系列存储的指令，然后将控制权返回调用者的过程</li><li>程序计数器（program counter PC）：包含在程序中正在被执行指令地址的寄存器</li></ul><p>跳转并链接（jump and link）指令可以同时实现两个功能：</p><ul><li>无条件跳转到一个标签</li><li>将下一条指令的地址放入返回地址寄存器 $ra</li></ul><p><font color="orange">jal Label</font></p><p>jal 指令由调用者主程序使用，还是由被调用者过程使用？</p><p>（主程序使用）</p><br><p>寄存器跳转（jump reg）指令可以跳转到某一寄存器存储器的32位地址</p><p>基本上只和返回地址寄存器搭配</p><p><code>jr $ra</code></p><p><u>jr 指令由调用者主程序使用，还是由被调用者过程使用？</u></p><p>（应该是被调用者过程使用）</p><br><h4 id="综合练习5：数组清零函数（叶过程）"><a href="#综合练习5：数组清零函数（叶过程）" class="headerlink" title="综合练习5：数组清零函数（叶过程）"></a>综合练习5：数组清零函数（叶过程）</h4><p>（叶子过程就是不调用其他过程）</p><p>将下列C语言转换成MIPS-32。为简化难度，没有在for循环中定义 i</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">clear:</span> <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span>  <span class="comment"># i = 0</span></span><br><span class="line"><span class="symbol">Loop:</span>  <span class="keyword">sll </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">2</span></span><br><span class="line">       <span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t1</span>, $<span class="built_in">a0</span></span><br><span class="line">       <span class="keyword">sw </span>$<span class="built_in">zero</span>, <span class="number">0</span>($<span class="built_in">t2</span>)       <span class="comment"># 将a[i]置为0</span></span><br><span class="line">       <span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span>       <span class="comment"># i++</span></span><br><span class="line">       <span class="keyword">slt </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">a1</span>      <span class="comment"># i &lt; size</span></span><br><span class="line">       <span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, Exit</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">j </span>Loop</span><br><span class="line"><span class="symbol">Exit:</span>  <span class="keyword">jr </span>$<span class="built_in">ra</span>                 <span class="comment"># 跳转到由主程序保存的下一条指令地址</span></span><br></pre></td></tr></table></figure><h4 id="保存寄存器的压栈和出栈-栈指针-sp"><a href="#保存寄存器的压栈和出栈-栈指针-sp" class="headerlink" title="保存寄存器的压栈和出栈 栈指针 $sp"></a>保存寄存器的压栈和出栈 栈指针 $sp</h4><p><img src="%E6%A0%88%E6%8C%87%E9%92%88.png"></p><p>在过程调用前，主程序往往已经将自己要用的标量放在了保存寄存器中</p><p>如果过程要使用保存寄存器，要把主程序已经使用的保存寄存器入栈</p><p>栈在内存中以<font color="orange">高地址为栈底，低地址为栈顶</font>，即栈从高地址向低地址“生长”</p><p><font color="orange">栈指针（stack pointer）永远指向栈顶</font></p><p>入栈时，先把$sp减去待保存的寄存器个数的4倍，<u>为什么是4倍？</u></p><p><em>一个栈指针4个字节。一个寄存器是32位，1个字为4个字节，8个字节一位。</em></p><p>再用sw将保存寄存器存入栈中（方向从栈底到栈顶）</p><p>过程结束时把这些数据出栈、放回保存寄存器，供主程序继续使用，步骤正好相反</p><h4 id="综合练习6：运算函数（叶过程）"><a href="#综合练习6：运算函数（叶过程）" class="headerlink" title="综合练习6：运算函数（叶过程）"></a>综合练习6：运算函数（叶过程）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> g, <span class="keyword">int</span> h, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> f;</span><br><span class="line">  f = (g+h) - (i+j);</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设 f 存储在 $s0 中，且 $s0 已经被主程序占用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为 $s0，已经被主程序占用，且被调用函数也要使用 $s0, 所以需要先将$s0存入栈中，等使用完后，再取出来。</span></span><br><span class="line">cal:</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$sp</span>, <span class="variable">$sp</span>, -4</span><br><span class="line">     sw <span class="variable">$s0</span>, 0(<span class="variable">$sp</span>)</span><br><span class="line">     # int f 应该要初始化一下吧，而且有脏数据呢</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$s0</span>, <span class="variable">$zero</span>, <span class="variable">$zero</span></span><br><span class="line">     # g,h,i,j 被主程序申明过，他们在寄存器<span class="variable">$a0</span>, <span class="variable">$a1</span>, <span class="variable">$a2</span>, <span class="variable">$a3</span>中</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$t0</span>, <span class="variable">$a0</span>, <span class="variable">$a1</span></span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$t1</span>, <span class="variable">$a2</span>, <span class="variable">$a3</span></span><br><span class="line">     sub <span class="variable">$s0</span>, <span class="variable">$t0</span>, <span class="variable">$t1</span></span><br><span class="line">     # return f, 将寄存器 <span class="variable">$s0</span> 传入 <span class="variable">$v0</span></span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$v0</span>, <span class="variable">$s0</span>, <span class="variable">$zero</span></span><br><span class="line">     # 将先前存放栈中的<span class="variable">$s0</span>再放回去</span><br><span class="line">     <span class="builtin-name">add</span> <span class="variable">$sp</span>, <span class="variable">$sp</span>, 4</span><br><span class="line">     lw <span class="variable">$s0</span>, 0(<span class="variable">$sp</span>)</span><br><span class="line">     # 返回主程序</span><br><span class="line">     jr <span class="variable">$ra</span></span><br></pre></td></tr></table></figure><h4 id="综合练习6改进：减少指令条数"><a href="#综合练习6改进：减少指令条数" class="headerlink" title="综合练习6改进：减少指令条数"></a>综合练习6改进：减少指令条数</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> g, <span class="keyword">int</span> h, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    f = (g+h)-(i+j);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量f是返回值，所以我们可以直接使用$v0，不使用$s0，这样也避免了出入栈</span></span><br><span class="line"><span class="symbol">cal:</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">a0</span>, $<span class="built_in">a1</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">a2</span>, $<span class="built_in">a3</span></span><br><span class="line">    <span class="keyword">sub </span>$<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h4 id="嵌套过程调用-综合练习7：数组求平方和（嵌套过程）"><a href="#嵌套过程调用-综合练习7：数组求平方和（嵌套过程）" class="headerlink" title="嵌套过程调用 综合练习7：数组求平方和（嵌套过程）"></a>嵌套过程调用 综合练习7：数组求平方和（嵌套过程）</h4><p>侦探搞外包、接着雇佣其他侦探来完成任务，就是嵌套过程调用</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum_of_squares(<span class="keyword">int</span> a[], <span class="keyword">int</span> <span class="built_in">size</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, i &lt; <span class="built_in">size</span>, i++)</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">square</span>(a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">square</span>(<span class="keyword">int</span> a)&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">square</span>;</span><br><span class="line">    <span class="built_in">square</span> = a * a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">square</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，i 的寄存器是 $t0，sum 的寄存器是 $t1，square 的寄存器是 $t2</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sum_of_squares:</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">Loop:</span></span><br><span class="line">    <span class="keyword">slt </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">a1</span></span><br><span class="line">    <span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, Exit</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># a[i]</span></span><br><span class="line">    <span class="keyword">sll </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t4</span>, $<span class="built_in">t4</span>, $<span class="built_in">a0</span></span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 跳转至 square 函数，之前要将 $ra 入栈，因为该函数也不是主函数</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">jar </span>square</span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, $<span class="built_in">t4</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">j </span>Loop</span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">Exit:</span></span><br><span class="line">    $ return sum</span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">v1</span>, $<span class="built_in">t1</span>, $<span class="built_in">zero</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># $ra 出栈</span></span><br><span class="line">    <span class="keyword">lw </span>$<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">square:</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, $<span class="built_in">zero</span></span><br><span class="line">    <span class="comment"># 还未学到的乘法指令</span></span><br><span class="line">    <span class="keyword">mul </span>$<span class="built_in">t2</span>, $<span class="built_in">a2</span>, $<span class="built_in">a2</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">v0</span>, $<span class="built_in">t2</span>, $<span class="built_in">zero</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>这个练习也可以减少指令条数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂时不写了</span><br></pre></td></tr></table></figure><h4 id="需要压栈保存的寄存器"><a href="#需要压栈保存的寄存器" class="headerlink" title="需要压栈保存的寄存器"></a>需要压栈保存的寄存器</h4><p>【综合练习6】我们默认<font color="orange">保存寄存器 $s0 ~ $s7</font> 存放到了主程序的变量，需要由过程开始时压栈保存，结束时出栈恢复</p><p>【综合练习7】如果一个过程（外层函数）嵌套了其他过程（内层函数）外层函数通过 jal 修改了 <font color="orange">返回地址寄存器 $ra </font></p><p>$ra 指向外层函数 jal 的下一条指令，不再是外层函数的返回地址了。</p><p>所以需要将 $ra 先入栈，再出栈？？</p><p><font color="orange">栈指针寄存器 $sp</font>、栈中的内容（即<font color="orange">栈指针以上的栈</font>）也需要由过程保留，在addi栈指针、sw入栈、lw出栈的过程中即可保存</p><p><font color="orange">结论：任何过程须显式地压栈保存即将使用的保存寄存器 $s0 ~ $s7（用那几个存那几个）外层嵌套过程须显式地压栈保存返回地址寄存器 $ra</font></p><h4 id="进阶内容：复杂-MIPS-程序示例"><a href="#进阶内容：复杂-MIPS-程序示例" class="headerlink" title="进阶内容：复杂 MIPS 程序示例"></a>进阶内容：复杂 MIPS 程序示例</h4><p>2.8节（68页）提供了一个递归嵌套调用过程计算阶乘的MIPS程序</p><p>2.13节（90页）提供了一个冒泡排序过程嵌套交换过程的MIPS程序</p><p>习题2.27（114页）考察双层for循环的翻译</p><p>习题2.23（115页）考察自嵌套调用的多参数过程的翻译</p><h4 id="过程帧与帧指针-fp"><a href="#过程帧与帧指针-fp" class="headerlink" title="过程帧与帧指针 $fp"></a>过程帧与帧指针 $fp</h4><p>为了标记运行中过程建立的栈，除了栈顶的栈指针 $sp</p><p>还可以加一个 <font color="orange">帧指针（frame pointer）$fp</font> 指向栈底</p><p>即过程帧的第一个字</p><br><p>$fp 和 $sp 之间的空间由正在运行的过程使用</p><p>称为<font color="orange">过程帧</font>，也叫活动记录</p><p><img src="%E5%B8%A7%E6%8C%87%E9%92%88.png"></p><h4 id="全局指针-gp-程序的内存分配"><a href="#全局指针-gp-程序的内存分配" class="headerlink" title="全局指针 $gp 程序的内存分配"></a>全局指针 $gp 程序的内存分配</h4><p>为了便于寻找位置固定的数据</p><p>（主程序使用的变量，以及声明为static的变量，统称静态变量）</p><p>使用一个固定指向静态数据区某一位置的全局指针（global pointer）$gp</p><p>程序在内存中包含五段，地址从低到高分别为</p><ol><li><font color="orange">保留段</font></li><li><font color="orange">正文段（代码段</font>），保存指令</li><li><font color="orange">静态数据段</font>，保存静态数据</li><li><font color="orange">动态数据段（堆）</font>，从低往高 “生长”</li><li><font color="orange">栈</font>，从高往低 “生长”</li></ol><p><img src="%E5%9C%A8%E5%A0%86%E4%B8%AD%E4%B8%BA%E6%96%B0%E6%95%B0%E6%8D%AE%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4.png"></p><p>栈和堆此消彼长，实现了内存空间的高效利用</p><h3 id="五种寻址方式"><a href="#五种寻址方式" class="headerlink" title="五种寻址方式"></a>五种寻址方式</h3><p><img src="%E4%BA%94%E7%A7%8D%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.png"></p><blockquote><p>转自：B站 翼云图灵</p><p>参考：计算机组成与设计·硬件/软件接口 原书第5版</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;过程支持&quot;&gt;&lt;a href=&quot;#过程支持&quot; class=&quot;headerlink&quot; title=&quot;过程支持&quot;&gt;&lt;/a&gt;过程支持&lt;/h3&gt;&lt;p&gt;过程（procedure）或函数是程序员进行结构化编程的工具，两者均有助于提高程序的可理解性和代码的可重用性。过程允许程序员每次只需将精力集中在任务的一部分，由于参数能传递数值并返回结果，因此参数承担过程与其他程序、数据之间接口的角色。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机组成与设计" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7安装Docker</title>
    <link href="http://example.com/2023/03/31/Centos7%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://example.com/2023/03/31/Centos7%E5%AE%89%E8%A3%85Docker/</id>
    <published>2023-03-31T12:55:59.000Z</published>
    <updated>2023-03-31T13:10:20.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、安装前必读"><a href="#一、安装前必读" class="headerlink" title="一、安装前必读"></a>一、安装前必读</h2><p>在安装 Docker 之前，先说一下配置，我这里是Centos7 Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。</p><p>注意：本文的命令使用的是 root 用户登录执行，不是 root 的话所有命令前面要加 <code>sudo</code></p><p><strong>1.查看当前的内核版本</strong></p><p><code>uanme -r</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux VM-4-8-centos 3.10.0-1160.71.1.el7.x86_64 <span class="comment">#1 SMP Tue Jun 28 15:37:28 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@VM-4-8-centos ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.71.1.el7.x86_64</span><br><span class="line">[root@VM-4-8-centos ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.使用 root 权限更新 yum 包（生产环境中此步操作需慎重，看自己情况，学习的话随便搞)</p><p><code>yum -y update</code></p><p>这个命令不是必须执行的，看个人情况，后面出现不兼容的情况的话就必须update了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 </span></span><br><span class="line">yum -y update：升级所有包同时也升级软件和系统内核； </span><br><span class="line">yum -y upgrade：只升级所有包，不升级软件和系统内核</span><br></pre></td></tr></table></figure><p>3.卸载旧版本（如果之前安装过的话）</p><p><code>yum remove docker  docker-common docker-selinux docker-engine</code></p><h2 id="二、安装Docker的详细步骤"><a href="#二、安装Docker的详细步骤" class="headerlink" title="二、安装Docker的详细步骤"></a>二、安装Docker的详细步骤</h2><p><strong>1.安装需要的软件包， yum-util 提供 yum-config-manager 功能，另两个是 devicemapper 驱动依赖</strong></p><p><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p><p><strong>2.设置 yum 源</strong></p><p>设置一个yum源，下面两个都可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</span><br></pre></td></tr></table></figure><p>3.选择docker版本并安装</p><ul><li>查看可用版本有哪些</li></ul><p><code>yum list docker-ce --showduplicates | sort -r</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">docker-ce.x86_64            3:23.0.2-1.el7                      docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:23.0.1-1.el7                      docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:23.0.0-1.el7                      docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.23-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><ul><li>选择一个版本并安装：<code>yum install docker-ce-版本号</code></li></ul><p><code>yum -y install docker-ce-18.03.1.ce</code></p><p>4.启动 Docker 并设置开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>5.查看 Docker 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos ~]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:      18.03.1-ce</span><br><span class="line"> API version:  1.37</span><br><span class="line"> Go version:   go1.9.5</span><br><span class="line"> Git commit:   9ee9f40</span><br><span class="line"> Built:        Thu Apr 26 07:20:16 2018</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Orchestrator: swarm</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:      18.03.1-ce</span><br><span class="line">  API version:  1.37 (minimum version 1.12)</span><br><span class="line">  Go version:   go1.9.5</span><br><span class="line">  Git commit:   9ee9f40</span><br><span class="line">  Built:        Thu Apr 26 07:23:58 2018</span><br><span class="line">  OS/Arch:      linux/amd64</span><br><span class="line">  Experimental: <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、安装前必读&quot;&gt;&lt;a href=&quot;#一、安装前必读&quot; class=&quot;headerlink&quot; title=&quot;一、安装前必读&quot;&gt;&lt;/a&gt;一、安装前必读&lt;/h2&gt;&lt;p&gt;在安装 Docker 之前，先说一下配置，我这里是Centos7 Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。&lt;/p&gt;
&lt;p&gt;注意：本文的命令使用的是 root 用户登录执行，不是 root 的话所有命令前面要加 &lt;code&gt;sudo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.查看当前的内核版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uanme -r&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@VM-4-8-centos ~]&lt;span class=&quot;comment&quot;&gt;# uname -a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Linux VM-4-8-centos 3.10.0-1160.71.1.el7.x86_64 &lt;span class=&quot;comment&quot;&gt;#1 SMP Tue Jun 28 15:37:28 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@VM-4-8-centos ~]&lt;span class=&quot;comment&quot;&gt;# uname -r&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.10.0-1160.71.1.el7.x86_64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@VM-4-8-centos ~]&lt;span class=&quot;comment&quot;&gt;# &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx部署</title>
    <link href="http://example.com/2023/03/29/Nginx%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2023/03/29/Nginx%E9%83%A8%E7%BD%B2/</id>
    <published>2023-03-29T12:54:31.000Z</published>
    <updated>2023-03-30T14:19:12.955Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><p>nginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。它是一个俄罗斯人lgor sysoev开发的，作者将源代码开源出来供全球使用。</p><p>nginx比它大哥apache性能改进许多，nginx占用的系统资源更少，支持更高的并发连接，有更高的访问效率。</p><p>nginx不但是一个优秀的web服务软件，还可以作为反向代理，负载均衡，以及缓存服务使用。<br>安装更为简单，方便，灵活。</p><p>nginx可以说是非常nb了</p><h4 id="面试回答nginx技巧"><a href="#面试回答nginx技巧" class="headerlink" title="面试回答nginx技巧"></a>面试回答nginx技巧</h4><ul><li>支持高并发，能支持几万并发连接</li><li>资源消耗少，在3万并发连接下开启10个nginx线程消耗的内存不到200M</li><li>可以做http反向代理和负载均衡</li><li>支持异步网络i/o事件模型epol</li></ul><span id="more"></span><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="1-gcc-安装"><a href="#1-gcc-安装" class="headerlink" title="1. gcc 安装"></a>1. gcc 安装</h3><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装</p><p><code>yum install gcc-c++</code></p><h3 id="2-PCRE-pcre-devel-安装"><a href="#2-PCRE-pcre-devel-安装" class="headerlink" title="2. PCRE pcre-devel 安装"></a>2. PCRE pcre-devel 安装</h3><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。</p><p>nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><p><code>yum install -y pcre pcre-devel</code></p><h3 id="3-zlib-安装"><a href="#3-zlib-安装" class="headerlink" title="3. zlib 安装"></a>3. zlib 安装</h3><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><p><code>yum install -y zlib zlib-devel</code></p><h3 id="4-OpenSSL-安装"><a href="#4-OpenSSL-安装" class="headerlink" title="4. OpenSSL 安装"></a>4. OpenSSL 安装</h3><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</p><p>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><h3 id="5-安装环境代码集合"><a href="#5-安装环境代码集合" class="headerlink" title="5. 安装环境代码集合"></a>5. 安装环境代码集合</h3><p><code>yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel openssl openssl-devel -y</code></p><h3 id="安装、启动-Nginx"><a href="#安装、启动-Nginx" class="headerlink" title="安装、启动 Nginx"></a>安装、启动 Nginx</h3><h4 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1. 下载源码包"></a>1. 下载源码包</h4><p><code>wget -c https://nginx.org/download/nginx-1.12.0.tar.gz</code></p><h4 id="2-解压缩源码"><a href="#2-解压缩源码" class="headerlink" title="2. 解压缩源码"></a>2. 解压缩源码</h4><p><code>tar -zxvf nginx-1.12.0.tar.gz</code></p><h4 id="3-配置，编译安装-开启-Nginx-状态监测功能"><a href="#3-配置，编译安装-开启-Nginx-状态监测功能" class="headerlink" title="3. 配置，编译安装 开启 Nginx 状态监测功能"></a>3. 配置，编译安装 开启 Nginx 状态监测功能</h4><p>编译安装支持开启很多第三方的功能</p><p><code>./configure --prefix=/opt/nginx1-12/ --with-http_ssl_module --with-http_stub_status_module</code></p><p><code>make &amp;&amp; make install</code></p><ul><li>–prefix  指定将 nginx 装到哪里</li><li>–with-http_ssl_module  使 Nginx 支持 https 协议</li><li>–with-http_stub_status_module 性能统计模块</li></ul><h4 id="4-启动-Nginx，进入-sbin-目录，找到-Nginx-启动命令"><a href="#4-启动-Nginx，进入-sbin-目录，找到-Nginx-启动命令" class="headerlink" title="4. 启动 Nginx，进入 sbin 目录，找到 Nginx 启动命令"></a>4. 启动 Nginx，进入 sbin 目录，找到 Nginx 启动命令</h4><p><code>cd sbin</code></p><p><code>./nginx</code>                        #启动</p><p><code>./nginx -s stop</code>            #关闭</p><p><code>./nginx -s reload</code>        #重新加载</p><h3 id="安装完成后的检测"><a href="#安装完成后的检测" class="headerlink" title="安装完成后的检测"></a>安装完成后的检测</h3><p><code>netstat -tunlp | grep 80</code><br><code>curl -I 127.0.0.1</code><br>#如果访问不了，检查selinux，iptables</p><h2 id="Nginx-实战学习"><a href="#Nginx-实战学习" class="headerlink" title="Nginx 实战学习"></a>Nginx 实战学习</h2><ul><li>部署一个静态网站</li><li>基于端口的多虚拟主机</li><li>访问日志</li><li>错误日志</li><li>代理服务</li></ul><h3 id="静态网站配置"><a href="#静态网站配置" class="headerlink" title="静态网站配置"></a>静态网站配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">user root;    <span class="comment"># ngxin的工作用户，必须和启动用户一致</span></span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        <span class="comment"># nginx 通过root指令，确定ngxin的网页文件放在哪里</span></span><br><span class="line">        <span class="comment"># 这个html指的是nginx安装目录下加一个html文件夹</span></span><br><span class="line">            root   /home/wiliiam/web/;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># index参数指的是，首页文件的名字(从/home/wiliiam/web/目录下找index.html文件)</span></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>修改配置文件后，需要重启 Nginx 程序，才能更新配置</li></ul><p><strong>关于Nginx配置文件第一行：user root的问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(ll_env) [root@VM-4-8-centos blog]<span class="comment"># ps -aux | grep nginx</span></span><br><span class="line">nobody     342  0.0  0.1  48600  2328 ?        S    22:29   0:00 nginx: worker process</span><br><span class="line">root       633  0.0  0.2 149360  5124 pts/1    S+   22:30   0:00 vim nginx.conf</span><br><span class="line">root      5110  0.0  0.0 112816   980 pts/0    S+   22:49   0:00 grep --color=auto nginx</span><br><span class="line">root     13835  0.0  0.0  46084  1904 ?        Ss   21:11   0:00 nginx: master process ./nginx</span><br></pre></td></tr></table></figure><ul><li><p>worker process Nginx 的工作用户没有指定，就是nobody</p></li><li><p>启动nginx的是root用户，而工作用户是nginx，两个不一致就会导致403错误</p><p>我们修改工作用户和启动用户一致</p></li></ul><p><strong>重启 Nginx</strong></p><ul><li><p>先验证配置文件语法是否正确</p><p><code>/opt/nginx1-12/sbin/nginx -t</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-8-centos conf]<span class="comment"># /opt/nginx1-12/sbin/nginx -t</span></span><br><span class="line"></span><br><span class="line">nginx: the configuration file /opt/nginx1-12//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /opt/nginx1-12//conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure></li><li><p><font color="orange">指定路径，再重启（否则可能会重启其他的 Nginx）</font></p></li></ul><p><code>/opt/nginx1-12/sbin/nginx -s reload</code></p><h3 id="基于端口的多虚拟主机"><a href="#基于端口的多虚拟主机" class="headerlink" title="基于端口的多虚拟主机"></a>基于端口的多虚拟主机</h3><p>如果每台linux服务器只运行了一个小网站，那么人气低，流量小的草根站长需要承担高额的服务器租赁费，也造成了硬件资源浪费。</p><p>虚拟主机就是将一台服务器分割成多个“虚拟服务器”，每个站点使用各自的硬盘空间，由于省资源，省钱，众多网站都使用虚拟主机来部署网站。</p><p><em>也就是指定不同的端口</em></p><p><img src="1.png"></p><ol><li>虚拟主机的概念就是在web服务里的一个独立的网站站点，这个站点对应独立的域名（IP），具有独立的程序和资源目录，可以独立的对外提供服务。</li><li>这个独立的站点配置是在nginx.conf中使用server{}代码块标签来表示一个虚拟主机。<br>Nginx支持多个server{}标签，即支持多个虚拟主机站点。</li></ol><p>虚拟主机的类型</p><ul><li><p>基于域名的虚拟主机</p><p>通过不同的域名区分不同的虚拟主机，是企业应用最广的虚拟主机。</p></li><li><p>基于端口的虚拟主机</p><p>通过不同的端口来区分不同的虚拟主机，一般用作企业内部网站，不对外直接提供服务的后台，例如<a href="http://www.pythonav.cn:9000/">www.pythonav.cn:9000</a></p></li><li><p>基于IP的虚拟主机</p><p>通过不同的IP区分不同的虚拟主机，此类比较少见，一般业务需要多IP的常见都会在负载均衡中绑定VIP</p></li></ul><p><img src="2.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 第一个虚拟主机网站</span></span><br><span class="line">  server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root   /root/web1/blogproject/templates/blog/;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个虚拟主机网站</span></span><br><span class="line">  server &#123;</span><br><span class="line">      listen       81;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root  /root/web2/blogproject/templates/blog/;</span><br><span class="line">          index  index.html;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><p>Nginx 能够记录用户的每一次访问请求</p><ul><li><p>对于该日志的记录，分析，可以更清晰的掌握服务器的动态信息，比如安全性</p></li><li><p>对于用户行为进行检测，分析</p><ul><li>能够记录出用户访问的时间、次数、频率</li></ul></li></ul><p>我们需要去掉 http 中的 log_format 和 access_log 的注释，即为两个虚拟主机服务开启日志监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改nginx的配置如下</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 我是网站1</span></span><br><span class="line"> server&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 我是网站2</span></span><br><span class="line"> server&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过以下命令持续检测</p><p><code>tail -f /opt/nginx1-12/logs/access.log</code></p><p>通过该 access.log 日志，即可进行更多的日志分析</p><h4 id="http-中对应参数解析"><a href="#http-中对应参数解析" class="headerlink" title="http 中对应参数解析"></a>http 中对应参数解析</h4><ul><li>log_format是日志关键字参数，不能变</li><li>main是日志格式指定的标签，记录日志时通过main标签选择指定的格式。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_addr</span>    记录客户端ip</span><br><span class="line"><span class="variable">$remote_user</span>    远程用户，没有就是 “-”</span><br><span class="line"><span class="variable">$time_local</span> 　　 对应[14/Aug/2018:18:46:52 +0800]</span><br><span class="line"><span class="variable">$request</span>　　　 　对应请求信息<span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span></span><br><span class="line"><span class="variable">$status</span>　　　  　状态码</span><br><span class="line"><span class="variable">$body_bytes_sent</span>　　571字节 请求体的大小</span><br><span class="line"><span class="variable">$http_referer</span>　　对应“-”　　由于是直接输入浏览器就是 -</span><br><span class="line"><span class="variable">$http_user_agent</span>　　客户端身份信息</span><br><span class="line"><span class="variable">$http_x_forwarded_for</span>　　记录客户端的来源真实ip 97.64.34.118</span><br></pre></td></tr></table></figure><p>日志效果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">66.102.6.6 - - [14/Aug/2018:18:46:52 +0800] <span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 571 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36 Google Favicon&quot;</span> <span class="string">&quot;97.64.34.118&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Nginx-限制网站来源IP访问"><a href="#Nginx-限制网站来源IP访问" class="headerlink" title="Nginx 限制网站来源IP访问"></a>Nginx 限制网站来源IP访问</h4><p>如果哪天发现你的nginx很慢，或者检查access.log时候，有一人疯狂请求你的nginx server，那么可以禁止这个IP访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制 ip 或 ip 段访问</span></span><br><span class="line"><span class="comment"># 禁止访问/blog/底下的资源</span></span><br><span class="line"></span><br><span class="line">location /blog &#123;</span><br><span class="line">  deny 122.71.240.254</span><br><span class="line"></span><br><span class="line">  <span class="comment"># alias /opt/nginx1-12/html/blog;</span></span><br><span class="line">  allow 10.1.1.0/16;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Nginx-错误页面优化"><a href="#Nginx-错误页面优化" class="headerlink" title="Nginx 错误页面优化"></a>Nginx 错误页面优化</h4><p>在网站运行过程中，可能因为页面不存在等原因，导致网站无法正常响应请求，此时web服务会返回系统的错误码，但是默认的错误页面很不友好。</p><p>因此我们可以将404，403等页面的错误信息重定向到网站首页或者其他指定的页面，提升用户访问体验。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /root/web/blogproject/templates/blog/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 /root/web/blogproject/templates/blog/ 路径下的 40x.html 错误页面</span></span><br><span class="line">        error_page  404 403 404 405 /40x.html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 40x.html</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&#x27;width:100%;height:100%;&#x27;</span> <span class="attr">src</span>=<span class="string">https://pic1.zhimg.com/80/v2-77a9281a2bebc7a2ea5e02577af266a8_hd.png</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="3.png"></p><h3 id="Nginx-代理服务"><a href="#Nginx-代理服务" class="headerlink" title="Nginx 代理服务"></a>Nginx 代理服务</h3><ul><li>当你访问你的个人 linux </li></ul><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p><strong>正向代理，也就是传说中的代理,他的工作原理就像一个跳板（VPN），简单的说：</strong></p><p><strong>我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器呢，他能访问那个我不能访问的网站，于是我先连上代理服务器，告诉他我需要那个无法访问网站的内容，代理服务器去取回来，然后返回给我。</strong></p><p><img src="4.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># root   /root/web1/blogproject/templates/blog/;</span></span><br><span class="line">        <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">        <span class="comment"># 代理地址</span></span><br><span class="line">        proxy_pass https://baidu.com</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p><strong>对于客户端而言，代理服务器就像是原始服务器</strong></p><p><img src="5.png"></p><p>Nginx 实现负载均衡的组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_http_proxy_module    proxy代理模块，用于把请求抛给服务器节点或者upstream服务器池</span><br></pre></td></tr></table></figure><p>实现一个简单的反向代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 机器准备，两台服务器</span></span><br><span class="line"></span><br><span class="line">master 192.168.11.63  <span class="comment"># 主负载</span></span><br><span class="line">slave 192.168.11.64<span class="comment"># web1</span></span><br></pre></td></tr></table></figure><p>主负载均衡节点的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">        upstream slave_pools&#123;</span><br><span class="line">    server 192.168.11.64:80 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass  http://slave_pools;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时访问master的服务器 192.168.11.63:80 地址，已经会将请求转发给slave的80端口</p><p>除了页面效果的展示以外，还可以通过log(access.log)查看代理效果</p><blockquote><p>转载自：<a href="https://www.cnblogs.com/pyyu/p/9468680.html">https://www.cnblogs.com/pyyu/p/9468680.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Nginx是什么&quot;&gt;&lt;a href=&quot;#Nginx是什么&quot; class=&quot;headerlink&quot; title=&quot;Nginx是什么&quot;&gt;&lt;/a&gt;Nginx是什么&lt;/h2&gt;&lt;p&gt;nginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。它是一个俄罗斯人lgor sysoev开发的，作者将源代码开源出来供全球使用。&lt;/p&gt;
&lt;p&gt;nginx比它大哥apache性能改进许多，nginx占用的系统资源更少，支持更高的并发连接，有更高的访问效率。&lt;/p&gt;
&lt;p&gt;nginx不但是一个优秀的web服务软件，还可以作为反向代理，负载均衡，以及缓存服务使用。&lt;br&gt;安装更为简单，方便，灵活。&lt;/p&gt;
&lt;p&gt;nginx可以说是非常nb了&lt;/p&gt;
&lt;h4 id=&quot;面试回答nginx技巧&quot;&gt;&lt;a href=&quot;#面试回答nginx技巧&quot; class=&quot;headerlink&quot; title=&quot;面试回答nginx技巧&quot;&gt;&lt;/a&gt;面试回答nginx技巧&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;支持高并发，能支持几万并发连接&lt;/li&gt;
&lt;li&gt;资源消耗少，在3万并发连接下开启10个nginx线程消耗的内存不到200M&lt;/li&gt;
&lt;li&gt;可以做http反向代理和负载均衡&lt;/li&gt;
&lt;li&gt;支持异步网络i/o事件模型epol&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Python内置函数和推导式</title>
    <link href="http://example.com/2023/03/22/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <id>http://example.com/2023/03/22/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E6%8E%A8%E5%AF%BC%E5%BC%8F/</id>
    <published>2023-03-22T13:41:45.000Z</published>
    <updated>2023-03-23T15:33:43.179Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今日概要：</p><ul><li>匿名函数</li><li>生成器</li><li>内置函数</li><li><span style='color:orange;'><strong>附加</strong></span>：推导式，属于数据类型的知识，内部的高级的用法会涉及到【生成器】和【函数】的知识。</li></ul><h3 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h3><p>传统的函数的定义包括了：函数名 + 函数体</p><p>匿名函数，则是基于 lamdba 表达式实现定义一个可以没有名字的函数，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_list = [ <span class="keyword">lambda</span> x : x + <span class="number">100</span>, <span class="keyword">lambda</span> x : x + <span class="number">101</span>, <span class="keyword">lambda</span> x : x + <span class="number">102</span>]</span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x1047963b0</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="keyword">lambda</span> x : x + <span class="number">100</span></span><br><span class="line"></span><br><span class="line">res = f1(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">200</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>基于Lambda定义的函数格式为：<code>lambda 参数:函数体</code></p><ul><li><p>参数，支持任意参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: 函数体</span><br><span class="line"><span class="keyword">lambda</span> x1,x2: 函数体</span><br><span class="line"><span class="keyword">lambda</span> *args, **kwargs: 函数体</span><br></pre></td></tr></table></figure></li><li><p>函数体，只能支持单行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上面代码，lambda写法</span></span><br><span class="line"><span class="keyword">lambda</span> x: x + <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>返回值，默认将函数单行代码执行的结果返回给函数的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x: x + <span class="number">100</span></span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 110</span></span><br></pre></td></tr></table></figure></li></ul><p>匿名函数适用于简单的业务处理，可以快速并简单的创建函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + <span class="number">100</span></span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">lambda</span> a1,a2: a1 + a2 + <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="扩展：三元运算"><a href="#扩展：三元运算" class="headerlink" title="扩展：三元运算"></a>扩展：三元运算</h4><p>简单的函数，可以基于lambda表达式实现。</p><p>简单的条件语句，可以基于三元运算实现，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;请写入内容&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;蒙珣&quot;</span> <span class="keyword">in</span> num:</span><br><span class="line">  data = <span class="string">&quot;帅哥&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  data = <span class="string">&quot;美女&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;请写入内容&quot;</span>)</span><br><span class="line">data = <span class="string">&quot;帅哥&quot;</span> <span class="keyword">if</span> <span class="string">&quot;蒙珣&quot;</span> <span class="keyword">in</span> num <span class="keyword">else</span> <span class="string">&quot;美女&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果 =  条件成立时    if   条件   else   不成立</span></span><br></pre></td></tr></table></figure><p><strong>lambda表达式和三元运算没有任何关系，属于两个独立的知识点。</strong></p><p>掌握三元运算后，以后再编写匿名函数时，就可以处理再稍微复杂点的情况了，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x: <span class="string">&quot;大了&quot;</span> <span class="keyword">if</span> x &gt; <span class="number">66</span> <span class="keyword">else</span> <span class="string">&quot;小了&quot;</span></span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 小了</span></span><br><span class="line"></span><br><span class="line">v2 = func(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(v2) <span class="comment"># 大了</span></span><br></pre></td></tr></table></figure><h3 id="2-生成器"><a href="#2-生成器" class="headerlink" title="2.生成器"></a>2.生成器</h3><p>生成器是由函数 + yield 关键字创造出来的写法，在特定情况下，用他可以帮助我们节省内存。（类似C动态分配内存）</p><ul><li><p>生成器函数，但函数中有yield存在时，这个函数就是生产生成器函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="number">444</span>)</span><br></pre></td></tr></table></figure></li><li><p>生成器对象，执行生成器函数时，会返回一个生成器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">444</span>)</span><br><span class="line">    </span><br><span class="line">data = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行生成器函数func，返回的生成器对象。</span></span><br><span class="line"><span class="comment"># 注意：执行生成器函数时，函数内部代码不会执行。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">444</span>)</span><br><span class="line">    </span><br><span class="line">data = func()</span><br><span class="line"></span><br><span class="line">v1 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line">v2 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v2)</span><br><span class="line"></span><br><span class="line">v3 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v3)</span><br><span class="line"></span><br><span class="line">v4 = <span class="built_in">next</span>(data)</span><br><span class="line"><span class="built_in">print</span>(v4)  <span class="comment"># 结束或中途遇到return，程序爆：StopIteration 错误</span></span><br></pre></td></tr></table></figure></li></ul><p>生成器的特点是，记录在函数中的执行位置，下次执行next时，会从上一次的位置基础上再继续向下执行。</p><h4 id="生成器的应用场景"><a href="#生成器的应用场景" class="headerlink" title="生成器的应用场景"></a>生成器的应用场景</h4><ul><li><p>假设要让你生成 300w个随机的4位数，并打印出来。</p><ul><li><p>在内存中一次性创建300w个</p></li><li><p>动态创建，用一个创建一个。</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">val = random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line"><span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">data_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30000</span>):</span><br><span class="line">  val = random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line"> data_list.append(val)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 再使用时，去 data_lsit 中获取即可</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_random_num</span>(<span class="params">max_count</span>):</span></span><br><span class="line">  counter = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> counter &lt; max_counter:</span><br><span class="line">    <span class="keyword">yield</span> random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">data_list = gen_random_num(<span class="number">30000</span>)</span><br><span class="line"><span class="comment"># 再使用时，去 data_list 中获取即可</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;generator object gen_random_num at 0x1027355b0&gt;</span></span><br><span class="line"><span class="string">使用 list() 查看或者使用 for循环</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># print(list(data_list))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>假设让你从某个数据源中获取300w条数据（后期学习操作MySQL 或 Redis等数据源再操作，了解思想即可）。</li></ul><p>​    <img src="iShot_2023-03-23_23.08.39.png"></p><p>所以，当以后需要我们在内存中创建很多数据时，可以想着用基于生成器来实现一点一点生成（用一点生产一点），以节省内存的开销。</p><h4 id="生成器的扩展"><a href="#生成器的扩展" class="headerlink" title="生成器的扩展"></a>生成器的扩展</h4><p>send() 方法会返回生成器所产生的下一个值，或者如果生成器没有产生下一个值就退出则会引发 StopIteration。当调用 send() 来启动生成器时，它必须以  None 作为调用参数，因为这时没有可以接收值 yield 表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    v1 = <span class="keyword">yield</span> <span class="number">1</span>  <span class="comment"># 遇到 yield 将 yield 后面的值返还给 generator.send() 方法，即赋值给n1，yield在还没有赋值时，就已经被封存了，在下次 generator.send() 调用时，才将 666 赋值给v1</span></span><br><span class="line">    <span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">    v2 = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(v2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">333</span>)</span><br><span class="line">    v3 = <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(v3)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">444</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = func()</span><br><span class="line"></span><br><span class="line">n1 = data.send(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"></span><br><span class="line">n2 = data.send(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"></span><br><span class="line">n3 = data.send(<span class="number">777</span>)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br><span class="line"></span><br><span class="line">n4 = data.send(<span class="number">888</span>)</span><br><span class="line"><span class="built_in">print</span>(n4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">222</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">777</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="3.内置函数"></a>3.内置函数</h3><p><img src="iShot_2023-03-23_23.26.59.png"></p><p>Python内部为我们提供了很多方便的内置函数，在此整理出来36个给大家来讲解。</p><ul><li><p>第1组（5个）</p><ul><li><p>abs，绝对值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="built_in">abs</span>(-<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>pow，指数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">5</span>) <span class="comment"># 2的5次方  2**5</span></span><br><span class="line"><span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure></li><li><p>sum，求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">sum</span>([-<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]) <span class="comment"># 可以被迭代-for循环</span></span><br><span class="line"><span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure></li><li><p>divmod，求商和余数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">v1</span>, v<span class="number">2</span> = divmod(<span class="number">9</span>, <span class="number">2</span>)</span><br><span class="line"><span class="attribute">print</span>(v<span class="number">1</span>, v<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>round，小数点后n位（四舍五入）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">round</span>(<span class="number">4.11786</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 4.12</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>第2组：（4个）</p><ul><li><p>min，最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">min</span>(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">56</span>)</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">v2</span> = min([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]) # 迭代的类型（for循环）</span><br><span class="line"><span class="attribute">print</span>(v<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="built_in">min</span>([-<span class="number">11</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>], key=<span class="keyword">lambda</span> x: <span class="built_in">abs</span>(x))</span><br><span class="line"><span class="built_in">print</span>(v3) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></li><li><p>max，最大值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">max</span>(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">56</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line">v2 = <span class="built_in">max</span>([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>])</span><br><span class="line"><span class="built_in">print</span>(v2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="built_in">max</span>([-<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>], key=<span class="keyword">lambda</span> x: x * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(v3) <span class="comment"># 55</span></span><br></pre></td></tr></table></figure></li><li><p>all，是否全部为True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">all</span>(   [<span class="number">11</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="string">&quot;&quot;</span>]   ) <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li><li><p>any，是否存在True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="built_in">any</span>([<span class="number">11</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="string">&quot;&quot;</span>]) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><ul><li><p>- </p></li><li><p>第3组（3个）</p><ul><li>bin，十进制转二进制</li><li>oct，十进制转八进制</li><li>hex，十进制转十六进制</li></ul></li><li><p>第4组（2个）</p><ul><li><p>ord，获取字符对应的unicode码点（十进制）</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = ord(<span class="string">&quot;武&quot;</span>)</span><br><span class="line">print(<span class="name">v1</span>, hex(<span class="name">v1</span>))</span><br></pre></td></tr></table></figure></li><li><p>chr，根据码点（十进制）获取对应字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">chr</span>(<span class="number">27494</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第5组（9个）</p><ul><li><p>int</p></li><li><p>foat</p></li><li><p>str，unicode编码</p></li><li><p>bytes，utf-8、gbk编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;武沛齐&quot;</span>  <span class="comment"># str类型</span></span><br><span class="line"></span><br><span class="line">v2 = v1.encode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># bytes类型</span></span><br><span class="line"></span><br><span class="line">v3 = <span class="built_in">bytes</span>(v1,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="comment"># bytes类型</span></span><br></pre></td></tr></table></figure></li><li><p>bool</p></li><li><p>list</p></li><li><p>dict</p></li><li><p>tuple</p></li><li><p>set</p></li></ul></li><li><p>第6组（13个）</p><ul><li><p>len</p></li><li><p>print</p></li><li><p>input</p></li><li><p>open</p></li><li><p>type，获取数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v1) == <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>range </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>enumerate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="string">&quot;武沛齐&quot;</span>, <span class="string">&quot;alex&quot;</span>, <span class="string">&#x27;root&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(v1, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(num, value)</span><br></pre></td></tr></table></figure></li><li><p>id</p></li><li><p>hash</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">hash</span>(<span class="string">&quot;武沛齐&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>help，帮助信息</p><ul><li>pycharm，不用</li><li>终端，使用</li></ul></li><li><p>zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]</span><br><span class="line">v2 = [<span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>]</span><br><span class="line">v3 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">    </span><br><span class="line">result = <span class="built_in">zip</span>(v1, v2, v3)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li><li><p>callable，是否可执行，后面是否可以加括号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;武沛齐&quot;</span></span><br><span class="line">v2 = <span class="keyword">lambda</span> x: x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">v3</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">callable</span>(v1) ) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(v2))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(v3))</span><br></pre></td></tr></table></figure></li><li><p>sorted，排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">sorted</span>([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&quot;wupeiqi&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">119</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;root&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">29</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;seven&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">9</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">139</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">sorted</span>(info.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data_list = [</span><br><span class="line">    <span class="string">&#x27;1-5 编译器和解释器.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-17 今日作业.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-9 Python解释器种类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-16 今日总结.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-2 课堂笔记的创建.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-15 Pycharm使用和破解（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-12 python解释器的安装（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-13 python解释器的安装（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-8 Python介绍.mp4&#x27;</span>, <span class="string">&#x27;1-7 编程语言的分类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-3 常见计算机基本概念.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-14 Pycharm使用和破解（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-10 CPython解释器版本.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-1 今日概要.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-6 学习编程本质上的三件事.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-18 作业答案和讲解.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-4 编程语言.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-11 环境搭建说明.mp4&#x27;</span></span><br><span class="line">]</span><br><span class="line">result = <span class="built_in">sorted</span>(data_list, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>].split(<span class="string">&quot;-&quot;</span>)[-<span class="number">1</span>]) )</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h3 id="4-推导式"><a href="#4-推导式" class="headerlink" title="4.推导式"></a>4.推导式</h3><p>推导式是Python中提供了一个非常方便的功能，可以让我们通过一行代码实现创建list、dict、tuple、set 的同时初始化一些值。</p><p>请创建一个列表，并在列表中初始化：0、1、2、3、4、5、6、7、8、9…299 整数元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">    data.append(i)</span><br></pre></td></tr></table></figure><ul><li><p>列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_list = [ i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">num_list = [ [i,i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">num_list = [ [i,i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">6</span> ]</span><br></pre></td></tr></table></figure></li><li><p>集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_set = &#123; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_set = &#123; (i,i,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_set = &#123; (i,i,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i&gt;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_dict = &#123; i:i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_dict = &#123; i:(i,<span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">num_dict = &#123; i:(i,<span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i&gt;<span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>元组，<span style="color:red">不同于其他类型。</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不会立即执行内部循环去生成数据，而是得到一个生成器。</span></span><br><span class="line">data = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li></ul><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><ol><li><p>去除列表中每个元素的 <code>.mp4</code>后缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">data_list = [</span><br><span class="line">    <span class="string">&#x27;1-5 编译器和解释器.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-17 今日作业.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-9 Python解释器种类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-16 今日总结.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-2 课堂笔记的创建.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-15 Pycharm使用和破解（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-12 python解释器的安装（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-13 python解释器的安装（win系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-8 Python介绍.mp4&#x27;</span>, <span class="string">&#x27;1-7 编程语言的分类.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-3 常见计算机基本概念.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-14 Pycharm使用和破解（mac系统）.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-10 CPython解释器版本.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-1 今日概要.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-6 学习编程本质上的三件事.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-18 作业答案和讲解.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-4 编程语言.mp4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1-11 环境搭建说明.mp4&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data_list:</span><br><span class="line">    result.append(item.rsplit(<span class="string">&#x27;.&#x27;</span>,<span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">result = [ item.rsplit(<span class="string">&#x27;.&#x27;</span>,<span class="number">1</span>)[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> data_list]</span><br></pre></td></tr></table></figure></li><li><p>将字典中的元素按照 <code>键-值</code>格式化，并最终使用 <code>;</code>连接起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;武沛齐&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>:<span class="string">&quot;xxx@live.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data_list [] </span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    temp = <span class="string">&quot;&#123;&#125;-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k,v)</span><br><span class="line">    temp.append(data_list)</span><br><span class="line">resutl = <span class="string">&quot;;&quot;</span>.join(data)</span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;;&quot;</span>.join( [ <span class="string">&quot;&#123;&#125;-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k,v) <span class="keyword">for</span> k,v <span class="keyword">in</span> info.items()] )</span><br></pre></td></tr></table></figure></li><li><p>将字典按照键从小到大排序，然后在按照如下格式拼接起来。（微信支付API内部处理需求）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&#x27;sign_type&#x27;</span>: <span class="string">&quot;MD5&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;out_refund_no&#x27;</span>: <span class="string">&quot;12323&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;appid&#x27;</span>: <span class="string">&#x27;wx55cca0b94f723dc7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mch_id&#x27;</span>: <span class="string">&#x27;1526049051&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;out_trade_no&#x27;</span>: <span class="string">&quot;ffff&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;nonce_str&#x27;</span>: <span class="string">&quot;sdfdffd&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;total_fee&#x27;</span>: <span class="number">9901</span>,</span><br><span class="line">    <span class="string">&#x27;refund_fee&#x27;</span>: <span class="number">10000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&amp;&quot;</span>.join([<span class="string">&quot;&#123;&#125;=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(key, value) <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">sorted</span>(info.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])])</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_list = [func <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_list = [func(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果（执行出错，通过他可以让你更好的理解执行过程）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + i</span><br><span class="line"></span><br><span class="line">data_list = [func <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">val = data_list[<span class="number">0</span>](<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果（新浪微博面试题）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="keyword">lambda</span> x: x + i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># [函数,函数,函数]   i=9</span></span><br><span class="line"></span><br><span class="line">v1 = data_list[<span class="number">0</span>](<span class="number">100</span>)</span><br><span class="line">v2 = data_list[<span class="number">3</span>](<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(v1, v2)  <span class="comment"># 109 109</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="小高级"><a href="#小高级" class="headerlink" title="小高级"></a>小高级</h4><ol><li><p>推导式支持嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [ i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    data.append(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [ [i,j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) ]</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        data.append([i,j])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一副扑克牌</span></span><br><span class="line">poker_list = [ [color, num] <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>) <span class="keyword">for</span> color <span class="keyword">in</span> [<span class="string">&quot;红桃&quot;</span>, <span class="string">&quot;黑桃&quot;</span>, <span class="string">&quot;方片&quot;</span>, <span class="string">&quot;梅花&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(poker_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">poker_list = [ (color,num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>) <span class="keyword">for</span> color <span class="keyword">in</span> [<span class="string">&quot;红桃&quot;</span>, <span class="string">&quot;黑桃&quot;</span>, <span class="string">&quot;方片&quot;</span>, <span class="string">&quot;梅花&quot;</span>] ]</span><br></pre></td></tr></table></figure></li><li><p>烧脑面试题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span>():</span></span><br><span class="line">       <span class="keyword">return</span> [<span class="keyword">lambda</span> x: i * x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 1. num()并获取返回值  [函数,函数,函数,函数] i=3</span></span><br><span class="line">   <span class="comment"># 2. for循环返回值</span></span><br><span class="line">   <span class="comment"># 3. 返回值的每个元素(2)</span></span><br><span class="line">   result = [m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()]  <span class="comment"># [6,6,6,6]</span></span><br><span class="line">   <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span>():</span></span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">lambda</span> x: i * x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 1. num()并获取返回值  生成器对象</span></span><br><span class="line">   <span class="comment"># 2. for循环返回值</span></span><br><span class="line">   <span class="comment"># 3. 返回值的每个元素(2)</span></span><br><span class="line">   result = [m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()]  <span class="comment"># [0,2,4,6 ]</span></span><br><span class="line">   <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><ol><li><p>匿名函数，基于lambda表达式实现一行创建一个函数。一般用于编写简单的函数。</p></li><li><p>三元运算，用一行代码实现处理简单的条件判断和赋值。</p></li><li><p>生成器，函数中如果yield关键字</p><ul><li>生成器函数</li><li>生成器对象</li><li>执行生成器函数中的代码<ul><li>next</li><li>for（常用）</li><li>send</li></ul></li></ul></li><li><p>内置函数（36个）</p></li><li><p>推导式</p><ul><li>常规操作</li><li>小高级操作</li></ul></li></ol><h3 id="6-作业"><a href="#6-作业" class="headerlink" title="6. 作业"></a>6. 作业</h3><ol><li><p>看代码写结果（这题我做错了…）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v = [ <span class="keyword">lambda</span> :x  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] </span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"><span class="built_in">print</span>(v[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(v[<span class="number">0</span>]())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成了10个函数后，此时的x为9</span></span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">0</span>,-<span class="number">1</span>) <span class="keyword">if</span> i &gt; <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure></li><li><p>看代码写结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="keyword">lambda</span> x:x*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">2</span>) == data[<span class="number">8</span>](<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li><li><p>请用列表推导式实现，踢出列表中的字符串，最终生成一个新的列表保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">&quot;alex&quot;</span>,<span class="number">455</span>,<span class="string">&#x27;eirc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_data_list = [ ... ] <span class="comment"># 请在[]中补充代码实现。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：可以用type判断类型</span></span><br></pre></td></tr></table></figure></li><li><p>请用列表推导式实现，对data_list中的每个元素判断，如果是字符串类型，则计算长度作为元素放在新列表的元素中；如果是整型，则让其值+100 作为元素放在新的列表的元素中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">&quot;alex&quot;</span>,<span class="number">455</span>,<span class="string">&#x27;eirc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_data_list = [ ... ] <span class="comment"># 请在[]中补充代码实现。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：可以基于三元运算实现</span></span><br></pre></td></tr></table></figure></li><li><p>请使用字典推导式实现，将如果列表构造成指定格式字典.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data_list = [</span><br><span class="line">    (<span class="number">1</span>,<span class="string">&#x27;alex&#x27;</span>,<span class="number">19</span>),</span><br><span class="line">    (<span class="number">2</span>,<span class="string">&#x27;老男&#x27;</span>,<span class="number">84</span>),</span><br><span class="line">    (<span class="number">3</span>,<span class="string">&#x27;老女&#x27;</span>,<span class="number">73</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请使用推导式将data_list构造生如下格式：</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">info_dict = &#123;</span></span><br><span class="line"><span class="string">    1:(1,&#x27;alex&#x27;,19),</span></span><br><span class="line"><span class="string">    2:(2,&#x27;老男&#x27;,84),</span></span><br><span class="line"><span class="string">    3:(3,&#x27;老女&#x27;,73)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>有4个人玩扑克牌比大小，请对比字典中每个人的牌的大小，并输入优胜者的姓名（值大的胜利，不必考虑A）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">player = &#123;</span><br><span class="line">    <span class="string">&quot;武沛齐&quot;</span>:[<span class="string">&quot;红桃&quot;</span>,<span class="number">10</span>],</span><br><span class="line">    <span class="string">&quot;alex&quot;</span>:[<span class="string">&quot;红桃&quot;</span>,<span class="number">8</span>],</span><br><span class="line">    <span class="string">&#x27;eric&#x27;</span>:[<span class="string">&quot;黑桃&quot;</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="string">&#x27;killy&#x27;</span>:[<span class="string">&quot;梅花&quot;</span>,<span class="number">12</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尽量多的列举你记得的内置函数？【能记住多少就写多少，不强制去背，在此尽权利写即可，这种公共后续用的多了就自然而然就记住了】</p></li><li><p>请编写一个生成器函数实现生成n个斐波那契数列的值。</p><ul><li><p>什么是斐波那契数列？</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前两个数相加的结果，就是下一个数。</span><br><span class="line">1<span class="number"> 1 </span>2<span class="number"> 3 </span>5<span class="number"> 8 </span>13<span class="number"> 21 </span>34<span class="number"> 55 </span>...</span><br></pre></td></tr></table></figure></li><li><p>代码结构示例，请在此基础上补充代码实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">max_count</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="built_in">input</span>(<span class="string">&quot;请输入要生成斐波那契数列的个数：&quot;</span>)</span><br><span class="line">count = <span class="built_in">int</span>(count)</span><br><span class="line">fib_generator = fib(count)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> fib_generator:</span><br><span class="line">    <span class="built_in">print</span>(num) </span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日概要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匿名函数&lt;/li&gt;
&lt;li&gt;生成器&lt;/li&gt;
&lt;li&gt;内置函数&lt;/li&gt;
&lt;li&gt;&lt;span style=&#39;color:orange;&#39;&gt;&lt;strong&gt;附加&lt;/strong&gt;&lt;/span&gt;：推导式，属于数据类型的知识，内部的高级的用法会涉及到【生成器】和【函数】的知识。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-匿名函数&quot;&gt;&lt;a href=&quot;#1-匿名函数&quot; class=&quot;headerlink&quot; title=&quot;1.匿名函数&quot;&gt;&lt;/a&gt;1.匿名函数&lt;/h3&gt;&lt;p&gt;传统的函数的定义包括了：函数名 + 函数体&lt;/p&gt;
&lt;p&gt;匿名函数，则是基于 lamdba 表达式实现定义一个可以没有名字的函数，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data_list = [ &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;102&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(data_list[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&amp;lt;function &amp;lt;&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt;&amp;gt; at &lt;span class=&quot;number&quot;&gt;0x1047963b0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f1 = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : x + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res = f1(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python函数进阶</title>
    <link href="http://example.com/2023/02/26/Python%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2023/02/26/Python%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</id>
    <published>2023-02-26T05:52:05.000Z</published>
    <updated>2023-02-28T15:26:56.168Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><ul><li>*args</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(args)<span class="comment"># 元组类型 (22,)(22,33,99)()</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 只能按照位置传参</span></span><br><span class="line">func(<span class="number">22</span>)</span><br><span class="line">func(<span class="number">22</span>,<span class="number">33</span>)</span><br><span class="line">func(<span class="number">22</span>,<span class="number">33</span>,<span class="number">99</span>)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>**kwargs</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(kwargs)<span class="comment"># 字典类型 &#123;&quot;n1&quot;:&quot;蒙珣&quot;&#125; &#123;&#x27;n1&#x27;:&#x27;蒙珣&#x27;,&#x27;age&#x27;:18,&#x27;email&#x27;:&#x27;mengxun@11.com&#x27;&#125; &#123;&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 只能按关键字传参</span></span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>)</span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>,email=<span class="string">&quot;mengxun@11.com&quot;</span>)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>*args,**kwargs</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(args,kwargs)<span class="comment"># (22,33,99) (22,)&#123;&#x27;n1&#x27;:&#x27;蒙珣&#x27;,&#x27;age&#x27;:18&#125; ()&#123;&#125;</span></span><br><span class="line">  </span><br><span class="line">func(<span class="number">22</span>,<span class="number">33</span>,<span class="number">99</span>)</span><br><span class="line">func(n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line">func(<span class="number">22</span>,n1=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>提示：是否还记得字符串格式化时的format功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;我叫&#123;&#125;,今年&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;蒙珣&quot;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">v2 = <span class="string">&quot;我叫&#123;name&#125;,今年&#123;age&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># def format(*args,**kwargs):</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="参数内存地址相关"><a href="#参数内存地址相关" class="headerlink" title="参数内存地址相关"></a>参数内存地址相关</h4><p>如果想查看某个值在内存中的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addr = <span class="built_in">id</span>(v1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(addr)</span><br><span class="line"><span class="number">4347695248</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v1))</span><br><span class="line"><span class="number">4347824448</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v2))</span><br><span class="line"><span class="number">4347825216</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2 = v1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v1))</span><br><span class="line"><span class="number">4346072768</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(v2))</span><br><span class="line"><span class="number">4346072768</span></span><br></pre></td></tr></table></figure><p><font color="orange"><strong>记住一句话：函数执行传参时，传递的是内存地址</strong></font></p><p>即：python传参默认传递的是内存地址</p><p>Python参数的这一特性有两个好处：</p><ul><li>节省内存</li><li>对于可变类型且函数中修改元素的内容，所有的地方都会修改。可变类型：列表、字典、集合。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可变类型 &amp; 修改内部</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="meta">... </span> data.append(<span class="number">999</span>)</span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(v1)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">999</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊情况：可变类型 &amp; 重新赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="meta">... </span> data = [<span class="string">&quot;蒙珣&quot;</span>,<span class="string">&quot;william&quot;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(v1)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊情况：不可变类型，无法修改内部元素，只能重新赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="meta">... </span> data = <span class="string">&quot;William&quot;</span></span><br><span class="line"><span class="meta">... </span> <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">William</span><br></pre></td></tr></table></figure><h4 id="函数的返回值是内存地址"><a href="#函数的返回值是内存地址" class="headerlink" title="函数的返回值是内存地址"></a>函数的返回值是内存地址</h4><p>其他很多编程语言执行函数时，默认传参时会将数据重新拷贝一份，会浪费内存</p><p>当然，如果你不想让外部的变量和函数内部参数的变量一致，也可以选择将外部值拷贝一份，再传给函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变类型 &amp; 修改内部修改</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">data</span>):</span></span><br><span class="line">  data.append(<span class="number">999</span>)</span><br><span class="line">  </span><br><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="comment"># 拷贝一份数据</span></span><br><span class="line">new_v1 = copy.deepcopy(v1)</span><br><span class="line">func(new_v1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br></pre></td></tr></table></figure><p>函数内存地址引用的变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  data = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">  </span><br><span class="line">v1 = func()</span><br><span class="line"><span class="built_in">print</span>(v1)<span class="comment"># [11,22,33]</span></span><br><span class="line"></span><br><span class="line">v2 = func()</span><br><span class="line"><span class="built_in">print</span>(v2)<span class="comment"># [11,22,33]</span></span><br></pre></td></tr></table></figure><p>上述代码的执行过程：</p><ul><li>执行func函数</li><li><code>data = [11,22,33]</code> 创建一块内存区域，内部存储 [11, 22, 33]，data变量指向这块内存地址 10000001110。</li><li><code>return data</code> 返回data指向的内存地址</li><li>v1接收返回值，所以v1和data都指向<code>[11,22,33]</code>的内存地址（两个变量质量此内存，引用计数器为2）</li><li>由函数执行完毕后，函数内部的变量都会被释放。（即：删除data变量，内存地址的引用计数器-1）</li></ul><p>所以，最终v1只想的函数内部创建的那块内存地址。（v1指向的1000001110内存地址）</p><ul><li>执行func函数</li><li><code>data = [11,22,33]</code> 创建一块内存区域，内部存储 [11, 22, 33]，data变量指向这块内存地址 11111001110。</li><li><code>return data</code> 返回data指向的内存地址</li><li>v2接收返回值，所以v1和data都指向<code>[11,22,33]</code>的内存地址（两个变量质量此内存，引用计数器为2）</li><li>由函数执行完毕后，函数内部的变量都会被释放。（即：删除data变量，内存地址的引用计数器-1）</li></ul><p>所以，最终v1指向的函数内部创建的那块内存地址。（v1指向的 11111001110）</p><h4 id="参数的默认值【面试题】"><a href="#参数的默认值【面试题】" class="headerlink" title="参数的默认值【面试题】"></a>参数的默认值【面试题】</h4><p>这个知识点在面试题中出现的概率比较高，但真正实际开发中用的比较少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=<span class="number">18</span></span>):</span></span><br><span class="line">  <span class="built_in">print</span>(a1,a2)</span><br></pre></td></tr></table></figure><blockquote><p>原理：Python在创建函数（未执行）时，如果发现函数的参数中有默认值，则在函数内部会创建一块区域并维护这个值</p><ul><li><p>执行函数未传值时，则让a2指向函数维护的那个值的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="string">&quot;root&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>执行函数传值时，则让a2指向新传入的值的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="string">&quot;admin&quot;</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>在特定情况<font color="orange">【默认参数的值是可变类型】&amp;【函数内部会修改这个值】</font></p><ul><li><p>坑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在函数内存中会维护一块区域存储 [1,2,666] 100010001</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=[<span class="number">1</span>,<span class="number">2</span>]</span>):</span></span><br><span class="line">  a2.append(<span class="number">666</span>)</span><br><span class="line">  <span class="built_in">print</span>(a1,a2)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># a1 = 100</span></span><br><span class="line"><span class="comment"># a2 -&gt; 100010001</span></span><br><span class="line">func(<span class="number">100</span>)<span class="comment"># 100 [1,2,666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a1 = 200</span></span><br><span class="line"><span class="comment"># a2 -&gt; 100010001</span></span><br><span class="line">func(<span class="number">200</span>)<span class="comment"># 200 [1,2,666,666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a1 = 99</span></span><br><span class="line"><span class="comment"># a2 -&gt; 111111101</span></span><br><span class="line">func(<span class="number">99</span>,[<span class="number">77</span>,<span class="number">99</span>])<span class="comment"># 99 [77,99,666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a1 = 300</span></span><br><span class="line"><span class="comment"># a2 -&gt; 100010001</span></span><br><span class="line">func(<span class="number">300</span>)<span class="comment"># 300 [1,2,666,666,666]</span></span><br></pre></td></tr></table></figure></li><li><p>大坑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在内部会维护一块区域存储[1,2],内存地址 1010101010</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=[<span class="number">1</span>,<span class="number">2</span>]</span>):</span></span><br><span class="line">  a2.append(a1)</span><br><span class="line">  <span class="keyword">return</span> a2</span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)<span class="comment"># [1,2,10]</span></span><br><span class="line"></span><br><span class="line">v2 = func(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(v2)<span class="comment"># [1,2,10,20]</span></span><br><span class="line"></span><br><span class="line">v3 = func(<span class="number">30</span>,[<span class="number">11</span>,<span class="number">22</span>])</span><br><span class="line"><span class="built_in">print</span>(v3)<span class="comment"># [11,22,30]</span></span><br><span class="line"></span><br><span class="line">v4 = func(<span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(v4)<span class="comment"># [1,2,10,20,40]</span></span><br></pre></td></tr></table></figure></li><li><p>深坑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2=[<span class="number">1</span>,<span class="number">2</span>]</span>):</span></span><br><span class="line">  a2.append(al)</span><br><span class="line">  <span class="keyword">return</span> a2</span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">10</span>)</span><br><span class="line">v2 = func(<span class="number">20</span>)</span><br><span class="line">v3 = func(<span class="number">30</span>,[<span class="number">11</span>,<span class="number">22</span>])</span><br><span class="line">v4 = func(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v1)<span class="comment"># [1,2,10,20,40]</span></span><br><span class="line"><span class="built_in">print</span>(v2)<span class="comment"># [1,2,10,20,40]</span></span><br><span class="line"><span class="built_in">print</span>(v3)<span class="comment"># [11,22,30]</span></span><br><span class="line"><span class="built_in">print</span>(v4)<span class="comment"># [1,2,10,20,40]</span></span><br></pre></td></tr></table></figure><p>V1,V2,V4用的都是同一块内存</p></li></ul><h4 id="动态参数补充"><a href="#动态参数补充" class="headerlink" title="动态参数补充"></a>动态参数补充</h4><p>实参使用*，即在执行函数时也可以用*</p><ul><li><p>形参固定，实参用<code>*和**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(a1,a2)</span><br><span class="line">  </span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>)<span class="comment"># 11 22</span></span><br><span class="line">func(a1=<span class="number">1</span>,a2=<span class="number">2</span>)<span class="comment"># 1 2</span></span><br><span class="line"></span><br><span class="line">func(*[<span class="number">11</span>,<span class="number">22</span>])<span class="comment"># 11 22</span></span><br><span class="line">func(**&#123;<span class="string">&quot;a1&quot;</span>:<span class="number">11</span>,<span class="string">&quot;a2&quot;</span>:<span class="number">22</span>&#125;)<span class="comment"># 11 22</span></span><br></pre></td></tr></table></figure></li><li><p>形参用<code>*和** </code>，实参也用<code>*和**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(args,kwargs)</span><br><span class="line">  </span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>,name=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">func([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>],&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">2</span>&#125;)<span class="comment"># ([11, 22, 33], &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 2&#125;) &#123;&#125;</span></span><br><span class="line">func(*[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>],**&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">2</span>&#125;)<span class="comment"># (11, 22, 33) &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 值得注意：按照这个方式将数据传给args和kwargs时，数据是会重新拷贝的（可以理解为内部循环每个元素并设置到args和kwargs中）</span></span><br></pre></td></tr></table></figure></li></ul><p>所以，在使用format字符串格式化时，可以这样使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;我是&#123;&#125;,年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;蒙珣&quot;</span>,<span class="number">18</span>)</span><br><span class="line">v2 = <span class="string">&quot;我是&#123;name&#125;,年龄：&#123;age&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;蒙珣&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">v3 = <span class="string">&quot;我是&#123;&#125;,年龄：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(*[<span class="string">&quot;蒙珣&quot;</span>,<span class="number">18</span>])</span><br><span class="line">v4 = <span class="string">&quot;我是&#123;name&#125;,年龄：&#123;age&#125;&quot;</span>.<span class="built_in">format</span>(**&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;蒙珣&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="函数做元素"><a href="#函数做元素" class="headerlink" title="函数做元素"></a>函数做元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">data_list = [<span class="string">&quot;mengxun&quot;</span>,<span class="string">&quot;蒙珣&quot;</span>,func,func()]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">0</span>])<span class="comment"># mengxun</span></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">1</span>])<span class="comment"># 蒙珣</span></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">2</span>])<span class="comment"># func函数</span></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">3</span>])<span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line">res = data_list[<span class="number">2</span>]()</span><br><span class="line"><span class="built_in">print</span>(res)<span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list[<span class="number">2</span>]())<span class="comment"># 123</span></span><br></pre></td></tr></table></figure><p><strong>注意：函数同时也可以被哈希，所以函数名通常也可以当做集合的元素、字典的键</strong></p><p>掌握这个知识后，对后续的项目开发有很大的帮助，例如，在项目中遇到根据选择不同操作时：</p><ul><li><p>情景1，例如：开发一个类似微信的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_image</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_emoji</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送表情&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送文件&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎使用xx系统&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择：1.发送消息；2.发送图片；3.发送表情；4.发送文件&quot;</span>)</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&quot;输入选择的序号&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">  send_message()</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">  send_image()</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">  send_emoji()</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">  send_file()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>其实这种大量使用 if 判断不是一个很好的方式，我们可以将其放入字典中再使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_image</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_emoji</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送表情&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送文件&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">function_dict = &#123;</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: send_message,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: send_image,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: send_emoji,</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: send_file</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎使用xx系统&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择：1.发送消息；2.发送图片；3.发送表情；4.发送文件&quot;</span>)</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&quot;输入选择的序号&quot;</span>)</span><br><span class="line"></span><br><span class="line">func = function_dict.get(choice)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> func:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="comment"># 执行函数</span></span><br><span class="line">  func()</span><br></pre></td></tr></table></figure></li></ul><p>上述情况，在参数相同时才可用，如果参数不一致，会出错。</p><ul><li><p>情景2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>(<span class="params">phone,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_image</span>(<span class="params">img_path,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_emoji</span>(<span class="params">emoji</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送表情&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>(<span class="params">path</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送文件&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名和参数</span></span><br><span class="line">function_dict = &#123;</span><br><span class="line">  <span class="string">&quot;1&quot;</span>:[send_message,[<span class="string">&#x27;1513121255089&#x27;</span>,<span class="string">&#x27;你好&#x27;</span>]],</span><br><span class="line">  <span class="string">&quot;2&quot;</span>:[send_image,[<span class="string">&#x27;xxx/xxx/xx.png&#x27;</span>,<span class="string">&#x27;消息内容&#x27;</span>]],</span><br><span class="line">  <span class="string">&quot;3&quot;</span>:[send_emoji,[<span class="string">&quot;😊&quot;</span>]],</span><br><span class="line">  <span class="string">&quot;4&quot;</span>:[send_file,[<span class="string">&#x27;xx.zip&#x27;</span>]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎使用xx系统&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择：1.发送消息；2.发送图片；3.发送表情；4.发送文件&quot;</span>)</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&quot;输入选择的序号&quot;</span>)</span><br><span class="line"></span><br><span class="line">item = function_dict.get(choice)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> item:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="comment"># 执行函数</span></span><br><span class="line">  func = item[<span class="number">0</span>]</span><br><span class="line">  param_list = item[<span class="number">1</span>]</span><br><span class="line">  func(*param_list)</span><br></pre></td></tr></table></figure></li><li><p>情景2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">mobile,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送信息&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span>(<span class="params">to_email,subject,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送图片&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wechat</span>(<span class="params">user_id,content</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;发送微信&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func_list = [</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>: send_msg, <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&#x27;mobile&#x27;</span>: <span class="string">&quot;17610837191&quot;</span>, <span class="string">&quot;content&quot;</span>:<span class="string">&quot;您有新短息&quot;</span>&#125;&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>: send_email, <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&#x27;to_emial&#x27;</span>: <span class="string">&quot;mengxu@117.com&quot;</span>, <span class="string">&quot;subject&quot;</span>: <span class="string">&quot;报警消息&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;硬盘容量不够用了&quot;</span>&#125;&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;name&quot;</span>: send_wechat, <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&#x27;user_id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&quot;出去玩吗&quot;</span>&#125;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> func_list:</span><br><span class="line">  func = item[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">  param_dict = item[<span class="string">&#x27;params&#x27;</span>]</span><br><span class="line">  func(**param_dict)</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h4><p>上述示例中的函数均定义在全局作用域，其实函数也可以定义在局部作用域，这样函数呗局部作用域和其子作用域中调用（函数的嵌套）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span>():</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;BBBB&quot;</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CCCC&quot;</span>)</span><br><span class="line">    inner()</span><br><span class="line">    func()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;DDDD&quot;</span>)</span><br><span class="line">    </span><br><span class="line">handler()</span><br><span class="line">-------------------</span><br><span class="line">BBBB</span><br></pre></td></tr></table></figure><p>到现在你会发现，只要理解数据定义时所存在的作用域，并根据从上到下代码执行过程进行分析，再怎么嵌套都可以搞定</p><p>现在的你可能有疑问：为什么要这么嵌套定义？把函数都定义在全局不好吗？</p><p>其实，大多数情况下我们都会将函数定义在全局，不会嵌套着定义函数。不过，当我们定义一个函数去实现某功能，想要将内部功能拆分成N个函数，又担心这个N个函数放在全局会与其他函数名冲突时（尤其多人协同开发）可以选择使用函数的嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  f1()</span><br><span class="line">  f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  f1()</span><br><span class="line">  f2()</span><br></pre></td></tr></table></figure><p>![image-20230227222215296](/Users/william/Library/Application Support/typora-user-images/image-20230227222215296.png)</p><p>![image-20230227222321268](/Users/william/Library/Application Support/typora-user-images/image-20230227222321268.png)</p><p>![image-20230227222345169](/Users/william/Library/Application Support/typora-user-images/image-20230227222345169.png)</p><h4 id="嵌套引发作用域问题"><a href="#嵌套引发作用域问题" class="headerlink" title="嵌套引发作用域问题"></a>嵌套引发作用域问题</h4><p><strong>函数作用域分析1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">  name = <span class="string">&quot;mengxun&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">  inner()</span><br><span class="line">  </span><br><span class="line">run()</span><br></pre></td></tr></table></figure><ul><li><p>函数在执行过程中，先创建了一个全局作用域 <code>name = 蒙珣</code> ，然后创建了一个全局作用域<code>run函数</code>。</p></li><li><p>之后在我们调用<code>函数run()</code>时，该函数在内部声明了一个局部作用域 <code>name = mengxun</code>，而后又声明了一个局部作用域的函数为<code>inner函数</code>。</p></li><li><p>在函数内部中，他自己调用 <code>inner()</code>，先从函数内部寻找，是否有 <code>inner</code> 函数。如果有则调用内部函数，如果没有则调用外部函数。</p></li><li><p>最后执行 inner函数，结果为<code>mengxun</code></p></li></ul><p><img src="%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%88%86%E6%9E%901.png" alt="函数作用域分析1"></p><p><strong>函数作用域分析2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">  name = <span class="string">&quot;mengxun&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line">  </span><br><span class="line">v1 = run()</span><br><span class="line">v1()</span><br><span class="line"></span><br><span class="line">v2 = run()</span><br><span class="line">v2()</span><br></pre></td></tr></table></figure><ul><li>函数在执行过程中，先创建了一个全局作用域 <code>name = 蒙珣</code>，然后创建了一个全局作用域 <code>run函数</code></li><li>之后我们调用<code>函数run()</code>，并将其声明成全局变量 v1</li><li>此时，<code>函数run()</code>内部，开始声明局部变量<code>name = mengxun</code>，并返回<code>局部函数inner()</code>的内存地址</li><li>接着，我们调用<code>全局变量v1</code>，于是开始执行<code>run函数</code>内部的<code>inner函数</code></li><li><code>inner函数</code>先从内部找<code>name</code>变量，如果内部没有<code>name</code>变量，就开始在上一级函数中寻找<code>name</code>变量，并使用。</li><li>最后打印 mengxun</li><li>声明全局变量v2，同上。不同的是，v2是创建的不同于v1的另一个调用栈。</li></ul><p><img src="%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%88%86%E6%9E%902.png" alt="函数作用域分析2"></p><p><strong>函数作用域分析3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;蒙珣&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">  name = <span class="string">&quot;mengxun&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">  <span class="keyword">return</span> [inner,inner,inner]</span><br><span class="line"></span><br><span class="line">func_list = run()</span><br><span class="line">func_list[<span class="number">2</span>]()</span><br><span class="line">func_list[<span class="number">1</span>]()</span><br><span class="line"></span><br><span class="line">funcs = run()</span><br><span class="line">funcs[<span class="number">2</span>]()</span><br><span class="line">funcs[<span class="number">1</span>]()</span><br></pre></td></tr></table></figure><p>三句话搞定作用域：</p><ul><li>优先在自己的作用域找，自己没有就去上级作用域</li><li>在作用域中寻找值时，要确保此次此刻值是什么</li><li>分析函数的执行，并确定函数<strong>作用域链</strong>（函数嵌套）</li></ul><p>![image-20230227224253973](/Users/william/Library/Application Support/typora-user-images/image-20230227224253973.png)</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;动态参数&quot;&gt;&lt;a href=&quot;#动态参数&quot; class=&quot;headerlink&quot; title=&quot;动态参数&quot;&gt;&lt;/a&gt;动态参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;*args&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;*args&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(args)		&lt;span class=&quot;comment&quot;&gt;# 元组类型 (22,)(22,33,99)()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 只能按照位置传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;**kwargs&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;**kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(kwargs)		&lt;span class=&quot;comment&quot;&gt;# 字典类型 &amp;#123;&amp;quot;n1&amp;quot;:&amp;quot;蒙珣&amp;quot;&amp;#125; &amp;#123;&amp;#x27;n1&amp;#x27;:&amp;#x27;蒙珣&amp;#x27;,&amp;#x27;age&amp;#x27;:18,&amp;#x27;email&amp;#x27;:&amp;#x27;mengxun@11.com&amp;#x27;&amp;#125; &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 只能按关键字传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;,email=&lt;span class=&quot;string&quot;&gt;&amp;quot;mengxun@11.com&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;*args,**kwargs&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;*args,**kwargs&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(args,kwargs)		&lt;span class=&quot;comment&quot;&gt;# (22,33,99) (22,)&amp;#123;&amp;#x27;n1&amp;#x27;:&amp;#x27;蒙珣&amp;#x27;,&amp;#x27;age&amp;#x27;:18&amp;#125; ()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,n1=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;提示：是否还记得字符串格式化时的format功能&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;v1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;我叫&amp;#123;&amp;#125;,今年&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v2 = &lt;span class=&quot;string&quot;&gt;&amp;quot;我叫&amp;#123;name&amp;#125;,今年&amp;#123;age&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(name=&lt;span class=&quot;string&quot;&gt;&amp;quot;蒙珣&amp;quot;&lt;/span&gt;,age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# def format(*args,**kwargs):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>撒哈拉的故事</title>
    <link href="http://example.com/2023/02/23/%E6%92%92%E5%93%88%E6%8B%89%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://example.com/2023/02/23/%E6%92%92%E5%93%88%E6%8B%89%E7%9A%84%E6%95%85%E4%BA%8B/</id>
    <published>2023-02-23T14:50:49.000Z</published>
    <updated>2023-02-23T15:05:29.331Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我每想你一次，天上便落下一粒沙，从此便有了撒哈拉。每想你一次，天上就掉下一滴水，于是形成了太平洋。</p><span id="more"></span><p>这又是一本去年就看完的书，但是一直比较懒就没有写下读书感受，现在来补一下。</p><blockquote><p>漫漫的黄沙，无边而庞大的天空下，只有我们两个渺小的身影在走着，四周寂寥的很。沙漠，在这个时候真是美极了。</p></blockquote><blockquote><p>我不是妇女解放运动的支持者，但是我极不愿在结婚后失去独立的人格和内心的自由自在化，所以我一再强调，婚后我还是“我行我素”，要不然不结婚。荷西当时对我说：“我就是要你‘你行你素’，失去了你的个性和作风，我何必娶你呢！”</p></blockquote><blockquote><p>“沙伊达能迷住他的不过是情欲上的给予，而这个沙仑一定要将沙伊达的肉体，解释做他这一生所有缺乏的东西的代表，他要的是爱，是亲情，是家，是温暖。这么一个拘谨孤单年轻的心，碰到一点即使是假的爱情，也当然要不顾一切地去抓住了。”</p></blockquote><blockquote><p>“我在想，飞蛾扑火时，一定是极其快乐幸福的。”</p></blockquote><blockquote><p>长久的沙漠生活，只使人学到一个好处，任何一点点现实生活上的享受，都附带地使心灵得到无限的满足和升华。</p></blockquote><blockquote><p>“去海边，穿过沙漠一个来回，汽油也是不得了。”<br>“去捉鱼呀，捉到了做咸鱼晒干，我们可以省菜钱，也可以抵汽油钱。”我的劲一向是很大的，说到玩，决不气馁。</p></blockquote><blockquote><p>友情也是无价的财富，我只有这么安慰他。</p></blockquote><blockquote><p>“我在想，我正疯狂地爱上了一个英俊的跛足军官，我正跟他在这高原上散步，四周长满了美丽的石南花，风吹着我的乱发，他正热烈地注视着我——浪漫而痛苦的日子啊！”我悲叹着。</p></blockquote><blockquote><p>人，是最害怕认识自己的动物</p></blockquote><blockquote><p>生命，在这样荒僻落后而贫苦的地方，一样欣欣向荣地滋长着，它，并不是挣扎着在生存，对于沙漠的居民而言，他们在此地的生老病死都好似是如此自然的事。我看着那些上升的烟火，觉得他们安详得近乎优雅起来。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;我每想你一次，天上便落下一粒沙，从此便有了撒哈拉。每想你一次，天上就掉下一滴水，于是形成了太平洋。&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>北京故事</title>
    <link href="http://example.com/2023/02/21/%E5%8C%97%E4%BA%AC%E6%95%85%E4%BA%8B/"/>
    <id>http://example.com/2023/02/21/%E5%8C%97%E4%BA%AC%E6%95%85%E4%BA%8B/</id>
    <published>2023-02-21T14:45:15.000Z</published>
    <updated>2023-02-21T14:48:51.294Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-DlAixTNQ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="494424786" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div></br><p>这本书其实在去年11月就已经读完，对于书籍前面的详细描写，后面感觉略有一笔带过之嫌。</p><p>我挺喜欢蓝宇这个人的，初遇悍东的胆怯与怯懦。</p><p>再到，不远万里，为见心上人在最寒冷的冬天，穿上最单薄也是最“华丽”的衣服。</p><p>对于悍东所做的他早有察觉，却什么也不说，什么也做不了，他深知这份爱对于眼前这个人来说，“分文不值”。</p><p>我其实挺为蓝宇所抱不平的，这么傻傻的守着一个渣男值得吗。为他放弃前程，放弃追求者。在这份苦海中苦苦挣扎，值得吗？</p><p>蓝宇爱的太深，爱的太深了，以至于分别两年都不曾走出这份感情。</p><p>阳光、开朗、乐观、坚毅、忠诚、廉洁、正直他几乎是一切美好品德的代名词，但也是个十足拧巴的人，每一个用情至深的人，或许都是这样吧。《面纱》里的瓦尔特是，蓝宇也是。</p><p>每每在苦海中挣扎，毅然决然选择抛弃自己的人，都在用刀刺入读者的心。也许就是这样读者才能深切感受到人物的那份疼痛吧。</p><p>相比于电影，《北京故事》这本书给人以更多的想象。《蓝宇》是部好电影，在我看来刘烨，没有演出他们分别时蓝宇饱受苦难后，心性成长后的气魄。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>python更改打印颜色</title>
    <link href="http://example.com/2023/02/07/python%E6%9B%B4%E6%94%B9%E6%89%93%E5%8D%B0%E9%A2%9C%E8%89%B2/"/>
    <id>http://example.com/2023/02/07/python%E6%9B%B4%E6%94%B9%E6%89%93%E5%8D%B0%E9%A2%9C%E8%89%B2/</id>
    <published>2023-02-07T13:20:42.000Z</published>
    <updated>2023-02-07T13:22:07.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>python 更改打印颜色</p><p><strong>终端的字符颜色是用转义序列控制的，是文本模式下的系统显示功能，和具体的语言无关。转义序列是以ESC开头,即用\033来完成（ESC的ASCII码用十进制表示是27，用八进制表示就是033）。</strong></p><span id="more"></span><p>首先，向终端输出彩色字符，色彩的设置由目标终端文字系统和<strong>转义字符</strong>控制，与具体的编程语言无关。其格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[文字效果;前景色;背景色m文字内容\033[0m&quot;</span>) </span><br></pre></td></tr></table></figure><p>显示颜色的参数：</p><table><thead><tr><th>显示方式</th><th>效果</th><th>前景色</th><th>背景色</th><th>颜色描述</th></tr></thead><tbody><tr><td>0</td><td>终端默认设置</td><td>30</td><td>40</td><td>黑色</td></tr><tr><td>1</td><td>高亮显示</td><td>31</td><td>41</td><td>红色</td></tr><tr><td>4</td><td>使用下划线</td><td>32</td><td>42</td><td>绿色</td></tr><tr><td>5</td><td>闪烁</td><td>33</td><td>43</td><td>黄色</td></tr><tr><td>7</td><td>反白显示</td><td>34</td><td>44</td><td>蓝色</td></tr><tr><td>8</td><td>不可见</td><td>35</td><td>45</td><td>紫红色</td></tr><tr><td>22</td><td>非高亮显示</td><td>36</td><td>46</td><td>青蓝色</td></tr><tr><td>24</td><td>去下划线</td><td>37</td><td>47</td><td>白色</td></tr><tr><td>25</td><td>去闪烁</td><td></td><td></td><td></td></tr><tr><td>27</td><td>非反白显示</td><td></td><td></td><td></td></tr><tr><td>28</td><td>可见</td><td></td><td></td><td></td></tr></tbody></table><p><a href="https://blog.csdn.net/wls666/article/details/100867234">参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以根据自己的需求，把常用的封装起来，用的时候直接调用就可以了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></span><br><span class="line">    HEADER = <span class="string">&#x27;\033[95m&#x27;</span></span><br><span class="line">    OKBLUE = <span class="string">&#x27;\033[94m&#x27;</span></span><br><span class="line">    OKGREEN = <span class="string">&#x27;\033[92m&#x27;</span></span><br><span class="line">    WARNING = <span class="string">&#x27;\033[93m&#x27;</span></span><br><span class="line">    FAIL = <span class="string">&#x27;\033[91m&#x27;</span></span><br><span class="line">    ENDC = <span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line">    BOLD = <span class="string">&#x27;\033[1m&#x27;</span></span><br><span class="line">    UNDERLINE = <span class="string">&#x27;\033[4m&#x27;</span></span><br><span class="line">    END = <span class="string">&#x27;\033[0m &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bcolors.HEADER+<span class="string">&quot;header 颜色 okblue&quot;</span>+bcolors.OKBLUE)</span><br><span class="line"><span class="built_in">print</span>(bcolors.WARNING+<span class="string">&#x27;12345&#x27;</span>+bcolors.END)</span><br></pre></td></tr></table></figure><p>[参考：<a href="https://blog.csdn.net/qq_38236620/article/details/127474029]">https://blog.csdn.net/qq_38236620/article/details/127474029]</a>(</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python 更改打印颜色&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;终端的字符颜色是用转义序列控制的，是文本模式下的系统显示功能，和具体的语言无关。转义序列是以ESC开头,即用\033来完成（ESC的ASCII码用十进制表示是27，用八进制表示就是033）。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell+Python监控脚本</title>
    <link href="http://example.com/2023/01/29/Shell-Python%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2023/01/29/Shell-Python%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/</id>
    <published>2023-01-29T07:33:54.000Z</published>
    <updated>2023-01-29T07:45:19.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Shell + Python 的监控脚本，以后还会出一些，写在这里用来拓宽监控思路和计算思路</p><p>因为每个监控脚本虽然大同小异，但是每个脚本之中都有特殊内容，是这个脚本的灵魂所在</p><span id="more"></span><h4 id="监控AL小程序和DM"><a href="#监控AL小程序和DM" class="headerlink" title="监控AL小程序和DM"></a>监控AL小程序和DM</h4><p>Shell监控部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-----------------配置项-----------------</span></span><br><span class="line">jmeterFile=zyzx_audio_2.jmx#jmeter文件</span><br><span class="line"></span><br><span class="line">thread=(400)#并发数</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小程序接口IP:PORT</span></span><br><span class="line">audioIP=&quot;192.168.129.218:9800&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志保存路径</span></span><br><span class="line">logFile=/root/dengyuanjing/jmeterResult</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jmeter生成文件路径</span></span><br><span class="line">jmeterCreatePath=/root/dengyuanjing/jmeter</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jmeter启动路径</span></span><br><span class="line">jmeterStartPath=/root/dengyuanjing/apache-jmeter-5.4.1/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：小程序连接数需要监控多个进程，目前只能主动填写</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python打印的并发数是一个占位值，可以填写真实的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-----------------配置项-----------------</span></span><br><span class="line"></span><br><span class="line">for i in $&#123;thread[@]&#125;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">        lastThread=`sed -n &quot;21p&quot; $jmeterCreatePath/$jmeterFile | awk -F &quot;&gt;&quot; &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;&lt;&quot; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">sed -i &quot;21s/$lastThread/$i/g&quot; $jmeterCreatePath/$jmeterFile</span><br><span class="line"></span><br><span class="line">rm -rf $jmeterCreatePath/500.jtl</span><br><span class="line">rm -rf $jmeterCreatePath/msgReport500</span><br><span class="line"></span><br><span class="line">current_time=`date &quot;+%Y-%m-%d_%H_%M_%S&quot;`</span><br><span class="line">echo &quot;创建目录名称为：$&#123;logFile&#125;/$&#123;current_time&#125;&quot;</span><br><span class="line">        echo &quot;并发数：$i&quot;</span><br><span class="line"></span><br><span class="line">mkdir $logFile/$current_time/</span><br><span class="line"></span><br><span class="line">nohup sh $jmeterStartPath/jmeter.sh -n -t $jmeterCreatePath/$jmeterFile -l $jmeterCreatePath/500.jtl -e -o $jmeterCreatePath/$&#123;current_time&#125;_msgReport_$&#123;i&#125; &gt; $jmeterCreatePath/123.log 2&gt;&amp; 1 &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DM_PID</span></span><br><span class="line">DMservice_PID=`ps -ef | grep DMService.jar | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NLU_PID</span></span><br><span class="line">NLU_PID=`ps -ef | grep NLUService | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小程序PID</span></span><br><span class="line"><span class="meta">#</span><span class="bash">audio_PID=(`ps -ef | grep audiolistening | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`)</span></span><br><span class="line">audio_PIDs=(`ps -ef | grep /usr/local/audiolistening-37/audiolistening | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`)</span><br><span class="line"></span><br><span class="line">        # MySQL PID</span><br><span class="line">        mysql_PID=`ps -ef | grep &quot;mysqld  --character-set-server=utf8mb4&quot; | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">        # redis PID</span><br><span class="line">        #redis_PID=`ps -ef | grep redis-server | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">if [ $&#123;audio_PIDs[0]&#125; -gt $&#123;audio_PIDs[1]&#125; ]; then</span><br><span class="line">    audio_PID=$&#123;audio_PIDs[0]&#125;</span><br><span class="line">else</span><br><span class="line">    audio_PID=$&#123;audio_PIDs[1]&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">    jmeter_PID=`ps -ef | grep apache-jmeter-5.4.1/bin/jmeter.sh | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">    if [ -n &quot;$jmeter_PID&quot; ]; then</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控小程序内存</span></span><br><span class="line"><span class="meta">#</span><span class="bash">top -p <span class="variable">$TTS_PID</span> -n 1 -b |grep -vE <span class="string">&quot;top|Tasks|Cpu|Mem|Swap|PID&quot;</span> |awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span> |sed -n <span class="string">&#x27;2p&#x27;</span> &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/mem.txt</span></span><br><span class="line">top -n 1 -b | grep $audio_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/AudioListenMem.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控小程序CPU</span></span><br><span class="line"><span class="meta">#</span><span class="bash">top -p <span class="variable">$TTS_PID</span> -n 1 -b |grep -vE <span class="string">&quot;top|Tasks|Cpu|Mem|Swap|PID&quot;</span> |awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span> |sed -n <span class="string">&#x27;2p&#x27;</span> &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/cpu.txt</span></span><br><span class="line">top -n 1 -b | grep $audio_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/AudioListenCpu.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控DM内存</span></span><br><span class="line">top -n 1 -b | grep $DMservice_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/DMmem.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控DMCPU</span></span><br><span class="line">top -n 1 -b | grep $DMservice_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/DMcpu.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控NLU CPU</span></span><br><span class="line">top -n 1 -b | grep $NLU_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/NLUcpu.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控DM内存</span></span><br><span class="line">top -n 1 -b | grep $DMservice_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/NLUmem.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控连接数DM</span></span><br><span class="line"><span class="meta">#</span><span class="bash">netstat -antp |grep <span class="variable">$DMservice_PID</span> | grep -v <span class="string">&quot;LISTEN&quot;</span> | wc -l &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/DMthreadCount.txt</span></span><br><span class="line">netstat -antp |grep $DMservice_PID | grep -v &quot;LISTEN&quot; | grep &quot;ESTABLISHED&quot; |grep 9002 |wc -l &gt;&gt; $logFile/$current_time/DMthreadCount.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控连接数NLU</span></span><br><span class="line">netstat -antp |grep $NLU_PID | grep -v &quot;LISTEN&quot; | grep &quot;ESTABLISHED&quot; |grep 9001 |wc -l &gt;&gt; $logFile/$current_time/NLUthreadCount.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控连接数小程序</span></span><br><span class="line"><span class="meta">#</span><span class="bash">netstat -antp |grep <span class="variable">$audio_PID</span>  | grep -v <span class="string">&quot;LISTEN&quot;</span> | grep <span class="string">&quot;ESTABLISHED&quot;</span> |grep 9800 |wc -l &gt;&gt; <span class="variable">$logFile</span>/<span class="variable">$current_time</span>/AudioLinstening.txt</span></span><br><span class="line"></span><br><span class="line">       # netstat -antp |grep -E &quot;137618|137619|137620|137621|137622|137623&quot;  | grep -v &quot;LISTEN&quot; | grep &quot;ESTABLISHED&quot; |grep 9800 |wc -l &gt;&gt; $logFile/$current_time/AudioLinstening.txt</span><br><span class="line">       # 监控小程序等待连接数</span><br><span class="line">       netstat -antp | grep -v &quot;LISTEN&quot; | grep $audioIP | grep &quot;TIME_WAIT&quot; | wc -l &gt;&gt; $logFile/$current_time/AudioLinstening_TIMEWAIT.txt</span><br><span class="line">               # 监控小程序 等待连接数 和 已连接数</span><br><span class="line">       netstat -antp | grep -v &quot;LISTEN&quot; | grep $audioIP | wc -l &gt;&gt; $logFile/$current_time/AudioLinstening.txt</span><br><span class="line"></span><br><span class="line">       # top 总cpu</span><br><span class="line">               top -n 1 -b | grep &quot;%Cpu(s)&quot; | awk &#x27;&#123;print $2&#125;&#x27; &gt;&gt; $logFile/$current_time/CPU.txt</span><br><span class="line"></span><br><span class="line">       # top 总内存</span><br><span class="line">               top -n 1 -b | grep &quot;KiB Mem&quot;| awk &#x27;&#123;print $8&#125;&#x27; &gt;&gt; $logFile/$current_time/MEM.txt</span><br><span class="line"></span><br><span class="line">               # MySQL CPU</span><br><span class="line">               top -n 1 -b | grep $mysql_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/MySQLcpu.txt</span><br><span class="line"></span><br><span class="line">               # MySQL MEM</span><br><span class="line">               top -n 1 -b | grep $mysql_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/MySQLmem.txt</span><br><span class="line">               </span><br><span class="line">               # redis CPU</span><br><span class="line">               #top -n 1 -b | grep $redis_PID | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $logFile/$current_time/Redismem.txt</span><br><span class="line"></span><br><span class="line">               # redis mem</span><br><span class="line">       #top -n 1 -b | grep $redis_PID | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $logFile/$current_time/Redismem.txt</span><br><span class="line"></span><br><span class="line">       sleep 1</span><br><span class="line"></span><br><span class="line">    else </span><br><span class="line">echo &quot;监控结束，正在统计...&quot;</span><br><span class="line">break</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">python3 calc_bak.py $logFile/$current_time/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;threadCount.txt 连接数第一个值为`cat 222.txt | head -n 1`&quot;</span></span></span><br><span class="line"></span><br><span class="line">cat $logFile/$current_time/result.txt</span><br><span class="line"></span><br><span class="line">echo &quot;&quot;</span><br><span class="line">        </span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>Python 计算部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math,sys,os</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    字体颜色</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></span><br><span class="line">    HEADER = <span class="string">&#x27;\033[95m&#x27;</span></span><br><span class="line">    OKBLUE = <span class="string">&#x27;\033[94m&#x27;</span></span><br><span class="line">    OKGREEN = <span class="string">&#x27;\033[92m&#x27;</span></span><br><span class="line">    WARNING = <span class="string">&#x27;\033[93m&#x27;</span></span><br><span class="line">    FAIL = <span class="string">&#x27;\033[91m&#x27;</span></span><br><span class="line">    BOLD = <span class="string">&#x27;\033[1m&#x27;</span></span><br><span class="line">    UNDERLINE = <span class="string">&#x27;\033[4m&#x27;</span></span><br><span class="line">    END = <span class="string">&#x27;\033[0m &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化日志</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLog</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment">#f.write(&#x27;并发次数为：&#x27;+str(thread_num))</span></span><br><span class="line">        f.write(<span class="string">&quot;\n======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%5s\t%5s\t%5s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取路径所有文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFiles</span>(<span class="params">PATH</span>):</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(PATH):</span><br><span class="line">        <span class="keyword">return</span> files</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    运算90、95、99百分位</span></span><br><span class="line"><span class="string">    1.接收要统计的项目名称，接收完整的路径，接收排序好的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">proName,array</span>):</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = <span class="built_in">round</span>(array[-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    mixValue = <span class="built_in">round</span>(array[<span class="number">0</span>],<span class="number">2</span>)</span><br><span class="line">    averageValue = <span class="built_in">round</span>(<span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = <span class="built_in">round</span>(array[num_count-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = <span class="built_in">round</span>(array[math.ceil(num_count*a1)],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = <span class="built_in">round</span>(array[num_count-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = <span class="built_in">round</span>(array[math.ceil(num_count*a2)],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = <span class="built_in">round</span>(array[num_count-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = <span class="built_in">round</span>(array[math.ceil(num_count*a3)],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将值存入字典</span></span><br><span class="line">    resultDict[proName] = [maxValue, mixValue, averageValue, percent_90, percent_95, percent_99]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n&quot;</span> %(proName,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resultDict</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这段代码后期可以细化，重复代码可拿出来单写，return array</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1.判断是buff/resp</span></span><br><span class="line"><span class="string">    2.读取buff/resp路径下的监控日志，排序后调用calc函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">        array = []</span><br><span class="line">        logPath = PATH + i</span><br><span class="line">        <span class="comment"># 读取监控日志内容,并写入列表</span></span><br><span class="line">        <span class="keyword">if</span> os.path.getsize(logPath) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                array.append(<span class="built_in">float</span>(<span class="number">0</span>))</span><br><span class="line">            array.sort()</span><br><span class="line">            proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            calc(proName,array)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(logPath,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(line) &gt;= <span class="number">15</span>:</span><br><span class="line">                        <span class="built_in">print</span>(bcolors.WARNING+<span class="string">&quot;WARNING&quot;</span>+bcolors.END+logPath+logPath+<span class="string">&quot;检测结果大于7位数，被抛弃&quot;</span>)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        array.append(<span class="built_in">float</span>(line))</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="built_in">print</span>(bcolors.FAIL+<span class="string">&quot;ERROR&quot;</span>+bcolors.END+logPath+<span class="string">&quot;该值有问题，&quot;</span>,line)</span><br><span class="line">            array.sort()</span><br><span class="line">            proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            calc(proName,array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#thread_num = sys.argv[2]</span></span><br><span class="line">    resultPath = PATH + <span class="string">&#x27;result.txt&#x27;</span></span><br><span class="line">    <span class="comment">#fileList = [&quot;AudioListenCpu.txt&quot;,&quot;AudioListenMem.txt&quot;,&quot;DMmem.txt&quot;,&quot;DMcpu.txt&quot;,&quot;DMthreadCount.txt&quot;,&quot;NLUthreadCount.txt&quot;,&quot;AudioLinstening.txt&quot;]</span></span><br><span class="line"> </span><br><span class="line">    fileList = getFiles(PATH)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;result.txt&quot;</span> <span class="keyword">in</span> fileList:</span><br><span class="line">        fileList.remove(<span class="string">&quot;result.txt&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 创建以文件名为键的字典</span></span><br><span class="line">    key = []</span><br><span class="line">    resultDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">        key.append(i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    resultDict = <span class="built_in">dict</span>.fromkeys(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行程序</span></span><br><span class="line">    createLog()</span><br><span class="line">    solve()</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [[[项目index],[监控值index]],[[项目index],[监控值index]], ...]</span></span><br><span class="line"><span class="string">    需要显示的数据 </span></span><br><span class="line"><span class="string">    0 最大值</span></span><br><span class="line"><span class="string">    1 最小值</span></span><br><span class="line"><span class="string">    2 平均值</span></span><br><span class="line"><span class="string">    3 90%</span></span><br><span class="line"><span class="string">    4 95%</span></span><br><span class="line"><span class="string">    5 99%</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    优化，输入要监控的项目和值，自动生成二维数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># values = [[Pdist[&#x27;AudioListenCpu&#x27;][0], Pdist[&#x27;AudioListenCpu&#x27;][1]], [Pdist[&#x27;AudioListenMem&#x27;][1], Pdist[&#x27;AudioListenMem&#x27;][2]]]</span></span><br><span class="line">    <span class="comment"># print(*values)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===============================================&#x27;</span>)</span><br><span class="line">    <span class="comment"># keys = [&#x27;AudioListenCpu&#x27;, &#x27;AudioListenMem&#x27;]</span></span><br><span class="line">    <span class="comment"># indexes = [[0, 1], [1, 2]]</span></span><br><span class="line">    <span class="comment"># for key, idx in zip(keys, indexes):</span></span><br><span class="line">    <span class="comment">#     print(*(resultDict[key][i] for i in idx))</span></span><br><span class="line">        </span><br><span class="line">    keys = [<span class="string">&#x27;DMthreadCount&#x27;</span>,<span class="string">&#x27;AudioLinstening&#x27;</span>,<span class="string">&#x27;NLUthreadCount&#x27;</span>,<span class="string">&#x27;DMcpu&#x27;</span>,<span class="string">&#x27;DMmem&#x27;</span>,<span class="string">&#x27;AudioListenCpu&#x27;</span>,<span class="string">&#x27;AudioListenMem&#x27;</span>,<span class="string">&#x27;NLUcpu&#x27;</span>,<span class="string">&#x27;NLUmem&#x27;</span>]</span><br><span class="line">    indexes = [[<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>], [<span class="number">4</span>], [<span class="number">4</span>], [<span class="number">4</span>], [<span class="number">0</span>]]</span><br><span class="line">    <span class="comment">#print(resultDict)</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> key, idx <span class="keyword">in</span> <span class="built_in">zip</span>(keys, indexes):</span><br><span class="line">        result.extend( (<span class="built_in">str</span>(resultDict[key][i]) <span class="keyword">for</span> i <span class="keyword">in</span> idx))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="comment">#print(result)</span></span><br><span class="line">    <span class="comment">#p = &quot; &quot;.join(result)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="TTS监控脚本"><a href="#TTS监控脚本" class="headerlink" title="TTS监控脚本"></a>TTS监控脚本</h4><p>Shell监控部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------跑之前需要修改的内容------------------------</span></span><br><span class="line">thread=(100 100 100 100 100 100)                               # 需要跑的线程数</span><br><span class="line">loop=3560                                # 循环次数</span><br><span class="line">model=buff                              # 需要跑响应时间写buff，需要跑合成时间写resp</span><br><span class="line">voice_name=xiaonan                     # 指定音色</span><br><span class="line">jar_tool=client_test.3.0.1.6.7.jar      # 需要使用哪种jar包</span><br><span class="line">port=8080                               # TTS端口号</span><br><span class="line">dir=/home/testuser/dyj/tts3.0_result/xingneng    # 存放路径</span><br><span class="line"><span class="meta">#</span><span class="bash">-----------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">PATH=<span class="variable">$PATH</span>:/home/testuser/dyj/python/bin/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> PATH=/home/testuser/dyj/python/bin/:<span class="variable">$PATH</span></span></span><br><span class="line"></span><br><span class="line">for i in $&#123;thread[@]&#125;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">    # 打印当前时间</span><br><span class="line">    date_time=`date &quot;+%Y_%m_%d_%H-%M-%S&quot;`</span><br><span class="line">    echo &quot;当前时间目录为：$date_time&quot;</span><br><span class="line"></span><br><span class="line">    # 查询TTS进程号，TTS目录需为apache-tomcat-TTS，否则更改grep</span><br><span class="line">    TTS_PID=`ps -ef | grep &quot;apache-tomcat-tts&quot; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">    # 创建文件夹</span><br><span class="line">    mkdir -p $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/</span><br><span class="line"></span><br><span class="line">    if [ $model == &quot;buff&quot; ]; then</span><br><span class="line">        nohup java -jar $jar_tool -h 127.0.0.1 -p $port -t socket -sample_rate 8000 -pt url -voice_name $voice_name -text_file file -thread $i -thread_count $loop -play 4 -log 18 -streaming 1 -format pcm -play_buflen 4 &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt 2&gt;&amp; 1 &amp; </span><br><span class="line">        </span><br><span class="line">    elif [ $model == &quot;resp&quot; ]; then</span><br><span class="line">        nohup java -jar $jar_tool -h 127.0.0.1 -p $port -t socket -sample_rate 8000 -pt url -voice_name $voice_name -text_file file -thread $i -thread_count $loop -play 0 -log 24 -streaming 0 -format pcm -play_buflen 4 &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt 2&gt;&amp; 1 &amp; </span><br><span class="line">    else</span><br><span class="line">        echo &quot;请输入buff/resp&quot;</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo &quot;$model模式，$i并发客户端启动完成，正在监控CPU、MEM&quot;</span><br><span class="line"></span><br><span class="line">    sleep 2s</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    # java -jar 命令执行结束会自动退出，如果没有退出说明正在执行</span><br><span class="line">    # 循环判断jar_PID进程是否存在，不存在跳出循环，每5s判断一次</span><br><span class="line"></span><br><span class="line">    while true</span><br><span class="line">    do</span><br><span class="line">        # 获取java -jar的PID</span><br><span class="line">        jar_PID=`ps -ef | grep $jar_tool | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">        if [ -n &quot;$jar_PID&quot; ]; then</span><br><span class="line">            # 监控内存</span><br><span class="line">            #top -n 1 -b | grep &quot;$TTS_PID &quot; | awk &#x27;&#123;print $10&#125;&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/mem.txt</span><br><span class="line">            top -p $TTS_PID -n 1 -b |grep -vE &quot;top|Tasks|Cpu|Mem|Swap|PID&quot; |awk &#x27;&#123;print $10&#125;&#x27; |sed -n &#x27;2p&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/mem.txt</span><br><span class="line">    </span><br><span class="line">            # 监控cpu</span><br><span class="line">            #top -n 1 -b | grep &quot;$TTS_PID &quot; | awk &#x27;&#123;print $9&#125;&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/cpu.txt</span><br><span class="line">            top -p $TTS_PID -n 1 -b |grep -vE &quot;top|Tasks|Cpu|Mem|Swap|PID&quot; |awk &#x27;&#123;print $9&#125;&#x27; |sed -n &#x27;2p&#x27; &gt;&gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/cpu.txt</span><br><span class="line"></span><br><span class="line">            sleep 1s</span><br><span class="line">        else</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">       </span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    echo &quot;$model模式 $i并发客户端进程已结束，正在获取日志数据...&quot;</span><br><span class="line"></span><br><span class="line">    if [ $model == &quot;buff&quot; ]; then</span><br><span class="line">        # 获取buff_time，并生成buff_time.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt | grep &quot;buffTime=&quot; | awk &#x27;&#123;print $5&#125;&#x27; | awk -F &quot;=&quot; &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_time.txt </span><br><span class="line">        # 获取卡顿次数，并生成buff_jdTime.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt | grep &quot;jdTime&quot; | wc -l &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTimeNum.txt</span><br><span class="line">        jdTimeNum=`cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTimeNum.txt`</span><br><span class="line">        # 卡顿时长，需要看日志，目前没有，先不写</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_java.txt | grep &quot;jdTime&quot; | awk &#x27;&#123;print $8&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTime.txt</span><br><span class="line">    elif [ $model == &quot;resp&quot; ]; then</span><br><span class="line">        # 获取resp_time，并生成resp_time.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt | grep &quot;respTime=&quot; | awk &#x27;&#123;print $6&#125;&#x27; | awk -F &quot;=&quot; &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_time.txt </span><br><span class="line">        # 获取卡顿次数，并生成resp_jdTime.txt文件</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt | grep &quot;jdTime&quot; | wc -l &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTimeNum.txt</span><br><span class="line">        jdTimeNum=`cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTimeNum.txt`</span><br><span class="line">        # 卡顿时长，需要看日志，目前没有，先不写</span><br><span class="line">        cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_java.txt | grep &quot;jdTime&quot; | awk &#x27;&#123;print $8&#125;&#x27; &gt; $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTime.txt</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo &quot;$model模式 $i并发客户端日志获取完成，正在统计结果&quot;</span><br><span class="line">    #if [ $model == &quot;buff&quot; ]; then</span><br><span class="line">    #    cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/buff_jdTimeNum.txt</span><br><span class="line">    #elif [ $model == &quot;resp&quot; ]; then</span><br><span class="line">    #    cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/resp_jdTimeNum.txt</span><br><span class="line">    #fi</span><br><span class="line"></span><br><span class="line">    python3 calc.py $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/ $model $i $jdTimeNum</span><br><span class="line"></span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    cat $dir/$date_time/&quot;$i&quot;_&quot;$model&quot;/result.txt</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Python计算部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> nullcontext</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    字体颜色</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bcolors</span>:</span></span><br><span class="line">    HEADER = <span class="string">&#x27;\033[95m&#x27;</span></span><br><span class="line">    OKBLUE = <span class="string">&#x27;\033[94m&#x27;</span></span><br><span class="line">    OKGREEN = <span class="string">&#x27;\033[92m&#x27;</span></span><br><span class="line">    WARNING = <span class="string">&#x27;\033[93m&#x27;</span></span><br><span class="line">    FAIL = <span class="string">&#x27;\033[91m&#x27;</span></span><br><span class="line">    BOLD = <span class="string">&#x27;\033[1m&#x27;</span></span><br><span class="line">    UNDERLINE = <span class="string">&#x27;\033[4m&#x27;</span></span><br><span class="line">    END = <span class="string">&#x27;\033[0m &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化日志</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createLog</span>(<span class="params">jdTimeNum</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(model+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;并发次数为：&#x27;</span>+<span class="built_in">str</span>(thread_num)+<span class="string">&#x27;\t&#x27;</span>+ <span class="string">&#x27;卡顿次数为：&#x27;</span>+<span class="built_in">str</span>(jdTimeNum))</span><br><span class="line">        f.write(<span class="string">&quot;\n======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%5s\t%5s\t%5s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    运算90、95、99百分位</span></span><br><span class="line"><span class="string">    1.接收要统计的项目名称，接收完整的路径，接收排序好的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">proName,array</span>):</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = array[-<span class="number">1</span>]</span><br><span class="line">    mixValue = array[<span class="number">0</span>]</span><br><span class="line">    averageValue = <span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = array[math.ceil(num_count*a1)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = array[math.ceil(num_count*a2)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = array[math.ceil(num_count*a3)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(resultPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n&quot;</span> %(proName,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">i</span>):</span></span><br><span class="line">    array = []</span><br><span class="line">    logPath = PATH + i</span><br><span class="line">    <span class="comment"># 读取监控日志内容，并写入列表</span></span><br><span class="line">    <span class="keyword">if</span> os.path.getsize(logPath) == <span class="number">0</span>:   <span class="comment"># 查看该文件是否大小为0，主要针对没有卡顿的情况</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            array.append(<span class="built_in">float</span>(<span class="number">0</span>))</span><br><span class="line">        array.sort()</span><br><span class="line">        proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        calc(proName,array)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(logPath,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                <span class="keyword">if</span> line == <span class="string">&quot;0.0&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(bcolors.WARNING+<span class="string">&quot;warning&quot;</span>+bcolors.END+logPath+<span class="string">&quot;0.0的值已被抛弃&quot;</span>)    <span class="comment"># 抛弃内存/cpu中0.0的异常值</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(line) &gt;= <span class="number">7</span>:</span><br><span class="line">                    <span class="built_in">print</span>(bcolors.WARNING+<span class="string">&quot;warning&quot;</span>+bcolors.END+logPath+<span class="string">&quot;检测结果大于7位数，已抛弃&quot;</span>)  <span class="comment"># 抛弃内存/cpu中过大异常值</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    array.append(<span class="built_in">float</span>(line))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(bcolors.FAIL+<span class="string">&quot;error&quot;</span>+bcolors.END+logPath+<span class="string">&quot;该值有问题，&quot;</span>,line)</span><br><span class="line">        array.sort()</span><br><span class="line">        proName = i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        calc(proName,array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.判断是buff/resp</span></span><br><span class="line"><span class="string">    2.读取buff/resp路径下的监控日志，排序后调用calc函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buff_Or_resp</span>():</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">&quot;buff&quot;</span>:</span><br><span class="line">        buffList = [<span class="string">&quot;buff_time.txt&quot;</span>,<span class="string">&quot;buff_jdTime.txt&quot;</span>,<span class="string">&quot;cpu.txt&quot;</span>,<span class="string">&quot;mem.txt&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> buffList:</span><br><span class="line">            solve(i)</span><br><span class="line">                              </span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">&quot;resp&quot;</span>:</span><br><span class="line">        respList = [<span class="string">&quot;resp_time.txt&quot;</span>,<span class="string">&quot;resp_jdTime.txt&quot;</span>,<span class="string">&quot;cpu.txt&quot;</span>,<span class="string">&quot;mem.txt&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> respList:</span><br><span class="line">            solve(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage：python3 path buff/resp thread_num jdTimeNum&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">    model = sys.argv[<span class="number">2</span>]</span><br><span class="line">    thread_num = sys.argv[<span class="number">3</span>]</span><br><span class="line">    jdTimeNum = sys.argv[<span class="number">4</span>]</span><br><span class="line">    resultPath = PATH + <span class="string">&#x27;result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">    createLog(jdTimeNum)</span><br><span class="line">    buff_Or_resp()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Shell + Python 的监控脚本，以后还会出一些，写在这里用来拓宽监控思路和计算思路&lt;/p&gt;
&lt;p&gt;因为每个监控脚本虽然大同小异，但是每个脚本之中都有特殊内容，是这个脚本的灵魂所在&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Zabbix API</title>
    <link href="http://example.com/2023/01/20/Zabbix-API/"/>
    <id>http://example.com/2023/01/20/Zabbix-API/</id>
    <published>2023-01-20T02:27:25.000Z</published>
    <updated>2023-01-20T02:29:32.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Zabbix API 半成品，可能会后续更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZabbixAPI</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, user, password</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.host = <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;/zabbix/api_jsonrpc.php&quot;</span></span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apiCall</span>(<span class="params">self,data</span>):</span></span><br><span class="line">        headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">        data = json.dumps(data)</span><br><span class="line">        response = requests.post(self.host, data, headers=headers)</span><br><span class="line">        responseResult = json.loads(response.text)</span><br><span class="line">        <span class="keyword">return</span> responseResult</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;user.login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;user&quot;</span>: self.user,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: self.password</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addZabbixHost</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;host.create&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: host,</span><br><span class="line">                <span class="string">&quot;interfaces&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;main&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;useip&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;ip&quot;</span>: host,</span><br><span class="line">                        <span class="string">&quot;dns&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;port&quot;</span>: port</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;groups&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;groupid&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;templates&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;templateid&quot;</span>: <span class="string">&quot;10001&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;error&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ERROR：addZabbixHost()报错 &quot;</span> + response[<span class="string">&#x27;error&#x27;</span>][<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;添加监控主机成功：&quot;</span> + <span class="built_in">str</span>(response[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;hostids&#x27;</span>]))</span><br><span class="line">            <span class="comment"># 返回主机列表</span></span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;hostids&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getItems</span>(<span class="params">self,host</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;item.get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;output&quot;</span>: <span class="string">&quot;extend&quot;</span>,</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: host,  <span class="comment"># 需要监控的主机</span></span><br><span class="line">                <span class="string">&quot;search&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;key_&quot;</span>: <span class="string">&quot;system.cpu.util[,idle]&quot;</span>  <span class="comment"># 监控项类型为&quot;系统监控&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="comment">#return response[&quot;result&quot;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查已经添加的主机，并返回hostid列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkHost</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;host.get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;output&quot;</span>: [<span class="string">&quot;host&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        hostidList = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> response[<span class="string">&#x27;result&#x27;</span>]:</span><br><span class="line">            hostidList.append(i[<span class="string">&#x27;hostid&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已经添加的主机有：&quot;</span> + <span class="built_in">str</span>(i[<span class="string">&#x27;hostid&#x27;</span>]))</span><br><span class="line">        <span class="comment"># 返回查询到的主机hostid列表    </span></span><br><span class="line">        <span class="keyword">return</span> hostidList</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导出配置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exportConf</span>(<span class="params">self,hostidList=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> hostidList <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            hostidList = self.checkHost()</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;configuration.export&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;hosts&quot;</span>: hostidList</span><br><span class="line">                &#125;,</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;xml&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="comment"># 暂时不知道要干嘛，只是打印出来</span></span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line">p = ZabbixAPI(<span class="string">&#x27;172.22.144.81&#x27;</span>, <span class="string">&#x27;Admin&#x27;</span>, <span class="string">&#x27;zabbix&#x27;</span>)</span><br><span class="line">p.getItems(<span class="string">&#x27;172.22.144.81&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Zabbix" scheme="http://example.com/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>CH2-指令-计算机的语言上-汇编指令</title>
    <link href="http://example.com/2023/01/12/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%B8%8A-%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2023/01/12/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%B8%8A-%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</id>
    <published>2023-01-12T15:00:00.000Z</published>
    <updated>2023-04-04T15:37:18.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MIPS 操作数</p><table><thead><tr><th>名字</th><th>示例</th><th>注释</th></tr></thead><tbody><tr><td>32个寄存器</td><td>$s0-$s7, $t0-$t9, $zero,<br />$a0-$a3, $v0-$v1, $gp, $fp,<br />$sp, $ra, $at</td><td>寄存器用于数据的快速存取。在MIPS中，只能对存放在寄存器中的数据执行算数操作，寄存器$zero的值恒为0，寄存器$at被汇编器保留，用于处理大的常数</td></tr><tr><td>20^30个存储器字</td><td>Memory[0], Memory[4], …,<br />Memory[4294967292]</td><td>存储器只能通过数据传输指令访问。MIPS使用字节编址，所以连续的字地址相差4。存储器用于保存数据结构、数组和溢出的寄存器。</td></tr></tbody></table><span id="more"></span><p><img src="MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801.png" alt="MIPS汇编语言"></p><p><img src="MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%802.png" alt="MIPS汇编语言"></p><h3 id="第一部分-MIPS-32概述"><a href="#第一部分-MIPS-32概述" class="headerlink" title="第一部分 MIPS-32概述"></a>第一部分 MIPS-32概述</h3><p><img src="MIPS-32%E6%A6%82%E8%BF%B0.png"></p><h4 id="指令的组成-MIPS的设计思想"><a href="#指令的组成-MIPS的设计思想" class="headerlink" title="指令的组成 MIPS的设计思想"></a>指令的组成 MIPS的设计思想</h4><p>计算机执行任何程序，本质上都是在执行机器语言指令（instruction），每条指令都是一条0-1串</p><p>指令首先要指明执行什么操作，通常用0-1串中的前几位来表示，称为操作码 指令还要指出需要操作的数据来自哪里、操作后的结果数据放回哪里 通常用0-1串中的剩余位来表示，称为<font color="orange">操作数</font>或<font color="orange">地址码</font>大部分操作数都是一个地址编号，告诉CPU从哪里取得数据、向哪里放回数据 所以操作数通常也叫做地址码</p><table><thead><tr><th align="center">操作码</th><th align="center">地址码</th><th align="center">地址码</th></tr></thead></table><p>MIPS作为RISC指令集，设计力求保证硬件设备的简单性，在我们讲解的32为MIPS汇编语言（MIPS-32）中，所有指令都是32位长</p></br><h4 id="MIPS-32中的通用寄存器"><a href="#MIPS-32中的通用寄存器" class="headerlink" title="MIPS-32中的通用寄存器"></a>MIPS-32中的通用寄存器</h4><p>MIPS中运算操作的操作数必须来自<font color="orange">寄存器</font>（register）或者指令本身一种位于CPU、比cache更小更快的存储器，用来暂时存放运算的源数据和结果</p><p>一些寄存器是专用的，如存放执行中指令的地址的<font color="orange">程序计数器</font>（PC）于此相对应，用于暂时存放运算数据的寄存器称为通用寄存器</p><p>MIPS中一共有32个32位寄存器，共128B（大部分架构都采用16或32个寄存器）</p><p>我们约定：</p><ul><li>程序中的变量存放在<font color="orange">保存寄存器</font>（store reg）中：$s0 ~ $s7 共8个</li><li>运算的临时变量、中间变量存放在<font color="orange">临时寄存器</font>（temp reg）中：$t0 ~ $t7 共8个</li><li>还有一个<font color="orange">零寄存器</font>，永远存放32位的0，写作$zero</li></ul><h3 id="第二部分-三类汇编指令"><a href="#第二部分-三类汇编指令" class="headerlink" title="第二部分 三类汇编指令"></a>第二部分 三类汇编指令</h3><p><img src="%E4%B8%89%E7%B1%BB%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4.png" alt="三类汇编指令"></p><h4 id="算数运算：加add、减sub"><a href="#算数运算：加add、减sub" class="headerlink" title="算数运算：加add、减sub"></a>算数运算：加add、减sub</h4><p>C赋值语句：c = a + b;</p><p><font color="orange">加法指令 add c, a, b</font>: 将a和b中的数据相加，并将结果存放在c中</p><p>再次强调：MIPS中运算的操作数必须来自寄存器或者指令本身！</p><p>假设变量a，b，c分别存放在寄存器$s0，$s1，$s2中，这条指令就应当写为</p><p><code>add $s2, $s0, $s1</code></p><p>加法中两个数可以对换，但减法不行，故c = a - b；必须写作</p><p><code>sub $s2, $s0, $s1</code></p><p>运算的 “原材料” a和b对应的寄存器$s0, $s1</p><p>分别称为源操作数1*（src1）和源操作数2（src2）</p><p>运算的结果c对应的寄存器$s2称为目的操作数（des）</p><p><code>加减指令的通式：add/sub des, src1, src2</code></p><h4 id="算术运算：加立即数addi"><a href="#算术运算：加立即数addi" class="headerlink" title="算术运算：加立即数addi"></a>算术运算：加立即数addi</h4><p>在 i++ 即 i = i + 1；这条赋值语句中，有个确定的常数1</p><p>与其采取额外的步骤将1装入某个寄存器，不如让指令本身包含这个1</p><p>假设变量i位于寄存器$s0，我们把加法指令的第二个源操作数改为常数1</p><p><code>addi $s0, $s0, 1</code></p><p>就成了加立即数(add immediate)指令</p><p>因为addi指令中的立即数可以取负数（对立即数取负后相加）</p><p>因此，MIPS中没有subi指令</p><h4 id="逻辑按位运算-and、or、nor指令"><a href="#逻辑按位运算-and、or、nor指令" class="headerlink" title="逻辑按位运算:and、or、nor指令"></a>逻辑按位运算:and、or、nor指令</h4><p>当两个源寄存器中，对应的位上同时为1时，与and操作结果为1 当两个源寄存器中，对应的位上至少有一个为1时，或or操作结果为1 因此，假设</p><p><code>$t0 = 0000 0000 0000 0000 0000 0000 0000 1001</code></p><p><code>$t1 = 0000 0000 0000 0000 0000 0000 0000 1100</code></p><p>执行下列两条指令后，$t2中的数据分别变为多少? </p><p><code>and $t2, $t0, $t1</code></p><p><code> or $t2, $t0, $t1</code></p><p>任何数据与0进行<font color="orange">或非nor操作</font>，都会0/1反转 执行下列指令后，$t2中的数据会变为多少?</p><p><code> nor $t2, $t0, $zero</code></p><p><code>$t2 = 1111 1111 1111 1111 1111 1111 1111 0110</code></p><h4 id="逻辑位移运算：sll-和-srl-指令"><a href="#逻辑位移运算：sll-和-srl-指令" class="headerlink" title="逻辑位移运算：sll 和 srl 指令"></a>逻辑位移运算：sll 和 srl 指令</h4><p>比较12和120两个十进制数，通过在对低位的右边添加一个0，变成了10倍</p><p>比较11和110两个二进制数，通过在最低位的右边添加一个0，变成了多少倍？1100呢？</p></br><p><font color="orange">逻辑左移（shift left logic）</font>指令让寄存器中的数据整体往左移动指定的位数，并在右边空出来的位上补0。</p><p>假设<code>$s2 = 0000 0000 0000 0000 0000 0000 0000 0101</code></p><p>逻辑左移两位后，放到寄存器$s0中：</p><p><code>sll $s0, $s2, 2</code></p><p>这里的2不是addi指令中的立即数，而是告诉计算机移动几位的<font color="orange">位移量（shift amount）</font></p></br><p>通过这样一条指令，我们实际上完成了x4的运算！</p><p>x2、x8、x128时，移位量分别是多少？</p><p>x2移位量为1，x8移位量为3，x128移位量为7</p><p><code>srl 指令可以实现/2运算，使用场景不多，不额外讨论</code></p><h4 id="综合练习1：变量运算与赋值"><a href="#综合练习1：变量运算与赋值" class="headerlink" title="综合练习1：变量运算与赋值"></a>综合练习1：变量运算与赋值</h4><p>翻译以下C语句：</p><p>result = a - 10 + (b + c * 5)；其中 result 为 $s3，a 为 $s0，b 为 $s1，c 为 $s2</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c * <span class="number">5</span> -&gt; <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">s2</span>, <span class="number">2</span></span><br><span class="line"> <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, $<span class="built_in">s2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">b </span>+ c * <span class="number">5</span> -&gt; <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">s1</span></span><br><span class="line"></span><br><span class="line">a - <span class="number">10</span> -&gt; <span class="keyword">addi </span>$<span class="built_in">t2</span>, $<span class="built_in">s0</span>, -<span class="number">10</span></span><br><span class="line"></span><br><span class="line">result = <span class="keyword">add </span>$<span class="built_in">s3</span>, $<span class="built_in">t2</span>, $<span class="built_in">t1</span></span><br></pre></td></tr></table></figure><h4 id="寄存器—存储器数据传送：lw指令"><a href="#寄存器—存储器数据传送：lw指令" class="headerlink" title="寄存器—存储器数据传送：lw指令"></a>寄存器—存储器数据传送：lw指令</h4><p>运算指令的操作数必须来自于寄存器/指令本身，但是，通用寄存器一共只有128B</p><p>数组元素却可以占据成千上万个字节，只能存放在内存中</p></br><p>这时，我们把数组第一个元素（a[0]）的32位地址，称为数组的<font color="orange">基址</font>，放在寄存器中</p><p>基址加上要找的元素的下标，就组成了这个元素的地址</p></br><p>如果源操作数在内存中，是数组a的5号元素（第六个元素），数组a的基址存放在$s1中。那么，a[5]的地址就表示为5($s1)</p><p>计算机会自动计算$s1中的基址和<font color="orange">偏移量</font>5的和，找到a[5]的地址</p></br><p>将a[5]从内存传送到寄存器$s0，使用<font color="orange">取字指令（load word）</font></p><p><code>lw $s0, 5($s1)</code></p><h4 id="寄存器—存储器数据传送：字与sw指令"><a href="#寄存器—存储器数据传送：字与sw指令" class="headerlink" title="寄存器—存储器数据传送：字与sw指令"></a>寄存器—存储器数据传送：字与sw指令</h4><p>MIPS的通用寄存器都是32位长，这个长度就是MIPS体系结构的<font color="orange">字长</font>，通常代表了参与运算的数据的长度，因此我们约定：整门课程中，1<font color="orange">字</font>=32b=4B(字节)</p></br><p>a[5]相对于a[0]，在内存中的距离是5个字，而不是5个字节。又因为内存按字节编址，即：内存每个字节都有一个特定的编号。</p><p>所以偏移量应该是 5x4=20个字节，a[5]的地址应该表示成20($s1)，于是取数指令变为<font color="orange"><code>lw $s0, 20($s1)</code></font></p></br><p>如果我们要把$t0中运算结果送回内存中的a[2]，需要用到<font color="orange">存字指令（store word）</font>:    <font color="orange"><code>sw $t0, 8($s1)</code></font></p><h4 id="寄存器间数据传送-装载立即数到寄存器"><a href="#寄存器间数据传送-装载立即数到寄存器" class="headerlink" title="寄存器间数据传送 装载立即数到寄存器"></a>寄存器间数据传送 装载立即数到寄存器</h4><p>如果我们需要把数从$t0保存到存放某变量的$s1中，怎么实现?</p><p>MIPS没有专门的寄存器间移动数据的指令。但是，通过把源寄存器中的数据加上0再保存到目标寄存器中，可以实现相同的功能</p><p><code>addi $s1, $t0, 0</code> 或 <code>add $s1, $t0, $zero</code></p><p>这个功能可以用<font color="orange">move伪指令</font>来代替 <font color="orange"><code>move $s1, $t0</code></font></p></br><p>假如我们要把一个常数10装入寄存器$s2，同样可以采用addi指令</p><p><code>addi $s2, $zero, 10</code> 或使用<font color="orange">取立即数（load immediate）伪指令 <code>li $s2, 10</code></font></p><p><em>程序设计题中能否使用伪指令，请咨询老师！</em></p><h4 id="装载32位立即数到寄存器"><a href="#装载32位立即数到寄存器" class="headerlink" title="装载32位立即数到寄存器"></a>装载32位立即数到寄存器</h4><p>我们说可以用addi指令向寄存器装载立即数：<code>addi $s2, $zero, 10</code></p><p>但是，addi指令中的立即数10只能占用32位指令中的一部分（16位，稍后介绍指令格式）</p><p>16位只能表示2E16，即六万多个数，寄存器却能容纳2E32即40多亿个数</p><p><font color="orange">addi 指令只能作用于 -2^15 ~ 2^15-1 个立即数中（即-32768 ~ 32767）</font></p></br><p>二进制与十六进制的转化在此不作介绍</p><p>假设我们要向寄存器$s2装载一个32位的立即数：<code>10A2 7FFF(16)</code></p></br><p>我们必须先用取高位立即数（load upper immediate）指令，把10A2放入$s2的高16位</p><p><font color="orange"><code>lui $s2,4258</code></font>  #十六进制的10A2等于十进制的4258</p><p>再让$s2与低16位的立即数7FFF进行或运算</p><p><font color="orange"><code>ori $s2, $s2, 32767</code></font> #7FFF(16)=32767(10)</p><p>这样，就分两步把32位立即数装载到了32的寄存器中</p><p><code>不能使用addi代替ori指令，如果低16位的最高位是1，addi会把它理解为负数</code></p><h4 id="综合练习2：数组元素运算与赋值"><a href="#综合练习2：数组元素运算与赋值" class="headerlink" title="综合练习2：数组元素运算与赋值"></a>综合练习2：数组元素运算与赋值</h4><p>a[i] = a[0] + 100000;</p><p>假设数组 a 的基址位于 $s0，变量 i 位于 $s1</p><p>100000(10) = 186A0(16)，1(16) = 1(10)，86A0(16) = 34464</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>.将a[<span class="number">0</span>]传到临时寄存器中</span><br><span class="line"><span class="attribute">lw</span> $t<span class="number">0</span>,<span class="number">0</span>($s<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">2</span>.将<span class="number">100000</span>装载<span class="number">32</span>位寄存器中</span><br><span class="line"><span class="attribute">lui</span> $t<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="attribute">ori</span> $t<span class="number">1</span>,$t<span class="number">1</span>,<span class="number">34464</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">3</span>.将a[<span class="number">0</span>] 与 <span class="number">100000</span> 相加</span><br><span class="line"><span class="attribute">add</span> $t<span class="number">2</span>,$t<span class="number">0</span>,$t<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">4</span>.获取a[i]的元素               # a[<span class="number">0</span>] 的地址存放在 $s<span class="number">0</span> 中                </span><br><span class="line"><span class="attribute">sll</span> $t<span class="number">3</span>,$s<span class="number">1</span>,<span class="number">2</span>                # a[<span class="number">1</span>] 的地址存放在 $s<span class="number">0</span> + <span class="number">4</span> 中（<span class="number">1</span>个字是<span class="number">4</span>字节）</span><br><span class="line"><span class="attribute">add</span> $t<span class="number">4</span>,$t<span class="number">0</span>,$t<span class="number">3</span>              # 所以 a[i] 就是基地址 $s<span class="number">0</span> + <span class="number">4</span>i</span><br><span class="line"></span><br><span class="line"><span class="attribute">5</span>.将t<span class="number">2</span>的值传给t<span class="number">4</span>所指向的a[i]地址</span><br><span class="line"><span class="attribute">sw</span> $t<span class="number">2</span>,<span class="number">0</span>($t<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="决策：条件分支beq和bne"><a href="#决策：条件分支beq和bne" class="headerlink" title="决策：条件分支beq和bne"></a>决策：条件分支beq和bne</h4><p>计算机和一般计算器的区别在于何处？</p><p>在于决策能力</p><p>即，根据一定的条件选择执行何种运算的能力</p></br><p>最基础的判断条件是相等关系</p><p>假设 $s0 = 0，$s1 = 0，$s2 = 1</p><p><font color="orange">相等则分支（branch if equal）指令</font>在两个源操作数寄存器中的值相同时分支，分支以<font color="orange">分支标签</font>表示</p><p><font color="orange"><code>beq $s0,$s1,Label</code></font></p><p>与此相对应，<font color="orange">不等则分支（branch if not equal）指令</font>在值不同时分支到标签</p><p><font color="orange"><code>bne $s0,s2,Label</code></font></p><p>如果 不发生分支，则继续执行内存中相邻的下一条指令</p></br><h4 id="综合练习3：if-else语句（无条件跳转-j-和条件分支）"><a href="#综合练习3：if-else语句（无条件跳转-j-和条件分支）" class="headerlink" title="综合练习3：if-else语句（无条件跳转 j 和条件分支）"></a>综合练习3：if-else语句（无条件跳转 j 和条件分支）</h4><p>If (i == j) f = g + h;</p><p>else f = g - h;</p><p>假设f、g、h、i、j 分别存放在$s0 - $s4中</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bne </span>$<span class="built_in">s3</span>,$<span class="built_in">s4</span>,Else</span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s0</span>,$<span class="built_in">s1</span>,$<span class="built_in">s2</span></span><br><span class="line"><span class="keyword">j </span>Exit:<span class="comment"># 跳出</span></span><br><span class="line"><span class="symbol">Else:</span> <span class="keyword">sub </span>$<span class="built_in">s0</span>,$<span class="built_in">s1</span>,$<span class="built_in">s2</span></span><br></pre></td></tr></table></figure><p><font color="orange">结论：判定相等 == 使用bne，判断不等 != 使用beq</font></p><h4 id="决策：小于则置位slt"><a href="#决策：小于则置位slt" class="headerlink" title="决策：小于则置位slt"></a>决策：小于则置位slt</h4><p>除了相等、不等关系，我们还经常比较两个数的大小</p><p>MIPS有一条<font color="orange">小于则置位（set on less than）指令slt</font></p><p><font color="grey">置位：将一位设置为1；复位：将一位设置为0</font></p></br><p>还是假设$s0 = 0，$s1 = 0，$s2 = 1</p><p><font color="orange"><code>slt $t0,$s0,$s2</code></font></p><p>源操作数1 &lt; 源操作数2 吗？ Yes</p><p>此时把目的炒作输寄存器$t0置位为1</p></br><p><code>slt $t0,$s0,$s1</code></p><p>源操作数1 &lt; 源操作数2 吗？No！</p><p>此时把目的操作数寄存器$t0复位为0</p><h4 id="6种条件判断及其伪指令"><a href="#6种条件判断及其伪指令" class="headerlink" title="6种条件判断及其伪指令"></a>6种条件判断及其伪指令</h4><p>通过slt、beq、bne（严格来说还有小于立即数则置位slti指令，不作讨论）指令的各种组合，我们就能够实现全部六种<font color="orange">比较指令</font>，即六种值为真或假的<font color="orange">布尔表达式</font></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &lt; j) <span class="attr">f</span> = g + h;</span><br><span class="line"><span class="keyword">else</span> <span class="attr">f</span> = g - h;</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">slt </span>$<span class="built_in">t0</span>, i, <span class="keyword">j </span>        <span class="comment"># 当 i&lt;j 时，把$t0置为1，否则为0</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, Else  <span class="comment"># 当 $t0为0时，执行else后的语句</span></span><br><span class="line"><span class="keyword">add </span>f, g, h           <span class="comment"># 否则顺着执行if后的语句</span></span><br><span class="line"><span class="keyword">j </span>Exit                <span class="comment"># 加法完成后退出if-else语句</span></span><br><span class="line"><span class="symbol">Else:</span> <span class="keyword">sub </span>f, g, h     <span class="comment"># else</span></span><br><span class="line"><span class="symbol">Exit:</span></span><br></pre></td></tr></table></figure><p><font color="orange">结论：判断大于 &gt; 或小于  &lt; 使用 slt 和 beq，判定大于等于 &gt;= 或小于等于 &lt;= 使用 slt 和 bne </font></p><p>对于比大小的四种比较条件，可以使用伪指令：</p><ul><li>小于则分支 blt</li><li>大于则分支 bgt</li><li>小于等于则分支 ble</li><li>大于等于则分支 bge</li></ul><h4 id="综合练习4：while循环"><a href="#综合练习4：while循环" class="headerlink" title="综合练习4：while循环"></a>综合练习4：while循环</h4><p>while(a[i] == k) i++;<br>假设i,k分别存放在$s3和$s5中，a的基址放在$s6中</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Loop:</span> <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">s3</span>, <span class="number">2</span>     <span class="comment"># 4i</span></span><br><span class="line">      <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">s6</span>, $<span class="built_in">t0</span>   <span class="comment"># a[0] + 4i</span></span><br><span class="line">      <span class="keyword">lw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">t1</span>)      <span class="comment"># 将a[i]的内存地址取出，放入临时寄存器</span></span><br><span class="line">      <span class="keyword">bne </span>$<span class="built_in">t2</span>, $<span class="built_in">s5</span> Exit:</span><br><span class="line">      <span class="keyword">addi </span>$<span class="built_in">s3</span>, $<span class="built_in">s3</span>, <span class="number">1</span></span><br><span class="line">      <span class="keyword">j </span>Loop              <span class="comment"># 跳转回判断 a[i] == k</span></span><br></pre></td></tr></table></figure><br><h4 id="MIPS汇编指令小结"><a href="#MIPS汇编指令小结" class="headerlink" title="MIPS汇编指令小结"></a>MIPS汇编指令小结</h4><p><img src="MIPS%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93.png"></p><h4 id="指令格式：R型"><a href="#指令格式：R型" class="headerlink" title="指令格式：R型"></a>指令格式：R型</h4><p>指令中含三个寄存器的运算指令都属于<font color="orange">R型（register type）指令</font></p><p><strong><code>add/sub</code></strong><code>des,src1,src2</code></p><p><strong><code>and/or/nor</code></strong><code>des,src1,src2</code></p><p><strong><code>slt</code></strong><code>des,src1,src2</code></p><p>32位的MIPS指令一共分为6个字段：</p><table><thead><tr><th>op</th><th>rs</th><th>rt</th><th>rd</th><th>shamt</th><th>funct</th></tr></thead><tbody><tr><td>6位</td><td>5位</td><td>5位</td><td>5位</td><td>5位</td><td>6位</td></tr></tbody></table><ul><li><font color="orange">op</font>：operation code，源操作码</li><li><font color="orange">rs</font>：register source，源操作数寄存器 -&gt; <font color="orange">rt</font>：s后面是t，表示第二个源操作数寄存器</li><li><font color="orange">rd</font>：register destination，目的寄存器</li><li><font color="orange">shamt</font>：shift amount，位移量</li><li><font color="orange">funct</font>：function code，功能码</li></ul><br><h4 id="指令格式：R型-1"><a href="#指令格式：R型-1" class="headerlink" title="指令格式：R型"></a>指令格式：R型</h4><p>R型指令的操作码op都是6个0，由6位功能码funct进一步指定执行什么操作</p><p>以add指令为例</p><ul><li><p><font color="orange">$t0 ~ $t7分别为8~15号寄存器</font></p></li><li><p><font color="orange">$s0 ~ $s7分别为16~23号寄存器</font></p></li></ul><p>将下列机器码，翻译成MIPS-32指令</p><table><thead><tr><th align="center">000000</th><th align="center">10001</th><th align="center">10010</th><th align="center">01000</th><th align="center">00000</th><th align="center">100000</th></tr></thead><tbody><tr><td align="center">6位</td><td align="center">5位</td><td align="center">5位</td><td align="center">5位</td><td align="center">5位</td><td align="center">6位</td></tr></tbody></table><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">操作码 op 为<span class="number">0</span>，功能码为<span class="number">32</span>，即为<span class="keyword">add指令</span></span><br><span class="line"><span class="keyword"></span>目的寄存器为 <span class="number">01000</span>，十进制为<span class="number">8</span>，即$<span class="built_in">t0</span></span><br><span class="line">第一个源操作数寄存器为 <span class="number">10001</span>，十进制为<span class="number">17</span>，即<span class="built_in">s1</span></span><br><span class="line">第二个源操作数寄存器为 <span class="number">10010</span>, 十进制为<span class="number">18</span>，即<span class="built_in">s2</span></span><br><span class="line">偏移量为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">综上所述，该机器码的MIPS<span class="number">-32</span>指令为 <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">s1</span>, $<span class="built_in">s2</span> </span><br></pre></td></tr></table></figure><p>sub指令仅仅是功能码funct字段从32变为了34，sub $s1, $s1, $s0的32位机器码是多少? </p><p><font color="gray">需要记忆add、sub指令的操作码(都是0)和功能码(分别为32、34)</font></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sub </span>的操作码 op 为 <span class="number">000000</span></span><br><span class="line">功能码 funct 为 <span class="number">34</span>，即<span class="number">010010</span></span><br><span class="line">偏移量为<span class="number">0</span>，即 <span class="number">00000</span></span><br><span class="line">第一个 $<span class="built_in">s1</span> 为目的寄存器，且 $<span class="built_in">s1</span> 为<span class="number">17</span>号寄存器，即<span class="number">10001</span></span><br><span class="line">第二个 $<span class="built_in">s1</span> 为第一个源操作寄存器，且 $<span class="built_in">s1</span> 为<span class="number">17</span>号寄存器，即<span class="number">10001</span></span><br><span class="line">$<span class="built_in">s0</span> 为第二个源操作寄存器，且 $<span class="built_in">s0</span> 为<span class="number">16</span>号寄存器，即<span class="number">10000</span></span><br><span class="line"></span><br><span class="line">综上所述，<span class="keyword">sub </span>$<span class="built_in">s1</span>, $<span class="built_in">s1</span>, $<span class="built_in">s0</span> 的机器码为</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">rd</th><th align="center">shamt</th><th align="center">funct</th></tr></thead><tbody><tr><td align="center">000000</td><td align="center">10001</td><td align="center">10001</td><td align="center">10000</td><td align="center">00000</td><td align="center">100100</td></tr></tbody></table><p>此外，使用移位量的两条逻辑移位指令</p><p><strong><code>sll/srl</code></strong><code>des, src1, shamt </code></p><p>也属于R型指令，因为没有第二个源操作数寄存器，rt被置为0</p><br><h4 id="指令格式：I型（立即数）"><a href="#指令格式：I型（立即数）" class="headerlink" title="指令格式：I型（立即数）"></a>指令格式：I型（立即数）</h4><p>有两条“目的reg + 源reg + 立即数” 格式的指令</p><p><strong><code>addi</code></strong><code>des,src1,i</code></p><p><strong><code>ori</code></strong><code> des,src1,i</code></p><p>通过把R型指令中的后桑格字段拼接成一个16为的里结束字段，让指令本身包含常数。这样的指令属于<font color="orange">I型（immediate type）指令</font></p><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">rd</th><th align="center">shamt</th><th align="center">funct</th></tr></thead><tbody><tr><td align="center">6位</td><td align="center">5位</td><td align="center">5位</td><td align="center">5位</td><td align="center">5位</td><td align="center">6位</td></tr></tbody></table><center><small>R 型指令格式</small></center><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">constant or address</th></tr></thead><tbody><tr><td align="center">6位</td><td align="center">5位</td><td align="center">5位</td><td align="center">16位</td></tr></tbody></table><center><small>I 型指令格式</small></center><p>以 addi 指令为例</p><p><code>其操作码为8</code>，由于 rd 字段被合并了，现在 rt 就成了目的寄存器</p><p><font color="orange">通过 I 型指令格式也可以看出，立即数最大只有 16位，再加上一位的正负号，只有15位可用（即-2^15 ~ 2^15-1    -&gt;    -32768 ~ 32767）</font></p><p><strong>练习1</strong></p><p>将此指令翻译成机器指令：<code>addi $t1, $t0, 15</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">addi </span>指令的操作码 op 为<span class="number">8</span>，即<span class="number">001000</span></span><br><span class="line">$<span class="built_in">t1</span> 为目的寄存器，$<span class="built_in">t1</span>为<span class="number">9</span>号寄存器，即<span class="number">01001</span></span><br><span class="line">$<span class="built_in">t0</span> 为源操作数寄存器，$<span class="built_in">t0</span>为<span class="number">8</span>号寄存器，即<span class="number">01000</span></span><br><span class="line">立即数为<span class="number">15</span>，即 constant <span class="keyword">or </span><span class="keyword">address </span>为<span class="number">0000000000001111</span></span><br><span class="line"></span><br><span class="line">综上所述，<span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">15</span> 的机器码为</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">constant or address</th></tr></thead><tbody><tr><td align="center">001000</td><td align="center">01000</td><td align="center">01001</td><td align="center">0000000000001111</td></tr></tbody></table><br><h4 id="指令格式：I型（偏移量）"><a href="#指令格式：I型（偏移量）" class="headerlink" title="指令格式：I型（偏移量）"></a>指令格式：I型（偏移量）</h4><p><code>lw/sw reg, num(reg)</code></p><p>两条数据传送指令也包含两个寄存器和一个常数</p><p>同样属于I型指令</p><p>此时，16位立即数字段的含义发生了改变，表示数组元素相对于数组基址的<font color="orange">地址偏移量</font></p><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">constant or address</th></tr></thead><tbody><tr><td align="center">6位</td><td align="center">5位</td><td align="center">5位</td><td align="center">16位</td></tr></tbody></table><p>无论是lw还是sw指令</p><p><font color="orange">都是由 rs 字段表示的寄存器值与 address 字段相加，得到存储器单元地址</font></p><p>rt 字段表示与存储器单元交换数据的寄存器</p><p><code>lw、sw 指令操作码分别为 35 和 43</code></p><br><p><strong>练习1</strong></p><p>将此指令翻译成机器指令：<code>lw $t0, 8($s1)</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lw </span>指令的操作码 op 为<span class="number">35</span>，所以换成二进制为<span class="number">10011</span></span><br><span class="line">$<span class="built_in">t0</span> 是第二个源操作数寄存器（第一个用于存放<span class="keyword">address），$t0为8号寄存器，且rt为5位，即01000</span></span><br><span class="line"><span class="keyword"></span><span class="number">8</span>($<span class="built_in">s1</span>) 是第一个源操作数寄存器即rs，$<span class="built_in">s1</span>为<span class="number">17</span>号寄存器，且rs为<span class="number">5</span>位，即<span class="number">10001</span></span><br><span class="line">又因为偏移量是<span class="number">8</span>，即<span class="number">1000</span>，constan <span class="keyword">or </span><span class="keyword">address </span>为<span class="number">16</span>位，所以为<span class="number">0000000000001000</span></span><br><span class="line"></span><br><span class="line">综上所述，<span class="keyword">lw </span>$<span class="built_in">t0</span>, <span class="number">8</span>($<span class="built_in">s1</span>) 的机器码为</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">constant or address</th></tr></thead><tbody><tr><td align="center">10011</td><td align="center">10001</td><td align="center">01000</td><td align="center">0000000000001000</td></tr></tbody></table><p><strong>练习2</strong></p><p>将此指令翻译成机器指令：<code>sw $t2, 0($s4)</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sw </span>指令的操作码 op 为<span class="number">43</span>，所以换成二进制为<span class="number">11101</span></span><br><span class="line">$<span class="built_in">t2</span> 是第二个源操作数寄存器即rt（第一个用于存放<span class="keyword">address），$t2为10号寄存器，且rt为5位，即10010</span></span><br><span class="line"><span class="keyword"></span><span class="number">0</span>($<span class="built_in">s4</span>) 是第一个源操作数寄存器即rs，$<span class="built_in">s4</span>为<span class="number">20</span>号寄存器，且rs为<span class="number">5</span>位，即<span class="number">10100</span></span><br><span class="line">又因为偏移量是<span class="number">0</span>，constant <span class="keyword">or </span><span class="keyword">address </span>为<span class="number">16</span>位，所以为<span class="number">0000000000000000</span></span><br><span class="line"></span><br><span class="line">综上所述，<span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">s4</span>) 的机器码为</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">constant or address</th></tr></thead><tbody><tr><td align="center">11101</td><td align="center">10010</td><td align="center">10100</td><td align="center">0000000000000000</td></tr></tbody></table><br><h4 id="指令格式：I-型（标签）"><a href="#指令格式：I-型（标签）" class="headerlink" title="指令格式：I 型（标签）"></a>指令格式：I 型（标签）</h4><p><code>beq/bne src1, src2, Label</code></p><p>在这两条条件分支指令中，同样是使用了两个寄存器</p><p>还有一个分支标签的地址，用16位立即数字段表示（也就变成了 Address 字段）</p><p>也属于 I 型指令</p><br><p>例如，当 <strong>i($s0)</strong> 和 <strong>j($s1)</strong> 相等时分支到地址为 10000 的标签 Else</p><p><code>beq $s0, $s1, Else</code></p><p>翻译为机器语言为</p><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">constant or address</th></tr></thead><tbody><tr><td align="center">6位</td><td align="center">5位</td><td align="center">5位</td><td align="center">16位</td></tr></tbody></table><p><code>这里的 10000 实际上并不是 Else 标签指向指令的地址，讲寻址方式时再具体说明</code></p><h4 id="机器语言指令格式小结"><a href="#机器语言指令格式小结" class="headerlink" title="机器语言指令格式小结"></a>机器语言指令格式小结</h4><table>    <tr >        <!--虽然这样居中很傻，但是我写类样式他不管用啊-->        <th align="center">名字</th>        <th align="center">格式</th>        <th align="center">举例</th>        <th colspan="6" align="center">注释</th>    </tr>    <tr>        <td align="center">add</td>        <td align="center">R</td>        <td align="center">0</td>        <td align="center">18</td>        <td align="center">19</td>        <td align="center">17</td>        <td align="center">0</td>        <td align="center">32</td>        <td align="center">add $s1, $s2, $s3</td>    </tr>    <tr>        <td align="center">sub</td>        <td align="center">R</td>        <td align="center">0</td>        <td align="center">18</td>        <td align="center">19</td>        <td align="center">17</td>        <td align="center">0</td>        <td align="center">34</td>        <td align="center">sub $s1, $s2, $s3</td>    </tr>    <tr>        <td align="center">addi</td>        <td align="center">I</td>        <td align="center">8</td>        <td align="center">18</td>        <td align="center">17</td>        <td colspan="3" align="center">100</td>        <td align="center">addi $s1, $s2, 100</td>    </tr>    <tr>        <td align="center">lw</td>        <td align="center">I</td>        <td align="center">35</td>        <td align="center">18</td>        <td align="center">17</td>        <td colspan="3" align="center">100</td>        <td align="center">lw $s1, 100($s2)</td>    </tr>    <tr>        <td align="center">sw</td>        <td align="center">I</td>        <td align="center">43</td>        <td align="center">18</td>        <td align="center">17</td>        <td colspan="3" align="center">100</td>        <td align="center">sw $s1, 100($s2)</td>    </tr>    <tr>        <td align="center">字段宽度</td>        <td align="center"> </td>        <td align="center">6位</td>        <td align="center">5位</td>        <td align="center">5位</td>        <td align="center">5位</td>        <td align="center">5位</td>        <td align="center">6位</td>        <td align="center">所有 MIPS 指令均为32位</td>    </tr>    <tr>        <td align="center">R型</td>        <td align="center">R</td>        <td align="center">op</td>        <td align="center">rs</td>        <td align="center">rt</td>        <td align="center">rd</td>        <td align="center">shamt</td>        <td align="center">funct</td>        <td align="center">算数指令格式</td>    </tr>    <tr>        <td align="center">I型</td>        <td align="center">I</td>        <td align="center">op</td>        <td align="center">rs</td>        <td align="center">rt</td>        <td colspan="3" align="center">address</td>        <td align="center">数据传送指令格式</td>    </tr></table><p><font color="grey">lui 指令的指令格式不作讨论</font></p><p><font color="grey">五条伪指令本身不是真正的指令，程序运行时会被替换成为真正的指令，不讨论指令格式</font></p><p><font color="grey">j 指令的指令格式稍后讲解</font></p><h4 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h4><p>1、指令通常由那两个部分组成？MIPS-32 指令长度均为多少？</p><ul><li>操作码和操作数（地址码）</li><li>MIPS-32 指令长度为32位</li></ul><p>2、8个临时寄存器、8个保存寄存器分别是什么编号？零寄存器存储什么？</p><ul><li>8个临时寄存器（$t0 ~ $t7）的编号为 8-15</li><li>8个保存寄存器（$s0 ~ $s7）的编号为 16-23</li></ul><p>3、回顾综合联系1 ~ 4，掌握运算、数据传输、决策三类汇编指令。（<strong>注意字和字节的区别</strong>）</p><p>4、练习上面的五条指令（add、sub、addi、lw、sw）汇编语言和机器语言的转化</p><br><blockquote><p>转自：B站翼云</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;MIPS 操作数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;32个寄存器&lt;/td&gt;
&lt;td&gt;$s0-$s7, $t0-$t9, $zero,&lt;br /&gt;$a0-$a3, $v0-$v1, $gp, $fp,&lt;br /&gt;$sp, $ra, $at&lt;/td&gt;
&lt;td&gt;寄存器用于数据的快速存取。在MIPS中，只能对存放在寄存器中的数据执行算数操作，寄存器$zero的值恒为0，寄存器$at被汇编器保留，用于处理大的常数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20^30个存储器字&lt;/td&gt;
&lt;td&gt;Memory[0], Memory[4], …,&lt;br /&gt;Memory[4294967292]&lt;/td&gt;
&lt;td&gt;存储器只能通过数据传输指令访问。MIPS使用字节编址，所以连续的字地址相差4。存储器用于保存数据结构、数组和溢出的寄存器。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="计算机组成与设计" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>CH1 计算机概要与技术</title>
    <link href="http://example.com/2022/11/09/CH1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2022/11/09/CH1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/</id>
    <published>2022-11-09T15:31:55.000Z</published>
    <updated>2023-01-20T02:18:46.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在读完本书后，我们能够理解以下问题：</p><ul><li><p>用C或Java等高级语言编写的程序如何翻译成硬件之间的语言？硬件如何执行程序？</p><p>领会这些概念是理解软硬件两者如何影响程序性能的基础</p></li><li><p>什么是软硬件之间的接口，以及软件如何指导硬件完成其功能？</p><p>这些概念对于许多软件的编写十分重要</p></li><li><p>哪些因素决定了程序的性能？程序员如何才能改进程序性能？</p><p>从本书中我们将知道，程序性能取决于原始程序、将该程序转换为计算机语言的软件以及执行该程序的硬件的有效性</p></li><li><p>什么技术可供硬件设计者用于改进性能？</p><p>本书将介绍现代计算机设计的基本概念。有感兴趣的读者可深入阅读另一本进阶教材《Computer Architecture: A Quantitative Approach》</p></li><li><p>硬件设计者可使用那些技术提高能效？什么技术可供程序员提高或降低能效？</p></li><li><p>为什么串行处理近来发展为并行处理？这种发展带来的结果是什么？</p><p>本书给出了解释，并介绍了当今支持并行处理的硬件机制，全面评述了新一代的多核微处理器（multicore microprocessor）</p></li><li><p>自1951年的第一台商用计算机开始，计算机架构师们提出的哪些伟大思想构成了计算机的基础？</p></li></ul><span id="more"></span><p><a href="/download/xmind/CH1%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E8%AE%BE%E8%AE%A1.xmind">点击下载 CH1 计算机概要与设计.xmind</a></p><h3 id="第一部分-计算机的分类"><a href="#第一部分-计算机的分类" class="headerlink" title="第一部分 计算机的分类"></a>第一部分 计算机的分类</h3><h4 id="计算机的分类"><a href="#计算机的分类" class="headerlink" title="计算机的分类"></a>计算机的分类</h4><p><strong>传统上</strong>，按照应用，计算机可分为：</p><ul><li><p><font color="orange">个人计算机（PC）</font></p></li><li><p><font color="orange">服务器</font></p><p>适用于执行大负载任务，多用户通过网络并行访问。</p><p>高端服务器被称为超级计算机</p></li><li><p><font color="orange">嵌入式计算机</font></p></li></ul><p>进入<strong>后PC时代：</strong></p><p>往小的方向发展为：<font color="orange">个人移动设备（PMD）</font></p><p>往大的方向发展为：仓储规模计算机（Warehouse-Scale Computer，<font color=orange>WSC</font>），大型数据中心的云计算服务器</p><h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p><strong>字节常用于存储容量，位常用于传输速度。1字节=8位</strong></p><table><thead><tr><th>十进制术语</th><th>缩写</th><th>数值</th><th>二进制术语</th><th>缩写</th><th>数值</th><th>数值差别</th></tr></thead><tbody><tr><td>kilobyte</td><td>KB</td><td>10^3</td><td>kibibyte</td><td>KiB</td><td>2^10</td><td>2%</td></tr><tr><td>megabyte</td><td>MB</td><td>10^6</td><td>mebibyte</td><td>MiB</td><td>2^20</td><td>5%</td></tr><tr><td>gigabyte</td><td>GB</td><td>10^9</td><td>gibibyte</td><td>GiB</td><td>2^30</td><td>7%</td></tr><tr><td>terabyte</td><td>TB</td><td>10^12</td><td>tebibyte</td><td>TiB</td><td>2^40</td><td>10%</td></tr><tr><td>petabyte</td><td>PB</td><td>10^15</td><td>pebibyte</td><td>PiB</td><td>2^50</td><td>13%</td></tr><tr><td>exabyte</td><td>EB</td><td>10^18</td><td>exbibyte</td><td>EiB</td><td>2^60</td><td>15%</td></tr><tr><td>zettabyte</td><td>ZB</td><td>10^21</td><td>zebibyte</td><td>ZiB</td><td>2^70</td><td>18%</td></tr><tr><td>yottabyte</td><td>YB</td><td>10^24</td><td>yobibyte</td><td>YiB</td><td>2^80</td><td>21%</td></tr></tbody></table><p>测验：</p><p>i5 + GTX3060 + 8G + 512G （GiB）</p><p>生活中，100兆（100Mbps）的带宽。传输速度是100MB/s / 8 = 12.5MiB/s</p><h4 id="理解程序性能"><a href="#理解程序性能" class="headerlink" title="理解程序性能"></a>理解程序性能</h4><p>一个程序的性能取决于以下各因素的组合：程序所用的算法的有效性，用来建立程序并将其翻译成机器指令的软件系统，计算机执行机器指令（可能包括I/O操作）的有效性</p><table><thead><tr><th>软件或硬件组成元素</th><th>该软件如何影响性能</th><th>该论题出现的位置</th></tr></thead><tbody><tr><td>算法</td><td>决定了源码级语句的数量和I/O操作的数量</td><td>其他书</td></tr><tr><td>编程语言、编译器和体系结构</td><td>决定了每条源码级语句对应的计算机指令数量</td><td>第2、3章</td></tr><tr><td>处理器和存储系统</td><td>决定了指令的执行速度</td><td>第4、5、6章</td></tr><tr><td>I/O系统（硬件和操作系统）</td><td>决定了I/O操作可能的执行速度</td><td>第4、5、6章</td></tr></tbody></table><br><h3 id="第二部分-计算机系统结构中的8个伟大思想"><a href="#第二部分-计算机系统结构中的8个伟大思想" class="headerlink" title="第二部分 计算机系统结构中的8个伟大思想"></a>第二部分 计算机系统结构中的8个伟大思想</h3><p><img src="8%E5%A4%A7%E4%BC%9F%E5%A4%A7%E6%80%9D%E6%83%B3.png" alt="8大伟大思想"></p><h4 id="2个设计原则"><a href="#2个设计原则" class="headerlink" title="2个设计原则"></a>2个设计原则</h4><p><strong><font color="orange">1、摩尔定律</font></strong></p><p>单芯片上的集成度（单位面积硅片能容纳的晶体管数量）每18个月翻一番</p><p>提出于1965年</p><p>芯片设计要依据设计 <u>完成</u> 时的工艺水平</p><p><strong><font color="orange">2、抽象简化设计</font></strong></p><p>省略低层次的细节，提供简化的模型</p><h4 id="4个提高性能的方法"><a href="#4个提高性能的方法" class="headerlink" title="4个提高性能的方法"></a>4个提高性能的方法</h4><p><strong><font color="orange">3、加速大概率事件</font></strong></p><p>一台计算机绝大部分时间用来打游戏，改进游戏新能还是其他性能更能提高整体性能？</p><p>定量分析：Amdahl定律</p><center>改进后的执行时间 = 改进影响的执行时间 / 改进量 + 改进不影响的执行时间</center><center>t改进 = t相关/S + t无关</center><p><strong><font color="orange">4、通过并行提高性能</font></strong></p><p>同时发生，典型例子是多核处理器</p><p><strong><font color="orange">5、通过流水线提高性能</font></strong></p><p>类比工业中的流水线</p><p><strong><font color="orange">6、通过预测提高性能</font></strong></p><ul><li>预测失误后恢复的代价不高</li><li>预测有相当的准确率则可以猜测哪些操作会发生，并提前开始执行</li></ul><h4 id="存储器层次与冗余"><a href="#存储器层次与冗余" class="headerlink" title="存储器层次与冗余"></a>存储器层次与冗余</h4><p><strong><font color="orange">7、存储器层次</font></strong></p><p>（见第三部分 软硬件接口）</p><p><strong><font color="orange">8、冗余提高可靠性</font></strong></p><p>计算机不仅需要速度快，还需要工作可靠。由于任何一个物理器件都可能失效，因此可以通过使用冗余部件的方式提高系统的可靠性（dependable），冗余部件可以代替失效部件并可以帮助检测错误。</p><p>物理器件的“备胎”，失效了就换上</p><h3 id="第三部分-软硬件基础"><a href="#第三部分-软硬件基础" class="headerlink" title="第三部分 软硬件基础"></a>第三部分 软硬件基础</h3><p><img src="%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80.png" alt="软硬件基础"></p><h4 id="编程语言分类"><a href="#编程语言分类" class="headerlink" title="编程语言分类"></a>编程语言分类</h4><p><strong>机器指令</strong></p><p>000000111100100100101100111111110010</p><blockquote><p> 汇编语言和由它<strong>汇编</strong>出的机器语言一一对应</p></blockquote><p><strong>汇编语言</strong></p><p>指令助记符、寄存器标号</p><p><code>addi $s1, $s1, 1</code></p><blockquote><p>一条高级语言语句可以<strong>编译</strong>出好几条汇编语言</p></blockquote><p><strong>高级语言</strong></p><p>语句接近自然语言，提高了程序的可移植性</p><p><code>cnt = cnt + 1</code></p><p>机器语言依赖于机器，所以被称作低级语言</p><p><u>汇编语言呢？高级语言呢？</u></p><br><h4 id="冯-·-诺依曼结构"><a href="#冯-·-诺依曼结构" class="headerlink" title="冯 · 诺依曼结构"></a>冯 · 诺依曼结构</h4><p>冯 · 诺依曼结构的五大经典部件：</p><p>1、外围的：<strong>输入设备</strong>、<strong>输出设备</strong>，合称I**/O设备**</p><ul><li><p>输入设备：键盘鼠标、扫描仪</p></li><li><p>输出设备：显示器、打印机</p></li><li><p>混合I/O设备：触摸屏、网卡</p></li></ul><p>2、存放程序和数据的：<strong>存储器</strong></p><ul><li><p>缓存cache ~ SRAM            快但是贵，容量很小（3MB）</p></li><li><p>主存/内存 ~ DRAM            比较快也比较贵，容量中等（8 ~ 16GB）</p></li><li><p>辅存/外存/二级存储器        慢但便宜，容量大（基本都是512GB起步）</p></li></ul><p>*只有放入内存的程序才会被CPU执行</p><p>3、组成CPU的两大部件：运算器（数据通路）、控制器</p><br><h4 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h4><p><img src="%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="存储器层次结构"></p><br><h4 id="指令集体系结构"><a href="#指令集体系结构" class="headerlink" title="指令集体系结构"></a>指令集体系结构</h4><p><img src="%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="指令集体系结构"></p><br><h4 id="集成电路制造"><a href="#集成电路制造" class="headerlink" title="集成电路制造"></a>集成电路制造</h4><p><img src="%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E5%88%B6%E9%80%A0.png" alt="集成电路制造.png"></p><br><h3 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h3><p>复习题是用来碎碎念回忆复习的，不是用来写的！</p><p>打*的问题在考试中不太重要或者比较复杂，请酌情跳过</p><ol><li>传统上计算机分为哪三类？后PC时代有哪两类计算机？</li><li>KB、MB、GB之上有哪些存储容量单位？</li><li>*计算机设计的八大伟大思想是什么？</li><li>Amdahl定律公式是什么？</li><li>高级语言经过什么过程变成汇编语言？汇编语言又经过什么变成机器语言？</li><li>冯·诺依曼结构由哪五大基本部件组成？CPU主要有哪两大部件？还有少量的哪个部件？</li><li>存储器层次中，最快贵小的、其次的、最廉价的是什么？分别采用什么技术？</li><li>Intel和苹果的处理器架构不同，是什么东西不同？</li><li>成品率、芯片面积、产量如何影响集成电路（IC）的自造成本？</li></ol><ul><li>传统意义上计算机分为PC、服务器、嵌入式计算机。后PC时代分为个人移动设备（PMD）、仓储规模计算机（WSC）</li><li>TB、PB、EB、ZB、YB</li><li>摩尔定律、抽象简化、加速大概率事件、并行提高、流水线提高性能、预测提高性能、存储器层次、冗余提高可靠性</li><li>改进后的执行时间 = 改进影响的执行时间 / 改进量 + 改进不影响的执行时间</li><li>高级语言经过编译变成汇编语言，汇编语言经过汇编转换为机器语言</li><li>控制器、存储器、运算器、输入\输出设备。CPU主要两大部件为控制器和运算器，还有少量的存储器</li><li>最快最贵最小的是高速缓存cache采用SRAM，其次是内存采用DRAM，辅存采用磁盘或闪存</li><li>Intel和苹果的处理器架构不同，是因为指令集体系结构不同即架构不同</li><li>成品率越高、产量越高、芯片面积越小，芯片的制造成本越低</li></ul><h3 id="第四部分-性能与功耗"><a href="#第四部分-性能与功耗" class="headerlink" title="第四部分 性能与功耗"></a>第四部分 性能与功耗</h3><p><img src="%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8A%9F%E8%80%97.png" alt="性能与功耗.png"></p><h4 id="评价性能的指标"><a href="#评价性能的指标" class="headerlink" title="评价性能的指标"></a>评价性能的指标</h4><p>个人计算机更看重<strong>响应时间（又称执行时间）</strong>：任务从开始到完成的时间</p><p>服务器更看重<strong>吞吐率</strong>：单位时间内完成的人物数量</p><p>课程主要讨论CPU执行时间</p><blockquote><p>性能 = 1 / 执行时间</p></blockquote><p>计算机A的性能是计算机B的几倍？-&gt; 计算机Ade执行时间是B的几分之一？</p><p><font color="grey">e.g. 运行同一个程序，计算机A用15秒，计算机B用10秒，谁的性能更高？它的性能比另外一台高多少？</font></p><p><font color="grey">计算机B的性能更高，B的性能比A高了15/10=1.5</font></p><h4 id="性能的度量"><a href="#性能的度量" class="headerlink" title="性能的度量"></a>性能的度量</h4><ul><li><strong>CPU执行时间：</strong>即CPU时间。它只表示在CPU上花费的时间，而不包括等待I/O或运行其他程序的时间。（包括用户CPU时间和系统CPU时间）</li><li><strong>用户CPU时间：</strong>用于用户程序为用户花费的CPU时间</li><li><strong>系统CPU时间：</strong>操作系统为用户花费的CPU时间</li><li><strong>时钟周期：</strong>也叫tick、clock tick、clock period、clock 或 cycle，为计算机一个时钟周期的时间，通常是处理器时钟，一般为常数</li><li><strong>时钟长度：</strong>每个时钟周期维持的时间长度</li><li>CPU的时钟频率f（主频）：一秒钟有多少个时钟周期。即：T = 1 / f                </li></ul><h4 id="CPU经典性能公式"><a href="#CPU经典性能公式" class="headerlink" title="CPU经典性能公式"></a>CPU经典性能公式</h4><blockquote><p>一个程序的CPU执行时间 = 一个程序的CPU时钟周期数 x 时钟周期时间    CPUtime = cycles * T</p></blockquote><blockquote><p>一个程序的CPU执行时间 = 一个程序的CPU时钟周期数 / 时钟评率</p></blockquote><p><font color="grey">e.g. 某程序在一台时钟频率为2GHz的计算机上运行需要10秒。现在将设计一台计算机B，希望将运行时间缩短为6秒。计算机的设计者采用的方法是提高时钟频率，但这会影响CPU其余部分的设计，使计算机B运行该程序时需要相当于计算机A的1.2倍时钟周期数。那么计算机设计者应该将时钟频率提高到多少？</font></p><p><img src="CPU%E9%A2%91%E7%8E%87%E9%A2%98.png" alt="CPU频率题.png"></p><ul><li><strong>CPI：</strong>每条指令的时钟周期数，表示执行某个程序或程序片断时每条指令所需的时钟周期平均数。</li></ul><blockquote><p>CPU时钟周期数 = 程序的指令数 x 每条指令的平均时钟周期数</p><p>cycles = IC x CPI</p></blockquote><p><img src="%E6%8C%87%E4%BB%A4%E6%80%A7%E8%83%BD%E5%85%AC%E5%BC%8F%E9%A2%98.png" alt="指令性能公式题.png"></p><blockquote><p>CPU 时间 = 指令数 x CPI x 时钟周期时间    CPUtime = IC * CPI * T</p></blockquote><p>或</p><blockquote><p>CPU 时间 = 指令数 x CPI / 时钟频率    CPUtime = IC * CPI / f</p></blockquote><p><font color="gray">e.g. 主频为4GHz的CPU，每个时钟周期的长度是多少秒？某程序共有3亿条指令，其中1亿条的CPI为3，2亿条的CPI为6，整个程序的CPI是多少?该CPU执行这个程序需要多长时间？</font></p><p><img src="%E7%BB%8F%E5%85%B8%E6%80%A7%E8%83%BD%E5%85%AC%E5%BC%8F.png"></p><h4 id="CPU经典性能公式为什么靠谱"><a href="#CPU经典性能公式为什么靠谱" class="headerlink" title="CPU经典性能公式为什么靠谱"></a>CPU经典性能公式为什么靠谱</h4><p>经典性能公式考虑了<strong>指令数IC</strong>、<strong>平均每条指令需要周期数CPI</strong>、<strong>时钟周期长度T（也就是主频 f 的倒数）</strong>全部三个因素</p><p>使用<strong>CPU执行时间</strong>这个靠谱的指标来衡量性能</p><ul><li><p>使用什么<font color="orange">编程语言</font>和<font color="orange">编译程序</font>、采取什么<font color="orange">算法</font>，影响指令数和CPI两个因素</p></li><li><p>采用什么<font color="orange">指令体系结构</font>，影响指令数、CPI、主频全部三个因素</p></li></ul><p>他们都会影响CPU性能</p><p>还有一个衡量性能的指标<font color="orange">MIPS</font>（million instruction per second，百万指令每秒）</p><blockquote><p>MIPS = IC / (CPUtime x 10^6) = f / (CPI x 10^6)</p></blockquote><p>因为只考虑了主频（周期长）和CPI两个指标，很受作者唾弃</p><h4 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h4><p>CMOS（互补型金属氧化半导体）是当前占统治地位的集成电路技术。</p><p>其中，晶体管的能耗主要来自动态能耗，即晶体管打开/关闭的短暂动态过程。</p><p>即 0 -&gt; 1 或 1 -&gt; 0 的过程</p><p>晶体管经历一次 0 -&gt; 1 -&gt; 0 或 1 -&gt; 0 -&gt; 1 的开关过程</p><p>能耗 = 负载电容 x 电压^2</p><p>开关频率与CPU主频相关</p><p>所以，功耗公式为</p><p><img src="%E5%8A%9F%E8%80%97%E5%85%AC%E5%BC%8F.png"></p><h3 id="教材习题"><a href="#教材习题" class="headerlink" title="教材习题"></a>教材习题</h3><p><strong>1.6</strong> 同一个指令集体系结构由两种不同实现。根据CPI不同，将指令分为A、B、C、D四类，P1的时钟频率是2.5GHz，CPI分别为1、2、3、3；P2的时钟评率是3GHz，CPI分别为2、2、2、2</p><p>一个程序有1x10E6条指令，四类指令比例分别为10%，20%，50%，20%</p><p>（1）每种实现的总CPI分别是？</p><p>（2）每种实现的时钟周期数为？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">因为：<span class="attribute">CPI</span>=cycles/IC</span><br><span class="line">P1 CPI = (1<span class="number">*10E6</span><span class="number">*0</span>.1+2<span class="number">*10E6</span><span class="number">*0</span>.2+3<span class="number">*10E6</span><span class="number">*0</span>.5+3<span class="number">*10E6</span><span class="number">*0</span>.2)/1<span class="number">*10E6</span> = 2.6</span><br><span class="line">P2 CPI = (2<span class="number">*10E6</span><span class="number">*0</span>.1+2<span class="number">*10E6</span><span class="number">*0</span>.2+2<span class="number">*10E6</span><span class="number">*0</span>.5+2<span class="number">*10E6</span><span class="number">*0</span>.2)/1<span class="number">*10E6</span> = 2</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU时钟周期数 <span class="operator">=</span> 程序的指令数 <span class="keyword">x</span> 每条指令的平均时钟周期数</span><br><span class="line">即：cycles <span class="operator">=</span> IC <span class="keyword">x</span> CPI</span><br><span class="line">P<span class="number">1</span> cycles <span class="operator">=</span> <span class="number">1</span><span class="keyword">x</span><span class="number">10E6</span> * <span class="number">2.6</span></span><br><span class="line">P<span class="number">2</span> cycles <span class="operator">=</span> <span class="number">1</span><span class="keyword">x</span><span class="number">10E6</span> * <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>1.7 性能公式与加速比</strong></p><p>对同一个程序，编译器A产生1x10E9条指令，执行时间为1.1s；编译器B产生1.2x10E9条指令，执行时间为1.5s</p><p>（1）若处理器时钟周期长度为1ns，求两个编译器产生程序的CPI</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU time = IC * <span class="keyword">CPI</span> * T</span><br><span class="line"></span><br><span class="line"><span class="number">1.1</span>s = <span class="number">1</span>*<span class="number">10E9</span> * A <span class="keyword">CPI</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="number">-9</span></span><br><span class="line">即 A <span class="keyword">CPI</span> = <span class="number">1.1</span></span><br><span class="line"><span class="number">1.5</span>s = <span class="number">1</span>*<span class="number">10E9</span> * B <span class="keyword">CPI</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="number">-9</span></span><br><span class="line">即 B <span class="keyword">CPI</span> = <span class="number">1.25</span></span><br></pre></td></tr></table></figure><p>（2）假设两个程序在不同处理器上运行，且执行时间相同，求：运行编译器A的处理器比运行B的快多少？</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CPUtime = IC * CPI / fs</span><br><span class="line"></span><br><span class="line"><span class="comment">(ICa * CPIa)</span>/fa = <span class="comment">(ICb * CPIb)</span>/fb</span><br><span class="line"></span><br><span class="line">fb/fa = <span class="comment">(ICb * CPIb)</span> / <span class="comment">(ICa * CPIa)</span> = <span class="comment">(1.25 * 1.2*10E9)</span>/<span class="comment">(1.1 * 1*10E9s)</span> = <span class="number">1.37</span></span><br><span class="line"></span><br><span class="line">即运行编译器B比A快<span class="number">1.37</span>倍</span><br></pre></td></tr></table></figure><p>（3）有种新的编译器，只产生6x10E8条指令，CPI平均为1.1，求：这种新编译器相对于编译器A、B的加速比各多少？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ICnew = 6<span class="number">*10E8</span></span><br><span class="line">CPInew = 1.1</span><br><span class="line">cycles new = 6.6<span class="number">*10E8</span></span><br><span class="line"></span><br><span class="line">S spead up = t 改进前/t 改进后</span><br><span class="line">Ta = ICa<span class="number">*C</span>PIa / ICnew<span class="number">*C</span>PInew</span><br><span class="line">   = 1<span class="number">*10E9</span><span class="number">*1</span>.1 / 6.6<span class="number">*10E8</span></span><br><span class="line">   = 1.67</span><br><span class="line">   </span><br><span class="line">Tb = ICb<span class="number">*C</span>PIb / ICnew<span class="number">*C</span>PInew</span><br><span class="line">   = 1.2<span class="number">*10E9</span><span class="number">*1</span>.25 / 6.6<span class="number">*10E8</span></span><br><span class="line">   = 2.27</span><br></pre></td></tr></table></figure><p><strong>1.11.4 1.11.11 性能公式的思想方式</strong></p><p>一台计算机运行SPEC基准测试程序用时750秒</p><p>（1）如果SPEC指令数增加10%，CPI增加5%，则执行时间变为原来的多少倍？</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPU <span class="built_in">time</span> = IC * CPI * <span class="built_in">T</span></span><br><span class="line"> = <span class="number">1.1</span> IC * <span class="number">1.05</span> CPI * <span class="built_in">T</span></span><br><span class="line"> = <span class="number">1.115</span></span><br></pre></td></tr></table></figure><p>（2）指令数不变，如果要在CPI降低15%的情况下，让CPU时间减少20%，时钟频率应该降为原来的多少倍？</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPU <span class="built_in">time</span> = IC * CPI * <span class="built_in">T</span></span><br><span class="line"><span class="number">0.8</span> CPU <span class="built_in">time</span> = IC * <span class="number">0.85</span> CPI * <span class="built_in">T</span></span><br><span class="line">即 <span class="built_in">T</span> = <span class="number">0.8</span>/<span class="number">0.85</span> = <span class="number">16</span>/<span class="number">17</span></span><br></pre></td></tr></table></figure><p><strong>1.14 Amdahl定律</strong></p><p>一个程序有50x10E6条浮点指令、110x10E6条整数指令、80x10E6条L/S指令和16x10E6条分支指令，4种指令的CPI分别是1、1、4、2，CPU时钟频率变为2GHz</p><p>（1）要让程序运行速度提高2倍，浮点指令的CPI应该变为多少</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU time = cycles * T</span><br><span class="line">即 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span></span><br><span class="line">1/2 cycles = 256<span class="number">*10E6</span>，只改变浮点指令CPI，其他指令<span class="attribute">cycles</span>=462*10E6</span><br><span class="line">所以，不能通过改变浮点指令CPI，使程序运行速度提高2倍</span><br></pre></td></tr></table></figure><p>（2）要让程序运行速度提高2倍，L/S指令的CPI应该变为多少</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU time = cycles * T</span><br><span class="line">即 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span></span><br><span class="line">1/2 cycles = 256<span class="number">*10E6</span>，只改变L/S指令的CPI，其他指令<span class="attribute">cycles</span>=320*10E6</span><br><span class="line">320<span class="number">*10E6</span> - 1/2(512<span class="number">*10E6</span>) = 64<span class="number">*10E6</span></span><br><span class="line">(80<span class="number">*10E6</span> * 4) / (64<span class="number">*10E6</span>)  = 5</span><br><span class="line">5/4 = 0.8</span><br></pre></td></tr></table></figure><p>（3）如果整数、浮点指令的CPI降低40%，L/S指令和分支指令的CPI减少30%，程序的执行时间改进多少？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPUtime 改进前 = cycles/f = 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span> / 2<span class="number">*10E9</span> = 0.256s</span><br><span class="line">CPUtime 改进后 = cycles/f = 50x10E6<span class="number">*0</span>.6 + 110x10E6<span class="number">*0</span>.6 + 80x10E6<span class="number">*2</span>.8 + 16x10E6<span class="number">*1</span>.4 = 342.4<span class="number">*10E6</span> / 2<span class="number">*10E9</span> = 0.171s</span><br><span class="line">0.256 - 0.171 = 0.085s</span><br><span class="line">程序改进0.085秒</span><br></pre></td></tr></table></figure><p><strong>1.8 功耗</strong></p><p>奔腾4主频为3.6GHz，工作电压为1.25V，平均静态功耗为10W，动态功耗90W；酷睿i5主频为3.4GHz，工作电压为0.9V，平均静态功耗为30W，动态功耗40W。</p><p>两个处理器的平均负载电容分别是？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">P = 1/2<span class="emphasis">*CU^2 *</span> f</span><br><span class="line"></span><br><span class="line">90w = 1/2 <span class="emphasis">* C *</span> 1.25^2 <span class="emphasis">* 3.6*</span>10E9</span><br><span class="line">即奔腾4的负载电容为：3.2<span class="emphasis">*10^-8(F)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">40w = 1/2 *</span> C <span class="emphasis">* 0.9^2 *</span> 3.4<span class="emphasis">*10E9</span></span><br><span class="line"><span class="emphasis">即酷睿i5的负载电容为：2.9*</span>10^-8(F)</span><br></pre></td></tr></table></figure><h3 id="四川大学期末习题"><a href="#四川大学期末习题" class="headerlink" title="四川大学期末习题"></a>四川大学期末习题</h3><p><strong>1、下面哪种处理器不是采用RISC指令系统（D）</strong></p><p>A. 华为麒麟处理器</p><p>B. 高通845 处理器</p><p>C. MIPS 处理器</p><p>D. Intel 处理器</p><p><strong>2、下面关于CPI的说法，错误的是（A）</strong></p><p>A. 多周期CPU比单周期CPU的CPI大，因此单周期CPU更快</p><p>B. 同一台机器中运行不同的程序CPI不一定相同</p><p>C. MIPS单周期CPU各种指令的CPI是相同的</p><p>D. MIPS多周期CPU访存指令CPI比R-type型指令CPI大</p><p><strong>3、下列哪一项和CPU的运算速度关系不大（D）</strong></p><p>A. CPU主频    B. MIPS    C. CPI    D. 主存频率</p><p><strong>4、将指令从符号码翻译成二进制码的程序（A）</strong></p><p>A. 汇编器    B. 编译器    C. 链接器    D. 加载器</p><p><strong>5、同一个程序，在同一台计算机的CPU超频前和超频后运行，假设内存的访问速度不变，超频前和超频后CPI对比应该是（B）</strong></p><p>注：CPU超频是指增大CPU的时钟频率</p><p>A. 超频前的CPI大</p><p>B. 超频后的CPI大</p><p>C. 一样大</p><p>D. 不确定</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">超频后，内存的访问速度不变，等待内存的时间长度相同，但是把时钟周期分的更小了，所以有了更多浪费掉的周期，所以引起了整个的<span class="keyword">CPI</span>增大</span><br></pre></td></tr></table></figure><p><strong>6、某处理器执行某一段程序，该程序包含三类指令，其中运算指令120条，访存指令60条，分支指令20条，各类指令的CPI分别为5、10和2。请计算执行这段程序的平均CPI</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPI = 总cycles / 总IC </span><br><span class="line">= (120\*5<span class="string">+60</span>\*10<span class="string">+20</span>*2) / (120<span class="string">+60</span><span class="string">+20</span>) </span><br><span class="line">= 6.2 </span><br></pre></td></tr></table></figure><p><strong>7、编译程序对一个应用在给定的处理器上的性能有极深的影响。假定一个程序，如果采用编译程序A，则动态指令数为1.0x10^9，执行时间为1.5s；如果采用编译程序B，则动态指令数为1.5x10^9，执行时间为2.1s。若该处理器的时钟周期为1ns，请分别求出每种编译程序下的平均CPI</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CPUtime</span> = IC * CPI * T</span><br><span class="line">CPI <span class="attr">A</span> = CPUtime / IC * <span class="attr">T</span> </span><br><span class="line">= <span class="number">1.5</span> / <span class="number">1</span>*<span class="number">10</span>^<span class="number">9</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="attr">-9</span></span><br><span class="line">    = <span class="number">1.5</span></span><br><span class="line">CPI <span class="attr">B</span> = CPUtime / IC * <span class="attr">T</span></span><br><span class="line">= <span class="number">2.1</span> / <span class="number">1.5</span>*<span class="number">10</span>^<span class="number">9</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="attr">-9</span></span><br><span class="line">= <span class="number">1.4</span></span><br></pre></td></tr></table></figure><blockquote><p>转自：B站翼云</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在读完本书后，我们能够理解以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用C或Java等高级语言编写的程序如何翻译成硬件之间的语言？硬件如何执行程序？&lt;/p&gt;
&lt;p&gt;领会这些概念是理解软硬件两者如何影响程序性能的基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是软硬件之间的接口，以及软件如何指导硬件完成其功能？&lt;/p&gt;
&lt;p&gt;这些概念对于许多软件的编写十分重要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哪些因素决定了程序的性能？程序员如何才能改进程序性能？&lt;/p&gt;
&lt;p&gt;从本书中我们将知道，程序性能取决于原始程序、将该程序转换为计算机语言的软件以及执行该程序的硬件的有效性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么技术可供硬件设计者用于改进性能？&lt;/p&gt;
&lt;p&gt;本书将介绍现代计算机设计的基本概念。有感兴趣的读者可深入阅读另一本进阶教材《Computer Architecture: A Quantitative Approach》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;硬件设计者可使用那些技术提高能效？什么技术可供程序员提高或降低能效？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么串行处理近来发展为并行处理？这种发展带来的结果是什么？&lt;/p&gt;
&lt;p&gt;本书给出了解释，并介绍了当今支持并行处理的硬件机制，全面评述了新一代的多核微处理器（multicore microprocessor）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自1951年的第一台商用计算机开始，计算机架构师们提出的哪些伟大思想构成了计算机的基础？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="计算机组成与设计" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>卡拉马佐夫兄弟</title>
    <link href="http://example.com/2022/10/20/%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F/"/>
    <id>http://example.com/2022/10/20/%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F/</id>
    <published>2022-10-20T14:48:52.000Z</published>
    <updated>2022-10-20T14:50:49.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自<a href="https://www.zhihu.com/people/liu-zhao-11-41">虫虫</a></p></blockquote><p>1881年2月9日，就在陀思妥耶夫斯基执笔创作的时候，发生了一个小小的意外，或许根本算不上一个意外——他的的笔筒掉在了地上，然后滚到了书桌下面，于是他起身搬动书桌，然而，这成为了他生前的最后一个动作，在他搬动书桌的时候，突然由于用力过猛导致血管破裂，饱受病痛困扰的他永远地倒在了这次意外之中，而书桌上，还放着他未完成的遗作，就是这部《卡拉马佐夫兄弟》。</p><p>尽管陀思妥耶夫斯基最后的这部作品没有完成，但仍然是一部世界性的巨著，甚至把它称为人类历史上最伟大的小说也不为过，引用一句有些俗套的评价——任何语言都不足以形容这部作品的伟大。</p><span id="more"></span><p><strong>陀思妥耶夫斯基在《卡拉马佐夫兄弟》中显然比其它几部作品走得更远，可以视为其集大成之作，无论是《罪与罚》当中“到美国去”这条未能付诸实践的解脱之路，还是《白痴》中梅诗金公爵对周围环境徒然无力的感化，都在这本书中得到了延续。</strong></p><p><strong>不仅如此，陀思妥耶夫斯基笔下的社会往往充满罪恶感，擅于揭露人性中丑陋的一面，但是在这部作品当中，他表现出了自己最大的善意。</strong></p><p>《卡拉马佐夫兄弟》的故事并不复杂：老卡拉马佐夫贪财好色，只顾自己的享受而完全不顾及三个儿子的生活，导致三个儿子性格迥异。老大德米特里由于财产问题争得不可开交，甚至因为一个女子和父亲争风吃醋，到处扬言要杀死父亲。老二伊万是一个无神论者，他的思想最为激进，自己也饱受这方面的煎熬乃至被刺激到发疯。小儿子阿辽沙则简直是圣洁的化身，包括父亲在内的所有人都不可避免地被他吸引从而产生好感。一家人之间矛盾重重，最后终于因为长子德米特里和父亲矛盾激化，在情绪激动之下试图杀掉父亲，造成了一件使全俄罗斯震动并且扑朔迷离的“弑父案”。</p><h2 id="卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。"><a href="#卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。" class="headerlink" title="卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。"></a>卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。</h2><p>提起卡拉马佐夫一家，很多读者想到的是由书中青年拉基津之口所说的几个特性——好色、贪财、疯癫。<strong>但是另一面，卡拉马佐夫一家还有两个更重要的特征，就是智慧以及理性和原始欲望的碰撞。</strong></p><p>关于智慧，这一家人都在不同领域表现出了自己异于常人的地方，这在作品中有过多次描写。</p><p>老卡拉马佐夫对于赚钱有着灵敏嗅觉，并且善于察言观色，他在委托伊万去切尔马什尼亚办理树林采伐权之前的嘱咐尤为明显，<strong>他叮嘱伊万通过对方胡子抖动这个细节来判断对方是否说谎的细节可以说是神来之笔，这正是现在心理学上流行的“微反应”最直接的体现。</strong></p><p>伊万的智慧在小说中体现得最为明显，他不仅是一位受人尊敬的饱学之士，更是一位敢于和宗教直接对峙的无神论者，伊万可以看作是陀思妥耶夫斯基对宗教质疑的代言人，其在《宗教大法官》一章中的论述是整部作品的关键所在，甚至有很多读者认为伊万才是整部作品的灵魂人物。著名诺贝尔文学奖获得者阿尔贝·加缪在他的《西西弗神话》一书中就多次提及伊万，对这个人物进行了重要阐释，他认为伊万最具有卡拉马佐夫震摄人心的特质，而<strong>伊万的悲剧在于试图找到上帝以外的另一条路来爱别人，可惜的是，伊万没有具体的所爱对象，这种爱的情感因为无法被表达而被世界否定，以至于伊万最终毁灭了自己。</strong></p><p>阿辽沙的智慧在于他悲天悯人，他深受佐西玛长老和基督教的影响，是卡拉马佐夫一家中最具“神性”的人物，虽然作品未完成，对阿辽沙的塑造也没有完全展开，但是这并不妨碍阿辽沙这个角色本身的感化能力。<strong>在纯洁的孩子面前，阿辽沙就是天使的化身,小说结尾处阿辽沙在葬礼上对孩子们的演讲是升华之处，完全可以看做是陀思妥耶夫斯基对人类充满善意的期待。</strong></p><blockquote><p>要知道，最崇高的精神力量，在今后的生活中对身心最有益的感受，莫过于某种美好的回忆，尤其是童年时代从故乡故居保留下来的回忆。关于你们的教育问题人们经常向你们谈起，而某一段从童年时代保留下来的美好而神圣的回忆或许正是最好的教育。如果能带着很多这样的回忆走向生活，这个人便可终生得救</p></blockquote><p>而在长子德米特里身上，我们能深切地体会到理性和原始欲望碰撞产生的的矛盾，<strong>德米特里的形象看似歇斯底里，有着和其父一样好色和贪财的缺点，但德米特里其实更像是父亲之恶、阿辽沙之善以及伊万之理性结合而成的矛盾体。</strong>他一方面纠结于格露莘卡和卡捷琳娜两位女子的感情纠缠，一方面深陷于父亲死后被判是否有罪的泥潭，在这一波三折的冲突当中，他的感情迸发非常强烈。</p><p>著名法国作家安德烈·纪德曾<strong>把陀思妥耶夫斯基作品中的人物心灵分成了三个层面：智力区，这里滋生最坏的诱惑；情感区，激情泛滥；深层区，是智力和激情触及不到的，也可叫做复活区。如果照此来看，卡拉马佐夫三兄弟正好可以一一对应，伊万处在智力区，德米特里处在情感区，而阿辽沙则处在了深层区。</strong>当然，三个层面并无高低之分，彼此间的界限也没有那么明显。</p><p><strong>在对卡拉马佐夫三兄弟做了简要分析之后，下面来看关于文章标题的对应部分，陀思妥耶夫斯基在这部作品当中所表达出来的善意。</strong></p><h2 id="能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。"><a href="#能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。" class="headerlink" title="能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。"></a>能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。</h2><p>一个葱头的故事出自于小说女主人公格露莘卡之口：一个恶毒的老太婆一生之中只做了一件微不足道的好事，就是将一个葱头给了女乞丐，于是在她死后到了地狱以后，上帝便将这个葱头给她当作逃出地狱火坑的唯一希望。老太婆抓住这个救命稻草拼尽全力向上爬，就在即将逃离火坑的时候，地狱中的其他罪人看到以后纷纷拉住老太婆想一起逃出，凶恶的老太婆用脚将别人踢开，妄想自己一个人爬出去，结果葱头马上断了，她被永远地留在了地狱忍受煎熬。</p><p>这个故事被日本著名作家芥川龙之介改编成了短篇小说《蛛丝》，两个故事有异曲同工之妙，<strong>一个葱头和蜘蛛之丝之所以不能使人得到解脱，不在于它们本身的承受力，而在于每个人心底是否存在善意，无论葱头还是蛛丝都是因为善意而生，同样又因为恶念而消亡。</strong></p><p>一斤榛子则是关于卡拉马佐夫家族长子德米特里的经历，在德米特里年幼的时候，由于父亲缺乏关爱而食不果腹、衣不蔽体，本地的一个医生看到可怜的小德米特里之后便给他买了一斤榛子，这对一个肚饿的小孩子来说简直是最珍贵的礼物，而德米特里也始终心怀感激之心，在长大成人之后专门去已经年老的医生家中致敬表示谢意，这件小事也给被指控犯了弑父罪的德米特里赢得了众人的好感。</p><p><strong>一斤榛子和一个葱头同样微不足道，然而两者却展现出了两种不同的力量，葱头之所以被毁灭和榛子之所以能够救赎其实质殊途同归，陀思妥耶夫斯基通过这两件小事表现出了对人类善意的鼓励。</strong></p><h2 id="《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们"><a href="#《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们" class="headerlink" title="《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们"></a>《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们</h2><p>陀思妥耶夫斯基在这部遗作当中，用了相当大的篇幅来描写关于孩子的场景。</p><p>在伊万和阿辽沙关于《宗教大法官》的那次谈话当中，伊万给阿辽沙描述了多种人类对孩子所犯下的罄竹难书的“兽行”，给了阿辽沙极大冲击。阿辽沙本人自始至终都非常喜欢孩子并且深受孩子们喜爱，伊万的这次谈话给阿辽沙带来的，正是社会上关于孩子们最阴暗但是真实存在的一面。</p><blockquote><p>将军吩咐把男孩的衣服脱光，可怜他浑身发抖，吓得魂飞魄散，一声也不敢吱。这时将军下令：‘赶他跑。’狗夫们便冲他大叫：‘快跑，快跑！’那孩子便开始跑……只听得将军大喝一声：‘给我追！’——指挥所有的猎犬向小男孩冲去。母亲眼睁睁看着一大群狗把她的孩子撕成碎片！</p></blockquote><p><strong>陀思妥耶夫斯基把这些血淋淋的事实摆在作品当中，目的当然是为了做出警示——如果这个世界连对孩子都不能表达出起码的善意，那这个世界一切所谓的“善行”又有什么意义。</strong></p><p>小说中另一个关于孩子的重点描写是伊柳沙的葬礼，这部分每次读起来都让人潸然泪下。伊柳沙是一个自小疾病缠身的孩子，家庭的贫困更是让他的病情雪上加霜，而在他父亲受到侮辱之后他的心灵也遭到了不可挽回的摧残，故事的结尾，伊柳沙不出意外的去世了。</p><p><strong>伊柳沙的去世自然让读者悲痛万分，但不可忽略的是，陀思妥耶夫斯基在这里仍然给了我们很大安慰，也传达出了他最后的善意。</strong>这个善意的发起者，正是阿辽沙和一群孩子。</p><p>前文已经说过，阿辽沙是孩子们心中的天使，而孩子们正是受到了阿辽沙的感化才竭尽自己所能给了病危的伊柳沙最后陪伴，他们想尽办法让伊柳沙开心，在伊柳沙离开以后做出承诺照顾他的家人，并且做出了最重要的承诺：<strong>永远不会忘记他给我们生活带来过的美好，这或许是对一个死者最好的怀念。</strong></p><blockquote><p>不管我们会变得多么狠毒——但愿上帝保佑，别让我们走到这一步！——但只要我们回忆起我们曾为伊柳沙送葬，在他最后的一些日子里我们是多么爱他，此刻在这块大石头旁边，我们曾这样聚在一起友好交谈，——那么，即便是我们中间最狠毒、最好挖苦的人（如果我们变成那样的话），他在自己心里毕竟不敢嘲笑自己此时此刻曾经那么善良、那么仁爱。</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>《卡拉马佐夫兄弟》这部作品所表达的东西远不止上述所言，除此之外，陀思妥耶夫斯基对于人性以及宗教的探讨也格外深入，他的作品就像是一面面审视现实的镜子，无论多么细微或者深层之处在它的反射之下都无法隐匿。正如鲁迅所言：“陀思妥耶夫斯基是人类灵魂的伟大审问者”。</p><p><strong>这篇文章之所以选取“善意”这个角度作为切入点，也是为了想提醒热爱陀思妥耶夫斯基的读者，他不仅仅揭示了人性当中最深处的罪恶和丑陋，塑造了一个个充满悲剧的人生，也在传递着他对这个世界的善意和爱。</strong></p><p>最后用德国著名作家赫尔曼·黑塞的评价来结束这篇文章，相信这也是很多读者喜欢陀思妥耶夫斯基作品的原因：</p><blockquote><p>我们之必须阅读陀思妥耶夫斯基，只是在我们遭受痛苦不幸，而我们承受痛苦的能力又趋于极限之时，只是在我们感到整个生活有如一个火烧火燎、疼痛难忍的伤口之时，只是在我们充满绝望、经历无可慰藉的死亡之时。当我们孤独苦闷，麻木不仁地面对生活时，当我们不再能理解生活那疯狂而美丽的残酷，并对生活一无所求时，我们就会敞开心扉去聆听这位惊世骇俗、才华横溢的诗人的音乐。这样，我们就不再是旁观者，不再是欣赏者和评判者，而是与陀思妥耶夫斯基作品中所有受苦受难者共命运 的兄弟，我们承受他们的苦难，并与他们一道着魔般地、駸駸乎投身于生活的旋涡，投身于死亡的永恒碾盘。只有当我们体验到陀思妥耶夫斯基那令人恐惧的常常像地狱般的世界的奇妙意义，我们才能听到他的音乐和飘荡在音乐中的安慰和爱。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;https://www.zhihu.com/people/liu-zhao-11-41&quot;&gt;虫虫&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1881年2月9日，就在陀思妥耶夫斯基执笔创作的时候，发生了一个小小的意外，或许根本算不上一个意外——他的的笔筒掉在了地上，然后滚到了书桌下面，于是他起身搬动书桌，然而，这成为了他生前的最后一个动作，在他搬动书桌的时候，突然由于用力过猛导致血管破裂，饱受病痛困扰的他永远地倒在了这次意外之中，而书桌上，还放着他未完成的遗作，就是这部《卡拉马佐夫兄弟》。&lt;/p&gt;
&lt;p&gt;尽管陀思妥耶夫斯基最后的这部作品没有完成，但仍然是一部世界性的巨著，甚至把它称为人类历史上最伟大的小说也不为过，引用一句有些俗套的评价——任何语言都不足以形容这部作品的伟大。&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>软件评测师试题</title>
    <link href="http://example.com/2022/10/16/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/10/16/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E8%AF%95%E9%A2%98/</id>
    <published>2022-10-16T14:11:27.000Z</published>
    <updated>2022-10-16T15:58:45.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="模拟题1"><a href="#模拟题1" class="headerlink" title="模拟题1"></a>模拟题1</h3><ol><li>最适合数字加减运算的是<font color="orange">补码</font>，最适合表示浮点数阶码的编码是<font color="orange">移码</font></li><li>主存容量16MB，按字节编址，表示该主存地址至少需要<font color="orange">24</font>位。</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">16MB</span> = <span class="number">16</span> * <span class="number">1024</span>KB = <span class="number">2</span>^<span class="number">4</span> * <span class="number">1024</span>B * <span class="number">1024</span>B = <span class="number">2</span>^<span class="number">4</span> * <span class="number">2</span>^<span class="number">10</span> * <span class="number">2</span>^<span class="number">10</span> = <span class="number">2</span>^<span class="number">24</span>B</span><br></pre></td></tr></table></figure><ol start="3"><li><p>操作数所处的位置，可以决定指令的寻址方式。操作数包含在指令中，寻址方式为 <font color="orange">立即寻址</font>；</p><p>操作数在寄存器中，寻址方式为<font color="orange">寄存器寻址</font>；</p><p>操作数的地址在寄存器中，寻址方式为<font color="orange">寄存器间接寻址</font> 。 </p><span id="more"></span></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定操作数或操作数存放位置的方式称为寻址方式</span><br></pre></td></tr></table></figure><p><img src="%E6%93%8D%E4%BD%9C%E6%95%B0%E6%89%80%E5%9C%A8%E5%9C%B0%E5%9D%80%E7%9A%847%E7%A7%8D%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.png" alt="操作数所在地址的7种寻址方式"></p><center><small>操作数所在地址的7种寻址方式</small></center><blockquote><p>寻址方式参考：<a href="https://blog.csdn.net/weixin_42562387/article/details/114433665">https://blog.csdn.net/weixin_42562387/article/details/114433665</a></p></blockquote><h4 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h4><p>操作数包含在指令中，紧跟着操作码并与操作码一起存放在代码段中，与代码一起被取入CPU的指令队列，指令执行时不需要到其他地址单元中去取。<br>立即寻址中的操作数可以是计算机有效数制下的数值，也可以是带单引号的字符。这种寻址方式主要用于给寄存器或存储单元赋初值的场合。</p><p><strong>立即寻址方式是这七种寻址方式中速度最快的寻址方式。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ah,80h             ;8位</span><br><span class="line">mov ax,1234h           ;16位</span><br><span class="line">mov eax,12345678h      ;32位</span><br></pre></td></tr></table></figure><h4 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h4><p>操作数在CPU内部的寄存器中，在指令中指定寄存器号。需要注意的是:<strong>源操作数与目的操作数字长要相同</strong></p><ol><li>源操作数是寄存器</li></ol><blockquote><p>ADD VARD,EAX; VARD是双字类型变量</p></blockquote><ol><li>目的操作数是寄存器</li></ol><blockquote><p>ADD BH, 78h;</p></blockquote><ol><li>源和目的操作数都是寄存器</li></ol><blockquote><p>MOV EAX, EBX;</p></blockquote><h4 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h4><p>操作数存放在内存中，在指令中直接给出该操作数的有效地址，这种寻址方式为直接寻址方式。</p><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p>操作数在存储器中，操作数的有效地址用SI、DI、BX和BP等四个寄存器之一来指定，称这种寻址方式为寄存器间接寻址方式。</p><p>规定：在不使用段超越前缀的情况下</p><p>若有效地址用SI、DI和BX等之一来指定，则其缺省的段寄存器为DS；<br>若有效地址用BP来指定，则其缺省的段寄存器为SS(即：堆栈段)。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;模拟题1&quot;&gt;&lt;a href=&quot;#模拟题1&quot; class=&quot;headerlink&quot; title=&quot;模拟题1&quot;&gt;&lt;/a&gt;模拟题1&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;最适合数字加减运算的是&lt;font color=&quot;orange&quot;&gt;补码&lt;/font&gt;，最适合表示浮点数阶码的编码是&lt;font color=&quot;orange&quot;&gt;移码&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;主存容量16MB，按字节编址，表示该主存地址至少需要&lt;font color=&quot;orange&quot;&gt;24&lt;/font&gt;位。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;16MB&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;KB = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;B * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;B = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;p&gt;操作数所处的位置，可以决定指令的寻址方式。操作数包含在指令中，寻址方式为 &lt;font color=&quot;orange&quot;&gt;立即寻址&lt;/font&gt;；&lt;/p&gt;
&lt;p&gt;操作数在寄存器中，寻址方式为&lt;font color=&quot;orange&quot;&gt;寄存器寻址&lt;/font&gt;；&lt;/p&gt;
&lt;p&gt;操作数的地址在寄存器中，寻址方式为&lt;font color=&quot;orange&quot;&gt;寄存器间接寻址&lt;/font&gt; 。 &lt;/p&gt;</summary>
    
    
    
    <category term="软件测试" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试基本理论" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>监控docker容器状态脚本</title>
    <link href="http://example.com/2022/10/13/%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2022/10/13/%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E8%84%9A%E6%9C%AC/</id>
    <published>2022-10-13T14:51:39.000Z</published>
    <updated>2023-01-29T07:27:35.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>使用前先要修改的内容</strong></p><ol><li><p>更改<code>server_log_path</code> 存储路径，该路径是存储监控内容的总路径 </p></li><li><p>修改<code>server_array</code> 数组值，修改成要监控的docker容器名称</p></li><li><p>同步修改calc.sh文件第13行 <code>printf &#39;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&#39;</code></p></li></ol><p><strong>使用方法</strong></p><ol><li><p>执行 calc.sh 文件</p></li><li><p>输入要监控的容器名称，**数字间空格分开。如: 0 2 3 **</p></li><li><p>输入监控的时长<strong>只能输入数字</strong></p><p><strong>注意1: calc.py 和 calc.sh</strong> <strong>要在同一个目录下</strong></p><p><strong>注意2: 请使用管理员用户执行该脚本，否则需要修改脚本中docker status，给其添加权限</strong></p></li></ol><span id="more"></span><h4 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line">date_time=`date &quot;+%Y_%m_%d_%H-%M-%S&quot;`</span><br><span class="line">server_log_path=/home/dengyuanjing/docker/test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始服务数组</span></span><br><span class="line">server_array=(&quot;Freeswitch&quot; &quot;dialer&quot; &quot;PNLP&quot; &quot;MRCP&quot; &quot;VCG_TTS&quot; &quot;ptts_cloud&quot; &quot;VCG&quot; &quot;PSTT&quot;)</span><br><span class="line"></span><br><span class="line">echo &quot;-----------------------------------------------------------------------------------------------&quot;</span><br><span class="line">echo &quot;生成的目录名称是：$date_time&quot;</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">printf &#x27;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&#x27;</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">read -p &quot;请输入要监控的服务序号(空格分隔)：&quot; number</span><br><span class="line">read -p &quot;请输入要监控的时长(分钟)：&quot; server_time</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取用户输入的长度（不包括空格）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> num=`<span class="built_in">echo</span> <span class="variable">$number</span> | awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;print NF&#125;&#x27;</span>`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户指定要监控的数组</span></span><br><span class="line">select_array=()</span><br><span class="line"></span><br><span class="line">for i in $&#123;number[@]&#125;</span><br><span class="line">do</span><br><span class="line">    select_array[$&#123;#select_array[@]&#125;]=$&#123;server_array[$i]&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;您所选择的监控有：$&#123;select_array[@]&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用下面命令生成1.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker stats dialer &gt; dialer.txt</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存放<span class="built_in">log</span>的路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">LOG_PATH=/home/dengyuanjing/docker/<span class="built_in">test</span>/<span class="variable">$date_time</span>/<span class="variable">$server</span>/</span></span><br><span class="line">PID_array=()</span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    mkdir -p $log_path</span><br><span class="line">    log_result_path=$log_path/result</span><br><span class="line">    mkdir -p $log_result_path</span><br><span class="line">    # 后台监控docker进程</span><br><span class="line">    nohup docker stats $server &gt; $log_path/$server.txt 2&gt;&amp; 1 &amp;</span><br><span class="line">    # 将各个服务的进程号记录的数组中</span><br><span class="line">    PID_array[$&#123;#PID_array[@]&#125;]=$!</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出PID_array的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ps -ef | grep <span class="string">&quot;docker stats dialer&quot;</span></span></span><br><span class="line">for i in $&#123;PID_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo &quot;所监控的进程ID为：$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sleep $&#123;server_time&#125;m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> 掉监控进程</span></span><br><span class="line">for server_PID in $&#123;PID_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    kill -9 $server_PID</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sleep 1m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 过滤docker监控的文本</span></span><br><span class="line"></span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    log_result_path=$log_path/result/</span><br><span class="line">    #echo &quot;现在要过滤的server名称为：$server&quot;</span><br><span class="line">    #echo &quot;路径为：$log_path/$server.txt&quot;</span><br><span class="line">    # 1.过滤出Container ID</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;NR==2 &#123;print $1&#125;&#x27; | grep -v CONTAINER &gt; CONTAINER.log</span><br><span class="line">    # 2.过滤出容器名</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;NR==2 &#123;print $2&#125;&#x27; &gt; CONTAINER_NAME.log</span><br><span class="line">    # 3.过滤出CPU</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $3&#125;&#x27; | grep -v NAME &gt; CPU_Usage.log</span><br><span class="line">    # 4.过滤出使用内存</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $4&#125;&#x27; | grep -v CPU &gt; MEM_Usage.log</span><br><span class="line">    # 5.过滤出内存占比</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $7&#125;&#x27; | grep -v USAGE &gt; MEM_Rate.log</span><br><span class="line">    # 6.过滤出发送数据量Net I</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $8&#125;&#x27; | grep -v USAGE |grep -v / &gt; NET_input.log</span><br><span class="line">    # 7.过滤出接受数据量Net O</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $10&#125;&#x27; | grep -v USAGE |grep -v &#x27;MEM&#x27; &gt; NET_output.log</span><br><span class="line">    # 8.过滤出块读取数据量Block </span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $11&#125;&#x27; | grep -v &quot;%&quot; &gt; Block_input.log</span><br><span class="line">    # 9.过滤出块写入数据量Block O</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $13&#125;&#x27; | grep -v &quot;I/O&quot; &gt; Block_output.log</span><br><span class="line">    # 10.过滤出容器线程数Pids</span><br><span class="line">    # PIDS=cat $log_path/$server.txt |awk &#x27;&#123;print $14&#125;&#x27; | grep -v &quot;BLOCK&quot;</span><br><span class="line"></span><br><span class="line">    # 将日志移入LOG_PATH下</span><br><span class="line">    mv CONTAINER.log $log_result_path</span><br><span class="line">    mv CONTAINER_NAME.log $log_result_path</span><br><span class="line">    mv CPU_Usage.log $log_result_path</span><br><span class="line">    mv MEM_Usage.log $log_result_path</span><br><span class="line">    mv MEM_Rate.log $log_result_path</span><br><span class="line">    mv NET_input.log $log_result_path</span><br><span class="line">    mv NET_output.log $log_result_path</span><br><span class="line">    mv Block_input.log $log_result_path</span><br><span class="line">    mv Block_output.log $log_result_path</span><br><span class="line">    </span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算</span></span><br><span class="line"></span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    log_result_path=$log_path/result/</span><br><span class="line">    python3 calc.py $log_result_path $server</span><br><span class="line"></span><br><span class="line">    # 打印</span><br><span class="line">    sleep 5</span><br><span class="line">    log_result_path=$log_path/result</span><br><span class="line">    cat $log_result_path/calc.txt</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    设置读取的文本路径</span></span><br><span class="line"><span class="string">    1.cpuUsagePath</span></span><br><span class="line"><span class="string">    2.memUsagePath</span></span><br><span class="line"><span class="string">    3.memRatePath</span></span><br><span class="line"><span class="string">    4.netInputPath</span></span><br><span class="line"><span class="string">    5.netOutputPath</span></span><br><span class="line"><span class="string">    6.blockInputPath</span></span><br><span class="line"><span class="string">    7.blockOutputPath</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">server = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="comment">#print(&quot;============================================================&quot;)</span></span><br><span class="line"><span class="comment">#print(PATH)</span></span><br><span class="line">cpuUsagePath = PATH+<span class="string">&#x27;CPU_Usage.log&#x27;</span></span><br><span class="line">memUsagePath = PATH+<span class="string">&#x27;MEM_Usage.log&#x27;</span></span><br><span class="line">memRatePath = PATH+<span class="string">&#x27;MEM_Rate.log&#x27;</span></span><br><span class="line">netInputPath = PATH+<span class="string">&#x27;NET_input.log&#x27;</span></span><br><span class="line">netOutputPath = PATH+<span class="string">&#x27;NET_output.log&#x27;</span></span><br><span class="line">blockInputPath = PATH+<span class="string">&#x27;Block_input.log&#x27;</span></span><br><span class="line">blockOutputPath = PATH+<span class="string">&#x27;Block_output.log&#x27;</span></span><br><span class="line">arrayPath = [cpuUsagePath, memUsagePath, memRatePath, netInputPath, netOutputPath, blockInputPath, blockOutputPath]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_calc</span>():</span></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(server+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%s\t%s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.calc 函数接收两个参数，一个是shell过滤后的值的单位，一个是shell过滤后的数组</span></span><br><span class="line"><span class="string">    2.calc 仅接受排序后的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">unit,array,server,listName</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 90/95/99百分率计算</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = array[-<span class="number">1</span>]</span><br><span class="line">    mixValue = array[<span class="number">0</span>]</span><br><span class="line">    averageValue = <span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = array[math.ceil(num_count*a1)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = array[math.ceil(num_count*a2)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = array[math.ceil(num_count*a3)]</span><br><span class="line"></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s%s%s%s\t %.2f %.2f %.2f %.2f %.2f %.2f\n&quot;</span> %(listName,<span class="string">&quot;(&quot;</span>,unit,<span class="string">&quot;)&quot;</span>,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于分离出unit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line"><span class="string">    1.循环列表</span></span><br><span class="line"><span class="string">    2.打印要计算的列表的名称，如：CPU_Usage、MEM_Usage</span></span><br><span class="line"><span class="string">    3.读取该路径文件</span></span><br><span class="line"><span class="string">    4.按照read_file()分离出来的unit，添加数组元素</span></span><br><span class="line"><span class="string">    5.送入calc()计算</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    <span class="comment"># 分割出每个log中的单位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arrayPath:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            firstLine = f.readline()</span><br><span class="line">            <span class="comment"># 正则匹配非数字的最后一位，即单位</span></span><br><span class="line">            pattern_value = re.findall(<span class="string">r&#x27;\D+&#x27;</span>,firstLine)</span><br><span class="line">            unit = pattern_value[-<span class="number">1</span>]</span><br><span class="line">            unit = unit.split()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print(&#x27;-------------------------------------单位为：&#x27;+unit)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line">        listName = i.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        listName = listName.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print()</span></span><br><span class="line">        <span class="comment">#print(listName)</span></span><br><span class="line">        <span class="comment">#print(type(listName))</span></span><br><span class="line">        array = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                lineValue = line.split(unit)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    array.append(<span class="built_in">float</span>(lineValue))</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;加入列表进行计算的值格式有误!&quot;</span>)</span><br><span class="line">        array.sort()</span><br><span class="line">        calc(unit,array,server,listName)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    write_calc()</span><br><span class="line">    read_file()</span><br></pre></td></tr></table></figure><h4 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line">date_time=`date <span class="string">&quot;+%Y_%m_%d_%H-%M-%S&quot;</span>`</span><br><span class="line">server_log_path=/home/liuyue/cpu/tool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始服务数组</span></span><br><span class="line">server_array=(<span class="string">&quot;freeswitch&quot;</span> <span class="string">&quot;dialer&quot;</span> <span class="string">&quot;piod&quot;</span> <span class="string">&quot;mrcp&quot;</span> <span class="string">&quot;vcg_3.3.2_hisense_docker&quot;</span> <span class="string">&quot;nlp_management&quot;</span> <span class="string">&quot;dm_service&quot;</span> <span class="string">&quot;nlp_management_web&quot;</span> <span class="string">&quot;nlu_service&quot;</span> <span class="string">&quot;content_service&quot;</span> <span class="string">&quot;classify_service&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----------------------------------------------------------------------------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;生成的目录名称是：<span class="variable">$date_time</span>&quot;</span></span><br><span class="line"><span class="comment">#printf &#x27;\n&#x27;</span></span><br><span class="line"><span class="comment">#printf &#x27;0.dialer\t1.piod\t2.mrcp\t3.vcg_3.3.2_hisense_docker\t4.nlp_management\t5.dm_service\t6.nlp_management_web\t7.nlu_service\t8.content_service\t9.classify_service\n&#x27;</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment">#read -p &quot;是否监控freeSwitch(y/n)：&quot; freeSwitchJudgment</span></span><br><span class="line"><span class="comment">#read -p &quot;请输入要监控的服务序号(空格分隔)：&quot; number</span></span><br><span class="line"><span class="comment">#read -p &quot;请输入要监控的时长(分钟)：&quot; server_time</span></span><br><span class="line"></span><br><span class="line">freeSwitchJudgment=n</span><br><span class="line">number=(0 1 2 3 4 5 6 7 8 9 10)</span><br><span class="line">server_time=30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入的长度（不包括空格）</span></span><br><span class="line"><span class="comment"># num=`echo $number | awk -F &quot; &quot; &#x27;&#123;print NF&#125;&#x27;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户指定要监控的数组</span></span><br><span class="line">select_array=()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$freeSwitchJudgment</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;您选择了监控freeSwitch&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;number[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    select_array[<span class="variable">$&#123;#select_array[@]&#125;</span>]=<span class="variable">$&#123;server_array[$i]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;您所选择的监控有：<span class="variable">$&#123;select_array[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 使用下面命令生成1.txt</span></span><br><span class="line"><span class="comment"># docker stats dialer &gt; dialer.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放log的路径</span></span><br><span class="line"><span class="comment">#LOG_PATH=/home/dengyuanjing/docker/test/$date_time/$server/</span></span><br><span class="line">PID_array=()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$freeSwitchJudgment</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    log_path=<span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/freeSwitch</span><br><span class="line">    mkdir -p <span class="variable">$log_path</span></span><br><span class="line">    log_result_path=<span class="variable">$log_path</span>/result</span><br><span class="line">    mkdir -p <span class="variable">$log_result_path</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取fs进程号</span></span><br><span class="line">    fs_PID=`ps -ef |grep freeswitch | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> <span class="variable">$&#123;select_array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    log_path=<span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/<span class="variable">$server</span></span><br><span class="line">    mkdir -p <span class="variable">$log_path</span></span><br><span class="line">    log_result_path=<span class="variable">$log_path</span>/result</span><br><span class="line">    mkdir -p <span class="variable">$log_result_path</span></span><br><span class="line">    <span class="comment"># 后台监控docker进程</span></span><br><span class="line">    nohup docker stats <span class="variable">$server</span> &gt; <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt 2&gt;&amp; 1 &amp;</span><br><span class="line">    <span class="comment"># 将各个服务的进程号记录的数组中</span></span><br><span class="line">    PID_array[<span class="variable">$&#123;#PID_array[@]&#125;</span>]=$!</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出PID_array的值</span></span><br><span class="line"><span class="comment"># ps -ef | grep &quot;docker stats dialer&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;PID_array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;所监控的进程ID为：<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$freeSwitchJudgment</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># fs监控时间 == sleep $&#123;server_time&#125;m</span></span><br><span class="line">    allTime=$((<span class="variable">$server_time</span>*<span class="number">60</span>))</span><br><span class="line">    fsTime=0</span><br><span class="line">    log_path=<span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/freeSwitch</span><br><span class="line">    log_result_path=<span class="variable">$log_path</span>/result</span><br><span class="line">    <span class="keyword">while</span> [ <span class="variable">$fsTime</span> -lt <span class="variable">$&#123;allTime&#125;</span> ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 监控内存</span></span><br><span class="line">        top -n 1 -b | grep <span class="variable">$fs_PID</span> | awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span> &gt;&gt; <span class="variable">$log_result_path</span>/fsmem.txt</span><br><span class="line">        <span class="comment"># 监控cpu</span></span><br><span class="line">        top -n 1 -b | grep <span class="variable">$fs_PID</span> | awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span> &gt;&gt; <span class="variable">$log_result_path</span>/fscpu.txt</span><br><span class="line"></span><br><span class="line">        sleep 5s</span><br><span class="line">        fsTime=`expr <span class="variable">$fsTime</span> + 5`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    sleep <span class="variable">$&#123;server_time&#125;</span>m</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kill 掉监控进程</span></span><br><span class="line"><span class="keyword">for</span> server_PID <span class="keyword">in</span> <span class="variable">$&#123;PID_array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$server_PID</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">sleep 1m</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 过滤docker监控的文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> <span class="variable">$&#123;select_array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    log_path=<span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/<span class="variable">$server</span></span><br><span class="line">    log_result_path=<span class="variable">$log_path</span>/result/</span><br><span class="line">    <span class="comment">#echo &quot;现在要过滤的server名称为：$server&quot;</span></span><br><span class="line">    <span class="comment">#echo &quot;路径为：$log_path/$server.txt&quot;</span></span><br><span class="line">    <span class="comment"># 1.过滤出Container ID</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;NR==2 &#123;print $1&#125;&#x27;</span> | grep -v CONTAINER &gt; CONTAINER.log</span><br><span class="line">    <span class="comment"># 2.过滤出容器名</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;NR==2 &#123;print $2&#125;&#x27;</span> &gt; CONTAINER_NAME.log</span><br><span class="line">    <span class="comment"># 3.过滤出CPU</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | grep -v NAME &gt; CPU_Usage.log</span><br><span class="line">    <span class="comment"># 4.过滤出使用内存</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span> | grep -v CPU &gt; MEM_Usage.log</span><br><span class="line">    <span class="comment"># 5.过滤出内存占比</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | grep -v USAGE &gt; MEM_Rate.log</span><br><span class="line">    <span class="comment"># 6.过滤出发送数据量Net I</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;&#123;print $8&#125;&#x27;</span> | grep -v USAGE |grep -v / &gt; NET_input.log</span><br><span class="line">    <span class="comment"># 7.过滤出接受数据量Net O</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span> | grep -v USAGE |grep -v <span class="string">&#x27;MEM&#x27;</span> &gt; NET_output.log</span><br><span class="line">    <span class="comment"># 8.过滤出块读取数据量Block </span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | grep -v <span class="string">&quot;%&quot;</span> &gt; Block_input.log</span><br><span class="line">    <span class="comment"># 9.过滤出块写入数据量Block O</span></span><br><span class="line">    cat <span class="variable">$log_path</span>/<span class="variable">$server</span>.txt |awk <span class="string">&#x27;&#123;print $13&#125;&#x27;</span> | grep -v <span class="string">&quot;I/O&quot;</span> &gt; Block_output.log</span><br><span class="line">    <span class="comment"># 10.过滤出容器线程数Pids</span></span><br><span class="line">    <span class="comment"># PIDS=cat $log_path/$server.txt |awk &#x27;&#123;print $14&#125;&#x27; | grep -v &quot;BLOCK&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将日志移入LOG_PATH下</span></span><br><span class="line">    mv CONTAINER.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv CONTAINER_NAME.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv CPU_Usage.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv MEM_Usage.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv MEM_Rate.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv NET_input.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv NET_output.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv Block_input.log <span class="variable">$log_result_path</span></span><br><span class="line">    mv Block_output.log <span class="variable">$log_result_path</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 计算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$date_time</span> &gt;&gt; <span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/calc.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> <span class="variable">$&#123;select_array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    log_path=<span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/<span class="variable">$server</span></span><br><span class="line">    log_result_path=<span class="variable">$log_path</span>/result/</span><br><span class="line">    python3 calc.py <span class="variable">$log_result_path</span> <span class="variable">$server</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印</span></span><br><span class="line">    sleep 5</span><br><span class="line">    log_result_path=<span class="variable">$log_path</span>/result</span><br><span class="line">    cat <span class="variable">$log_result_path</span>/calc.txt</span><br><span class="line">    cat <span class="variable">$log_result_path</span>/calc.txt &gt;&gt; <span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/calc.log</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算fs</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$freeSwitchJudgment</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    log_path=<span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/freeSwitch</span><br><span class="line">    log_result_path=<span class="variable">$log_path</span>/result/</span><br><span class="line">    python3 calc.py <span class="variable">$log_result_path</span> freeSwitch</span><br><span class="line">    cat <span class="variable">$log_result_path</span>/calc.txt</span><br><span class="line">    cat <span class="variable">$log_result_path</span>/calc.txt &gt;&gt; <span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/calc.log</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;===========================&quot;</span> &gt;&gt; <span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/calc.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span>  &gt;&gt; <span class="variable">$server_log_path</span>/<span class="variable">$date_time</span>/calc.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> curses.<span class="built_in">ascii</span> <span class="keyword">import</span> isspace</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_calc</span>():</span></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(server+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%5s\t%5s\t%5s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line">        <span class="comment">#f.write(&quot;type\tMax\tMin\tAvg\tPCT90\tPCT95\tPCT99\n&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.calc 函数接收两个参数，一个是shell过滤后的值的单位，一个是shell过滤后的数组</span></span><br><span class="line"><span class="string">    2.calc 仅接受排序后的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">unit,array,server,listName</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 90/95/99百分率计算</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = array[-<span class="number">1</span>]</span><br><span class="line">    mixValue = array[<span class="number">0</span>]</span><br><span class="line">    averageValue = <span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = array[math.ceil(num_count*a1)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = array[math.ceil(num_count*a2)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = array[math.ceil(num_count*a3)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;PATH:&quot;,PATH)</span></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s%s%s%s\t %.2f %.2f %.2f %.2f %.2f %.2f\n&quot;</span> %(listName,<span class="string">&quot;(&quot;</span>,unit,<span class="string">&quot;)&quot;</span>,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将两个列表的值改写到的文件中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_txt</span>(<span class="params">list1, list2, save_path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(save_path):</span><br><span class="line">        save_path_new = save_path+<span class="string">&#x27;_old&#x27;</span></span><br><span class="line">        <span class="comment">#print(save_path_new)</span></span><br><span class="line">        os.rename(save_path,save_path_new)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">            f.write(<span class="string">&#x27;&#123;&#125;&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(list1[i], list2[i]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker中网络IO/读写IO单位不同转换，未涉及内存单位问题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transformation</span>(<span class="params">i,unitList</span>):</span></span><br><span class="line">    temporaryList = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">if</span> line.isspace():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pattern_value = re.findall(<span class="string">r&#x27;\d+&#x27;</span>,line)</span><br><span class="line">                num = pattern_value[<span class="number">0</span>]</span><br><span class="line">                temporaryList.append(<span class="built_in">float</span>(num))</span><br><span class="line">    <span class="comment"># print(temporaryList)</span></span><br><span class="line">    <span class="comment"># 逐一比对单位，将不同的单位统一修改成相同单位</span></span><br><span class="line">    <span class="comment"># print(&quot;unitList&quot;,unitList)</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(unitList)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>,<span class="built_in">len</span>(unitList)):</span><br><span class="line">            <span class="keyword">if</span> unitList[k] == unitList[j]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># B kB MB GB</span></span><br><span class="line">                <span class="keyword">if</span> unitList[k] == <span class="string">&quot;MB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;GB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;MB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;MB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;kB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;MB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;MB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1000</span> / <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;MB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;kB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;MB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;kB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;kB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;GB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1000</span> * <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;kB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;kB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;kB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;GB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;MB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;GB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;GB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;kB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1000</span> / <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;GB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;GB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1000</span> / <span class="number">1000</span> / <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;GB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;B&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;kB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;B&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;B&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;MB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1000</span> * <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;B&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;B&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;GB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;B&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># B KiB MiB GiB</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;MiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;GiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;MiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;MiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;KiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;MiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;MiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;MiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;KiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;MiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;KiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;KiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;GiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;KiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;KiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;KiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;GiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;MiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;GiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;GiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;kiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;GiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;GiB&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;GiB&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;B&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;KiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;B&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;B&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;MiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;B&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> unitList[k] == <span class="string">&quot;B&quot;</span> <span class="keyword">and</span> unitList[j] == <span class="string">&quot;GiB&quot;</span>:</span><br><span class="line">                    temporaryList[j] = temporaryList[j] * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">                    unitList[j] = <span class="string">&quot;B&quot;</span></span><br><span class="line">        <span class="keyword">break</span>        </span><br><span class="line">    save_txt(temporaryList,unitList,i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于分离出unit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line"><span class="string">    1.循环列表</span></span><br><span class="line"><span class="string">    2.打印要计算的列表的名称，如：CPU_Usage、MEM_Usage</span></span><br><span class="line"><span class="string">    3.读取该路径文件</span></span><br><span class="line"><span class="string">    4.按照read_file()分离出来的unit，添加数组元素</span></span><br><span class="line"><span class="string">    5.送入calc()计算</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    <span class="comment"># 分割出每个log中的单位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arrayPath:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 读取第一行</span></span><br><span class="line">            firstLine = f.readline()</span><br><span class="line">            <span class="comment"># 正则匹配非数字的最后一位，即单位</span></span><br><span class="line">            pattern_value = re.findall(<span class="string">r&#x27;\D+&#x27;</span>,firstLine)</span><br><span class="line">            unit = pattern_value[-<span class="number">1</span>]</span><br><span class="line">            unit = unit.split()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print(&#x27;-------------------------------------单位为：&#x27;+unit)</span></span><br><span class="line">        <span class="comment"># 读取每一行，将所有单位分离出来，并写入unitList中</span></span><br><span class="line">        unitList = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 读取每一行</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                <span class="keyword">if</span> line.isspace():</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pattern_value = re.findall(<span class="string">r&#x27;\D+&#x27;</span>,line)</span><br><span class="line">                    unit = pattern_value[-<span class="number">1</span>]</span><br><span class="line">                    unit = unit.split()[<span class="number">0</span>]</span><br><span class="line">                    unitList.append(unit)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查列表中所有元素是否相同</span></span><br><span class="line">        isSame = unitList.count(unitList[<span class="number">0</span>]) == <span class="built_in">len</span>(unitList)</span><br><span class="line">        <span class="keyword">if</span>(isSame):</span><br><span class="line">            <span class="comment">#print(&quot;列表中所有元素相同&quot;)</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(i+<span class="string">&quot;列表中有元素不相同&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不相同的单位有&quot;</span>,<span class="built_in">set</span>(unitList))</span><br><span class="line">            <span class="comment"># 读取文件，将所有的值都写入列表</span></span><br><span class="line">            transformation(i,unitList)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line">        listName = i.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        listName = listName.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print()</span></span><br><span class="line">        <span class="comment">#print(listName)</span></span><br><span class="line">        <span class="comment">#print(type(listName))</span></span><br><span class="line">        array = []</span><br><span class="line">        unit = unitList[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                <span class="keyword">if</span> line.isspace():</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lineValue = line.split(unit)[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        array.append(<span class="built_in">float</span>(lineValue))</span><br><span class="line">                    <span class="keyword">except</span> ValueError:</span><br><span class="line">                        <span class="built_in">print</span>(server+<span class="string">&quot; &quot;</span>+i+<span class="string">&quot;加入列表进行计算的值格式有误! line为：&quot;</span>+<span class="built_in">str</span>(line)+<span class="string">&quot;lineValue为：&quot;</span>+<span class="built_in">str</span>(lineValue)+<span class="string">&quot;unit为：&quot;</span>+<span class="built_in">str</span>(unit))</span><br><span class="line">        array.sort()</span><br><span class="line">        calc(unit,array,server,listName)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    设置读取的文本路径</span></span><br><span class="line"><span class="string">    1.cpuUsagePath</span></span><br><span class="line"><span class="string">    2.memUsagePath</span></span><br><span class="line"><span class="string">    3.memRatePath</span></span><br><span class="line"><span class="string">    4.netInputPath</span></span><br><span class="line"><span class="string">    5.netOutputPath</span></span><br><span class="line"><span class="string">    6.blockInputPath</span></span><br><span class="line"><span class="string">    7.blockOutputPath</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">    server = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="comment">#print(&quot;============================================================&quot;)</span></span><br><span class="line">    <span class="comment">#print(PATH)</span></span><br><span class="line"></span><br><span class="line">    write_calc()</span><br><span class="line">    <span class="keyword">if</span> server == <span class="string">&quot;freeSwitch&quot;</span>:</span><br><span class="line">        cpuUsagePath = PATH+<span class="string">&#x27;fscpu.txt&#x27;</span></span><br><span class="line">        memUsagePath = PATH+<span class="string">&#x27;fsmem.txt&#x27;</span></span><br><span class="line">        arrayPath = [cpuUsagePath, memUsagePath]</span><br><span class="line">        unit=<span class="string">&quot;%&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arrayPath:</span><br><span class="line">            array = []</span><br><span class="line">            listName = i.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            listName = listName.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        array.append(<span class="built_in">float</span>(line))</span><br><span class="line">                    <span class="keyword">except</span> ValueError:</span><br><span class="line">                        <span class="built_in">print</span>(i,<span class="string">&quot;中有错误数据，请查看&quot;</span>)</span><br><span class="line">            array.sort()</span><br><span class="line">            calc(unit,array,server,listName)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cpuUsagePath = PATH+<span class="string">&#x27;CPU_Usage.log&#x27;</span></span><br><span class="line">        memUsagePath = PATH+<span class="string">&#x27;MEM_Usage.log&#x27;</span></span><br><span class="line">        memRatePath = PATH+<span class="string">&#x27;MEM_Rate.log&#x27;</span></span><br><span class="line">        netInputPath = PATH+<span class="string">&#x27;NET_input.log&#x27;</span></span><br><span class="line">        netOutputPath = PATH+<span class="string">&#x27;NET_output.log&#x27;</span></span><br><span class="line">        blockInputPath = PATH+<span class="string">&#x27;Block_input.log&#x27;</span></span><br><span class="line">        blockOutputPath = PATH+<span class="string">&#x27;Block_output.log&#x27;</span></span><br><span class="line">        arrayPath = [cpuUsagePath, memUsagePath, memRatePath, netInputPath, netOutputPath, blockInputPath, blockOutputPath]</span><br><span class="line">        <span class="comment"># 函数调用</span></span><br><span class="line">        read_file()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;使用前先要修改的内容&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;更改&lt;code&gt;server_log_path&lt;/code&gt; 存储路径，该路径是存储监控内容的总路径 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;server_array&lt;/code&gt; 数组值，修改成要监控的docker容器名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步修改calc.sh文件第13行 &lt;code&gt;printf &amp;#39;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;使用方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;执行 calc.sh 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入要监控的容器名称，**数字间空格分开。如: 0 2 3 **&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入监控的时长&lt;strong&gt;只能输入数字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意1: calc.py 和 calc.sh&lt;/strong&gt; &lt;strong&gt;要在同一个目录下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意2: 请使用管理员用户执行该脚本，否则需要修改脚本中docker status，给其添加权限&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>你当像鸟飞往你的山</title>
    <link href="http://example.com/2022/10/10/%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/"/>
    <id>http://example.com/2022/10/10/%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/</id>
    <published>2022-10-10T14:14:46.000Z</published>
    <updated>2022-10-10T14:15:56.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>《你当像鸟飞往你的山》刚看到这个名字的时候，我以为是回归本心，或是久别重逢，却没想到是通过教育来认识世界，从而坚持自我。</p><p>这也正印证了英文的标题《Educated》</p><p>塔拉的家庭无疑是一个偏激的摩门家庭——父母不信任政府、不参与涉及关于政府的任何工作、从不去医院治疗、他的孩子也从不上学。</p><p>直接原因应该是：<strong>韦恩家事件</strong></p><p>书中多处提到韦恩家在1990年发生的惨案，这导致了父亲的直接转变。但这一切父亲并未亲身经历，只是双向情感障碍带来的幻想。</p><p>对于塔拉来说，家庭是不可分割的一部分。即使肖恩对塔拉在残忍，塔拉依然愿意相信哥哥，而非是自己的记忆。对于父母的作为，她更愿意相信那是一场梦，只要有人告诉她这一切都是她自己幻想出来的，她就会相信。</p><p>直到父母在巴克峰中大肆宣扬她被恶魔附身，塔拉用了一年的时间终于与父亲切断联系，但还是对母亲念念不忘。</p><p>对于父母给塔拉施加的偏激思想——不可以穿露出肉的衣服、不要相信政府、不能去医院等，还有那些文化与学识。塔拉都通过教育慢慢的认清社会与现实。</p><p>教育改变了自己，认清了和家人的隔阂，不会再为家人而妥协与让步，而是更多的考虑自身</p><p>我想到了我父母也是带有这偏激色彩，小病不相信医院也不愿意去医院，反而耽误了病情。还有一些网上的说教也严重影响了他们的主观认知。对于他们来说，那些东西他们也不曾经历过，而奉为经典。</p><p>或许对于我们来说，父母的偏激不会那么明显，但教育是能够认清自己，并摆脱他们偏激思想的重要途径</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>离散数学</title>
    <link href="http://example.com/2022/08/28/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    <id>http://example.com/2022/08/28/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</id>
    <published>2022-08-28T07:14:23.000Z</published>
    <updated>2022-09-01T15:59:27.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>离散数学课程的主要内容：</p><ol><li>基础：逻辑和证明</li><li>基本结构（包括集合、函数、序列、求和与矩阵）</li><li>计数</li><li>高级计数</li><li>关系</li><li>图</li><li>树</li><li>布尔代数</li></ol><p>学习该课程的目的：</p><ol><li>为学习计算机后继课程，如数据结构、编译原理、操作系统、数据库原理、形式语言及自动机。软件工程与方法学、计算机网络和人工智能、高级程序设计语言等，提供必要的数据基础；为阅读计算机文章作充分的数学准备</li></ol><p>数理逻辑：人工智能、数据库、形式语言及自动机、高级程序设计语言</p><p>集合论：信息结构与检索、数据结构</p><p>布尔代数等：开关理论、逻辑设计和程序理论、语法分析</p><p>图论：可计算性理论、计算机网络、数据结构</p><ol start="2"><li>通过学习离散数学，可以培养和提高自己的抽象思维和逻辑推理能力，获得解决实际问题的能力，为以后的软、硬学习和研究开发工作，打下坚实的数学基础。</li></ol><span id="more"></span><h2 id="基础：逻辑和证明"><a href="#基础：逻辑和证明" class="headerlink" title="基础：逻辑和证明"></a>基础：逻辑和证明</h2><h3 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><ul><li>命题</li><li>联结词<ul><li>否定联结词</li><li>合取联结词</li><li>析取联结词</li><li>条件语句：逆命题、逆否命题、反命题</li><li>双条件语句</li></ul></li><li>真值表</li></ul><h4 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h4><ul><li><strong>命题：</strong>是一个陈述句（即陈述事实的语句），它或者或假，但不能既真又假。即：<strong>命题是能够判断真假的陈述句。</strong></li><li><strong>原子命题：</strong>不能分解为更简单的陈述句</li></ul><p><img src="%E5%91%BD%E9%A2%981.png"></p><p>说明：</p><ol><li><p>只有具有确定真值得陈述句才是命题。</p><p>一切没有判断内容的句子，无所谓是非的句子，如：祈使句、感叹句、疑问句等都不是命题</p></li><li><p>因为命题只有两种真值，所以“命题逻辑”又称“二值逻辑”</p></li><li><p>“具有确定真值”是指客观上的具有，有我们是否知道它的真值是两回事</p><p>比如：其他星球上有生命</p></li></ol><p>命题逻辑</p><p><strong>命题构造</strong></p><ul><li>命题变元：p，q，r，s……</li><li>一个命题是真命题，用T表示</li><li>一个命题是加盟命题，用F表示</li><li>复合命题：由原子命题用逻辑运算符组合而来<ul><li>否定联结词：┐</li><li>合取联结词：∧</li><li>析取联结词：∨</li><li>or 联结词：⊕</li><li>条件联结词：→</li><li>双条件联结词：↔</li></ul></li></ul><h4 id="复合命题——联结词"><a href="#复合命题——联结词" class="headerlink" title="复合命题——联结词"></a>复合命题——联结词</h4><ol><li><p>否定联结词（逻辑非）</p><p>令p为一命题，则p的否定记作┐p</p><table><thead><tr><th>p</th><th>┐p</th></tr></thead><tbody><tr><td>T</td><td>F</td></tr><tr><td>F</td><td>T</td></tr></tbody></table></li><li><p>合取联结词（逻辑与）</p><p>令p和q为命题，p、q的合取记作p∧q</p><table><thead><tr><th>p</th><th>q</th><th>p∧q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></li><li><p>析取联结词（逻辑或）</p><p>令p和q为命题，p、q的析取记作p∨q</p><table><thead><tr><th>p</th><th>q</th><th>pVq</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></li><li><p>联结词 or （or有两种不同的含义）</p><ul><li><p>兼或（inclusive or）</p><p>例如：修过计算机科学或高数的学生可以修这门课</p><p>这就是析取的含义，p v q为真，只要两个命题之一为真或两者均为真即可。</p></li><li><p>异或（exclusive or）【相异为真】</p><p>例如：套餐含汤或饮料</p><p>这就是异或（XOR）的含义。p⊕q为真，则两个命题只有一个为真，但不能同事为真</p></li></ul><p>两个命题异或的真值表</p><table><thead><tr><th>p</th><th>q</th><th>p⊕q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>F</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table></li><li><p>条件联结词（如果p，则q）</p><table><thead><tr><th>p（前件）</th><th>q（后件）</th><th>p→q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>T</td></tr></tbody></table><p>前提条件为假，结果必为真。例如：</p><ul><li>如果月亮是绿色奶酪做的，我比比尔盖茨更有钱</li><li>如果月亮是绿色奶酪做的，那么我就得靠救济生活</li><li>如果1+1=3，那么猪会飞。</li></ul><p>在条件语句p→q中，在前件之间不需要有任何联系。p→q只依赖于p和q的真值</p><p><img src="%E5%B8%B8%E7%94%A8%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E8%A1%A8%E8%BF%B0%E6%96%B9%E5%BC%8F.png" alt="常用条件语句表述方式"></p><p><strong>逆命题、逆否命题、反命题</strong></p><ul><li>q→p    是p→q的逆命题</li><li>┐q→┐p    是p→q的逆否命题</li><li>┐p→┐q    是p→q的反命题</li></ul></li><li><p>双条件联结词【相同为真】（与异或相反）</p><table><thead><tr><th>p</th><th>q</th><th>p↔q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>T</td></tr></tbody></table><p>双条件的表达方式</p><ul><li>p是q的充分必要条件</li><li>如果p那么q，反之亦然</li><li>p当且仅当q</li></ul></li></ol><h4 id="等价命题"><a href="#等价命题" class="headerlink" title="等价命题"></a>等价命题</h4><p><strong>如果两个命题总是有相同的真值，他们就是等价的</strong></p><p>例：用真值表说明条件语句等价于逆否命题</p><table><thead><tr><th>p</th><th>q</th><th>┐p</th><th>┐q</th><th>p→q</th><th>┐q→┐p</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>F</td><td>F</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>T</td><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td></tr></tbody></table><p>问题：有n个命题变元的真值表有多少行</p><p>解：2^n。我们可以构造的命题数量（不相等）为2^2^n个</p><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><table><thead><tr><th>Operator</th><th>Precedence</th></tr></thead><tbody><tr><td>┐</td><td>1</td></tr><tr><td>∧</td><td>2</td></tr><tr><td>∨</td><td>3</td></tr><tr><td>→</td><td>4</td></tr><tr><td>↔</td><td>5</td></tr></tbody></table><h3 id="命题逻辑的应用"><a href="#命题逻辑的应用" class="headerlink" title="命题逻辑的应用"></a>命题逻辑的应用</h3><h4 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h4><ul><li>语句翻译</li><li>系统规范说明</li><li>布尔搜索</li><li>逻辑谜题</li><li>逻辑电路</li></ul><h4 id="语句翻译"><a href="#语句翻译" class="headerlink" title="语句翻译"></a>语句翻译</h4><p>汉语常有二义性，为了在数学上避免歧义，需要翻译成由命题变量和逻辑联结词组成的表达式</p><p><strong>如何翻译成正确的命题公式</strong></p><p>命题演算的合式公式Wff</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;离散数学课程的主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础：逻辑和证明&lt;/li&gt;
&lt;li&gt;基本结构（包括集合、函数、序列、求和与矩阵）&lt;/li&gt;
&lt;li&gt;计数&lt;/li&gt;
&lt;li&gt;高级计数&lt;/li&gt;
&lt;li&gt;关系&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;布尔代数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学习该课程的目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为学习计算机后继课程，如数据结构、编译原理、操作系统、数据库原理、形式语言及自动机。软件工程与方法学、计算机网络和人工智能、高级程序设计语言等，提供必要的数据基础；为阅读计算机文章作充分的数学准备&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数理逻辑：人工智能、数据库、形式语言及自动机、高级程序设计语言&lt;/p&gt;
&lt;p&gt;集合论：信息结构与检索、数据结构&lt;/p&gt;
&lt;p&gt;布尔代数等：开关理论、逻辑设计和程序理论、语法分析&lt;/p&gt;
&lt;p&gt;图论：可计算性理论、计算机网络、数据结构&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过学习离散数学，可以培养和提高自己的抽象思维和逻辑推理能力，获得解决实际问题的能力，为以后的软、硬学习和研究开发工作，打下坚实的数学基础。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="数学" scheme="http://example.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>悉达多——一首印度的诗</title>
    <link href="http://example.com/2022/08/10/%E6%82%89%E8%BE%BE%E5%A4%9A%E2%80%94%E2%80%94%E4%B8%80%E9%A6%96%E5%8D%B0%E5%BA%A6%E7%9A%84%E8%AF%97/"/>
    <id>http://example.com/2022/08/10/%E6%82%89%E8%BE%BE%E5%A4%9A%E2%80%94%E2%80%94%E4%B8%80%E9%A6%96%E5%8D%B0%E5%BA%A6%E7%9A%84%E8%AF%97/</id>
    <published>2022-08-10T12:54:50.000Z</published>
    <updated>2022-08-10T15:09:09.335Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://www.zhihu.com/people/findingsea">findingsea</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近终于看了心仪已久的《悉达多》，先说读后感受：<strong>这很可能会是我今年看过的最好的一本书了</strong>，五星推荐。黑塞对东方哲学的理解相当深刻，尤其最后一场悉达多与乔文达坐而论道，可以说透彻淋漓，很久没看到这么精彩的大段论述。</p><p>故事其实不复杂，讲的就是一个古印度贵族青年悉达多，不追求财富地位，一心只想追求心灵的宁静，于是孤身展开了求道之旅。其实跟佛陀的故事很像。黑塞用悉达多的三次觉醒来阐述了他对佛教求道的理解。</p><p><em>本文全篇是有点长，如果对书的内容想自己体会的，可以跳过介绍部分，直接翻到最后总结，是我对《悉达多》全书的概括性体会。</em></p><span id="more"></span><h3 id="第一次觉醒"><a href="#第一次觉醒" class="headerlink" title="第一次觉醒"></a>第一次觉醒</h3><p>悉达多为了获得内心的宁静，决定遁入沙门，进行苦行修为。他的朋友乔文达追随他。然后即便经过多年的苦行，即便悉达多的修为已经超过了那些年老的沙门，他仍然觉得他对自我一无所知，他觉得在沙门这里必然难以获得最终的宁静。这时，世人纷纷传言，乔答摩在菩提树下顿悟得道，成为佛陀。于是，他和乔文达去拜访佛陀。</p><p>两人都为佛陀的智慧与安宁所折服，乔文达成为了佛陀的信徒。而悉达多，在于佛陀的一番交谈之后，仍然决定独自求道。</p><p>他之所以没有成为佛陀的信徒，因为佛陀的教义可以圆满地解释这个世界，除了一点：他是如何领悟到这些教义的。佛陀并没有从任何教义中学习，所以学习佛陀的教义并不能达到超然的境界，要达到这种境界，只能依靠自己。</p><p>在离开的路上，悉达多得到第一次觉醒：之所以我对自我一无所知，之所以悉达多对我来说一直保持陌生与未知，只因为我在逃避自我，我在追求梵天，阿特曼。我欲求摧毁自我、摆脱自我以便在未知的存在最深层发现万有的核心，即阿特曼、生命、上帝或绝对终极之物，而正因为如此，我却一路丢失了自我。</p><blockquote><p>为什么乔答摩在他觉悟成道的伟大时刻曾跌坐于菩提树之下? 因为他听见了自己内心的声音，这声音命令他在菩提树下寻求安宁，他并未求助于苦修、献祭、沐浴和祈祷、进餐和饮酒、睡眠和梦想，而是听从了自己内心的声音。人只应服从自己内心的声音，拒绝任何外力的驱使，并等待觉醒那一刻的到来；这才是善的和必要的行为，其他的一切毫无意义。</p></blockquote><p>第一次觉醒之后的悉达多开始认识到目之所见并不是虚幻，那就是实在的。他学会了用孩子一般单纯而无所求的目光去观看，这个世界是如此美好。当一个人能如此单纯，如此觉醒，如此专注于当下，毫无一律地走过这个世界，生命真是意见赏心乐事。</p><h3 id="第二次觉醒"><a href="#第二次觉醒" class="headerlink" title="第二次觉醒"></a>第二次觉醒</h3><p>悉达多向迦摩罗（妓女）学习情爱的技巧，向迦摩施瓦弥（富人）学习做生意的技巧。一开始悉达多只是把生意当成游戏，甚至他做的许多事情都只是游戏而已，他以观察世人而自娱，而他的心，他的本性却从未有丝毫投入。他真实的自我飘然于遥远的异乡，无影无踪，与他的现实生活彼此隔绝。然而，他逐渐沉沦于纸醉金迷的生活，他终于在这种生活中难以自拔了。时光荏苒，等他惊醒的时候，已经头生华发，感觉到现在生活的荒诞，他开始深深地厌恶自己，就像一个吃得过饱、喝酒过多的人在痛楚的呕吐之后会觉得好一点，悉达多也渴望通过一次骇人的呕吐来弃绝这毫无意义的生活。</p><p>悉达多想要自溺在河中，他想要投向死亡，正当此时，他听到了内心深处的唵字真言，这一瞬间他的灵魂猛然觉醒，他忆起了早已忘却的神圣的一切。在一场无梦而深沉的睡眠之后，悉达多感觉自己获得了新生。他感觉到现在所有无常之物又从身旁溜走，又一次他如婴儿般独立于天地之间，一无所知，一无所有，一无所学。他为自己的逃离感到快乐，同时领会到亲身经历世上的一切是件美事，孩提时代他就知道尘俗的享乐及财富为邪恶之物，长久以来他就知道这一点，但知道刚刚才有所体验，不仅在理智上，而是以眼睛、心灵以及胃口深知其意。</p><p>悉达多第二次觉醒，他意识到自己身体的某一部分死去了，那正是他的自我，他渺小、怯懦而傲慢的自我。</p><blockquote><p>悉达多终于明白为什么作为婆罗门或沙门这么多年与自我的斗争都失败了，因为他的傲慢，因为过多的知识，过多的圣诗，过多的献祭，过多的禁欲和过多的造作和追求阻碍了他，他永远都是最聪明的一员，永远那么博学。他的自我潜入了他祭司的身份，潜入他的理智和傲慢，而他却想通过斋戒和忏悔来摧毁自我。只有进入尘世并沉湎于权利、女人和金钱，只有成为商人、赌徒、酒鬼和富人，才能让他心中的祭司和沙门真正死去。他必须经历那些可怕的岁月，遭受恶心的折磨，彻底认清俗尘生活的空虚和疯狂，直到陷入绝望，只有这样，那个浪人悉达多和富人悉达多，才能真正死去，只有这样，他才能获得新生。</p></blockquote><h3 id="第三次觉醒"><a href="#第三次觉醒" class="headerlink" title="第三次觉醒"></a>第三次觉醒</h3><p>悉达多又遇到了当年载过他的摆渡老人，瓦稣迪瓦道，悉达多观察河水的寓意，观察瓦稣迪瓦道脸上的宁静，他决定留下来和瓦稣迪瓦道生活在一起。</p><blockquote><p>一次悉达多问瓦稣迪瓦道：“你是否也从河水学到了这个秘密：即世上并不存在时间的实体?”瓦稣迪瓦脸上漾起了明朗的笑意。 “是的，悉达多，”瓦稣迪瓦道，“是否是这个意思呢? 河水在同一时刻无处不在，遍及源头，河口、瀑布、渡口、水流、海洋以及山脉之间；从另一方面来说，现在只为其自身而存在，并非过去或未来的影子。” “正是如此，”悉达多道，“当我懂得这个道理，我回顾了我的生活。我的生命也是一条河，少年悉达多、成年悉达多和老年悉达多只是由于幻象而有分别，而并非由于现实而有分别。悉达多从前的生活并没有存在于过去，他的死以及终归于梵天也不是发生在将来。过去之心 不可得，未来之心不可得，万法皆如，俱入目前。”</p></blockquote><p>之后，悉达多重逢迦摩罗，并发现她为他生下了一个儿子。迦摩罗被毒蛇咬死后，悉达多把所有心思都交付在了儿子身上，把儿子留在身边照顾，然而他最终还是失去了他的儿子，因为他的儿子本来就不属于这里。失子之痛，让悉达多开始真正理解和同情俗尘的情感，不再那么聪明，不再那么傲慢，而是更为温和，更富同情。</p><blockquote><p>心中的创伤仍久久地隐隐作痛。悉达多的船客中有许多是与自己的儿女同行。每见一位有儿女相伴的行客，他都忍不住心中嫉妒；他想：那么多人都拥有这巨大的幸福——为什么我偏偏没有? 甚至那些恶人、盗贼和劫匪都有儿女相伴，连他们都可以爱自己的孩子并为他们的孩子所爱，为什么我却独独没有? 悉达多此时的思维竟如此幼稚，如此缺乏逻辑，他与凡俗的人们竟变得如此相像。 现在他待人的态度与从前不同：不再那么聪明，不再那么傲慢，而是变得更为温和，更为好奇并且更富于同情。 现在，当他送那些庸常的行客们(商人、兵士和女人)渡河时，他觉得那些人不再如从前那样显得陌生。尽管他并不理解或拥有他们的思想与观念，但他却与他们同样有着生命的冲动和欲望。尽管他已达到高度自律的境界并且成功地忍耐着最后的伤痛，而他却感到这些尘俗的人们是自己的平等兄弟。他们的虚荣、欲望以及平凡琐事不再显得荒谬，而是变得可以理解，可以热爱，甚至值得尊敬。</p></blockquote><p>悉达多继续聆听河水，向河水学习。</p><blockquote><p>于是悉达多更用心去听。水中他父亲的形象，他自己的形象以及他儿子的形象汇流在一起，迦摩罗的形象也显现并随流而去，乔文达的形象，还有诸多其他人的形象纷纷涌现并消失。所有人的形象都融入不息的河水，河水包容了所有人的追求与渴念，欲望与苦难。于是河水之声也充满了渴求：充满了刺心的痛楚，充满了无厌足的贪欲。河水向自己的目标流去。……他不再去分辨不同的音声——诸如愉悦之声与哀泣之声，童稚之声与雄浑之声；所有思慕者的哀叹，智者的欢笑，愤怒者的叫喊，濒死者的呻吟都融入彼此，互为纠结与交织，以千万种方式缠绕在一起，而所有的音声，所有的目标，所有的渴望，所有的善与恶，悲伤与欢乐，所有这一切共同构成了统一的世界，所有这一切共同交融成万物奔流不息的进程，所有这一切共同谱成了生命永恒的旋律。……当他不再着意分辨悲叹与欢笑，当他的心灵不再执着于任何一种特定的音声并不再任其占据他的自我，当他倾听所有的一切，倾听圆融与统一，正当此时，那宏大的万音交响之歌只包含一个字“唵”(Om)——圆满之音。</p></blockquote><p>悉达多在河水之声中，有了第三次觉醒，并且得到了最终的救赎，从此他委身于时间与生命之流中，充满慈悲与同情，与万物和谐如一。</p><p>全书的最后，有一场悉达多布道时的论述，很长，却异常精彩。多年之后，都已经年迈的乔文达和悉达多再次相遇，乔文达发现他往日朋友的脸上充满了宁静，他显然已经得道了，于是乔文达便询问他该如何求道。</p><p>悉达多论述了三点：</p><p><strong>智慧不可言传，而需亲身体会</strong></p><blockquote><p>是的，我曾有过不少观念与知识。有时，在一日之内或一个时辰之内，我会体验到智慧，正如人们从内心感受到生命。我有过许多思想，但我觉得很难对你讲述。然而有一种思想给我以很深的印象。乔文达，即智慧无法言传。智者们试图传授的智慧听起来总是十分愚蠢。……知识可以传授，但智慧不能。人们可以寻见智慧，在生命中体现出智慧，以智慧自强，以智慧来创造奇迹，但人们不可能去传授智慧。我年少时就有过这种疑问，正是我的怀疑驱使我远离教师们。我还有过一种思想，乔文达，你又会认为那是 开玩笑或只是一种愚蠢的念头：就是说，每一真理的反面也同样真实。比如说，只有偏面的真理才能形诸于言辞；事实上，以语言表达或思维的一切都只能是偏面的，只是半个真理而已，它们都缺乏完备、圆融与统一；当佛陀世尊宣讲关于世界的教义，他不得不把世界分为轮回与涅槃，虚幻与真如，痛苦与救赎。人别无选择，对于那些要传授教义的导师们来说尤其如此。而世界自身则遍于我之内外，从不片面。从未有一人或一事纯属轮回或者纯属涅槃，从未有一人完全是圣贤或是罪人。世界之所以表面如此是因为我们有一种幻觉，即认为时间是某种真实之物。时间并无实体，乔文达，我曾反复悟到这一点。而如果时间并非真实，那么仿佛存在于现世与永恒，痛苦与极乐，善与恶之间的分界线也只是一种幻象。</p></blockquote><p><strong>世界万物皆为圆满，一切皆是必然</strong></p><blockquote><p>我是罪人，你也是罪人，而罪人有朝一日会成为梵天，有朝一日会证得涅槃，有朝一日会成佛；这‘有朝一日’是某种幻象，那只是一种比较而已，罪人并不是在趋于佛境，他并没有不断演进，尽管我们的感官只能如此感知事物。不，潜在的佛性已然存在于罪人身上，他的未来已然存在。我们必须认识到隐藏于你、我以及所有人中潜在的佛性。乔文达，世界并非不完善，或者正沿着通向完善的漫漫长路缓缓发展。不，世界在每一瞬间都是完美的：所有罪孽都已然领受神恩，所有孩童都是潜在的老人，所有婴儿都已打上死亡的印记，而所有的垂死者——必获永恒的生命。一个人不可能认清另一个人已然修到何等境界。佛存在于劫匪与赌徒身上，而劫匪亦存在于婆罗门身上。 在极深禅定之中，人可以除灭时间并同时经历所有过去、现在与未来，于是一切皆善，一切完美，一切即梵。因此，我认为一切的存在皆为至善——无论是死与生，无论罪孽与虔诚，无论智慧或是蠢行，一切皆是必然，一切只须我的欣然赞同，一切只需我的理解与爱心；因而万物于我皆为圆满，世上无物可侵害于我。</p></blockquote><p><strong>爱是世上最重要的</strong></p><blockquote><p>乔文达，我可以去爱一枚石子，一棵树或一片树皮，这些都是“物”。一个人可以去爱世上之物，但一个人不能去爱词句。所以教义于我毫于用处。那些教义没有软硬的感觉，没有颜色，没有尖角，没有气息和味道，它们只是一些词句而已，可能就是这一点阻碍你得到内心的宁静。也许世上词句过多，因为甚至连救赎、德行、轮回与涅槃都只是词句，乔文达。涅槃并非实在之物，世上只存在涅槃的名相。……更坦白地说，我也不是很注重思想，我更注重“物”。例如，这个渡口曾经住着一个人，他是我的前辈与导师。他是一个虔诚的人，多年以来他一直仅仅信奉这条河，他发觉河水之声与他交流，于是他师从于河水，而河水则教导他，培养他。这条河对于他似乎是一位神。多年以来，他并没有明白每阵清风，每朵白云，每只小鸟和每只甲虫都同样神圣，而且与这令人尊崇的河流一样能给人以启迪。但当这位虔诚的人飘然进入林中，他彻悟了一切。没有任何导师与书本，他比你我理解得更多。而这只是因为他信奉了一条河流。……乔文达，我感觉爱是世上最重要的。研究这个世界，解释它或是鄙弃它，对于大思想家或许很重要；但我以为唯一重要的就是去爱这个世界，而不是去鄙弃它。我们不应彼此仇视，而应以爱、赞美与尊重来善待世界，善待我们自身以及一切生命。</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>看完最后这一整段论述，我突然想起《金刚经》里的一段：无我相，无人相，无众生相，无寿者相。万物皆是虚无，又皆是实在，这个世界就是这样摆在面前，它不会因为我们的好恶而变得更好或者更坏，甚至这个世界就没有好坏之说，因为好坏标准都是人定的，而人的观念又都是一时的。所以这世界在每一刻都是圆满的，我们能做的就是感受它，接纳它，进而爱它。</p><p>我对佛学仅知皮毛，但是全书有一点我是无比赞同的——<strong>佛不是坐而悟道的</strong>，悉达多要摒弃自我，要感知梵天，就要先体验俗尘荒诞，而后知众生有爱，而后知万物有灵。所谓「得道」，不是读经书习教义，而是对生活（乃至生命）体验的深刻理解。</p><p>黑塞对于东方哲学这种超脱的概念，理解深刻，而又自成体系。没有什么救世主，没有什么超度者，佛性，或者说神性，就蕴藏在每一个人身上，这就是这个世界的完美之处。我们只有自我救赎，而唯一能阻碍你得到内心宁静的，也只有你自己。这个世界本身就已经蕴含着神圣了，去发现它，接纳它，理解它，最终爱它。</p><p><strong>一切皆是必然，于是一切只须我的欣然赞同；万物皆为圆满，于是世上无物可侵害于我。</strong></p><p><br><br></p><p>我听便灵魂与肉体的安排，</p><p>去经历罪孽，追逐肉欲和财富，</p><p>去贪慕虚荣，以陷入最羞耻的绝望，</p><p>以学会放弃挣扎，学会热爱世界。</p><p>我不再将这个世界与我所期待的，</p><p>塑造的圆满世界比照，</p><p>而是接受这个世界，</p><p>爱它，属于它。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://www.zhihu.com/people/findingsea&quot;&gt;findingsea&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近终于看了心仪已久的《悉达多》，先说读后感受：&lt;strong&gt;这很可能会是我今年看过的最好的一本书了&lt;/strong&gt;，五星推荐。黑塞对东方哲学的理解相当深刻，尤其最后一场悉达多与乔文达坐而论道，可以说透彻淋漓，很久没看到这么精彩的大段论述。&lt;/p&gt;
&lt;p&gt;故事其实不复杂，讲的就是一个古印度贵族青年悉达多，不追求财富地位，一心只想追求心灵的宁静，于是孤身展开了求道之旅。其实跟佛陀的故事很像。黑塞用悉达多的三次觉醒来阐述了他对佛教求道的理解。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文全篇是有点长，如果对书的内容想自己体会的，可以跳过介绍部分，直接翻到最后总结，是我对《悉达多》全书的概括性体会。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="书评" scheme="http://example.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
    <category term="2022" scheme="http://example.com/tags/2022/"/>
    
  </entry>
  
</feed>
