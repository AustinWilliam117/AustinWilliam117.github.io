<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021.11的雪</title>
    <url>/2021/11/07/2021-11%E7%9A%84%E9%9B%AA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2021年11月06号晚，下了北京的第一场雪。（过年那段时间的不算哈）</p>
<p>我之前约了自然博物馆，因为之前鸽了两次，如果再去不就要被拉黑了。所以我早上顶着风雪，还好赶上了12：00入场。</p>
<span id="more"></span>

<p><img src="1.jpg"><br></br></p>
<p><img src="2.jpg"><br></br></p>
<p><img src="3.jpg"></p>
<p>礼品店的礼物好像已经不太适合我了（真的有点幼稚）。唉，可能没有童心了，不过这个狗狗还可以。</p>
<p><img src="4.jpg"><br></br></p>
<p><img src="6.jpg"></p>
<p>中午去了KFC，本来是想去吃火锅的，毕竟下雪嘛。但是一个人吃好像没啥感觉，索性就算了，下雪吃冰淇淋也很美的。</p>
<p><img src="5.jpg"></p>
<p>在吃饭的时候，就在想才13点啊，一会去哪逛呢？看了看地图，就去了天坛。雪后的天坛很美，后悔没有在早上就来，那时候还在下雪，而且人少，应该会更美。</p>
<p><img src="7.jpg"><br></br></p>
<p><img src="8.jpg"><br></br></p>
<p><img src="9.jpg"></p>
<p>今年秋天的叶子刚变黄，还没掉完，就下雪了。感觉夏-&gt;秋-&gt;冬都没几天</p>
<p><img src="10.jpg"></p>
<p>听说每年下雪去故宫等地方，因为冰锥下落而去整形外科的人很多，还好我没事…</p>
<p><img src="11.jpg"><br></br></p>
<p><img src="12.jpg"></p>
<p>好了，伴随着夕阳，我也要回家了。</p>
<p><img src="13.jpg"><br></br></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年终总结</title>
    <url>/2021/12/25/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-kRrPAqxA" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="408814313" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br>

<blockquote>
<p>那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。—— 王小波 《黄金时代》</p>
</blockquote>
<p>Happy New Year  2022年了！</p>
<p>说起来这一年过得好快啊，我还清晰记得我今年年初刚上班的场景，转眼这一年便悄然结束了。</p>
<span id="more"></span>

<p>回想起这一年我好像什么都没有做，记得我写过<a href="https://mengxun.club/2021/10/25/%E6%97%B6%E5%85%89%E9%A3%9E%E9%80%9D%EF%BC%8C%E6%88%91%E5%B7%B2%E4%B8%8D%E5%86%8D%E5%B9%B4%E5%B0%91/">《时光飞逝，我已不再年少》</a>当时就感觉这一年就这么静悄悄的过去了，什么都没有留下。</p>
<p>现在我想应该翻翻手机里这一年的照片，看看我还能记得什么。</p>
<h4 id="回忆这一年"><a href="#回忆这一年" class="headerlink" title="回忆这一年"></a>回忆这一年</h4><p><img src="1.jpeg"></p>
<center><small>2.13年初，和表弟一起在商场买鞋，当时感觉儿童NIKE很喜感</small></center><br>

<p><img src="2.jpeg"></p>
<center><small>2.14，人家情人节，我练字😂。虽然现在的字依然很丑...</small></center><br>



<p><img src="3.jpeg"></p>
<br>

<p><img src="4.jpeg"></p>
<center><small>3.10与3.15上班路上北京的晴天与黄沙</small></center><br>

<p><img src="5.jpeg"></p>
<center><small>4.12 晚上7点的北京</small></center><br>

<p><img src="6.jpeg"></p>
<center><small>4.17 上午8点30，加班路上的北京</small></center><br>

<p><img src="7.jpeg"></p>
<center><small>5.3 河北某小山景点</small></center><br>

<p><img src="8.jpeg"></p>
<center><small>5.3 山间小路</small></center><br>

<p><img src="9.jpeg"></p>
<center><small>5.3 山顶！又征服了一座山</small></center><br>

<p><img src="10.jpeg"></p>
<center><small>5.3 有些风景回头看也很美</small></center><br>

<p><img src="11.jpeg"></p>
<center><small>5.24 先给自己定个规划 (*╹▽╹*)</small></center><br>

<p><img src="12.jpeg"></p>
<center><small>5.26 18:55雨后天晴，有❤️</small></center><br>

<p><img src="13.jpeg"></p>
<center><small>6.13 找到了微信头像</small></center><br>

<p><img src="14.jpeg"></p>
<center><small>6.29 哈哈，我引以为傲的 ArchLinux Kde YYDS</small></center><br>

<p><img src="15.jpeg"></p>
<center><small>6.30 准备换工作 (・・。)ゞ</small></center><br>

<p><img src="16.jpeg"></p>
<center><small>7.1 建党百年，还有美丽的壁纸</small></center><br>

<p><img src="17.jpeg"></p>
<center><small>7.5 学习数字电路</small></center><br>

<p><img src="18.jpeg"></p>
<center><small>7.6 为我的键盘托PS怪猎图像</small></center><br>

<p><img src="19.jpeg"></p>
<center><small>7.8 苍天雷鸣</small></center><br>

<p><img src="20.jpeg"></p>
<center><small>7.24 与同事游颐和园</small></center><br>

<p><img src="21.jpeg"></p>
<center><small>7.24 好神圣的玉峰塔</small></center><br>

<p><img src="22.jpeg"></p>
<center><small>7.24 还记得小学来看过铜牛</small></center><br>

<p><img src="23.jpeg"></p>
<center><small>7.30 下午4点溜出去看看蓝天白云</small></center><br>

<p><img src="24.jpeg"></p>
<br>

<p><img src="25.jpeg"></p>
<br>

<p><img src="26.jpeg"></p>
<center><small>8.5 雨后的云</small></center><br>

<p><img src="27.jpeg"></p>
<center><small>8.17 如果你不开心就抬头看看天吧</small></center><br>

<p><img src="28.jpeg"></p>
<center><small>8.20 蓝天依旧</small></center><br>

<p><img src="29.jpeg"></p>
<center><small>8.22 鬼节和同事去看十三陵 (•̀⌄•́)</small></center><br>

<p><img src="30.jpeg"></p>
<center><small>8.24 开车注意限高啊</small></center><br>

<p><img src="31.jpeg"></p>
<center><small>8.26 〣( ºΔº )〣 那片云飘来后真的下雨了</small></center><br>

<p><img src="32.jpeg"></p>
<center><small>8.26 两条彩虹耶！</small></center><br>

<p><img src="33.jpeg"></p>
<center><small>8.26 雨后的景好美</small></center><br>

<p><img src="34.jpeg"></p>
<br>

<p><img src="35.jpeg"></p>
<center><small>8.26 雨后的云好壮观</small></center><br>

<p><img src="36.jpeg"></p>
<center><small>8.27 小白猫</small></center><br>

<p><img src="37.jpeg"></p>
<center><small>8.28 魔幻的清晨</small></center><br>

<p><img src="38.jpeg"></p>
<center><small>8.31 两只小老虎</small></center><br>

<p><img src="39.jpeg"></p>
<center><small>9.2 雨后的光明与黑暗</small></center><br>

<p><img src="40.jpeg"></p>
<center><small>9.5 国家博物馆</small></center><br>

<p><img src="41.jpeg"></p>
<center><small>9.5 人民大会堂</small></center><br>

<p><img src="42.jpeg"></p>
<center><small>9.5 天安门</small></center><br>

<p><img src="43.jpeg"></p>
<br>

<p><img src="44.jpeg"></p>
<center><small>10.10 高中时候的画</small></center><br>

<p><img src="45.jpeg"></p>
<center><small>10.16 好冷，不过去香山咯！</small></center><br>

<p><img src="46.jpeg"></p>
<center><small>10.16 于马连良墓一个人走进野山</small></center><br>

<p><img src="47.jpeg"></p>
<center><small>10.16 有时候一个人在山间散步，是一种满足与舒适。野兽齐鸣，树影摇曳，慢慢地走，内心却格外地沉静。</small></center><br>

<p><img src="48.jpeg"></p>
<center><small>10.16 城市与山</small></center><br>

<p><img src="49.jpeg"></p>
<center><small>10.16 那是...电视塔！！！</small></center><br>

<p><img src="50.jpeg"></p>
<center><small>10.16 山重水复疑无路，柳暗花明又一村。原来，我爬了这么久的山，以为是山顶，却是半山腰。当我以为脱离文明的时候，却越来越接近文明。</small></center><br>

<p><img src="51.jpeg"></p>
<center><small>10.16 更高的地方！！！</small></center><br>

<p><img src="52.jpeg"></p>
<center><small>10.16 这条路又通向哪呢？不管了，大不了回头。</small></center><br>

<p><img src="53.jpeg"></p>
<center><small>10.16 瞭望塔！看火人！</small></center><br>

<p><img src="54.jpeg"></p>
<center><small>10.16 一抹红叶</small></center><br>

<p><img src="55.jpeg"></p>
<center><small>10.16 山顶！</small></center><br>

<p><img src="56.jpeg"></p>
<center><small>10.16 世上本无路，只不过是走的人多了，路就有了。脚真疼啊 ‹(⁽˙́ʷ˙̀⁾ )∨( ⁽˙́ʷ˙̀⁾)›</small></center><br>

<p><img src="57.jpeg"></p>
<center><small>10.16 你说那边是不是香山？</small></center><br>

<p><img src="58.jpeg"></p>
<center><small>10.16 Civilization！</small></center><br>

<p><img src="59.jpeg"></p>
<center><small>10.16 其实香山的小胡同也很惬意，住在这养老应该不错吧。</small></center><br>

<p><img src="60.jpeg"></p>
<center><small>10.16 咦！那里有座寺，不如去看看！</small></center><br>

<p><img src="61.jpeg"></p>
<br>

<p><img src="62.jpeg"></p>
<br>

<p><img src="63.jpeg"></p>
<br>

<p><img src="64.jpeg"></p>
<center><small>10.17 寺内风光</small></center><br>

<p><img src="65.jpeg"></p>
<center><small>10.16 于香山半山腰对看来时路</small></center><br>

<p><img src="66.jpeg"></p>
<center><small>10.16 想买粉色牌子，但是工作人员一直看着我...于是买了事业签</small></center><br>

<p><img src="67.jpeg"></p>
<center><small>10.16 回去的路，让我想到之前去成都锦里的时候，也是这般热闹。下次一定要带朋友来！</small></center><br>

<p><img src="68.jpeg"></p>
<center><small>10.25 念去去，千里烟波，暮霭沉沉楚天阔。但也没什么好留恋的</small></center><br>

<p><img src="69.jpeg"></p>
<center><small>10.31 秋天遍地金黄，下次一定要欣赏到！</small></center><br>

<p><img src="70.jpeg"></p>
<center><small>11.2 家人们，emmm...我的🍚量其实还蛮大的。</small></center><br>

<p><img src="71.jpeg"></p>
<center><small>11.3 试图寻找爱情真谛</small></center><br>

<p><img src="72.jpeg"></p>
<center><small>11.5 我觉得我蛮好看的...٩(๑˃̵ᴗ˂̵๑)۶</small></center><br>

<p><img src="73.jpeg"></p>
<center><small>11.6 ❄️</small></center><br>

<p><img src="74.jpeg"></p>
<center><small>11.7 再不去自然博物馆要被拉黑了</small></center><br>

<p><img src="75.jpeg"></p>
<center><small>11.7 不是霸王龙，但也很霸气就是了</small></center><br>

<p><img src="76.jpeg"></p>
<center><small>11.7 充满智慧的表情</small></center><br>

<p><img src="77.jpeg"></p>
<center><small>11.7 那里有个公园，反正没事做，不如去看看！</small></center><br>

<p><img src="78.jpeg"></p>
<center><small>11.7 他朝若是同淋雪，此生也算共白头。如果能和喜欢的人一起赏雪，一定是很美的事情吧。</small></center><br>

<p><img src="79.jpeg"></p>
<br>

<p><img src="80.jpeg"></p>
<p><br><img src="81.jpeg"></p>
<p><br><img src="82.jpeg"></p>
<p><br><img src="83.jpeg"></p>
<p><br><img src="84.jpeg"></p>
<p><br><img src="85.jpeg"></p>
<p><br><img src="86.jpeg"></p>
<p><br><img src="87.jpeg"></p>
<p><br><img src="88.jpeg"></p>
<p><br><img src="89.jpeg"></p>
<p><br><img src="91.jpeg"></p>
<p><br><img src="92.jpeg"></p>
<p><br><img src="93.jpeg"></p>
<p><br><img src="94.jpeg"></p>
<p><br><img src="95.jpeg"></p>
<p><br><img src="96.jpeg"></p>
<br>

<center><small>11.7 天坛雪景</small></center><br>

<p><img src="97.jpeg"></p>
<center><small>11.8 好想去敦煌</small></center><br>

<p><img src="98.jpeg"></p>
<center><small>11.20 西山森林公园</small></center><br>

<p><img src="99.jpeg"></p>
<center><small>11.22 生日快乐！</small></center><br>

<p><img src="100.jpeg"></p>
<center><small>11.26 雁栖湖，定入目标</small></center><br>

<p><img src="101.jpeg"></p>
<center><small>11.27 偶遇《面纱》于国家图书馆</small></center><br>

<p><img src="102.jpeg"></p>
<center><small>11.27 终于没人跟我抢了</small></center><br>

<p><img src="103.jpeg"></p>
<center><small>11.30 笼中鸟</small></center><br>

<p><img src="104.jpeg"></p>
<center><small>12.2 希望有一天我也能滑雪</small></center><br>

<p><img src="105.jpeg"></p>
<center><small>12.5 心动不如行动！</small></center><br>

<p><img src="106.PNG"></p>
<center><small>12.11 人生的意义是什么？《葬》剧照</small></center><br>

<p><img src="107.jpeg"></p>
<center><small>12.12 国家图书馆</small></center><br>

<p><img src="108.jpeg"></p>
<center><small>12.12 某个公园</small></center><br>

<p><img src="109.jpeg"></p>
<center><small>12.12 第一次去海底捞</small></center><br>

<p><img src="110.jpeg"></p>
<center><small>12.16 这就是美国电影里的，可以开车点餐的麦当劳吗</small></center><br>

<p><img src="111.jpeg"></p>
<center><small>12.16 多给了我一份鸡翅，但我没好意思说，因为100%会送我...最后也没吃完</small></center><br>

<p><img src="112.jpeg"></p>
<center><small>12.21 温暖的小屋</small></center><br>

<p><img src="113.jpeg"></p>
<center><small>12.23 终于抢到茅台了！！！开心到起飞</small></center><br>



<p>感觉2021年就像做了个梦一样，我好像从未经历。</p>
<h4 id="这一年，当然也看了很多书"><a href="#这一年，当然也看了很多书" class="headerlink" title="这一年，当然也看了很多书"></a>这一年，当然也看了很多书</h4><p>《麦田里的守望者》、《软件测试技术指南》、《汇编语言》、《献给阿尔吉侬的花束》、《球状闪电》、《从零开始学Selenium自动化测试》、《三体 黑暗深林》、《月亮与六便士》、《白鹿原》、《孽子》、《三体 死神永生》、《爱的艺术》、《蛤蟆先生去看心理医生》、《面纱》、《刀锋》</p>
<p><img src="129.png"></p>
<p>这些书评大部分都能在往期文章中找到。</p>
<h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>工作，学习，护肤，旅游，玩游戏好像都没停下，但又没有什么成就。</p>
<p>希望能学会抵抗诱惑，独立自主，做自己。</p>
<br>

<p>好好地爱自己。</p>
<p>2022，加油！好好生活吧！</p>
<h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><ul>
<li>每天10：30必须睡觉</li>
<li>5.1号去敦煌或者长白山</li>
<li>去凤凰岭</li>
<li>去雁栖湖</li>
<li>去滑雪</li>
<li>去泡温泉</li>
<li>拥有一台相机</li>
<li>努力工作，好好赚钱</li>
<li>考研也不错</li>
<li>学好英语</li>
</ul>
<p>对了，今年的<a href="https://www.16personalities.com/ch">性格测试</a>我是 <a href="https://www.16personalities.com/ch/infp-%E4%BA%BA%E6%A0%BC">INFP_T</a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年的雪</title>
    <url>/2022/01/20/2022%E5%B9%B4%E7%9A%84%E9%9B%AA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-ThaXOHec" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="355794" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br>

<p>还记得2021年年初的时候，也下了很大的雪。我却在家里看着《武林外传》感叹美景，实在罪过。</p>
<p>那篇文章的标题叫《雪》😂</p>
<span id="more"></span>

<br>

<br>

<p>今年的雪，不得不说真的好大啊。我和同事还很不解，为啥天气预报显示的是小雪，而我这却大雪纷飞呢？</p>
<p>难道是上天的眷顾？</p>
<p>原来朝阳没有雪，我下班出地铁人都傻了，地都干了。朝阳真有你的！</p>
<p>我都有点害怕，周六去故宫没有雪怎么办。</p>
<p>对了，昨天终于找到能让我静下心来看的书了。太高兴了，虽然很短。书名嘛，等我读完发书评就知道了。</p>
<p>然后就是因为疫情，我去不了长白山了，有点小遗憾，但也在意料之中吧。</p>
<p>上周日，医生给我开了去痘痘的药，药效不错。就是吃完了头晕，哈哈哈。</p>
<p>地铁上看到了一段话，还是写出来吧。</p>
<blockquote>
<p>不要刻意回避，要成长就要学会面对。</p>
<p>你还年轻，未来还是有很多可能，只是你遇到的太少，总觉得他是你的天花板。</p>
<p>别人已经远去，何必留在原地回想以前？如果以前是美好的，还可以想象，可是以前并不美好。</p>
<p>该走了。</p>
<p>任何时候都要明白不依附任何人，不谄媚任何人，自己要发光发热。</p>
</blockquote>
<br>

<br>

<p>好了，今天就着雪，学了两首小诗。</p>
<center>
  <b>春 雪</b><br>
唐 韩愈<br><br>
新年都未有芳华，二月初惊见草芽。<br>
白雪却嫌春色晚，故穿庭树作飞花。
</center>

<br>

<br>

<center>
  <b>冬晚对雪忆胡居士家</b><br>
  唐 王维<br><br>
  寒更传晓箭，清镜览衰颜。<br>
  隔牖风惊竹，开门雪满山。<br>
  洒空深港静，积素广庭闲。<br>
  借问袁安问，翛然尚闭关。
</center>

<br>

<br>

<center>
  <b>对 雪</b><br>
  唐 杜甫<br><br>
  站哭多新鬼，愁吟独老翁。<br>
  乱云低薄暮，急雪舞回风。<br>
  瓢弃尊无绿，炉存火似红。<br>
  数州消息断，愁坐正书空。
</center>

<br>

<p>好吧，其实是三首，杜甫这首单纯因为“乱云低薄暮，急雪舞回风”有感觉。</p>
<br>

<p><img src="1.jpg"></p>
<br>

<p><img src="2.jpg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>ADB命令大全</title>
    <url>/2022/03/11/ADB%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>转载自：<a href="https://zhuanlan.zhihu.com/p/89060003">知乎：木头人</a></p>
</blockquote>
<p>常用命令用于速查，都是经常需要用到的，没有接触过adb命令从第二节开始看，对每个命令有详细解释。</p>
<h2 id="1-常用命令："><a href="#1-常用命令：" class="headerlink" title="1. 常用命令："></a>1. 常用命令：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb devices #查看连接设备</span><br><span class="line"></span><br><span class="line">adb -s cf27456f shell # 指定连接设备使用命令</span><br><span class="line"></span><br><span class="line">adb install test.apk # 安装应用</span><br><span class="line"></span><br><span class="line">adb install -r demo.apk #重新安装现有应用，保留其数据。</span><br><span class="line"></span><br><span class="line">adb uninstall cn.com.test.mobile #卸载应用，需要指定包</span><br><span class="line"></span><br><span class="line">adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件</span><br><span class="line"></span><br><span class="line">adb shell pm list packages #列出手机装的所有app 的包名</span><br><span class="line"></span><br><span class="line">adb shell pm list packages -3 #列出除了系统应用的第三方应用包名</span><br><span class="line"></span><br><span class="line">adb shell pm clear cn.com.test.mobile #清除应用数据与缓存</span><br><span class="line"></span><br><span class="line">adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用</span><br><span class="line"></span><br><span class="line">adb shell dumpsys package #包信息Package Information</span><br><span class="line"></span><br><span class="line">adb shell dumpsys meminfo #内存使用情况Memory Usage</span><br><span class="line"></span><br><span class="line">adb shell am force-stop cn.com.test.mobile #强制停止应用</span><br><span class="line"></span><br><span class="line">adb logcat #查看日志</span><br><span class="line"></span><br><span class="line">adb logcat -c #清除log 缓存</span><br><span class="line"></span><br><span class="line">adb reboot #重启</span><br><span class="line"></span><br><span class="line">adb get-serialno #获取序列号</span><br><span class="line"></span><br><span class="line">adb shell getprop ro.build.version.release #查看Android 系统版本</span><br><span class="line"></span><br><span class="line">adb shell top -s 10 #查看占用内存前10 的app</span><br><span class="line"></span><br><span class="line">adb push &lt;local&gt; &lt;remote&gt; #从本地复制文件到设备</span><br><span class="line"></span><br><span class="line">adb pull &lt;remote&gt; &lt;local&gt; #从设备复制文件到本地</span><br><span class="line"></span><br><span class="line">adb bugreport #查看bug 报告</span><br><span class="line"></span><br><span class="line">adb help #查看ADB 帮助</span><br></pre></td></tr></table></figure>



<span id="more"></span>



<h2 id="2-1-连接设备"><a href="#2-1-连接设备" class="headerlink" title="2.1 连接设备"></a>2.1 连接设备</h2><p><strong>adb [-d|-e|-s <serialNumber>] <command></strong></p>
<p>连接指定设备</p>
<p>参数：</p>
<p>-d 指定当前唯一通过USB 连接的Android 设备为命令目标</p>
<p>-e 指定当前唯一运行的模拟器为命令目标</p>
<p>-s <serialNumber> 指定相应serialNumber 号的设备/模拟器为命令目标</p>
<p>command 为所需对设备执行的命令</p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line">cf263b7f device</span><br><span class="line">emulator<span class="literal">-5554</span> offline</span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.6</span>:<span class="number">5555</span> device</span><br><span class="line"><span class="variable">$adb</span> <span class="literal">-s</span> cf263b7f <span class="comment">#连接cf264b8f 设备</span></span><br></pre></td></tr></table></figure>

<p>adb devices 查看已连接的设备信息, 上面已经连接3台设备。</p>
<h2 id="2-2-查看信息"><a href="#2-2-查看信息" class="headerlink" title="2.2 查看信息"></a>2.2 查看信息</h2><p><strong>2.2.1 查看版本设备</strong></p>
<p><strong>adb version</strong> 查看adb 版本信息</p>
<p><strong>adb devices</strong> 查看adb 连接设备</p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">1226959</span>f device</span><br><span class="line"><span class="number">3426422</span>f offline</span><br></pre></td></tr></table></figure>

<p>注意：offline 表示设备未连接成功或无响应，device 设备已连接</p>
<p><strong>adb shell getprop ro.product.model</strong> 查看设备型号</p>
<p><strong>adb get-serialno</strong> 获取设备序列号</p>
<p><strong>adb bugreport</strong> 查看bug 报告</p>
<p><strong>adb logcat</strong> 查看日志</p>
<p><strong>adb shell wm size</strong> 查看屏幕分辨率</p>
<p><strong>adb shell wm density</strong> 查看屏幕密度</p>
<p><strong>2.2.2 查看应用信息</strong></p>
<p><strong>adb shell pm list packages</strong> 列出手机装的所有app 的包名</p>
<p><strong>adb shell pm list packages -s</strong> 列出系统应用的所有包名</p>
<p><strong>adb shell pm list packages -3</strong> 列出除了系统应用的第三方应用包名</p>
<p><strong>adb shell pm list packages | find “test” win</strong> 列出手机装带有的test的包</p>
<p><strong>adb shell pm list packages | grep ‘test’ linux</strong> 列出手机装带有的test的包</p>
<p><strong>adb shell cat */sys/class/net/wlan0/address*</strong> 获取MAC 地址, 根据系统版本参数可能不同</p>
<p><strong>adb shell getprop ro.build.version.release</strong> 查看Android 系统版本</p>
<p><strong>adb shell dumpsys activity services [<packagename>]</strong> 查看正在运行的Services</p>
<p><packagename> 参数不是必须的，指定<packagename> 表示查看与某个包名相关的Services，不指定表示查看所有Services。</p>
<p><packagename> 不一定要给出完整的包名，比如运行adb shell dumpsys activity services org.zhihu，那么包名org.zhihu.demo1、org.zhihu.demo2 和org.zhihu 等相关的Services 都会列出来。</p>
<h2 id="2-3-app-安装和卸载"><a href="#2-3-app-安装和卸载" class="headerlink" title="2.3 app 安装和卸载"></a>2.3 app 安装和卸载</h2><p><strong>2.3.1 app 安装：</strong></p>
<p><strong>adb install <apkfile></strong> 参数apkfile 为.apk 文件名称</p>
<p><strong>adb install -r *test.apk*</strong> 保留数据和缓存文件，重新安装apk</p>
<p><strong>adb install -s *test.apk*</strong> 安装apk 到sd 卡</p>
<p><strong>2.3.2 app 卸载</strong></p>
<p><strong>adb uninstall <package></strong> 参数package 为软件包名称</p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> uninstall cn.com.test.mobile</span><br><span class="line"> </span><br><span class="line"><span class="comment">#  卸载app 但保留数据和缓存文件</span></span><br><span class="line"><span class="variable">$adb</span> uninstall <span class="literal">-k</span> ccn.com.test.mobile </span><br></pre></td></tr></table></figure>

<h2 id="2-4-启动停止服务"><a href="#2-4-启动停止服务" class="headerlink" title="2.4 启动停止服务"></a>2.4 启动停止服务</h2><p><strong>adb start-server</strong></p>
<p>启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server</p>
<p><strong>adb kill-server</strong></p>
<p>停止adb server</p>
<p><strong>adb -P <port> start-server</strong></p>
<p>指定adb server 的网络端口port （默认为5037）启动服务</p>
<h2 id="2-5-与应用交互"><a href="#2-5-与应用交互" class="headerlink" title="2.5 与应用交互"></a>2.5 与应用交互</h2><p><strong>adb shell pm clear <packagename></strong></p>
<p>清除应用数据与缓存</p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell pm <span class="built_in">clear</span> cn.com.test.mobile</span><br></pre></td></tr></table></figure>

<p><strong>adb shell am force-stop <packagename></strong></p>
<p>强制停止应用</p>
<p>示例：强制停止微信</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure>

<p><strong>adb shell am <command></strong></p>
<p>command 命令详解</p>
<blockquote>
<p>command 用途<br>start [options] <INTENT> 启动 <INTENT> 指定的 Activity<br>startservice [options] <INTENT> 启动 <INTENT> 指定的 Service<br>broadcast [options] <INTENT> 发送 <INTENT> 指定的广播<br>force-stop <packagename> 停止 <packagename> 相关的进程</p>
</blockquote>
<p><INTENT> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应,用于决定 intent 对象的选项如下：</p>
<blockquote>
<p>-a <ACTION> 指定 action，如android.intent.action.VIEW<br>-c <CATEGORY> 指定 category，如android.intent.category.APP_CONTACTS<br>-n <COMPONENT> 指定完整 component 名，用于明确指定启动哪个 Activity，如<br><a href="https://link.zhihu.com/?target=http://com.example.app/.ExampleActivity">com.example.app/.ExampleActivity</a></p>
</blockquote>
<p><strong>2.5.1 启动 Activity</strong></p>
<p><strong>adb shell am start [options] <INTENT></strong></p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#指定完整 component 名，用于明确指定启动哪个Activity</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> &lt;COMPONENT&gt;  </span><br><span class="line">如： <span class="comment">#表示调起微信主界面</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> com.tencent.mm/.ui.LauncherUI  </span><br></pre></td></tr></table></figure>

<p><strong>2.5.2 启动 Service</strong></p>
<p><strong>adb shell am startservice [options] <INTENT></strong></p>
<p>示例： 表示调起微信的某 Service。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am startservice <span class="literal">-n</span> com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</span><br></pre></td></tr></table></figure>

<p><strong>2.5.3 发送广播</strong></p>
<p>可以向所有组件广播，也可以只向指定组件广播。</p>
<p>adb shell am broadcast [options] <INTENT></p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向所有组件广播 BOOT_COMPLETED (开机广播)</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED   </span><br><span class="line"><span class="comment">#如：只向 org.mazhuang.boottimemeasure/.BootCompletedReceiver 广播 BOOT_COMPLETED：</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED <span class="literal">-n</span> org.mazhuang.boottimemeasure/.BootCompletedReceiver</span><br></pre></td></tr></table></figure>

<p>系统预定义的广播：</p>
<p><img src="https://pic4.zhimg.com/80/v2-c1eb5c565ef8dbea3610dc7957225917_1440w.jpg" alt="img">Android 系统预定义广播</p>
<p><strong>2.5.4 强制停止应用</strong></p>
<p><strong>adb shell am force-stop <packagename></strong></p>
<p><em>示例：</em></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 查询出包名</span></span><br><span class="line"><span class="variable">$adb</span> shell pm list packages </span><br><span class="line">.....</span><br><span class="line"><span class="comment"># 强制停止微信</span></span><br><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure>

<h2 id="2-6-文件管理"><a href="#2-6-文件管理" class="headerlink" title="2.6 文件管理"></a><strong>2.6 文件管理</strong></h2><p><strong>2.6.1 复制设备里的文件到电脑</strong></p>
<p><strong>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</strong></p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> pull /sdcard/abc.mp4  ~/tmp/</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em><strong>小技巧</strong>：设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在 adb shell 里获取 root 权限后，先 cp /path/on/device /sdcard/filename 将文件复制到 sdcard，然后 adb pull /sdcard/filename /path/on/pc。</em></p>
</blockquote>
<p><strong>2.6.2 复制电脑里的文件到设备</strong></p>
<p><strong>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> push  e:/ss.au3  /<span class="keyword">data</span>/local/tmp/</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em><strong>小技巧</strong>：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push /path/on/pc /sdcard/filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp /sdcard/filename /path/on/device</em></p>
</blockquote>
<h2 id="2-7-使用ADB命令模拟按键-输入"><a href="#2-7-使用ADB命令模拟按键-输入" class="headerlink" title="2.7 使用ADB命令模拟按键/输入"></a><strong>2.7 使用ADB命令模拟按键/输入</strong></h2><p><strong>adb shell input keyevent <keycode></strong></p>
<p>keycode位操作参数，不同的 keycode 能实现不同的功能</p>
<p>完整的功能见：<a href="https://link.zhihu.com/?target=https://developer.android.com/reference/android/view/KeyEvent.html">https://developer.android.com/reference/android/view/KeyEvent.html</a></p>
<p>keycode 能实现不同的功能，对应的编码如下：</p>
<p><img src="https://pic3.zhimg.com/80/v2-19f07a6dc7f9b589c0ca808be3302e32_1440w.jpg" alt="img">keycode 列表</p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">26</span>  <span class="comment">#电源键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">82</span>  <span class="comment">#菜单键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">3</span>  <span class="comment">#HOME 键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">4</span> <span class="comment">#返回键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">24</span> <span class="comment">#增加音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">25</span> <span class="comment">#降低音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">164</span> <span class="comment">#静音</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">85</span>  <span class="comment">#播放/暂停</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">86</span> <span class="comment">#停止播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">87</span> <span class="comment">#播放下一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">88</span> <span class="comment">#播放上一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">126</span> <span class="comment">#恢复播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">127</span> <span class="comment">#暂停播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">224</span> <span class="comment">#点亮屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">223</span> <span class="comment">#熄灭屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input swipe <span class="number">300</span> <span class="number">1000</span> <span class="number">300</span> <span class="number">500</span>  <span class="comment">#滑动解锁，向上滑动手势解锁</span></span><br><span class="line"><span class="comment">#参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标 </span></span><br><span class="line"><span class="variable">$adb</span> shell input text hello <span class="comment">#焦点处于某文本框时输入文本</span></span><br></pre></td></tr></table></figure>

<h2 id="2-8-查看日志"><a href="#2-8-查看日志" class="headerlink" title="2.8 查看日志"></a><strong>2.8 查看日志</strong></h2><h3 id="2-8-1-Android-日志"><a href="#2-8-1-Android-日志" class="headerlink" title="2.8.1 Android 日志"></a><strong>2.8.1 Android 日志</strong></h3><p><strong>[adb] logcat [<option>] … [<filter-spec>] …</strong></p>
<p>*<strong>按级别过滤日志*</strong></p>
<p>按某级别过滤日志则会将该级别及以上的日志输出，Android 日志的优先级如下：</p>
<blockquote>
<p>V —— Verbose（最低，输出得最多）<br>D —— Debug<br>I —— Info<br>W —— Warning<br>E —— Error<br>F —— Fatal<br>S —— Silent（最高，啥也不输出）</p>
</blockquote>
<p>示例：输出W之上的日志，W,E,F,S</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat *:W</span><br></pre></td></tr></table></figure>

<p>*<strong>按 tag 和级别过滤日志*</strong></p>
<p><filter-spec> 可以由多个 <tag>[:priority] 组成</p>
<p>示例：输出 tag ActivityManager 的 I 以上级别日志，输出tag MyApp的D 以上级别日志，及其它 tag 的 S 级别日志（即屏蔽其它 tag 日志）。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat ActivityManager:I MyApp:D *:S</span><br></pre></td></tr></table></figure>

<p>*<strong>日志格式*</strong></p>
<p><strong>adb logcat -v <format></strong></p>
<p>指定日志输出格式</p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> &lt;format&gt;  指定日志输出格式</span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> brief   <span class="comment">#默认格式,&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> <span class="keyword">process</span> <span class="comment">#&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> tag  <span class="comment">#&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> raw  <span class="comment">#&lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> time  <span class="comment">#&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> threadtime <span class="comment">#&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long  <span class="comment">#[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt;:] &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long ActivityManager:I *:S  <span class="comment">#指定格式可与上面的过滤同时使用</span></span><br></pre></td></tr></table></figure>

<p>*<strong>清空日志*</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-c</span></span><br></pre></td></tr></table></figure>

<p><strong>2.8.2 内核日志</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dmesg  </span><br></pre></td></tr></table></figure>

<p>查看内核日志</p>
<h2 id="2-9-查看设备信息"><a href="#2-9-查看设备信息" class="headerlink" title="2.9 查看设备信息"></a><strong>2.9 查看设备信息</strong></h2><h3 id="2-9-1-型号"><a href="#2-9-1-型号" class="headerlink" title="2.9.1 型号"></a><strong>2.9.1 型号</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.product.model</span><br></pre></td></tr></table></figure>

<h3 id="2-9-2-电池状况"><a href="#2-9-2-电池状况" class="headerlink" title="2.9.2 电池状况"></a><strong>2.9.2 电池状况</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys battery</span><br></pre></td></tr></table></figure>

<h3 id="2-9-3-屏幕分辨率"><a href="#2-9-3-屏幕分辨率" class="headerlink" title="2.9.3 屏幕分辨率"></a><strong>2.9.3 屏幕分辨率</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm size</span><br></pre></td></tr></table></figure>

<h3 id="2-9-4-屏幕密度"><a href="#2-9-4-屏幕密度" class="headerlink" title="2.9.4 屏幕密度"></a><strong>2.9.4 屏幕密度</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm density</span><br></pre></td></tr></table></figure>

<h3 id="2-9-5-显示屏参数"><a href="#2-9-5-显示屏参数" class="headerlink" title="2.9.5 显示屏参数"></a><strong>2.9.5 显示屏参数</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys window displays</span><br></pre></td></tr></table></figure>

<h3 id="2-9-6-android-id"><a href="#2-9-6-android-id" class="headerlink" title="2.9.6 android_id"></a><strong>2.9.6 android_id</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell settings get secure android_id</span><br></pre></td></tr></table></figure>

<h3 id="2-9-7-IMEI"><a href="#2-9-7-IMEI" class="headerlink" title="2.9.7 IMEI"></a><strong>2.9.7 IMEI</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys iphonesubinfo</span><br><span class="line"><span class="comment">#而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</span></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="variable">$service</span> call iphonesubinfo <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="2-9-8-Android-系统版本"><a href="#2-9-8-Android-系统版本" class="headerlink" title="2.9.8 Android 系统版本"></a><strong>2.9.8 Android 系统版本</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure>

<h3 id="2-9-9-IP-地址"><a href="#2-9-9-IP-地址" class="headerlink" title="2.9.9 IP 地址"></a><strong>2.9.9 IP 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell ifconfig | find “Mask”</span><br><span class="line"><span class="variable">$adb</span> shell ifconfig wlan0 <span class="comment">#设备连着 WiFi，可以使用如下命令来查看局域网 IP</span></span><br><span class="line"><span class="variable">$adb</span> shell netcfg <span class="comment"># 上面两个无结果可以用这个，查看网络连接状态</span></span><br></pre></td></tr></table></figure>

<h3 id="2-9-10-Mac-地址"><a href="#2-9-10-Mac-地址" class="headerlink" title="2.9.10 Mac 地址"></a><strong>2.9.10 Mac 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /sys/<span class="class"><span class="keyword">class</span>/<span class="title">net</span>/<span class="title">wlan0</span>/<span class="title">address</span> # 设备不同可能地址不同</span></span><br></pre></td></tr></table></figure>

<h3 id="2-9-11-CPU-信息"><a href="#2-9-11-CPU-信息" class="headerlink" title="2.9.11 CPU 信息"></a><strong>2.9.11 CPU 信息</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure>

<h3 id="2-9-12-内存信息"><a href="#2-9-12-内存信息" class="headerlink" title="2.9.12 内存信息"></a><strong>2.9.12 内存信息</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/meminfo</span><br></pre></td></tr></table></figure>

<h3 id="2-9-13更多硬件与系统属性"><a href="#2-9-13更多硬件与系统属性" class="headerlink" title="2.9.13更多硬件与系统属性"></a><strong>2.9.13更多硬件与系统属性</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop</span><br></pre></td></tr></table></figure>

<p><strong>adb shell getprop &lt;属性名&gt;</strong></p>
<p>也可以</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | grep ro.product.cpu.abi</span><br><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | find “ro.product.cpu.abi”</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-1991d0e88f480209f16d87c8dabf69b5_1440w.jpg" alt="img"></p>
<h2 id="2-10-修改设置"><a href="#2-10-修改设置" class="headerlink" title="2.10 修改设置"></a><strong>2.10 修改设置</strong></h2><p>修改设置之后，运行恢复命令仍然不太正常，可以运行 adb reboot 重启设备或手动重启。</p>
<p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p>
<h3 id="2-10-1分辨率"><a href="#2-10-1分辨率" class="headerlink" title="2.10.1分辨率"></a><strong>2.10.1分辨率</strong></h3><p><strong>adb shell wm size *480x1024*</strong> #将分辨率修改为 480px * 1024px</p>
<p><strong>adb shell wm size reset</strong> #恢复原分辨率</p>
<h3 id="2-10-2屏幕密度"><a href="#2-10-2屏幕密度" class="headerlink" title="2.10.2屏幕密度"></a><strong>2.10.2屏幕密度</strong></h3><p><strong>adb shell wm density *160*</strong> #屏幕密度修改为 160dpi</p>
<p><strong>adb shell wm density reset</strong> #恢复原屏幕密度</p>
<h3 id="2-10-3显示区域"><a href="#2-10-3显示区域" class="headerlink" title="2.10.3显示区域"></a><strong>2.10.3显示区域</strong></h3><p><strong>adb shell wm overscan *0,0,0,100*</strong></p>
<p># 四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 100px留白</p>
<p><strong>adb shell wm overscan reset</strong> #恢复显示区域</p>
<h3 id="2-10-4-关闭-USB-调试模式"><a href="#2-10-4-关闭-USB-调试模式" class="headerlink" title="2.10.4 关闭 USB 调试模式"></a><strong>2.10.4 关闭 USB 调试模式</strong></h3><p><strong>adb shell settings put global adb_enabled 0</strong></p>
<p>使用命令无法恢复调试模式，只能通过手动</p>
<h3 id="2-10-5-状态栏和导航栏的显示隐藏"><a href="#2-10-5-状态栏和导航栏的显示隐藏" class="headerlink" title="2.10.5 状态栏和导航栏的显示隐藏"></a><strong>2.10.5 状态栏和导航栏的显示隐藏</strong></h3><p><strong>adb shell settings put global policy_control <key-values></strong></p>
<p><key-values> 可由如下几种键及其对应的值组成，格式为 <key1>=<value1>:<key2>=<value2></p>
<p>key 键对应的值</p>
<p><img src="https://pic3.zhimg.com/80/v2-bd196a935a4b328d77fdfef289dc1926_1440w.jpg" alt="img"></p>
<p>这些键对应的值可则如下值用逗号组合</p>
<p><img src="https://pic1.zhimg.com/80/v2-a88f429d1bdaccbae6f7feeef65546d8_1440w.jpg" alt="img"></p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置在所有界面下都同时隐藏状态栏和导航栏</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.full=*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置在包名为 com.package1 和 com.package2 的应用里隐藏状态栏，在除了包名为 com.package3 的所有应用里隐藏导航栏。</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,<span class="literal">-com</span>.package3</span><br></pre></td></tr></table></figure>

<h2 id="2-11-实用功能"><a href="#2-11-实用功能" class="headerlink" title="2.11 实用功能"></a><strong>2.11 实用功能</strong></h2><h3 id="2-11-1屏幕截图"><a href="#2-11-1屏幕截图" class="headerlink" title="2.11.1屏幕截图"></a><strong>2.11.1屏幕截图</strong></h3><p><strong>adb exec-out screencap -p &gt; img.png</strong> # 老版本无exec-out命令，只适合于新版的截图</p>
<p><strong>adb shell screencap -p /sdcard/img.png</strong> # 老版本截图先保存在设备端</p>
<p><strong>adb pull /sdcard/img.png</strong> # 通过pull拷贝到本地</p>
<p>screencap 参数：</p>
<p>参数 含义</p>
<p>-p 指定保存文件为 png 格式</p>
<p>-d display-id 指定截图的显示屏编号（有多显示屏的情况下）</p>
<h3 id="2-11-2录制屏幕"><a href="#2-11-2录制屏幕" class="headerlink" title="2.11.2录制屏幕"></a><strong>2.11.2录制屏幕</strong></h3><p><strong>#</strong> 默认录制时间和最长录制时间都是180s</p>
<p><strong>adb shell screenrecord /sdcard/filename.mp4</strong></p>
<p>screenrecord 参数：</p>
<p>参数 含义</p>
<p>–size WIDTHxHEIGHT 视频的尺寸，比如 1280x720，默认是屏幕分辨率。</p>
<p>–bit-rate RATE 视频的比特率，默认是 4Mbps。</p>
<p>–time-limit TIME 录制时长，单位秒。</p>
<p>–verbose 输出更多信息。</p>
<p><strong>2.11.3 重新挂载 system 分区为可写</strong></p>
<p><strong>注：需要 root 权限</strong></p>
<p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p>
<p>步骤：</p>
<p>1.进入 shell 并切换到 root 用户权限。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure>

<p>2.查看当前分区挂载情况。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mount</span></span><br><span class="line">输出如下</span><br><span class="line">.....</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /acct cgroup rw,relatime,cpuacct <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=<span class="number">750</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=<span class="number">755</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /dev/cpuctl cgroup rw,relatime,cpu <span class="number">0</span> <span class="number">0</span></span><br><span class="line">/dev/block/mtdblock0 /system ext4 ro,seclabel,relatime,<span class="keyword">data</span>=ordered <span class="number">0</span> <span class="number">0</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<p>找到其中我们关注的带 <strong>/system</strong> 的那一行：</p>
<p>3.重新挂载。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mount</span> <span class="literal">-o</span> remount,rw <span class="literal">-t</span> yaffs2 /dev/block/mtdblock0 /system</span><br></pre></td></tr></table></figure>

<p><strong>2.11.4 查看连接过的 WiFi 密码</strong></p>
<p><strong>注：需要 root 权限</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$cat</span> /<span class="keyword">data</span>/misc/wifi/*.conf</span><br></pre></td></tr></table></figure>

<p><strong>2.11.5设置系统日期和时间</strong></p>
<p><strong>注：需要 root 权限</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$date</span> <span class="literal">-s</span> <span class="number">20190531.131600</span>  <span class="comment">#将系统日期和时间更改为 2019 年 05 月 31 日 13 点 16 分 00 秒。</span></span><br></pre></td></tr></table></figure>

<p><strong>2.11.6 重启手机</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure>

<p><strong>2.11.7 检测设备是否已 root</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure>

<p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p>
<p><strong>2.11.8 使用 Monkey 进行压力测试</strong></p>
<p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 &lt;packagename&gt; 指定的应用程序发送 500 个伪随机事件</span></span><br><span class="line"><span class="variable">$adb</span> shell monkey <span class="literal">-p</span> &lt;packagename&gt; <span class="literal">-v</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>

<p>monkey 官方文档 <a href="https://link.zhihu.com/?target=https://developer.android.com/studio/test/monkey.html">https://developer.android.com/studio/test/monkey.html</a></p>
<p><strong>2.11.9 开启/关闭 WiFi</strong></p>
<p><strong>注：需要 root 权限</strong></p>
<p>开启 WiFi：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi enable</span><br></pre></td></tr></table></figure>

<p>关闭 WiFi：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi disable</span><br></pre></td></tr></table></figure>

<h2 id="2-12刷机相关命令"><a href="#2-12刷机相关命令" class="headerlink" title="2.12刷机相关命令"></a><strong>2.12刷机相关命令</strong></h2><p><strong>注：不要随便操作，没实验过无法保证成功</strong></p>
<h3 id="2-12-1重启到-Recovery-模式"><a href="#2-12-1重启到-Recovery-模式" class="headerlink" title="2.12.1重启到 Recovery 模式"></a><strong>2.12.1重启到 Recovery 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure>

<h3 id="2-12-2从-Recovery-重启到-Android"><a href="#2-12-2从-Recovery-重启到-Android" class="headerlink" title="2.12.2从 Recovery 重启到 Android"></a><strong>2.12.2从 Recovery 重启到 Android</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure>

<h3 id="2-12-3重启到-Fastboot-模式"><a href="#2-12-3重启到-Fastboot-模式" class="headerlink" title="2.12.3重启到 Fastboot 模式"></a><strong>2.12.3重启到 Fastboot 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot bootloader</span><br></pre></td></tr></table></figure>

<h3 id="2-12-4通过-sideload-更新系统"><a href="#2-12-4通过-sideload-更新系统" class="headerlink" title="2.12.4通过 sideload 更新系统"></a><strong>2.12.4通过 sideload 更新系统</strong></h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p>
<p>以 Recovery 模式下更新为例：</p>
<p>1.重启到 Recovery 模式。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure>

<p>2.在设备的 Recovery 界面上操作进入 Apply update-Apply from ADB。</p>
<p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 Apply update from ADB。</p>
<p>3.通过 adb 上传和更新系统。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> sideload &lt;path<span class="literal">-to</span><span class="literal">-update</span>.zip&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-13-更多-adb-shell-命令"><a href="#2-13-更多-adb-shell-命令" class="headerlink" title="2.13 更多 adb shell 命令"></a><strong>2.13 更多 adb shell 命令</strong></h2><h3 id="2-13-1查看进程"><a href="#2-13-1查看进程" class="headerlink" title="2.13.1查看进程"></a><strong>2.13.1查看进程</strong></h3><p>adb shell ps</p>
<h3 id="2-13-2查看实时资源占用情况"><a href="#2-13-2查看实时资源占用情况" class="headerlink" title="2.13.2查看实时资源占用情况"></a><strong>2.13.2查看实时资源占用情况</strong></h3><p>adb shell top</p>
<p>top命令参数如下：</p>
<p>使用方法: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</p>
<blockquote>
<p>-m num 最多显示多少个进程<br>-n num 刷新多少次后退出<br>-d num 刷新时间间隔（单位秒，默认值 5）<br>-s col 按某列排序（可用 col 值：cpu, vss, rss, thr）<br>-t 显示线程信息<br>-h 显示帮助文档</p>
</blockquote>
<p><strong>2.13.3其它</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-6044fe28a519255e62608e7ea542e65c_1440w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
  </entry>
  <entry>
    <title>3.19雪中长城</title>
    <url>/2022/03/19/3-19%E9%9B%AA%E4%B8%AD%E9%95%BF%E5%9F%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>好想变强，好想好好睡觉，好想走遍山河。</p>
<p>最近感觉自己越来越闲鱼了，上班之外基本啥也没有做，读书学习都没了兴趣。</p>
<p>现在唯一要等的就是花开了吧，唯一还有动力能做的就是游玩计划了吧。</p>
<p>苦瓜柠檬茶很好喝，苦瓜清甜而不苦，加上柠檬带有一丝微微的酸甜，还有冰能很好维持这种味道就久而不消散，以至于很久之后感觉嘴巴里还是清香甘甜的。</p>
<p>这个冬季，在每个雪天，去过了北京自然博物馆、天坛、故宫、香山、黑龙潭、北京游乐公园、长城</p>
<p>所以我能变成更好的那个自己吗</p>
<span id="more"></span>

<p><img src="1.jpg"></p>
<p><img src="2.jpg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium UI自动化测试</title>
    <url>/2021/06/10/Appium-UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="App自动化测试背景"><a href="#App自动化测试背景" class="headerlink" title="App自动化测试背景"></a>App自动化测试背景</h3><p>随着移动终端的普及，手机应用越来越多，也越来越重要。App的回归测试用例数量也越来越多，全量回归也越来越消耗时间。另外移动端碎片化严重，尤其是Android端碎片化（不同的机型、不同的处理器架构、不同的系统版本、不同的厂商）严重性更为突出，市面上Android机型甚至有几万，几十万款，所以我们也需要通过这种自动化测试帮助我们减少兼容性的测试工作。总之为了减少这种重复的、大量回归到测试任务，我们迫切需要引进一些自动化测试来协助。</p>
<span id="more"></span>

<h3 id="Appium自动化测试简介"><a href="#Appium自动化测试简介" class="headerlink" title="Appium自动化测试简介"></a>Appium自动化测试简介</h3><p>Appium是一个开源（大量社区人员维护源码）的，适用于原生（native）（纯粹使用安卓自带的开发组件和应用，开发的产品）或混合（原生应用中嵌入html5页面）移动应用( hybrid mobile apps )的自动化测试框架。Appium应用 WebDriver （继承了WebDriver协议，在协议中封装和拓展）: JSON wire protocol 驱动安卓和iOS移动应用。</p>
<p>纯原生应用时效性差，例如：开发好的应用上传到应用商店，需要商店的审核。审核可能1-3天左右，IOS需要2周左右。618前一天开发好，急着上线。</p>
<p>混合移动应用：在应用中嵌入一些html5页面，在自己的应用中启用web端，嵌入html5。不需要对已有应用再次审核。但是体验性差，自适应差，响应时间久。</p>
<p>混合移动应用运用场景：商城中活动页面（快的更新频率）</p>
<h4 id="App自动化测试工具对比"><a href="#App自动化测试工具对比" class="headerlink" title="App自动化测试工具对比"></a>App自动化测试工具对比</h4><p><strong>iOS</strong></p>
<p>官方:</p>
<ul>
<li>Uiautomation/XCUITest: 白盒, UI测试, JS<br>其他:</li>
<li>FastMonkey: 性能(仿Monkey), 张钊</li>
</ul>
<p><strong>Andorid</strong></p>
<p>官方:</p>
<ul>
<li>Uiautomator/Uiautomtor2: UI测试, Java</li>
<li>Monkey: app性能/稳定性测试, 随机操作</li>
<li>MonkeyRunner: UI测试, Jpython, 只能通过坐标定位</li>
<li>Robotium: 白盒, UI测试, Java, 支持Webview/Toast/menu/Dialog等, 无法跨进程</li>
<li>Espresso: 官方推荐扩展测试包, 白盒,ui, 一般开发自测使用</li>
<li>CTS: 兼容性测试, Java</li>
</ul>
<p>其他:</p>
<ul>
<li>Python-Uiautomotor2: UI测试, 使用简单, 支持无线连接设备及使用weditor查看元素定位</li>
<li>Adb-For-Test/adb-For-Robotium: 个人, 基于adb命令的封装</li>
</ul>
<p><strong>多平台支持</strong></p>
<ul>
<li>Calabash: iOS/Andriod/混合app, Ruby, BDD模式, Api丰富</li>
<li>Appium: iOS/Andriod/混合app/H5, Java/Python/Ruby/JS..</li>
<li>Macaco: 阿里基于Appium进行的精简封装的一套框架, 支持Electron应用, 包含app-inspector和ui-recorder, 统一了iOS/Android操作的Api, 目前坑比较多, 环境搭建较麻烦</li>
<li><strong>Airtest(ATS)</strong>: 网易推出的一款基于截图对比的App自动化测试工具, 可用于App游戏UI测试, 支持iOS/Android</li>
</ul>
<p><strong>云平台</strong></p>
<ul>
<li><strong>Sauce Labs</strong>: Appium官方推荐, 应用最广的云测平台, 收费</li>
<li>Testin/腾讯云测等: 国内云平台, 收费</li>
<li>OpenSTF: 开源手机集群管理平台, 免费</li>
</ul>
<h4 id="Appium的特点"><a href="#Appium的特点" class="headerlink" title="Appium的特点"></a>Appium的特点</h4><ul>
<li>支持多平台(Android、 iOS等)</li>
<li>支持多语言(python、 java、 ruby、 javascript、 c#等)</li>
<li>Appium是跨平台的，可以用在OSX, Windows以及Linux 桌面系统上运行。（IOS应用只能在MAC上测试）</li>
<li>Appium选择了Client/Server的设计模式。只要client能够发送http请求给server，那么的话client用什么语言来实现都是可以的，这就是如何做到支持多语言的原因:</li>
<li>Appium扩 展了WebDriver的协议，没有自己重新去实现一套。这样的好处是以前的WebDriver API能够直接被继承过来，以前的Selenium (WebDriver) 各种语言的binding都可以拿来就用，省去了为每种语言开发一个client的工作量。</li>
</ul>
<h4 id="Appium底层处理流程"><a href="#Appium底层处理流程" class="headerlink" title="Appium底层处理流程"></a>Appium底层处理流程</h4><p><strong>Andorid(uiautomator)</strong></p>
<p>appium为C/S架构(C是指Client，S是指Server，C/S模式就是指客户端/服务器模式)，appium会暴露给我们一些API，我们调用API（Client）就会发起请求到Server端。Server会push一个bootstrap.jar包到手机里面。bootstrap.jar会分析、监听和转发，我们请求的命令，到底层调用我们Android底层的Uiautomator框架操作APP控件。</p>
<p><img src="Appium%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.jpg"></p>
<ol>
<li>调用Android adb完成基本的系统操作</li>
<li>向Android上部署bootstrap.jar</li>
<li>bootstrap.jar Forward Android的端口到PC机器上</li>
<li>PC上监听端口接收请求，使用webdriver协议</li>
<li>分析命令并通过forward 端口发给bootstrap.jar</li>
<li>bootstrap.jar接收请求并把命令发给uiautomator</li>
<li>ui automator执行命令</li>
</ol>
<p><strong>iOS</strong></p>
<ol>
<li>client端 依然是 test script是我们的webdriver测试脚本。</li>
<li>中间是起的Appium的服务，Appium在服务端起了一个Server（4723端口），跟selenium Webdriver测试框架类似， Appium⽀持标准的WebDriver JSONWireProtocol。在这里提供它提供了一套REST的接口,Appium Server接收web driver client标准rest请求，解析请求内容，调⽤用对应的框架响应操作。</li>
<li>appium server调用instruments.js 启动⼀一个socket server，同时分出一个⼦子进程运⾏instruments.app，将bootstrap.js（一个UIAutomation脚本）注⼊入到device⽤于和外界进行交互</li>
<li>最后Bootstrap.js将执行的结果返回给appium server</li>
<li>appium server再将结果返回给 appium client</li>
</ol>
<h4 id="Appium的哲学"><a href="#Appium的哲学" class="headerlink" title="Appium的哲学"></a>Appium的哲学</h4><ul>
<li><p>开源免费（大量社区人员维护源码）</p>
</li>
<li><p>不需要重新编译或者修改应用：不需要修改app代码就可以做自动化测试</p>
<ol>
<li>monkeyruner较早之前的app测试框架，只能用python写。不能通用于所有手机</li>
</ol>
<ul>
<li>基于坐标去点击的，不同手机分辨率，坐标不相同，就会导致用例失败。点击空间的位置，一直在加载，然后又点下一个页面的控件，实际上还是点击本页面的控件，导致后面测试都挂了。因为他不能识别控件是否加载完毕</li>
</ul>
<ol start="2">
<li>monkeytalk基于控件定位测试，解决了monkeyrunner的弊端。但只能用JavaScript去写</li>
</ol>
<ul>
<li>需要拿到源码，在其中插入agent代理，才能进行操作应用，可能出现问题，导致崩溃。对app有负面影响</li>
</ul>
<ol start="3">
<li><p>robotium基于控件定位，也能应用原生和混合。需要用java去实现自动化脚本，而且需要签名。对于app来说，最后打成包后缀是apk，要删掉重新签名，对文件有改变，有多余工作量。</p>
</li>
<li><p>macaca阿里开发的测试框架，底层还是appium，只是写法更简单</p>
</li>
</ol>
</li>
<li><p>不被一种语言或者框架约束</p>
</li>
<li><p>不重复造轮子</p>
</li>
</ul>
<h3 id="Appium自动化测试环境搭建-Appium-App自动化测试环境搭建http-www-bcbxhome-com-bcbxxy-forum-php-mod-viewthread-amp-tid-9"><a href="#Appium自动化测试环境搭建-Appium-App自动化测试环境搭建http-www-bcbxhome-com-bcbxxy-forum-php-mod-viewthread-amp-tid-9" class="headerlink" title="[Appium自动化测试环境搭建](Appium App自动化测试环境搭建http://www.bcbxhome.com/bcbxxy/forum.php?mod=viewthread&amp;tid=9)"></a>[Appium自动化测试环境搭建](Appium App自动化测试环境搭建<a href="http://www.bcbxhome.com/bcbxxy/forum.php?mod=viewthread&amp;tid=9">http://www.bcbxhome.com/bcbxxy/forum.php?mod=viewthread&amp;tid=9</a>)</h3><ul>
<li>Python环境搭建</li>
<li>安装JDK, 配置环境变量<ul>
<li>新建系统变量<ul>
<li>变量名：JAVA_HOME</li>
<li>变量值：java的安装路径</li>
</ul>
</li>
<li>新建path<ul>
<li>%JAVA_HOME%\bin（bin里面包含java.exe，为路径下可执行程序）</li>
</ul>
</li>
</ul>
</li>
<li>安装Android SDK, 配置环境变量<ul>
<li>新建系统变量<ul>
<li>变量名：ADNDRIOD_HOME</li>
<li>变量值：SDK的安装路径</li>
</ul>
</li>
<li>新建path：<ul>
<li>%ANDROID_HOME%\platform-tools</li>
<li>%ANDROID_HOME%\tools</li>
</ul>
</li>
</ul>
</li>
<li>安装Appium-Windows-Desktop</li>
<li>安装Appium-Python-Client<ul>
<li><code>pip install selenium</code></li>
<li><code>pip install Appium-Python-Clinet</code></li>
</ul>
</li>
<li>安装模拟器</li>
</ul>
<h3 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h3><p><strong>怎么校验手机连接上了</strong></p>
<p>命令行输入 <code>adb devices</code> 显示127.0.0.1:21503 device即可</p>
<p><strong>设备没连接上的几种情况</strong></p>
<ul>
<li>USB调试没打开，设置——开发者选项——USB调试</li>
<li>关掉模拟器，重新以管理员权限打开</li>
<li>版本不匹配：只要将sdk路径下的platform-tools路径中的如下三个文件：adb、AdbWinApi.dll、AdbWinUsbApi.dll 复制到逍遥模拟器安装目录下</li>
<li>以上都调式了，还是连接不上：可能手机没安装驱动，下载91助手，自动下载手机的驱动</li>
<li>offline：数据线重新连接一下</li>
<li>unauthorized：未经授权，授权即可</li>
</ul>
<h3 id="Andorid-sdk介绍"><a href="#Andorid-sdk介绍" class="headerlink" title="Andorid sdk介绍"></a>Andorid sdk介绍</h3><ul>
<li>add-ons: 附加库</li>
<li>build-tools: 编译工具</li>
<li>platform: 各版本sdk</li>
<li>platforms-tools: 平台通用工具, 如adb</li>
<li>tools: 常用工具</li>
</ul>
<h3 id="Adb介绍"><a href="#Adb介绍" class="headerlink" title="Adb介绍"></a>Adb介绍</h3><p>Adb(Android Debug Bridge): Andoid设备调试桥梁, 可以再PC端通过命令调试Android设备, 如获取设备状态, 安装/卸载app, 上传/下载文件等操作</p>
<h3 id="Adb常用命令"><a href="#Adb常用命令" class="headerlink" title="Adb常用命令"></a>Adb常用命令</h3><p><strong>开启/关闭服务</strong></p>
<ul>
<li>adb start-server: 开启服务</li>
<li>adb kill-server: 关闭服务</li>
</ul>
<p><strong>连接设备/获取连接状态(自动开启服务)</strong></p>
<ul>
<li>adb connect/disconnect 设备名或uuid: 连接/断开连接设备</li>
<li>adb devices: 查看连接的设备</li>
</ul>
<p><strong>安装/卸载app</strong></p>
<ul>
<li>adb install 安装包路径.apk</li>
<li>adb uninstall apk包名</li>
</ul>
<blockquote>
<p>通过uiautomatorviewer可以获取获取apk包名</p>
</blockquote>
<p><strong>上传/下载文件</strong></p>
<ul>
<li>上传: adb push 本地文件 设备目录</li>
<li>下载: adb pull 设备文件 本地目录</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Copyadb <span class="keyword">push</span> <span class="number">1</span>.txt <span class="regexp">/sdcard/</span></span><br><span class="line">adb pull sdcard/<span class="number">1</span>.txt .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>adb shell: 可用于查看设备中的文件, exit退出</p>
</blockquote>
<p><strong>强大的adb shell</strong></p>
<ul>
<li><p>pm: 应用及权限管理 <code>adb shell pm list packages</code></p>
</li>
<li><p>am: Activity操作 <code>adb shell am start -n 包名/包名.主Activity名</code></p>
</li>
<li><p>input: 模拟按键/输入</p>
<ul>
<li>点击(触控)指定坐标: <code>adb shell input tap 50 250</code></li>
<li>输入文字: <code>adb shell input text hello</code></li>
<li>按键: <code>adb shell input keyevent 3</code></li>
<li>滑动: <code>adb shell input swipe 300 1000 300 500</code></li>
</ul>
</li>
<li><p>logcat: 日志查看及过滤(问题定位)</p>
</li>
<li><p>monkey: 性能/稳定性测试</p>
</li>
<li><p>dumpsys: 性能分析</p>
</li>
<li><p>screencap: 截图 <code>adb shell screencap -p /sdcard/01.png</code></p>
</li>
<li><p>screenrecord: 录屏 <code>adb shell screenrecord --time-limit 10 /sdcard/demo.mp4</code></p>
</li>
<li><p><strong>获取包名</strong> <code>adb shell dumpsys activity top |findstr &quot;ACTIVITY&quot;</code></p>
<p>ACTIVITY cn.xiaochuankeji.tieba（包名）/.ui.home.page.PageMainActivity（ACTIVITY名） 30649d5e pid=2339</p>
<p>如果没有登录就可以拉取activity会很不安全，所以安卓默认拉取首个activity</p>
<p>想要拉取启动的activity，需要在软件启动的一瞬间获取包名</p>
</li>
</ul>
<p><strong>示例</strong>:</p>
<blockquote>
<p>配合uiautomatorviewer查看元素坐标, 使用bounds中x,y的平均值, 屏幕分辨率1280*760, 滑动时可取平均值</p>
</blockquote>
<ul>
<li>安装高仿微信app</li>
<li>启动app</li>
<li>点击登录按钮</li>
<li>输入18010181267</li>
<li>按TAB键</li>
<li>输入123456</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Copyadb install app-<span class="keyword">debug</span>.apk</span><br><span class="line">adb <span class="keyword">am</span> start -n <span class="keyword">com</span>.lqr.wechat/<span class="keyword">com</span>.lqr.wechat.<span class="keyword">com</span>.lqr.wechat.ui.activity.SplashActivity</span><br><span class="line">adb <span class="keyword">shell</span> <span class="built_in">input</span> tap <span class="number">170</span> <span class="number">1197</span></span><br><span class="line">adb <span class="keyword">shell</span> <span class="built_in">input</span> text <span class="number">18010181267</span></span><br><span class="line">adb <span class="keyword">shell</span> <span class="built_in">input</span> keyevent KEYCODE_TAB</span><br><span class="line">adb adb <span class="keyword">shell</span> <span class="built_in">input</span> tap <span class="number">360</span> <span class="number">498</span></span><br><span class="line">adb <span class="keyword">shell</span> <span class="built_in">input</span> swipe <span class="number">700</span> <span class="number">540</span> <span class="number">10</span> <span class="number">540</span>  # 滑动时离开一定边界</span><br><span class="line">adb <span class="keyword">shell</span> screencap -<span class="keyword">p</span> /sdcard/<span class="number">01</span>.png</span><br><span class="line">adb <span class="keyword">shell</span> <span class="built_in">input</span> keyevent <span class="number">3</span> # 按HOME键</span><br><span class="line">adb pull /sdcard/<span class="number">01</span>.png .  # 下载图片</span><br></pre></td></tr></table></figure>

<blockquote>
<p>支持的KEYCODE</p>
</blockquote>
<ul>
<li>0 –&gt; “KEYCODE_UNKNOWN”</li>
<li>1 –&gt; “KEYCODE_MENU”</li>
<li>2 –&gt; “KEYCODE_SOFT_RIGHT”</li>
<li>3 –&gt; “KEYCODE_HOME”</li>
<li>4 –&gt; “KEYCODE_BACK”</li>
<li>5 –&gt; “KEYCODE_CALL”</li>
<li>6 –&gt; “KEYCODE_ENDCALL”</li>
<li>7 –&gt; “KEYCODE_0”</li>
<li>8 –&gt; “KEYCODE_1”</li>
<li>9 –&gt; “KEYCODE_2”</li>
<li>10 –&gt; “KEYCODE_3”</li>
<li>11 –&gt; “KEYCODE_4”</li>
<li>12 –&gt; “KEYCODE_5”</li>
<li>13 –&gt; “KEYCODE_6”</li>
<li>14 –&gt; “KEYCODE_7”</li>
<li>15 –&gt; “KEYCODE_8”</li>
<li>16 –&gt; “KEYCODE_9”</li>
<li>17 –&gt; “KEYCODE_STAR”</li>
<li>18 –&gt; “KEYCODE_POUND”</li>
<li>19 –&gt; “KEYCODE_DPAD_UP”</li>
<li>20 –&gt; “KEYCODE_DPAD_DOWN”</li>
<li>21 –&gt; “KEYCODE_DPAD_LEFT”</li>
<li>22 –&gt; “KEYCODE_DPAD_RIGHT”</li>
<li>23 –&gt; “KEYCODE_DPAD_CENTER”</li>
<li>24 –&gt; “KEYCODE_VOLUME_UP”</li>
<li>25 –&gt; “KEYCODE_VOLUME_DOWN”</li>
<li>26 –&gt; “KEYCODE_POWER”</li>
<li>27 –&gt; “KEYCODE_CAMERA”</li>
<li>28 –&gt; “KEYCODE_CLEAR”</li>
<li>29 –&gt; “KEYCODE_A”</li>
<li>30 –&gt; “KEYCODE_B”</li>
<li>31 –&gt; “KEYCODE_C”</li>
<li>32 –&gt; “KEYCODE_D”</li>
<li>33 –&gt; “KEYCODE_E”</li>
<li>34 –&gt; “KEYCODE_F”</li>
<li>35 –&gt; “KEYCODE_G”</li>
<li>36 –&gt; “KEYCODE_H”</li>
<li>37 –&gt; “KEYCODE_I”</li>
<li>38 –&gt; “KEYCODE_J”</li>
<li>39 –&gt; “KEYCODE_K”</li>
<li>40 –&gt; “KEYCODE_L”</li>
<li>41 –&gt; “KEYCODE_M”</li>
<li>42 –&gt; “KEYCODE_N”</li>
<li>43 –&gt; “KEYCODE_O”</li>
<li>44 –&gt; “KEYCODE_P”</li>
<li>45 –&gt; “KEYCODE_Q”</li>
<li>46 –&gt; “KEYCODE_R”</li>
<li>47 –&gt; “KEYCODE_S”</li>
<li>48 –&gt; “KEYCODE_T”</li>
<li>49 –&gt; “KEYCODE_U”</li>
<li>50 –&gt; “KEYCODE_V”</li>
<li>51 –&gt; “KEYCODE_W”</li>
<li>52 –&gt; “KEYCODE_X”</li>
<li>53 –&gt; “KEYCODE_Y”</li>
<li>54 –&gt; “KEYCODE_Z”</li>
<li>55 –&gt; “KEYCODE_COMMA”</li>
<li>56 –&gt; “KEYCODE_PERIOD”</li>
<li>57 –&gt; “KEYCODE_ALT_LEFT”</li>
<li>58 –&gt; “KEYCODE_ALT_RIGHT”</li>
<li>59 –&gt; “KEYCODE_SHIFT_LEFT”</li>
<li>60 –&gt; “KEYCODE_SHIFT_RIGHT”</li>
<li>61 –&gt; “KEYCODE_TAB”</li>
<li>62 –&gt; “KEYCODE_SPACE”</li>
<li>63 –&gt; “KEYCODE_SYM”</li>
<li>64 –&gt; “KEYCODE_EXPLORER”</li>
<li>65 –&gt; “KEYCODE_ENVELOPE”</li>
<li>66 –&gt; “KEYCODE_ENTER”</li>
<li>67 –&gt; “KEYCODE_DEL”</li>
<li>68 –&gt; “KEYCODE_GRAVE”</li>
<li>69 –&gt; “KEYCODE_MINUS”</li>
<li>70 –&gt; “KEYCODE_EQUALS”</li>
<li>71 –&gt; “KEYCODE_LEFT_BRACKET”</li>
<li>72 –&gt; “KEYCODE_RIGHT_BRACKET”</li>
<li>73 –&gt; “KEYCODE_BACKSLASH”</li>
<li>74 –&gt; “KEYCODE_SEMICOLON”</li>
<li>75 –&gt; “KEYCODE_APOSTROPHE”</li>
<li>76 –&gt; “KEYCODE_SLASH”</li>
<li>77 –&gt; “KEYCODE_AT”</li>
<li>78 –&gt; “KEYCODE_NUM”</li>
<li>79 –&gt; “KEYCODE_HEADSETHOOK”</li>
<li>80 –&gt; “KEYCODE_FOCUS”</li>
<li>81 –&gt; “KEYCODE_PLUS”</li>
<li>82 –&gt; “KEYCODE_MENU”</li>
<li>83 –&gt; “KEYCODE_NOTIFICATION”</li>
<li>84 –&gt; “KEYCODE_SEARCH”</li>
<li>85 –&gt; “TAG_LAST_KEYCODE”</li>
</ul>
<h3 id="Appium-API详细介绍"><a href="#Appium-API详细介绍" class="headerlink" title="Appium API详细介绍"></a>Appium API详细介绍</h3><p>如何去定位元素，sdk/tools下uiautomatorviewer.bat双击打开</p>
<ul>
<li><p><code>driver.find_element_by_id</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到最右app推荐列表下第一个人昵称</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_element_by_id</span>():</span></span><br><span class="line">    driver.implicitly_wait(<span class="number">60</span>)</span><br><span class="line">    element = driver.find_element_by_id(<span class="string">&quot;cn.xiaochuankeji.tieba:id/simple_member_tv_name&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(element.text)    </span><br></pre></td></tr></table></figure></li>
<li><p><code>driver.find_elements_by_id</code>（app中id基本不唯一，平行结构id可能一样）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到最右app上方菜单栏，打印并点击</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_element_by_id</span>():</span></span><br><span class="line">    driver.implicitly_wait(<span class="number">60</span>)</span><br><span class="line">    element = driver.find_elements_by_id(<span class="string">&quot;cn.xiaochuankeji.tieba:id/title&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(element[<span class="number">2</span>].text) </span><br><span class="line">    element[<span class="number">2</span>].click()</span><br></pre></td></tr></table></figure></li>
<li><p><code>driver.find_element_by_class_name</code></p>
</li>
<li><p><code>driver.find_elements_by_class_name</code></p>
</li>
<li><p><code>driver.find_element_by_xpath</code></p>
</li>
<li><p><code>driver.find_elements_by_xpath</code>（一般不用）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium自动化框架</title>
    <url>/2021/06/19/Appium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>对测试人来说，Appium 是非常重要的一个开源跨平台自动化测试工具，它允许测试人员在不同的平台（iOS、Android 等）使用同一套 API 来写自动化测试脚本，这样可大幅提升代码复用率和工作效率。</p>
<p>本文汇总了从 Appium 基础到自动化测试高级实战中，所涉及到的方方面面的知识点精华内容（如下所示），希望对大家快速总结和复习有所帮助。</p>
<span id="more"></span>

<h3 id="Appium-从基础到自动化测试框架实战"><a href="#Appium-从基础到自动化测试框架实战" class="headerlink" title="Appium 从基础到自动化测试框架实战"></a><strong>Appium 从基础到自动化测试框架实战</strong></h3><ol>
<li>Appium 基础 1(环境搭建和简介)</li>
<li>Appium 基础 2(元素定位和元素常用方法)</li>
<li>Appium 基础 3(手势操作和 uiautomator 查找元素)</li>
<li>Appium 基础 4(显式等待)</li>
<li>Appium 基础 5(toast 和参数化)</li>
<li>Appium 基础 6(webview)</li>
<li>Appium_ 企业微信练习 (非 PO，增加和删除联系人)</li>
<li>Appium_ 企业微信练习 (PO–增加联系人)</li>
</ol>
<h3 id="Appium-环境搭建"><a href="#Appium-环境搭建" class="headerlink" title="Appium 环境搭建"></a><strong>Appium 环境搭建</strong></h3><h3 id="JDK-的搭建"><a href="#JDK-的搭建" class="headerlink" title="JDK 的搭建"></a><strong>JDK 的搭建</strong></h3><ul>
<li>下载 1.8 的 jdk</li>
<li>新建环境变量：JAVA_HOME 值为：D:\Program Files\Java\jdk1.7.0</li>
<li>新建环境变量：CLASSPATH 值为：.;%JAVA_HOME%\lib;（注意：点号表示当前目录，不能省略）</li>
<li>在系统变量 Path 的值的前面加入以下内容：%JAVA_HOME%\bin</li>
</ul>
<h3 id="SDK-的配置"><a href="#SDK-的配置" class="headerlink" title="SDK 的配置"></a><strong>SDK 的配置</strong></h3><ul>
<li>下载 sdk</li>
<li>打开 sdk 的 sdk manager，安装 tools 前 3 个东西和 google 的 usb 驱动</li>
<li>配置 Android home 里面的 platform-tools 和 tools</li>
</ul>
<h3 id="Appium-的搭建"><a href="#Appium-的搭建" class="headerlink" title="Appium 的搭建"></a><strong>Appium 的搭建</strong></h3><ul>
<li>安装 node.js，配置 node.js 的环境变量</li>
<li>npm install -g cnpm –registry=<a href="https://link.zhihu.com/?target=https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></li>
<li>cnpm install -g appium</li>
<li>cnpm install -g appium-doctor</li>
<li>pip install appium-python-client</li>
</ul>
<h3 id="appium-运行的-python-代码"><a href="#appium-运行的-python-代码" class="headerlink" title="appium 运行的 python 代码"></a><strong>appium 运行的 python 代码</strong></h3><ul>
<li>mumu 连接 adb 是：adb connect 127.0.0.1:7555</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置 caps 的值</span></span><br><span class="line">desire_cap= &#123;</span><br><span class="line">    <span class="comment">#默认是 Android</span></span><br><span class="line">    <span class="string">&quot;platformName&quot;</span>:<span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="comment">#adb devices 的 sn 名称</span></span><br><span class="line">    <span class="string">&quot;deviceName&quot;</span>:<span class="string">&quot;127.0.0.1:7555&quot;</span>,</span><br><span class="line">    <span class="comment">#包名</span></span><br><span class="line">    <span class="string">&quot;appPackage&quot;</span>:<span class="string">&quot;com.xueqiu.android&quot;</span>,</span><br><span class="line">    <span class="comment">#activity 名字</span></span><br><span class="line">    <span class="string">&quot;appActivity&quot;</span>:<span class="string">&quot;.view.WelcomeActivityAlias&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行 appium，前提是要打开 appium server</span></span><br><span class="line">driver=webdriver.Remote(<span class="string">&quot;http://127.0.0.1:4723/wd/hub&quot;</span>,desire_cap)</span><br></pre></td></tr></table></figure>

<h3 id="Appium-的简介"><a href="#Appium-的简介" class="headerlink" title="Appium 的简介"></a><strong>Appium 的简介</strong></h3><h3 id="Appium-的引擎"><a href="#Appium-的引擎" class="headerlink" title="Appium 的引擎"></a><strong>Appium 的引擎</strong></h3><ul>
<li>Android 是 uiautomator2</li>
<li>ios 是 xcuitest</li>
</ul>
<h3 id="Appium-的设计理念"><a href="#Appium-的设计理念" class="headerlink" title="Appium 的设计理念"></a><strong>Appium 的设计理念</strong></h3><ul>
<li>webdriver 是基于 http 协议的，第一连接会建立一个 session 会话，并通过 post 发送一个 json 告知服务端相关测试信息</li>
<li>client/server 设计模式</li>
<li>客户端通过 webdriver json wire 协议与服务器通讯</li>
<li>多语言支持</li>
<li>server 可以放在任何地方</li>
<li>服务器 nodejs 开发的 http 服务</li>
<li>appium 使用 appium-xcuitest-driver 来测试 iphone 设备，其中需要安装 Facebook 出的 WDA(webdriver agent) 来驱动 ios 测试</li>
</ul>
<h3 id="Appium-的生态工具"><a href="#Appium-的生态工具" class="headerlink" title="Appium 的生态工具"></a><strong>Appium 的生态工具</strong></h3><ul>
<li>adb：Android 控制工具</li>
<li>appium Destkop：内嵌 appium server 和 inspector 的综合工具</li>
<li>appium server：appium 的核心工具，命令行工具</li>
<li>appium client：各种语言的客户端封装库，用户连接 appium server，包含 python、java、ruby 等</li>
<li>appcrawler 自动遍历工具</li>
</ul>
<h3 id="获取-App-的信息"><a href="#获取-App-的信息" class="headerlink" title="获取 App 的信息"></a><strong>获取 App 的信息</strong></h3><ul>
<li>获取当前元素界面：adb shell dumpsys activity top</li>
<li>获取任务列表：adb shell dumpsys activity activities</li>
<li>获取 app 的 package 和 activity：adb shell；然后 logcat | grep -i displayed</li>
<li>启动应用:adb shell am start -W -n “com.xueqiu.android/.view.WelcomeActivityAlias -S</li>
</ul>
<h3 id="Capability-设置"><a href="#Capability-设置" class="headerlink" title="Capability 设置"></a><strong>Capability 设置</strong></h3><ul>
<li>文档地址：<a href="https://link.zhihu.com/?target=http://appium.io/docs/en/writing-running-appium/caps/index.html">http://appium.io/docs/en/writing-running-appium/caps/index.html</a></li>
<li>platformName:android 通常都是写 android</li>
<li>deviceName:127.0.0.1:7555 这个通常是 adb devices 的名称</li>
<li>appPackage:com.xueqiu.android 这个是 app 的 package 包名</li>
<li>appActivity:.view.WelcomeActivityAlias 这个是 app 的 activity 名</li>
<li>noReset：true, false 是否重置测试的环境（例如首次打开弹框，或者登陆信息）</li>
<li>unicodeKeyboard：true, false 是否需要输入非英文之外的语言并在测试完成后重置输入法，比如输入中文</li>
<li>dontStopAppOnReset：true, false 首次启动的时候，不停止 app</li>
<li>skipDeviceInitialization：true, false 跳过安装，权限设置等操作</li>
</ul>
<h3 id="测试用的-apk"><a href="#测试用的-apk" class="headerlink" title="测试用的 apk"></a><strong>测试用的 apk</strong></h3><ul>
<li><a href="https://link.zhihu.com/?target=https://github.com/appium/appium/tree/master/sample-code/apps">https://github.com/appium/appium/tree/master/sample-code/apps</a></li>
</ul>
<h3 id="Android-的基础知识"><a href="#Android-的基础知识" class="headerlink" title="Android 的基础知识"></a><strong>Android 的基础知识</strong></h3><h3 id="Android-的布局"><a href="#Android-的布局" class="headerlink" title="Android 的布局"></a><strong>Android 的布局</strong></h3><ul>
<li>Android 是通过容器的布局属性来管理子控件的位置关系，布局过程就是把界面上的所有的控件，根据他们的间距的大小，摆放在正确的位置</li>
<li>线性布局：LinearLayout</li>
<li>相对布局：RelativeLayout</li>
<li>帧布局：FrameLayout</li>
<li>绝对布局：AbsoluteLayout</li>
<li>表格布局：TableLayout</li>
<li>网格布局：GirdLayout</li>
<li>约束布局：ConstraintLayout</li>
</ul>
<h3 id="Android-四大组件"><a href="#Android-四大组件" class="headerlink" title="Android 四大组件"></a><strong>Android 四大组件</strong></h3><ul>
<li>activity：与用户交互的可视化界面</li>
<li>service：实现程序后台运行的解决方案，比如 qq 音乐的音乐在后台运行，没有界面</li>
<li>content provide：内容提供者，提供程序所需要的数据，比如？提供数据库？</li>
<li>broadcast receiver：广播接收器，监听外部事件的到来（比如来电）</li>
</ul>
<h3 id="Android-常用的控件"><a href="#Android-常用的控件" class="headerlink" title="Android 常用的控件"></a><strong>Android 常用的控件</strong></h3><ul>
<li>TextView：文本控件</li>
<li>EditText：可编辑文本控件</li>
<li>Button：按钮</li>
<li>ImageButton：图标按钮</li>
<li>ToggleButton:开关按钮</li>
<li>ImageView：图片控件</li>
<li>CheckBox：复选框控件</li>
<li>RadioButton：单选框控件</li>
</ul>
<h3 id="控件知识"><a href="#控件知识" class="headerlink" title="控件知识"></a><strong>控件知识</strong></h3><ul>
<li>dom：Document Object Model 文档对象模型</li>
<li>dom 应用：最早应用于 html 和 js 的交互，用户表示界的控件层级，界面的结构化描述，常见的格式为 html、xml。核心元素为节点和属性</li>
<li>xpath：xml 路径语言，用于 xml 中的节点定位</li>
<li>Android 的应用层级结构是定制的 xml</li>
<li>app source 类似于 dom，表示 app 的层级，表示界面里面所有的控件数的结构</li>
<li>每个控件都有它的属性（resourceid、xpath、aid），没有 css 属性</li>
</ul>
<h3 id="Appium-的元素定位"><a href="#Appium-的元素定位" class="headerlink" title="Appium 的元素定位"></a><strong>Appium 的元素定位</strong></h3><h3 id="普通方式的定位"><a href="#普通方式的定位" class="headerlink" title="普通方式的定位"></a><strong>普通方式的定位</strong></h3><ul>
<li>driver.find_element_by_accessibility_id() 对应 content-desc</li>
<li>driver.find_element_by_id() 对应 resource-id</li>
<li>driver.find_element_by_name() 对应 text</li>
<li>driver.find_element_by_xpath() 对应 xpath</li>
</ul>
<h3 id="By-的定位方式"><a href="#By-的定位方式" class="headerlink" title="By 的定位方式"></a><strong>By 的定位方式</strong></h3><ul>
<li>首先要 from appium.webdriver.common.mobileby import MobileBy as By</li>
<li>self.driver.find_element(By.ID,””) 对应 resource-id</li>
<li>self.driver.find_element(By.XPATH,””) 对应 xpath</li>
<li>self.driver.find_element(By.ACCESSIBILITY_ID,””) 对应 content-desc</li>
<li>self.driver.find_element(By.NAME,””) 对应 text</li>
</ul>
<h3 id="Xpath-的定位方式"><a href="#Xpath-的定位方式" class="headerlink" title="Xpath 的定位方式"></a><strong>Xpath 的定位方式</strong></h3><ul>
<li>driver.find_element_by_xpath(“//*[@text=’ 扫一扫 ‘]”)</li>
<li>driver.find_element_by_xpath(“//*[@resource-id=’com.taobao.taobao:id/tv_scan_text’]”)</li>
<li>driver.find_element_by_xpath(“//*[@content-desc=’ 帮助 ‘]”)</li>
<li>driver.find_element(By.XPATH,”//*[@resource-id=’com.xueqiu.android:id/name’ and @text=’ 阿里巴巴 ‘]”) and 的使用</li>
<li>父类和兄弟类的方法：//<em>[@text=’ 性别 ‘]/..//</em>[@text=’ 男 ‘]。其中 /.. 表示父类，//* 就是兄弟，孙子等类</li>
<li>//*[Contains(@text,”tong”)] 这是 xpath 的 text 模糊搜索的方法</li>
</ul>
<h3 id="元素的方法"><a href="#元素的方法" class="headerlink" title="元素的方法"></a><strong>元素的方法</strong></h3><h3 id="元素的常用方法"><a href="#元素的常用方法" class="headerlink" title="元素的常用方法"></a><strong>元素的常用方法</strong></h3><ul>
<li>点击方法：element.click()</li>
<li>输入操作：element.send_keys(“tong”)</li>
<li>设置元素的值：element.set_value(“tongtong”)</li>
<li>清除操作：element.clear()</li>
<li>是否可见：element.is_displayed 返回 true or false</li>
<li>是否可用：element.enabled() 返回 true or false</li>
<li>是否被选中：element.is_selected() 返回 true or false</li>
<li>获取属性值：element.get_attribute(name)</li>
</ul>
<h3 id="属性值介绍"><a href="#属性值介绍" class="headerlink" title="属性值介绍"></a><strong>属性值介绍</strong></h3><ul>
<li>get_attribute(name) 获取的属性名称和 uiautomatorviewer 的一致，但是 index 的值获取不了</li>
<li>真假获取的值是 true 和 false 的字符串，并不是 python 的 boolean 值</li>
</ul>
<h3 id="元素常用的属性"><a href="#元素常用的属性" class="headerlink" title="元素常用的属性"></a><strong>元素常用的属性</strong></h3><ul>
<li>获取元素文本：element.text</li>
<li>获取元素坐标：element.location</li>
<li>结果：{‘y’:19,’x’:498}</li>
<li>获取元素尺寸（高和宽）：element.size</li>
<li>结果：{‘width’:500,’height’:22}</li>
</ul>
<h3 id="实战小案例-1"><a href="#实战小案例-1" class="headerlink" title="实战小案例 1"></a><strong>实战小案例 1</strong></h3><ol>
<li>打开雪球 app</li>
<li>点击搜索输入框</li>
<li>向搜索输入框输入 “阿里巴巴”</li>
<li>在搜索的结果里选择阿里巴巴，然后点击</li>
<li>获取这只上香港 阿里巴巴的股价，并判断这只股价的价格&gt;200</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.mobileby <span class="keyword">import</span> MobileBy <span class="keyword">as</span> By</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestFind</span>():</span></span><br><span class="line">    <span class="comment">#设置 caps 的值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.desire_cap= &#123;</span><br><span class="line">            <span class="comment">#默认是 Android</span></span><br><span class="line">            <span class="string">&quot;platformName&quot;</span>:<span class="string">&quot;android&quot;</span>,</span><br><span class="line">            <span class="comment">#adb devices 的 sn 名称</span></span><br><span class="line">            <span class="string">&quot;deviceName&quot;</span>:<span class="string">&quot;127.0.0.1:7555&quot;</span>,</span><br><span class="line">            <span class="comment">#包名</span></span><br><span class="line">            <span class="string">&quot;appPackage&quot;</span>:<span class="string">&quot;com.xueqiu.android&quot;</span>,</span><br><span class="line">            <span class="comment">#activity 名字</span></span><br><span class="line">            <span class="string">&quot;appActivity&quot;</span>:<span class="string">&quot;.view.WelcomeActivityAlias&quot;</span>,</span><br><span class="line">            <span class="string">&quot;noReset&quot;</span>:<span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;unicodeKeyboard&quot;</span>:<span class="literal">True</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#运行 appium，前提是要打开 appium server</span></span><br><span class="line">        self.driver=webdriver.Remote(<span class="string">&quot;http://127.0.0.1:4723/wd/hub&quot;</span>,self.desire_cap)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_search</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        1. 打开雪球 app</span></span><br><span class="line"><span class="string">        2. 点击搜索输入框</span></span><br><span class="line"><span class="string">        3. 向搜索输入框输入 “阿里巴巴”</span></span><br><span class="line"><span class="string">        4. 在搜索的结果里选择阿里巴巴，然后点击</span></span><br><span class="line"><span class="string">        5. 获取这只上香港 阿里巴巴的股价，并判断这只股价的价格&gt;200</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment">#点击搜索框</span></span><br><span class="line">        self.driver.find_element(By.ID,<span class="string">&quot;com.xueqiu.android:id/tv_search&quot;</span>).click()</span><br><span class="line">        <span class="comment">#向搜索框输入阿里巴巴</span></span><br><span class="line">        self.driver.find_element(By.ID,<span class="string">&quot;com.xueqiu.android:id/search_input_text&quot;</span>).send_keys(<span class="string">&quot; 阿里巴巴 &quot;</span>)</span><br><span class="line">        <span class="comment">#找到搜索框预览结果的阿里巴巴，并点击</span></span><br><span class="line">        self.driver.find_element(By.XPATH,<span class="string">&quot;//*[@resource-id=&#x27;com.xueqiu.android:id/name&#x27; and @text=&#x27; 阿里巴巴 &#x27;]&quot;</span>).click()</span><br><span class="line">        <span class="comment">#选择 HK 股价的元素</span></span><br><span class="line">        prices=self.driver.find_elements(By.ID,<span class="string">&quot;com.xueqiu.android:id/current_price&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#提取股价的 text 属性</span></span><br><span class="line">        price=<span class="built_in">float</span>(prices.text)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#判断股价是否大于 200</span></span><br><span class="line">        <span class="keyword">assert</span> price &gt; <span class="number">200</span></span><br></pre></td></tr></table></figure>

<h3 id="实战小案例-2"><a href="#实战小案例-2" class="headerlink" title="实战小案例 2"></a><strong>实战小案例 2</strong></h3><ol>
<li>打开雪球首页</li>
<li>定位首页的搜索框</li>
<li>判断搜索框是否可用，并查看搜索框 name 属性值</li>
<li>打印搜索框这个元素的左上角坐标和它的宽高</li>
<li>向搜索框输入：alibaba</li>
<li>判断阿里巴巴是否可见</li>
<li>如果可见，打印搜索成功点击，如果不可见，打印搜索失败</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.mobileby <span class="keyword">import</span> MobileBy <span class="keyword">as</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestFind</span>():</span></span><br><span class="line">    <span class="comment">#设置 caps 的值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.desire_cap= &#123;</span><br><span class="line">            <span class="comment">#默认是 Android</span></span><br><span class="line">            <span class="string">&quot;platformName&quot;</span>:<span class="string">&quot;android&quot;</span>,</span><br><span class="line">            <span class="comment">#adb devices 的 sn 名称</span></span><br><span class="line">            <span class="string">&quot;deviceName&quot;</span>:<span class="string">&quot;127.0.0.1:7555&quot;</span>,</span><br><span class="line">            <span class="comment">#包名</span></span><br><span class="line">            <span class="string">&quot;appPackage&quot;</span>:<span class="string">&quot;com.xueqiu.android&quot;</span>,</span><br><span class="line">            <span class="comment">#activity 名字</span></span><br><span class="line">            <span class="string">&quot;appActivity&quot;</span>:<span class="string">&quot;.view.WelcomeActivityAlias&quot;</span>,</span><br><span class="line">            <span class="string">&quot;noReset&quot;</span>:<span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;unicodeKeyboard&quot;</span>:<span class="literal">True</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#运行 appium，前提是要打开 appium server</span></span><br><span class="line">        self.driver=webdriver.Remote(<span class="string">&quot;http://127.0.0.1:4723/wd/hub&quot;</span>,self.desire_cap)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_element_function</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        1. 打开雪球首页</span></span><br><span class="line"><span class="string">        2. 定位首页的搜索框</span></span><br><span class="line"><span class="string">        3. 判断搜索框是否可用，并查看搜索框 name 属性值</span></span><br><span class="line"><span class="string">        4. 打印搜索框这个元素的左上角坐标和它的宽高</span></span><br><span class="line"><span class="string">        5. 向搜索框输入：alibaba</span></span><br><span class="line"><span class="string">        6. 判断阿里巴巴是否可见</span></span><br><span class="line"><span class="string">        7. 如果可见，打印搜索成功点击，如果不可见，打印搜索失败</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sleep(<span class="number">8</span>)</span><br><span class="line">        <span class="comment">#找到搜索框的元素</span></span><br><span class="line">        search=self.driver.find_element(By.ID, <span class="string">&quot;com.xueqiu.android:id/tv_search&quot;</span>)</span><br><span class="line">        <span class="comment">#当搜索框是可用（类似可点击）后才进行下面的操作，is_enabled() 返回 Ture or False</span></span><br><span class="line">        <span class="keyword">if</span> search.is_enabled():</span><br><span class="line">            <span class="comment">#打印搜索框的 text 值</span></span><br><span class="line">            <span class="built_in">print</span>(search.text)</span><br><span class="line">            <span class="comment">#打印搜索框左上角的坐标</span></span><br><span class="line">            <span class="built_in">print</span>(search.location)</span><br><span class="line">            <span class="comment">#打印搜索框的高和宽</span></span><br><span class="line">            <span class="built_in">print</span>(search.size)</span><br><span class="line">            <span class="comment">#点击搜索框，才可以进行下面的操作</span></span><br><span class="line">            search.click()</span><br><span class="line">            <span class="comment">#在搜索框中输入阿里巴巴</span></span><br><span class="line">            self.driver.find_element(By.ID, <span class="string">&quot;com.xueqiu.android:id/search_input_text&quot;</span>).send_keys(<span class="string">&quot; 阿里巴巴 &quot;</span>)</span><br><span class="line">            <span class="comment">#定义找到预览结果的阿里巴巴的元素</span></span><br><span class="line">            alibaba=self.driver.find_element(By.XPATH, <span class="string">&quot;//*[@resource-id=&#x27;com.xueqiu.android:id/name&#x27; and @text=&#x27; 阿里巴巴 &#x27;]&quot;</span>)</span><br><span class="line">            <span class="comment">#当 alibaba 元素可见，打开搜索成功，否则打印搜索失败</span></span><br><span class="line">            <span class="keyword">if</span> alibaba.is_displayed():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot; 搜索成功 &quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot; 搜索失败 &quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="TestCase-脚本"><a href="#TestCase-脚本" class="headerlink" title="TestCase 脚本"></a>TestCase 脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidTests</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个空字典</span></span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        <span class="comment"># 平台名称</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;platformName&#x27;</span>] = <span class="string">&#x27;Android&#x27;</span></span><br><span class="line">        <span class="comment"># 平台版本（手机版本号）</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;platformVersion&#x27;</span>] = <span class="string">&#x27;5.1&#x27;</span></span><br><span class="line">        <span class="comment"># 设备名称固定写Android Emulator不会强行校验值</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;deviceName&#x27;</span>] = <span class="string">&#x27;Android Emulator&#x27;</span></span><br><span class="line">        <span class="comment"># 不清除app数据，清除后犹如新设备安装的新软件</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;noReset&#x27;</span>] = <span class="string">&#x27;True&#x27;</span></span><br><span class="line">        <span class="comment"># app包名，app之间用唯一的包名区分</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appPackage&#x27;</span>] = <span class="string">&#x27;cn.xiaochuankeji.tieba&#x27;</span></span><br><span class="line">        <span class="comment"># 一个界面就是一个activity，app中每个界面通过activity区分</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appActivity&#x27;</span>] = <span class="string">&#x27;.ui.base.SplashActivity&#x27;</span></span><br><span class="line">        <span class="comment"># 初始化driver，远程连接，请求参数到appium server上</span></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://localhost:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#self.driver.quit()</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_element_by_id</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.implicitly_wait(<span class="number">60</span>)</span><br><span class="line">        el = self.driver.find_elements_by_id(<span class="string">&quot;cn.xiaochuankeji.tieba:id/title&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(el[<span class="number">2</span>].text)</span><br><span class="line">        el[<span class="number">2</span>].click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    suite = unittest.TestLoader().loadTestsFromTestCase(AndroidTests)</span><br><span class="line">    unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>DBeaver等数据库软件无法加载身份插件的问题</title>
    <url>/2020/12/29/DBeaver%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BD%AF%E4%BB%B6%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%BA%AB%E4%BB%BD%E6%8F%92%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="连接mysql-出现：java-sql-SQLException-Unable-to-load-authentication-plugin-‘caching-sha2-password‘"><a href="#连接mysql-出现：java-sql-SQLException-Unable-to-load-authentication-plugin-‘caching-sha2-password‘" class="headerlink" title="连接mysql 出现：java.sql.SQLException: Unable to load authentication plugin ‘caching_sha2_password‘."></a>连接mysql 出现：java.sql.SQLException: Unable to load authentication plugin ‘caching_sha2_password‘.</h2><p>报错Exception during pool initialization.</p>
<p>java.sql.SQLException: Unable to load authentication plugin ‘caching_sha2_password’.</p>
<p>报错与数据库有关的，应该是从MySQL 8.0.4开始, 默认的认证插件从mysql_native_password 变为caching_sha2_password. </p>
<p>参考 <a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html">https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html</a></p>
<p>创建新用户和密码参考sql：</p>
<blockquote>
<p>CREATE USER ‘yourusername‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘youpassword’;</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DBeaver</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker环境配置</title>
    <url>/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>目录</p>
<ul>
<li><a href="#before">before</a></li>
<li><a href="#for-Centos">for-Centos</a></li>
<li>for Ubuntu<ul>
<li><a href="#%E5%AE%89%E8%A3%85Ubuntu%E7%BB%B4%E6%8A%A4%E7%9A%84%E7%89%88%E6%9C%AC">安装Ubuntu维护的版本</a></li>
<li><a href="#%E5%AE%89%E8%A3%85Docker%E7%BB%B4%E6%8A%A4%E7%9A%84%E7%89%88%E6%9C%AC">安装Docker维护的版本</a></li>
</ul>
</li>
<li><a href="#for-Mac">for-Mac</a></li>
<li><a href="#for-Windows">for-Windows</a></li>
<li>可能遇到的问题<ul>
<li><a href="#%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E8%B6%85%E6%97%B6">下载镜像超时</a></li>
</ul>
</li>
</ul>
<span id="more"></span>


<h1 id="before"><a href="#before" class="headerlink" title="before"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#before">before</a></h1><p>下面这张图展示了在不同平台docker是如何运行的，OS X和Windows都是借助于虚拟机来运行，而Linux直接运行在宿主机上。</p>
<p><img src="1.bmp" alt="img"></p>
<p>Linux无需多言，这里需要简单的介绍一下win和mac中所需的虚拟机。</p>
<p>在Windows和Mac中，Boot2Docker虚拟机提供一整套的docker运行环境，那它都是提供了那些组件呢？</p>
<ul>
<li>Boot2Docker Linux ISO，为docker定制的虚拟机镜像，其中包含了docker的运行环境。</li>
<li>Virtualbox，提供虚拟机服务。</li>
<li>MSYS-git，提供shell运行环境。</li>
<li>管理工具，提供Boot2Docker的管理工具。</li>
</ul>
<p>这里附上百度云链接，当然你的网络好的话，也可以自己去<a href="https://www.docker.com/products/docker-desktop">官网</a>下载最新版。</p>
<blockquote>
<p>mac and win:链接：<a href="https://pan.baidu.com/s/11IxpxTnIjq7_xF8bnYM4Wg">https://pan.baidu.com/s/11IxpxTnIjq7_xF8bnYM4Wg</a> 提取码：2xly</p>
</blockquote>
<p>接下来我们来看看各平台是如何安装和运行docker的。</p>
<h1 id="for-Centos"><a href="#for-Centos" class="headerlink" title="for-Centos"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#for-Centos">for-Centos</a></h1><p><strong>可选的操作：查看内核版本</strong></p>
<p>目前，CentOS 仅发行版本中的内核支持 Docker。</p>
<p>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">uname -a </span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">[root<span class="title">@localhost</span> ~]# uname -a</span><br><span class="line">Linux localhost <span class="number">3.10</span>.<span class="number">0</span><span class="number">-514</span>.el<span class="number">7</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="variable">#1</span> SMP Tue Nov <span class="number">22</span> <span class="number">16</span>:<span class="number">42</span>:<span class="number">41</span> UTC <span class="number">2016</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> GNU/Linux</span><br></pre></td></tr></table></figure>

<p><strong>更新yum源</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line"><span class="meta"># 示例</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># yum update -y</span></span><br></pre></td></tr></table></figure>

<p><strong>可选的操作：卸载旧版的docker</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum <span class="builtin-name">remove</span> docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<p><strong>安装依赖包</strong></p>
<p><code>yum-util</code> 提供<code>yum-config-manager</code>功能，另外两个是<code>devicemapper</code>驱动依赖的。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">yum</span> install -y yum-utils device-mapper-persistent-<span class="class"><span class="keyword">data</span> lvm2</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 示例</span></span><br><span class="line">[root@localhost ~]# yum install -y yum-utils device-mapper-persistent-<span class="class"><span class="keyword">data</span> lvm2</span></span><br></pre></td></tr></table></figure>

<p><strong>设置docker的yum源</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">[root@bogon ~]<span class="comment"># yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">adding repo from: https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br><span class="line">grabbing file https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos<span class="regexp">/docker-ce.repo to /</span>etc<span class="regexp">/yum.repos.d/</span>docker-ce.repo</span><br><span class="line">repo saved to <span class="regexp">/etc/yum</span>.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><strong>查询及安装docker</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">[root@bogon ~]# yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugin<span class="variable">s:</span> fastestmirror</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64            <span class="number">3</span>:<span class="number">19.03</span>.<span class="number">5</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64            <span class="number">3</span>:<span class="number">19.03</span>.<span class="number">4</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64            <span class="number">3</span>:<span class="number">19.03</span>.<span class="number">3</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64            <span class="number">3</span>:<span class="number">19.03</span>.<span class="number">2</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64            <span class="number">3</span>:<span class="number">19.03</span>.<span class="number">1</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br></pre></td></tr></table></figure>

<p>在版本列表中，选择合适的版本下载即可。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span>docker-ce<span class="number">-17</span>.<span class="number">12</span>.<span class="number">1</span>.ce -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">[root@<span class="keyword">bogon </span>~]<span class="comment"># yum install docker-ce-17.12.1.ce -y</span></span><br></pre></td></tr></table></figure>

<p><strong>检查是否安装成功</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">[<span class="string">root@bogon</span> <span class="string">~</span>]<span class="comment"># docker version</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Version:</span>	<span class="number">17.12</span><span class="number">.1</span><span class="string">-ce</span></span><br><span class="line"> <span class="attr">API version:</span>	<span class="number">1.35</span></span><br><span class="line"> <span class="attr">Go version:</span>	<span class="string">go1.9.4</span></span><br><span class="line"> <span class="attr">Git commit:</span>	<span class="string">7390fc6</span></span><br><span class="line"> <span class="attr">Built:</span>	<span class="string">Tue</span> <span class="string">Feb</span> <span class="number">27</span> <span class="number">22</span><span class="string">:15:20</span> <span class="number">2018</span></span><br><span class="line"> <span class="attr">OS/Arch:</span>	<span class="string">linux/amd64</span></span><br><span class="line"><span class="string">Cannot</span> <span class="string">connect</span> <span class="string">to</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">daemon</span> <span class="string">at</span> <span class="string">unix:///var/run/docker.sock.</span> <span class="string">Is</span> <span class="string">the</span> <span class="string">docker</span> <span class="string">daemon</span> <span class="string">running?</span></span><br></pre></td></tr></table></figure>

<p>上面示例的最后一行的意思是无法连接到docker的守护进程，你的docker守护进程启动了吗？来看如何启动。</p>
<p><strong>启动docker并加入开机启动</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> docker    <span class="comment"># 启动</span></span><br><span class="line">systemctl enable docker	  <span class="comment"># 加入开机启动</span></span><br><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span> | grep docker</span><br></pre></td></tr></table></figure>

<h1 id="for-Ubuntu"><a href="#for-Ubuntu" class="headerlink" title="for Ubuntu"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#for-ubuntu">for Ubuntu</a></h1><p><strong>安装前检查</strong></p>
<ul>
<li>内核版本</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>uname -a</span><br></pre></td></tr></table></figure>

<ul>
<li>检查Device Mapper</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ ls -l <span class="regexp">/sys/</span><span class="keyword">class</span><span class="regexp">/misc/</span>device-mapper</span><br></pre></td></tr></table></figure>

<p>一般，高版本的Ubuntu这两项都没问题。</p>
<p><strong>Ubuntu中安装Docker</strong></p>
<ul>
<li>安装Ubuntu维护的版本，不推荐</li>
<li>安装Docker维护的版本，推荐</li>
</ul>
<h2 id="安装Ubuntu维护的版本"><a href="#安装Ubuntu维护的版本" class="headerlink" title="安装Ubuntu维护的版本"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#%E5%AE%89%E8%A3%85Ubuntu%E7%BB%B4%E6%8A%A4%E7%9A%84%E7%89%88%E6%9C%AC">安装Ubuntu维护的版本</a></h2><p>使用<code>apt-get</code>命令安装，使用<code>source</code>命令来更新配置：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install docker.io -y </span><br><span class="line">$ <span class="keyword">source</span> <span class="regexp">/etc/</span>bash_completion.d/docker.io</span><br></pre></td></tr></table></figure>

<p>查看docker安装情况：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ sudo docker.io <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>注意，这种安装方式安装的docker名字叫做<code>docker.io</code>；另外，这种方式安装的docker的版本较低，所以，我们推荐安装docker维护的版本。</p>
<h2 id="安装Docker维护的版本"><a href="#安装Docker维护的版本" class="headerlink" title="安装Docker维护的版本"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#%E5%AE%89%E8%A3%85Docker%E7%BB%B4%E6%8A%A4%E7%9A%84%E7%89%88%E6%9C%AC">安装Docker维护的版本</a></h2><p>由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure>

<p>由于这种方式安装需要4步：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 1. 检查APT的HTTPS支持，查看/usr/lib/apt/methods/https文件是否存在，不存在就要下载</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> update</span><br><span class="line">$ sudo apt-<span class="keyword">get</span> install apt-transport-https -y</span><br><span class="line"></span><br><span class="line"><span class="meta"># 2. 添加docker的APT仓库</span></span><br><span class="line">$ echo deb https:<span class="comment">//get.docker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 3. 添加仓库的key</span></span><br><span class="line">$ sudo apt-key adv --keyserver hkp:<span class="comment">//p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 4. 安装</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> update</span><br><span class="line">$ sudo apt-<span class="keyword">get</span> install lxc-docker -y</span><br></pre></td></tr></table></figure>

<p>上面4步是不是很麻烦？所以docker将这些命令写了个脚本，我们只需要下载这个脚本， 然后一条命令就OK了。</p>
<p>这里使用<code>curl</code>命令来安装docker：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果curl不存在，使用下面命令安装</span></span><br><span class="line">$ sudo apt-get install curl -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">$ curl -sSL https:<span class="regexp">//g</span>et.docker.com<span class="regexp">/ubuntu/</span> | sudo sh</span><br></pre></td></tr></table></figure>

<p>查看docker安装情况：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>注意，这种方式安装的docker，就叫docker</p>
<h1 id="for-Mac"><a href="#for-Mac" class="headerlink" title="for-Mac"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#for-Mac">for-Mac</a></h1><p>由开头的图我们知道，Mac中运行docker也是要借助虚拟机的，所以，来看如何安装吧。</p>
<p><strong>下载</strong></p>
<p>去<a href="https://www.docker.com/products/docker-desktop%E4%B8%8B%E8%BD%BD%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E5%BC%80%E5%A4%B4%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82">https://www.docker.com/products/docker-desktop下载或者使用开头的安装包。</a></p>
<p><img src="2.png" alt="img"></p>
<p><img src="3.png" alt="img"></p>
<p><strong>安装</strong></p>
<ul>
<li>直接拖拽安装。</li>
</ul>
<p><img src="4.png" alt="img"></p>
<ul>
<li>然后启动它。</li>
</ul>
<p><img src="5.png" alt="img"></p>
<p>启动中：</p>
<p><img src="6.png" alt="img"></p>
<p>启动后：</p>
<p><img src="7.png" alt="img"></p>
<p><img src="8.png" alt="img">]</p>
<p><strong>测试</strong></p>
<p>可以输入下面命令进行测试。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">version</span></span><br><span class="line">docker <span class="built_in">run</span> ubuntu echo <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="9.png" alt="img"></p>
<p>OK，完事了。</p>
<h1 id="for-Windows"><a href="#for-Windows" class="headerlink" title="for-Windows"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#for-Windows">for-Windows</a></h1><p>由开头的图我们知道，Windows中运行docker也是要借助虚拟机的，所以，来看如何安装吧。</p>
<p><strong>系统要求</strong></p>
<p>windows7及以上系统</p>
<p>来看安装。</p>
<p><strong>下载boot2docker</strong></p>
<ul>
<li>去<a href="https://www.docker.com/products/docker-desktop%E4%B8%8B%E8%BD%BD%E3%80%82">https://www.docker.com/products/docker-desktop下载。</a></li>
</ul>
<p><img src="10.png" alt="img"><br><img src="11.png" alt="img"></p>
<p><strong>安装</strong></p>
<ul>
<li>下载到本地是exe文件，双击exe文件进行安装和配置。</li>
</ul>
<p><img src="12.png" alt="img"></p>
<ul>
<li>重启。</li>
</ul>
<p><img src="13.png" alt="img"></p>
<p>当你重启后，打开桌面快捷方式，会发现任务栏多了一个docker图标。</p>
<p><img src="14.png" alt="img"></p>
<p><strong>运行</strong></p>
<p>当你打开桌面快捷方式后，docker将启动在任务栏；然后你可以<code>win + R</code>打开终端，输入命令来进行测试。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">可能遇到的问题</a></h1><h2 id="下载镜像超时"><a href="#下载镜像超时" class="headerlink" title="下载镜像超时"></a><a href="https://mengxun.club/2021/01/21/Docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E8%B6%85%E6%97%B6">下载镜像超时</a></h2><blockquote>
<p>windows环境</p>
</blockquote>
<p>由于docker默认的镜像源是国外的，很可能遇到下载失败的问题，比如这样的：</p>
<p><img src="17.png" alt="img"></p>
<p>解决办法，点击任务栏docker，然后点击settings。</p>
<p><img src="15.png" alt="img"></p>
<p>然后在<code>Docker Engine</code>选项将<code>https://docker.mirrors.ustc.edu.cn/</code>添加到<code>registry-mirrors</code>中去。</p>
<p><img src="16.png" alt="img"></p>
<p>下面列出国内的常用源：</p>
<table>
<thead>
<tr>
<th align="left">来自</th>
<th align="left">源</th>
</tr>
</thead>
<tbody><tr>
<td align="left">网易</td>
<td align="left"><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></td>
</tr>
<tr>
<td align="left">Docker 官方中国区</td>
<td align="left"><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></td>
</tr>
<tr>
<td align="left">中国科技大学</td>
<td align="left"><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></td>
</tr>
<tr>
<td align="left">阿里云</td>
<td align="left"><a href="https://pee6w651.mirror.aliyuncs.com/">https://pee6w651.mirror.aliyuncs.com</a></td>
</tr>
</tbody></table>
<hr>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置国内镜像</span></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">写入以下内容</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;&lt;your accelerate address&gt;&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">以上操作后重启一下 Docker</span></span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>see also：</p>
<p><a href="https://blog.csdn.net/weixin_38750084/article/details/90317730">docker：CentOS安装 docker和默认安装目录</a></br><br><a href="https://blog.csdn.net/dongdong9223/article/details/52998375">如何进入、退出docker的container</a></br><br><a href="https://www.cnblogs.com/yufeng218/p/8370670.html">Centos7上安装docker</a></br><br><a href="https://www.cnblogs.com/lighten/p/6034984.html">Ubuntu16.04安装docker</a></br><br><a href="https://blog.csdn.net/BigData_Mining/article/details/87869147">https://blog.csdn.net/BigData_Mining/article/details/87869147</a></p>
<p>作者： 听雨危楼</p>
<p>出处：<a href="https://www.cnblogs.com/Neeo/articles/11945963.html">https://www.cnblogs.com/Neeo/articles/11945963.html</a></p>
<p>版权：本作品采用「<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">署名-非商业性使用-相同方式共享 4.0 国际</a>」许可协议进行许可。</p>
<p>仰望星空,脚踏实地</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker高级篇</title>
    <url>/2022/08/08/Docker%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker-复杂安装详说"><a href="#Docker-复杂安装详说" class="headerlink" title="Docker 复杂安装详说"></a>Docker 复杂安装详说</h2><h3 id="安装MySQL主从复制"><a href="#安装MySQL主从复制" class="headerlink" title="安装MySQL主从复制"></a>安装MySQL主从复制</h3><h4 id="主从复制的简介"><a href="#主从复制的简介" class="headerlink" title="主从复制的简介"></a>主从复制的简介</h4><p>在实际的生产中，为了解决Mysql的单点故障已经提高MySQL的整体服务性能，一般都会采用<strong>「主从复制」</strong>。</p>
<p>比如：在复杂的业务系统中，有一句sql执行后导致锁表，并且这条sql的的执行时间有比较长，那么此sql执行的期间导致服务不可用，这样就会严重影响用户的体验度。</p>
<p>主从复制中分为<strong>「主服务器（master）「和」从服务器（slave）」</strong>，<strong>「主服务器负责写，而从服务器负责读」</strong>，Mysql的主从复制的过程是一个<strong>「异步的过程」</strong>。</p>
<p>这样读写分离的过程能够是整体的服务性能提高，即使写操作时间比较长，也不影响读操作的进行。</p>
<span id="more"></span>

<h4 id="为什么需要主从复制"><a href="#为什么需要主从复制" class="headerlink" title="为什么需要主从复制"></a>为什么需要主从复制</h4><ol>
<li>在业务复杂的系统中，有这么一个情景，有一句sql语句需要锁表，导致暂时不能使用读服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读。这样，即使主库出现了锁表的情景，通过读从表也可以保证业务的正常运作。</li>
<li>做数据热备</li>
<li>架构的扩展。业务量越来越大，I/O访问频率过高，单击无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能</li>
</ol>
<p>【MySQL锁表】</p>
<ul>
<li>锁表的原因：一个程序执行了对表的insert、update或者delete操作还未commite时，另一个程序也对同一个表进行相同的操作，则此时会发生资源正忙的异常，也就是锁表。</li>
<li>锁表的原理：数据库使用独占式封锁机制，当执行上面的语句时，对表进行锁住，直到发生commite或者回滚或者退出数据库用户<ul>
<li> A程序执行了对 tableA 的 insert ，并还未 commite时，B程序也对tableA 进行insert 则此时会发生资源正忙的异常，就是锁表</li>
<li>锁表常发生于并发而不是并行（并行时，一个线程操作数据库时，另一个线程是不能操作数据库的，cpu 和i/o 分配原则）</li>
</ul>
</li>
</ul>
<h4 id="什么是MySQL的主从复制"><a href="#什么是MySQL的主从复制" class="headerlink" title="什么是MySQL的主从复制"></a>什么是MySQL的主从复制</h4><p>MySQL的主从复制是指数据可以从一个MySQL数据库服务器节点复制到一个多或个从节点。MySQL默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据中的所有数据库或特定的数据库，或特定的表。</p>
<h4 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h4><p>首先放一张Mysql主从复制的原理图，总的来说Mysql的主从复制原理还是比较好理解的，原理非常的简单。</p>
<p><img src="1.png"></p>
<p><strong>原理：</strong></p>
<ol>
<li>master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中</li>
<li>slave服务器会在一定时间间隔内对master二进制进行探测其是否发生改变，如果发生改变，则开始一个I/OThread请求master二进制事件</li>
<li>同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/OThread和SQLThread将进入睡眠状态，等待下一次被唤醒。</li>
</ol>
<p><strong>也就是说：</strong></p>
<ul>
<li>从库会生成两个线程，一个I/O线程，一个SQL线程</li>
<li>I/O线程会去请求主库的binlog，并将得到的binlog写到本地的relay-log（中继日志）文件中</li>
<li>主库会生成一个log dump线程，用来给从库I/O线程传binlog</li>
<li>SQL线程，会读取relay log文件中的日志，并解析成sql语句逐一执行</li>
</ul>
<p><strong>注意：</strong></p>
<ol>
<li>master将操作的语句记录到binlog日志中，然后授予slave远程连接的权限（master一定开启binlog二进制日志功能；通常为了数据安全考虑，slave也开启binlog功能）</li>
<li>slave开启两个线程：IO线程和SQL线程。其中，IO线程负责读取master的binlog内容到中继日志relay log里；SQL线程负责从relay log日志读取binlog内容，并更新到slave的数据库里，这样就能保证slave数据和master数据保持一致了</li>
<li>MySQL复制至少需要两个MySQL的服务，当然MySQL服务可以分布在不同的服务器上，也可以在一台服务器上启动多个服务。</li>
<li>MySQL复制最好确保master和slave服务器上的MySQL版本相同（如果不能满足版本一致，那么要保证master主节点的版本低于slave从节点的版本）</li>
<li>master和slave两节点间时间需同步</li>
</ol>
<p><strong>具体步骤：</strong></p>
<ol>
<li>从库通过手工执行change mastar to 语句连接主库，提供了连接的用户一切条件（user、password、port、ip），并且让从库知道，二进制日志的起点位置（file名 position号）；start slave</li>
<li>从库的IO线程和主库的dump线程建立连接</li>
<li>从库根据change mastar to语句提供的file名和position号，IO线程向主库发起binlog的请求</li>
<li>主库dump线程根据从库的请求，将本地binlog以events的方式给从库IO线程</li>
<li>从库IO线程接收binlog events，并存放到本地relay-log中，传送过来的信息，会记录到master.info中</li>
<li>从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info中，默认情况下，已经应用过的relay会自动被清理purge</li>
</ol>
<p>Mysql的主从复制中主要有三个线程：<code>master（binlog dump thread）、slave（I/O thread 、SQL thread）</code>，Master一条线程和Slave中的两条线程。</p>
<p><code>master（binlog dump thread）</code>主要负责Master库中有数据更新的时候，会按照<code>binlog</code>格式，将更新的事件类型写入到主库的<code>binlog</code>文件中。</p>
<p>并且，Master会创建<code>log dump</code>线程通知Slave主库中存在数据更新，这就是为什么主库的binlog日志一定要开启的原因。</p>
<p><code>I/O thread</code>线程在Slave中创建，该线程用于请求Master，Master会返回binlog的名称以及当前数据更新的位置、binlog文件位置的副本。</p>
<p>然后，将<code>binlog</code>保存在 <strong>「relay log（中继日志）」</strong> 中，中继日志也是记录数据更新的信息。</p>
<p>SQL线程也是在Slave中创建的，当Slave检测到中继日志有更新，就会将更新的内容同步到Slave数据库中，这样就保证了主从的数据的同步。</p>
<p>以上就是主从复制的过程，当然，主从复制的过程有不同的策略方式进行数据的同步，主要包含以下几种：</p>
<ol>
<li><strong>「同步策略」</strong>：Master会等待所有的Slave都回应后才会提交，这个主从的同步的性能会严重的影响。</li>
<li><strong>「半同步策略」</strong>：Master至少会等待一个Slave回应后提交。</li>
<li><strong>「异步策略」</strong>：Master不用等待Slave回应就可以提交。</li>
<li><strong>「延迟策略」</strong>：Slave要落后于Master指定的时间。</li>
</ol>
<p>对于不同的业务需求，有不同的策略方案，但是一般都会采用最终一致性，不会要求强一致性，毕竟强一致性会严重影响性能。</p>
<h4 id="主从搭建步骤"><a href="#主从搭建步骤" class="headerlink" title="主从搭建步骤"></a>主从搭建步骤</h4><ol>
<li><p>新建主服务器容器实例3307</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 3307:3306 --name mysql-master \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/data:/var/lib/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=admin \</span><br><span class="line">-d biarms/mysql:5.7.30-linux-arm64v8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志路径：mysql-master/log </span></span><br><span class="line"><span class="comment"># 数据路径：mysql-master/data</span></span><br><span class="line"><span class="comment"># 配置路径：mysql-master/conf</span></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=root 指定root账户密码为root</span></span><br></pre></td></tr></table></figure></li>
<li><p>进入 <code>/mydata/mysql-master/conf</code> 目录下新建my.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置server_id，同一局域网中需要唯一</span></span><br><span class="line">server_id=101</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定不需要同步的数据库名称</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志功能</span></span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志使用内存大小（事物）</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"></span><br><span class="line"><span class="comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure></li>
<li><p>修改完配置后重启master实例</p>
<p><code>sudo docker restart mysql-master</code></p>
</li>
<li><p>进入mysql-master容器</p>
<p><code>sudo docker exec -it b1ff5b9d1011 /bin/bash</code></p>
<p><code>mysql -uroot -padmin</code></p>
</li>
<li><p>master容器实例内创建数据同步用户</p>
<p><code>CREATE USER &#39;william&#39;@&#39;%&#39;IDENTIFIED BY &#39;admin&#39;;</code></p>
<p>给用户授权</p>
<p><code>GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO &#39;william&#39;@&#39;%&#39;;</code></p>
</li>
<li><p>新建从服务器容器实例3308</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 3308:3306 --name mysql-slave \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/data:/var/lib/mysql \</span><br><span class="line">-v /home/william/DYJ/mydata/mysql-master/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=admin \</span><br><span class="line">-d biarms/mysql:5.7.30-linux-arm64v8</span><br></pre></td></tr></table></figure></li>
<li><p>进入 <code>/mydata/mysql-slave/conf</code> 目录下新建my.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置server_id，同一局域网中需要唯一</span></span><br><span class="line">server_id=102</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定不需要同步的数据库名称</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其他数据库实例的Master时使用</span></span><br><span class="line">log-bin=mall-mysql-slave1-bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启二进制日志使用内存大小（事物）</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"></span><br><span class="line"><span class="comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"></span><br><span class="line"><span class="comment">## relay_log配置中继日志</span></span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## log_salve_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class="line">log_slave_updates=1</span><br><span class="line"></span><br><span class="line"><span class="comment">## slave设置为只读（具有super权限的用户除外)</span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure></li>
<li><p>修改完配置后重启slave实例</p>
<p><code>sudo docker restart mysql-slave</code></p>
</li>
<li><p>在主数据库中查看主从同步状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mall-mysql-bin.000001 |      154 |              | mysql            |                   |</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>进入mysql-salve容器</p>
<p><code>sudo docker exec -it mysql-slave /bin/bash</code></p>
<p><code>mysql -uroot -padmin</code></p>
</li>
<li><p>在从数据库中配置主从复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to master_host=&#x27;10.211.55.3&#x27;,master_user=&#x27;william&#x27;,master_password=&#x27;admin&#x27;,master_port=3307,master_password=&#x27;mall-mysql-bin.000001&#x27;,master_log_pos=154,master_connect_retry=30;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>master_host：主数据库的IP地址；</li>
<li>master_port：主数据库的运行端口；</li>
<li>master_user：在主数据库创建的用于同步数据的用户账号；</li>
<li>master_password：在主数据库创建的用于同步数据的用户密码；</li>
<li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</li>
<li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</li>
<li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li>
</ul>
</li>
<li><p>在从数据库中查看主从同步状态</p>
<p><code>show slave status \G;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 10.211.55.3</span><br><span class="line">                  Master_User: william</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File:</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: mall-mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File:</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 0</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID:</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State:</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此时从机的IO_Running/SQL_Running还未开始同步</span></span><br><span class="line">Slave_IO_Running: No</span><br><span class="line">Slave_SQL_Running: No</span><br></pre></td></tr></table></figure></li>
<li><p>在从数据库中开启主从同步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>查看从数据库状态发现已经同步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Connecting to master</span><br><span class="line">                  Master_Host: 10.211.55.3</span><br><span class="line">                  Master_User: william</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File:</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: mall-mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File:</span><br><span class="line">             Slave_IO_Running: Connecting</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 0</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1045</span><br><span class="line">                Last_IO_Error: error connecting to master &#x27;william@10.211.55.3:3307&#x27; - retry-time: 30  retries: 2</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID:</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp: 220814 13:31:06</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Slave_IO_Running: Connecting</span><br><span class="line">Slave_SQL_Running: Yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slave_IO_Running: Connecting 提示需要对主从库进行 flush privileges</span></span><br></pre></td></tr></table></figure></li>
<li><p>主从复制测试</p>
<ul>
<li><p>主机新建库-&gt;使用库-&gt;新建表-&gt;插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use db01;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table t1(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(1,&#x27;z3&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>从机使用库-&gt;查看记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use db01;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="安装redis集群（大厂面试题-分布式存储案例）"><a href="#安装redis集群（大厂面试题-分布式存储案例）" class="headerlink" title="安装redis集群（大厂面试题-分布式存储案例）"></a>安装redis集群（大厂面试题-分布式存储案例）</h3><h2 id="Dockerfile-解析"><a href="#Dockerfile-解析" class="headerlink" title="Dockerfile 解析"></a>Dockerfile 解析</h2><h3 id="Dockerfile-是什么"><a href="#Dockerfile-是什么" class="headerlink" title="Dockerfile 是什么"></a>Dockerfile 是什么</h3><p>Dockerfile 是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>如果我们想拥有一个增强型的docker镜像，就需要多次添加功能然后commit。这样非常繁琐，而且也很消耗IO</p>
<p><img src="Dockerfile.png"></p>
<h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><p><code>https://docs.docker.com/engine/reference/builder</code></p>
<h4 id="构建三步骤"><a href="#构建三步骤" class="headerlink" title="构建三步骤"></a>构建三步骤</h4><ul>
<li>编写Dockerfile</li>
<li>docker build 命令构建镜像</li>
<li>docker run 依照新编写好的镜像运行容器实例</li>
</ul>
<h3 id="Dockerfile-构建过程解析"><a href="#Dockerfile-构建过程解析" class="headerlink" title="Dockerfile 构建过程解析"></a>Dockerfile 构建过程解析</h3><h4 id="Dockerfile-的基础内容知识"><a href="#Dockerfile-的基础内容知识" class="headerlink" title="Dockerfile 的基础内容知识"></a>Dockerfile 的基础内容知识</h4><ol>
<li>每条关键字指令都<font color="OrangeRed">必须为大写字母</font>且后面要跟随至少一个参数</li>
<li>指令按照从上到下，顺序执行</li>
<li>#表示注释</li>
<li>每条指令都会创建一个新的镜像层并对镜像进行提交</li>
</ol>
<h4 id="Docker-执行-Dockerfile-的大致流程"><a href="#Docker-执行-Dockerfile-的大致流程" class="headerlink" title="Docker 执行 Dockerfile 的大致流程"></a>Docker 执行 Dockerfile 的大致流程</h4><ol>
<li>Docker 从基础镜像运行一个容器</li>
<li>执行一条指令并对容器做出修改</li>
<li>执行类似 docker commit 的操作提交一个新的镜像层</li>
<li>docker 再基于刚提交的镜像运行一个新的容器</li>
<li>执行 Dockerfile 中的下一条指令直到所有指令都执行完成</li>
</ol>
<h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段</p>
<ul>
<li>Dockerfile 是软件的原材料</li>
<li>Docker 镜像是软件的交付品</li>
<li>Docker 容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</li>
</ul>
<p>Dockerfile 面向开发，Docker 镜像称为交付标准，Docker 容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p>
<p><img src="dockerfile%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png"></p>
<ol>
<li>Dockerfile：需要定义一个Dockerfile，Dockerfile 定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制）等等；</li>
<li>Docker 镜像：在用 Dockerfile 定义一个文件后，docker build 时会产生一个Docker镜像，当运行Docker镜像时会真正开始提供服务；</li>
<li>Docker 容器：容器时直接提供服务的；</li>
</ol>
<h3 id="Dockerfile-常用保留字指令"><a href="#Dockerfile-常用保留字指令" class="headerlink" title="Dockerfile 常用保留字指令"></a>Dockerfile 常用保留字指令</h3><p>参考 tomcat8 的 Dockerfile 入门：<code>https://github.com/docker-library/tomcat</code></p>
<h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>基础镜像，当前新镜像时基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是from</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tomcat 镜像来自于 amazoncorretto 版本号为8</span></span><br><span class="line"><span class="keyword">FROM</span> amazoncorretto:<span class="number">8</span></span><br></pre></td></tr></table></figure>

<h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>镜像维护者的姓名和邮箱地址</p>
<h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><ul>
<li><p>容器构建时需要运行的命令</p>
</li>
<li><p>两种格式</p>
<ul>
<li><p>shell 格式</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;命令行命令&gt;</span></span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure></li>
<li><p>exec 格式</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;可执行文件&quot;</span>,<span class="string">&quot;参数1&quot;</span>,<span class="string">&quot;参数2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;,&quot;dev&quot;,&quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>RUN 是在 docker build 时运行</p>
</li>
</ul>
<h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>当前容器直接对外暴露的端口</p>
<p>作用：</p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>
<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p>
<p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p>
<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;工作目录路径&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$HOME</span></span></span><br></pre></td></tr></table></figure>

<h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>指定该镜像以什么样的用户去执行，如果都不指定，默认是root</p>
<p>指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>

<h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>用来在构建镜像过程中设置环境变量</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如1：</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/tomcat</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$CATALINA_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如2：以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p>
<p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>
<ul>
<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>
<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>
</ul>
<h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>**[–chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>
<p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure>

<h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>容器数据卷，用于数据保存和持久化工作。</p>
<p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>
<p>作用：</p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;路径&gt;</span></span><br></pre></td></tr></table></figure>

<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p><strong>作用</strong>：指定容器启动后要做的事情</p>
<p><strong>注意</strong>：<font color="orangered">如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</font></p>
<p><strong>CMD 容器启动命令</strong></p>
<p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p>
<ul>
<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>
<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;...]</code></li>
<li>参数列表格式：<code>CMD [&quot;参数1&quot;,&quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动catalina.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p><strong>与RUN命令的区别</strong></p>
<ul>
<li>CMD 是在 docker run 时运行</li>
<li>RUN 是在 docker build 时运行</li>
</ul>
<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>类似于 CMD 指令，<font color="orangered">但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</font></p>
<p><strong>但是, 如果运行 docker run 时使用了 –entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。</strong></p>
<p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>
<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;&lt;executeable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]</span></span><br></pre></td></tr></table></figure>

<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设已通过 Dockerfile 构建了 nginx:test 镜像：</span></span><br><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>] <span class="comment"># 定参</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="comment"># 变参 </span></span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>是否传参</th>
<th>按照Dockerfile编写执行</th>
<th>传参运行</th>
</tr>
</thead>
<tbody><tr>
<td>Docker命令</td>
<td>docker run nginx:test</td>
<td>docker run nginx:test -c /etc/nginx/new.conf</td>
</tr>
<tr>
<td>衍生出的实际命令</td>
<td>nginx -c /etc/nginx/nginx.conf</td>
<td>nginx -c /etc/nginx/new.conf</td>
</tr>
</tbody></table>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="自定义镜像-mycentosjava8"><a href="#自定义镜像-mycentosjava8" class="headerlink" title="自定义镜像 mycentosjava8"></a>自定义镜像 mycentosjava8</h4><p><strong>要求</strong></p>
<ol>
<li>Centos7 镜像具备 vim、ifconfig、jdk8</li>
<li>JDK 下载镜像地址<ul>
<li>官网：<a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></li>
<li><a href="https://mirrors.yangxingzhen.com/jdk/">https://mirrors.yangxingzhen.com/jdk/</a></li>
</ul>
</li>
</ol>
<p><strong>编写</strong></p>
<p>准备镜像：<code>sudo docker pull centos:7</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ifconfig命令查看网络IP</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装java8以及lib库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD 是相对路径jar，把jdk-8u171-linux-x64.tar.gz添加到容器中，安装包必须要和Dockerfile文件同在一个位置</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;success--------------ok&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p><strong>构建</strong></p>
<p><code>docker build -t 新镜像名字:TAG .</code> </p>
<p>注意：TAG 后面有一个空格，一个点</p>
<p><strong>运行</strong></p>
<p><code>sudo docker build -t centosjava8:1.0 .</code></p>
<p><strong>再体会 UnionFS（联合文件系统）</strong></p>
<h4 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h4><p>虚悬镜像：构建镜像或者删除镜像的时候，出现一些错误，导致仓库名、标签都是<none>。俗称dangling image</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 dockerfile 写一个虚悬镜像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;Action is success!&#x27;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker build .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM ubuntu</span><br><span class="line"> ---&gt; 27941809078c</span><br><span class="line">Step 2/2 : CMD <span class="built_in">echo</span> <span class="string">&#x27;Action is success!&#x27;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 6d81af912655</span><br><span class="line">Removing intermediate container 6d81af912655</span><br><span class="line"> ---&gt; ff77ab86dc99</span><br><span class="line">Successfully built ff77ab86dc99</span><br><span class="line"></span><br><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY       TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">&lt;none&gt;           &lt;none&gt;    ff77ab86dc99   8 seconds ago    77.8MB</span><br></pre></td></tr></table></figure>

<p><strong>单独查看虚悬镜像</strong></p>
<p><code>sudo docker image ls -f dangling=true</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker image ls -f dangling=<span class="literal">true</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">&lt;none&gt;       &lt;none&gt;    ff77ab86dc99   2 minutes ago   77.8MB</span><br></pre></td></tr></table></figure>

<p><strong>删除虚悬镜像</strong></p>
<p>虚悬镜像已经失去存在价值，可以删除</p>
<p>删除所有的虚悬镜像：<code>docker image prune</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker image prune</span><br><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">Deleted Images:</span><br><span class="line">deleted: sha256:ff77ab86dc99b1d14f961856aab31e4fdd4407fa09c393150cb30608a248c35e</span><br><span class="line"></span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure>

<h4 id="自定义镜像-myubuntu"><a href="#自定义镜像-myubuntu" class="headerlink" title="自定义镜像 myubuntu"></a>自定义镜像 myubuntu</h4><ul>
<li>编写：编写Dockerfile文件</li>
<li>构建：docker build -t 新镜像名字:TAG .</li>
<li>运行：docker run -it 新镜像名字:TAG</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ifconfig命令查看网络IP</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装java8以及lib库</span></span><br><span class="line"><span class="comment"># RUN apt-get -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD 是相对路径jar，把jdk-8u71-linux-x64.tar 添加到容器中，安装包必须要和Dockerfile文件在同一个路径下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;指定路径为：<span class="variable">$MYPATH</span>&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----------------------success-----------------------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><h2 id="Docker-微服务实战"><a href="#Docker-微服务实战" class="headerlink" title="Docker 微服务实战"></a>Docker 微服务实战</h2><h3 id="通过IDEA新建一个普通微服务模块"><a href="#通过IDEA新建一个普通微服务模块" class="headerlink" title="通过IDEA新建一个普通微服务模块"></a>通过IDEA新建一个普通微服务模块</h3><ol>
<li>建Module</li>
<li>改POM</li>
<li>写YML</li>
<li>主启动</li>
<li>业务类</li>
</ol>
<h3 id="通过Dockerfile发布微服务部署到docker容器"><a href="#通过Dockerfile发布微服务部署到docker容器" class="headerlink" title="通过Dockerfile发布微服务部署到docker容器"></a>通过Dockerfile发布微服务部署到docker容器</h3><ul>
<li><p>IDEA工具里面搞定微服务jar包</p>
</li>
<li><p>编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像使用java</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件，并链接到容器的/tmp</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为mydocker.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> docker_boot-0.0.1-SNAPSHOT.jar mydocker.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">&#x27;touch /mydocker.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/mydocker.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露6001端口作为微服务</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6001</span></span><br></pre></td></tr></table></figure></li>
<li><p>构建镜像</p>
<p><code>docker build -t mydocker:1.0 .</code></p>
</li>
<li><p>运行容器</p>
<p><code>docker run -d -p 6001:6001 mydocker:1.0</code></p>
<p>关闭防火墙</p>
<p><code>systemctl stop firewalld</code></p>
<p>重启docker</p>
<p><code>systemctl restart docker</code></p>
<p>再次运行容器</p>
<p><code>docker run -d -p 6001:6001 mydocker:1.0</code></p>
</li>
<li><p>访问测试</p>
</li>
</ul>
<h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><h3 id="Docker-网络是什么"><a href="#Docker-网络是什么" class="headerlink" title="Docker 网络是什么"></a>Docker 网络是什么</h3><ul>
<li><p>Docker 不启动，默认网络情况</p>
<ul>
<li>ens33</li>
<li>lo</li>
<li>Virbr0</li>
</ul>
</li>
<li><p>Docker 启动后，网络情况：<code>docker network ls</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">56db7d5b5e57   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host      host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Docker-网络常用基本命令"><a href="#Docker-网络常用基本命令" class="headerlink" title="Docker 网络常用基本命令"></a>Docker 网络常用基本命令</h3><h4 id="All命令"><a href="#All命令" class="headerlink" title="All命令"></a>All命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker network -h</span><br><span class="line">Flag shorthand -h has been deprecated, please use --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker network COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><p><code>sudo docker network ls</code></p>
<h4 id="查看网络源数据"><a href="#查看网络源数据" class="headerlink" title="查看网络源数据"></a>查看网络源数据</h4><p><code>sudo docker network inspect xxx网络名字</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-07-31T19:34:57.185264192+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;3bbcd1f874b5bb2b2a3931d3dd77182d239a5a012dd0e54f58e5cb383701990c&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;youthful_knuth&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;fa27541860ae4069a4836cada063b6201249b98b8ce1604dcb6efca9adfa8eb4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;b1ff5b9d1011dc2f6de7e4899442d8efc38a76b86933983b071a020fc233de46&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mysql-master&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;edc486f5c0659ed61fdc5d2f1653922e492053452966eb3fb410cb078e7d2ce0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;e64e1fb8ed15a85e0fcaf7a68a0ea15ce1f14a8d78b49b3ae7b3851f172f7262&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;redis&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;ea6963aba7fe73b636ec9a0f0bc1e9b18b8db5769915f707c5774820b81e7a65&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;ef9e0baaac004ea0d6de19bd507559a33a23b8b795b6caebe2d7335ab2ed8afb&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mysql-slave&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;746db7d5d1f13066f8240c65925663d3718994b23c199ed8b2b6107c561c0923&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;xx:xx:xx:xx:xx:xx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;xxx.xx.xxx.xx/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="删除网络"><a href="#删除网络" class="headerlink" title="删除网络"></a>删除网络</h4><p><code>sudo docker network rm xxx网络名字</code></p>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker network create aa_network</span><br><span class="line">e3a2619e37e49fc43f8dd85948521d418523d9d00949ab0af62ff1822008eb94</span><br><span class="line"></span><br><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME         DRIVER    SCOPE</span><br><span class="line">e3a2619e37e4   aa_network   bridge    <span class="built_in">local</span></span><br><span class="line">56db7d5b5e57   bridge       bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host         host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none         null      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">$ sudo docker network rm aa_network</span><br><span class="line">aa_network</span><br><span class="line"></span><br><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">56db7d5b5e57   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host      host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker-网络能干嘛"><a href="#Docker-网络能干嘛" class="headerlink" title="Docker 网络能干嘛"></a>Docker 网络能干嘛</h3><ul>
<li>容器间的互联和通信以及端口映射</li>
<li>容器IP变动时候，可以通过服务名直接网络通信而不受影响</li>
</ul>
<h3 id="Docker-网络网络模式"><a href="#Docker-网络网络模式" class="headerlink" title="Docker 网络网络模式"></a>Docker 网络网络模式</h3><h3 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h3><ul>
<li>bridge模式：使用–network bridge指定，默认使用docker0</li>
<li>host模式：使用–network host指定</li>
<li>none模式：使用–network none指定</li>
<li>container模式：使用–network container:NAME或者容器ID指定</li>
</ul>
<table>
<thead>
<tr>
<th>网络模式</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>bridge</td>
<td>为每一个容器分配、设置IP等，并将容器连接到一个<code>docker0</code>。虚拟网桥，默认为该模式。</td>
</tr>
<tr>
<td>host</td>
<td>容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口</td>
</tr>
<tr>
<td>none</td>
<td>容器有独立的 Network namespace，但并没有对其进行任何网络设置，如分配 veth pair 和网桥连接，IP 等。</td>
</tr>
<tr>
<td>container</td>
<td>新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口范围等</td>
</tr>
</tbody></table>
<h3 id="容器实例内默认网络IP生产规则"><a href="#容器实例内默认网络IP生产规则" class="headerlink" title="容器实例内默认网络IP生产规则"></a>容器实例内默认网络IP生产规则</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li>创建两个Ubuntu容器实例</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -it --name u1 ubuntu bash</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it --name u2 ubuntu bash</span><br><span class="line"></span><br><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE                               COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">b5c4415e625e   ubuntu                              <span class="string">&quot;bash&quot;</span>                   11 seconds ago   Up 11 seconds                                               u2</span><br><span class="line">ee6a2e0a644e   ubuntu                              <span class="string">&quot;bash&quot;</span>                   2 minutes ago    Up 2 minutes                                                u1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看docker inspect 容器ID or 容器名字</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker inspect u1 | tail -n 20</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;0118eb49dd28512ab82800f51c69bdaf5932c81bd334c072c97ff5c05226203c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.6&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:06&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ sudo docker inspect u2 | tail -n 20</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;272a0f885c5cdabb0561d814af50874fbb2f6dbad1ec32c407133edca6268f73&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:07&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>关闭u2实例，新建u3实例，查看ip变化。</p>
<p>可见，u3容器实例的IP地址和u2容器实例的IP地址相同</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker rm -f u2</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it --name u3 ubuntu bash</span><br><span class="line"></span><br><span class="line">$ sudo docker inspect u3 | tail -n 20</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;56db7d5b5e57968e94573b4fd6d3d715c97555dcb951c92ac5eebe49c740ba0e&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;a4fb4ecd447b4ab54b7cb490a4ac230cd5df6477aaa6baa5db94ea68e9542c6f&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:07&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><font color="orange"><strong>Docker 容器内部的IP是有可能会发生改变的</strong></font></p>
<h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><h4 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h4><p><strong>bridge是什么</strong></p>
<ul>
<li><p>Docker 服务默认会创建一个<code>docker0</code>网桥（其上有一个 docker0 内部接口），该桥接网络的名称为 docker0，它在<strong>内核层</strong>连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到<strong>同一个物理网络</strong>。Docker 默认指定了 docker0 接口的IP地址和子网掩码，<strong>让主机和容器之间可以通过网桥互相通信</strong></p>
</li>
<li><p>查看 bridge 网络的详细信息，并通过 grep 获取名称项</p>
<p><code>sudo docker network inspect bridge | grep name</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker network inspect bridge | grep name</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br></pre></td></tr></table></figure></li>
<li><p>ifconfig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig | grep docker</span><br><span class="line">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>bridge案例</strong></p>
<ol>
<li><p>说明</p>
<ul>
<li><p>Docker 使用Linux桥接，在宿主机虚拟一个Docker容器网桥（docker0），Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信</p>
</li>
<li><p><code>docker run</code> 的时候，没有指定<code>network</code>的话，默认使用的网桥模式就是bridge，使用的就是docker0。在宿主机<code>ifconfig</code>就可以看到<code>docker0</code>和自己<code>create</code>的<code>network</code> eth0、eth1、eth2…代表网卡1、网卡2、网卡3…，lo代表127.0.0.1，即<code>localhost</code>，inet addr 用来表示网卡的IP地址</p>
</li>
<li><p>网桥<code>docker0</code>创建一对对等虚拟设备接口，一个叫<code>veth</code>，另一个叫<code>eth0</code>，成对匹配</p>
<ul>
<li><p>整个宿主机的网桥模式都是<code>docker0</code>，类似一个交换机有一堆接口，每个接口叫<code>veth</code>，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此连通（这样一对接口叫 veth pair）</p>
</li>
<li><p>每个容器实例内部也有一块网卡，每个接口叫 eth0</p>
</li>
<li><p>docker0 上面的每个 veth匹配某个容器实例内部的 eth0，两两配对，一一匹配</p>
</li>
</ul>
</li>
</ul>
<p>通过上述，将宿主机上所有容器都连接到这个内部网络上，两个容器在同一个网络下，会从这个罔顾炎下各自拿到分配的IP，此时两个容器的网络是互通的</p>
<p><img src="dockernetwork.png"></p>
</li>
<li><p>代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class="line">$ sudo docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure></li>
<li><p>两两匹配验证</p>
<p><img src="bridge1.png"></p>
<p><img src="bridge2.png"></p>
<p><img src="dockerbridge.png"></p>
</li>
</ol>
<h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p><strong>host 是什么</strong></p>
<p>直接使用宿主机的IP地址与外界进行通信，不再需要额外进行NAT转换</p>
<p><strong>host 案例</strong></p>
<ol>
<li><p>说明</p>
<ul>
<li>容器将不会获得一个独立的 Network Namespace，而是和宿主机共用一个 Network Namespace。<font color="orange">容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口。</font></li>
</ul>
</li>
<li><p>代码</p>
<ul>
<li><p>警告 ⚠️</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br><span class="line">WARNING: Published ports are discarded when using host network mode</span><br><span class="line">c3ab7f5659606f0cfe7ca6c452e605b1b8158aff4db1c81845908303ae566baf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们用host网络时，会弹出警告：发布的端口是不被推荐的</span></span><br></pre></td></tr></table></figure>

<p><img src="host.png"></p>
<p><strong>问题：</strong></p>
<p>docker 启动时总是遇见标题中的警告</p>
<p><strong>原因：</strong></p>
<p>docker 启动时指定 <code>--network=host</code> 或 <code>-net=host</code>，如果还指定了 <code>-p</code> 映射端口，那这个时候就会有此警告。</p>
<p>并且通过-p设置的参数将不会起任何作用，端口号会以主机端口号为主，重复时则递增。</p>
<p><strong>解决：</strong></p>
<p>解决的办法就是使用docker的其他网络模式，例如<code>--network=bridge</code>，这样就可以解决问题，或者直接无视</p>
</li>
<li><p>正确 ✅</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker -d --network host --name tomcat83 billygoo/tomcat8-jdk8 </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 容器的网关、IP地址为空</span></span><br><span class="line">$ sudo docker inspect tomcat83 | tail -f 20</span><br><span class="line"><span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">		...</span><br><span class="line">		<span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器内部，查看网络会发现，容器的ip addr 与宿主机的ip addr 一样</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>无之前的配对显示，看容器实例内部</p>
<p>进入容器内部，查看网络会发现，容器的ip addr 与宿主机的ip addr 一样</p>
</li>
<li><p>没有设置-p的端口映射了，如何访问启动的tomcat83？？</p>
<p><code>http://宿主机IP:8080</code></p>
<p>在CentOS里面默认的火狐浏览器访问容器内的tomcat83看到访问成功，因为此时容器的IP借用主机的，所以容器共享宿主机网络IP，这样的好处是外部主机与容器可以直接通信</p>
</li>
</ol>
<h4 id="none"><a href="#none" class="headerlink" title="none"></a>none</h4><ol>
<li><p>none是什么</p>
<p><strong>禁用网络功能，只有IO标识（就是127.0.0.1表示本地回环）</strong></p>
</li>
<li><p>none案例</p>
<p><code>sudo docker run -d -p 8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8</code></p>
</li>
</ol>
<h4 id="container"><a href="#container" class="headerlink" title="container"></a>container</h4><ol>
<li><p>Container是什么</p>
<p>新建的容器和已经存在的一个容器共享一个网络IP配置而不是和宿主机共享。</p>
<p>新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p>
<p><img src="networkcontainer.png"></p>
</li>
<li><p>错误案例 ❌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -d -p 8085:8080 --name tomcat85 billygoo/tomcat8-jdk8</span><br><span class="line">sudo docker run -d -p 8086:8080 --network container:tomcat85 --name tomcat86 billygoo/tomcat8-jdk8</span><br><span class="line">docker: Error response from daemon: conflicting options: port publishing and the container <span class="built_in">type</span> network mode.</span><br><span class="line">See <span class="string">&#x27;docker&#x27;</span> run --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 相当于tomcat86和tomcat85公用同一个ip同一个端口，导致端口冲突</span></span><br></pre></td></tr></table></figure>

<p>本案例并不适合用tomcat进行演示</p>
</li>
<li><p>正确案例 :heavy_check_mark:</p>
<p>Alpine Linux 是一款独立的、非商用的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。因小巧、简单、安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小五脏俱全，镜像非常小巧，不到6M的大小，所以特别适合容器打包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -it --name alpine1 alpine /bin/sh</span><br><span class="line">sudo docker run -it --network container:alpine1 --name alpine2 alpine /bin/sh</span><br></pre></td></tr></table></figure>

<p><img src="container1.png"></p>
<p>假如此时关闭alpine1，再看看alpine2</p>
<p><img src="container2.png"></p>
</li>
</ol>
<h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><ol>
<li> 没用自定义网络</li>
</ol>
<ul>
<li><p>案例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 8081:8080 --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class="line">$ docker run -d -p 8082:8080 --name tomcat82 billygoo/tomcat8-jdk8</span><br><span class="line"><span class="comment"># 上述成功启动并用docker exec进入各自容器实例内部</span></span><br></pre></td></tr></table></figure></li>
<li><p>问题</p>
<p>按照IP地址ping是OK的</p>
<p><img src="%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C1.png"></p>
<p>按照服务名ping不通</p>
<p><img src="%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C2.png"></p>
</li>
</ul>
<ol start="2">
<li><p>用了自定义网络</p>
<ul>
<li><p>自定义桥接网络，自定义网络默认使用的是桥接网络bridge</p>
</li>
<li><p>新建自定义网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker network create zzyy_network</span><br><span class="line">89a510a9014b5f51d232e546d3f69ea7e70c80f6d8a22563f4f9ddab36565ff5</span><br><span class="line"></span><br><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">56db7d5b5e57   bridge         bridge    <span class="built_in">local</span></span><br><span class="line">a43e2d636b9d   host           host      <span class="built_in">local</span></span><br><span class="line">d6d9f2afbb37   none           null      <span class="built_in">local</span></span><br><span class="line">89a510a9014b   zzyy_netwrok   bridge    <span class="built_in">local</span></span><br></pre></td></tr></table></figure></li>
<li><p>新建容器加入上一步新建的自定义网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -d -p 8081:8080 --network zzyy_network --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class="line">$ sudo docker run -d -p 8082:8080 --networl zzyy_network --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure></li>
<li><p>互相ping测试</p>
<p><img src="%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C3.png"></p>
</li>
</ul>
</li>
<li><p>自定义网络的问题结论</p>
<p><font color=orange>自定义网络本身就维护好了主机名和IP的对应关系（IP和域名都能通）</font></p>
</li>
</ol>
<h3 id="Docker平台架构图解"><a href="#Docker平台架构图解" class="headerlink" title="Docker平台架构图解"></a>Docker平台架构图解</h3><h3 id="整体说明"><a href="#整体说明" class="headerlink" title="整体说明"></a>整体说明</h3><p>从其架构和运行流程来看，Docker是一个 C/S 模式的架构，后端是一个耦合架构，众多模块各司其职</p>
<p>Docker 运行的基本流程为：</p>
<ol>
<li>用户使用 Docker Clinet 与 Docker Daemon 建立通信，并发送请求给后者</li>
<li>Docker Daemon 作为 Docker 架构中的主体部分，首先提供Docker Server的功能使其可以接受Docker Client的请求</li>
<li>Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式存在</li>
<li>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver将下载镜像以 Graph 的形式存储</li>
<li>当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境</li>
<li>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Exec driver 来完成</li>
<li>Libcontainer 是一项独立的容器管理包，Network dirver 以及 Exec driver 都是通过 LibContainer 来实现具体对容器进行的操作</li>
</ol>
<h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="docker%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png"></p>
<h2 id="Docker-Compose-容器编排"><a href="#Docker-Compose-容器编排" class="headerlink" title="Docker-Compose 容器编排"></a>Docker-Compose 容器编排</h2><h3 id="Docker-Compose是什么"><a href="#Docker-Compose是什么" class="headerlink" title="Docker-Compose是什么"></a>Docker-Compose是什么</h3><p>Docker-Compose是Docker官方的开源项目，负责实现对Docker容器集群的快速编排</p>
<p>Compose 是 Docker 公司推出的一个工具软件，可以管理多个Docker容器组成一个应用。你需要定义一个YAML格式的配置文件docker-compose.yml，写好多个容器之间的调用关系。然后，只要一个命令，就能同事启动/关闭这些容器。</p>
<h3 id="Docker-Compose能干嘛"><a href="#Docker-Compose能干嘛" class="headerlink" title="Docker-Compose能干嘛"></a>Docker-Compose能干嘛</h3><p>docker建议我们每一个容器中只运行一个服务，因为docker容器本身占用的资源极少，所以最好是将每个服务单独分割开来，但是我们又面临了一个问题？</p>
<p>如果我们需要同事部署好多个服务，难道要每个服务单独写一个dockerfile然后在构建镜像，构建容器，这样累都累死了，所以docker官方给我们提供了docker-compose多服务部署工具</p>
<p>例如要实现一个Web微服务项目，除了Web服务容器本身，往往还需要再加上后端的数据库mysql服务容器，redis服务器，注册中心eureka，甚至还包括负载均衡容器等等……</p>
<p>Compose允许用户通过一个单独的docker-compose.yml模板文件（YAML格式）来定义一组相关联的应用容器为一个项目（project）</p>
<p>可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker-Compose解决了容器与容器之间如何管理编排的问题。</p>
<h3 id="Docker-Compose安装步骤"><a href="#Docker-Compose安装步骤" class="headerlink" title="Docker-Compose安装步骤"></a>Docker-Compose安装步骤</h3><ul>
<li><p>官网 <a href="https://docs.docker.com/compose/compose-file/compose-file-v3">https://docs.docker.com/compose/compose-file/compose-file-v3</a></p>
</li>
<li><p>官网下载 <a href="https://docs.docker.com/compose/install">https://docs.docker.com/compose/install</a></p>
</li>
<li><p>安装步骤</p>
<p>使用 <code>curl</code> 将 Compose 文件下载到 <code>/usr/local/bin</code> 目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>下载完成后，将该文件设置为可执行文件</p>
<p><code>sudo chmod +x /usr/local/bin/docker-compose</code></p>
<p>运行下面的命令验证是否安装成功并查看Compose的版本：</p>
<p><code>docker-compose --version</code></p>
<p>输出界面如下：</p>
<p><code>docker-compose version 1.25.0, build unknown</code></p>
</li>
<li><p>卸载步骤</p>
<p><code>sudo rm /usr/local/bin/docker-compose</code></p>
</li>
</ul>
<h3 id="Compose核心概念"><a href="#Compose核心概念" class="headerlink" title="Compose核心概念"></a>Compose核心概念</h3><ul>
<li>一文件：docker-compose.yml</li>
<li>两要素<ul>
<li>服务：一个个应用容器实例，比如订单微服务、库存微服务、MySQL微服务、Nginx容器或者redis容器</li>
<li>工程：由一组关联的应用容器组成的一个完整业务单元，在docker-compose.yml文件中定义</li>
</ul>
</li>
</ul>
<h3 id="Compose使用的三个步骤"><a href="#Compose使用的三个步骤" class="headerlink" title="Compose使用的三个步骤"></a>Compose使用的三个步骤</h3><ul>
<li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li>
<li>使用docker-compose.yml定义一个完整业务单元，安排好整体应用中的各个容器服务</li>
<li>最后，执行docker-compose up命令来启动并运行整个应用程序，完成意见部署上线</li>
</ul>
<h3 id="Compose常用命令"><a href="#Compose常用命令" class="headerlink" title="Compose常用命令"></a>Compose常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -h	<span class="comment"># 查看帮助</span></span><br><span class="line">docker-compose up	<span class="comment"># 启动所有docker-compose服务</span></span><br><span class="line">docker-compose up -d	<span class="comment"># 启动所有docker-compose服务并后台运行</span></span><br><span class="line">docker-compose down	<span class="comment"># 停止并删除容器、网络、卷、镜像</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> yml里面的服务id	<span class="comment"># 进入容器实例内部 docker-compose exec docker-compose.yml文件中写的服务id /bin/bash</span></span><br><span class="line">docker-compose ps	<span class="comment"># 展示当前docker-compose编排过的运行的所有容器</span></span><br><span class="line">docker-compose top	<span class="comment"># 展示当前docker-compose编排过得容器进程</span></span><br><span class="line">docker-compose logs yml里面的服务id	<span class="comment"># 查看容器输出日志</span></span><br><span class="line">docker-compose config	<span class="comment"># 检查配置</span></span><br><span class="line">docker-compose config -q	<span class="comment"># 检查配置，有问题才有输出</span></span><br><span class="line">docker-compose restart	<span class="comment"># 重启服务</span></span><br><span class="line">docker-compose start	<span class="comment"># 启动服务</span></span><br><span class="line">docker-compose stop	<span class="comment"># 停止服务</span></span><br></pre></td></tr></table></figure>

<h3 id="Compose编排微服务"><a href="#Compose编排微服务" class="headerlink" title="Compose编排微服务"></a>Compose编排微服务</h3><h4 id="改造升级微服务工程docker-boot"><a href="#改造升级微服务工程docker-boot" class="headerlink" title="改造升级微服务工程docker_boot"></a>改造升级微服务工程docker_boot</h4><h4 id="不用Compose"><a href="#不用Compose" class="headerlink" title="不用Compose"></a>不用Compose</h4><h4 id="swagger测试"><a href="#swagger测试" class="headerlink" title="swagger测试"></a>swagger测试</h4><h4 id="上面成功了，有哪些问题？"><a href="#上面成功了，有哪些问题？" class="headerlink" title="上面成功了，有哪些问题？"></a>上面成功了，有哪些问题？</h4><h4 id="使用Compose"><a href="#使用Compose" class="headerlink" title="使用Compose"></a>使用Compose</h4><h2 id="Docker-轻量级可视化工具-Portainer"><a href="#Docker-轻量级可视化工具-Portainer" class="headerlink" title="Docker 轻量级可视化工具 Portainer"></a>Docker 轻量级可视化工具 Portainer</h2><h2 id="Docker-容器监控之-Cadvisor-InfluxDB-Granfana"><a href="#Docker-容器监控之-Cadvisor-InfluxDB-Granfana" class="headerlink" title="Docker 容器监控之 Cadvisor+InfluxDB Granfana"></a>Docker 容器监控之 Cadvisor+InfluxDB Granfana</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2022/07/11/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><strong>镜像（image）</strong></p>
<p>Docker镜像（Image）就是一个<strong>只读</strong>的模板。镜像可以用来创建Docker容器，<strong>一个镜像可以创建很多容器。</strong></p>
<p>它也相当于一个root文件系统。比如官方镜像CentOs:7就包含了一套CentOs:7最小系统的root文件系统。</p>
<p>相当于容器的“源代码”，<font color="red">docker镜像文件类似于Java的类模板，而docker容器实例类似于Java中new出来的实例对象。</font></p>
<span id="more"></span>



<p><strong>容器（container）</strong></p>
<ul>
<li><p>从面向对象角度</p>
<p>Docker利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器就是用镜像创建的运行实例。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p>
</li>
<li><p>从镜像容器角度</p>
<p><font color="red">可以把容器看做是一个简易版的Linux环境</font>（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>
</li>
<li><p>仓库（Repository）</p>
<p>仓库（Repository）是<font color="red">集中存放镜像</font>文件的场所。</p>
<p>类似于 <strong>Maven</strong> 仓库，存放各种 <strong>jar</strong> 包的地方；</p>
<p><strong>GitHub</strong> 仓库，存放各种 <strong>git</strong> 项目的地方；</p>
<p><strong>Docker</strong> 公司提供的官方 <strong>registry</strong> 被称为 <strong>Docker Hub</strong>，存放各种进项模板的地方。</p>
<p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p>
<p>最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/)%EF%BC%8C%E5%AD%98%E6%94%BE%E4%BA%86%E6%95%B0%E9%87%8F%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E4%BE%9B%E7%94%A8%E6%88%B7%E4%B8%8B%E8%BD%BD%E3%80%82%E5%9B%BD%E5%86%85%E7%9A%84%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93%E5%8C%85%E6%8B%AC%E9%98%BF%E9%87%8C%E4%BA%91">https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云</a> 、网易云等。</p>
</li>
<li><p>总结</p>
<p><font color="blue">需要正确的理解仓库/镜像/容器这几个概念:</font></p>
<p><font color="blue">Docker</font></p>
<ul>
<li>本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</li>
</ul>
<p><font color="blue">Image</font></p>
<ul>
<li>文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</li>
</ul>
<p><font color="blue">镜像文件</font></p>
<ul>
<li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</li>
</ul>
<p><font color="blue">容器实例</font></p>
<ul>
<li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li>
</ul>
<p><font color="blue">仓库</font></p>
<ul>
<li>就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</li>
</ul>
</li>
</ul>
<h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h3 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">sudo systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker状态</span></span><br><span class="line">sudo systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker概要信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker总体帮助文档</span></span><br><span class="line">docker --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker命令帮助文档</span></span><br><span class="line">docker 具体命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul>
<li><p><code>docker images</code>：列出本地主机上的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a：列出本地所有的镜像（含历史映像层）</span><br><span class="line">-q：只显示镜像ID</span><br></pre></td></tr></table></figure></li>
<li><p><code>docker search 某个xxx镜像名字</code>：</p>
<p>网站：<a href="https://hub.docker.com/">https://hub.docker.com</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker search [options] 镜像名字</span><br><span class="line"></span><br><span class="line"><span class="comment"># options说明</span></span><br><span class="line">--<span class="built_in">limit</span>：只列出N个镜像，默认25个</span><br><span class="line">docker search --<span class="built_in">limit</span> 5 redis</span><br></pre></td></tr></table></figure></li>
<li><p><code>docker pull 某个xxx镜像名字</code>：下载镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写法1：+TAG 镜像版本号</span></span><br><span class="line">docker pull 镜像名字[:TAG]</span><br><span class="line"><span class="comment"># 例如：docker pull redis:6.0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法2：下载最新版latest</span></span><br><span class="line">docker pull 镜像名字</span><br></pre></td></tr></table></figure></li>
<li><p><code>docker system df</code>：查看镜像、容器、数据卷所占空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          1         1         9.136kB   0B (0%)</span><br><span class="line">Containers      2         0         0B        0B</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     0         0         0B        0B</span><br><span class="line"></span><br><span class="line"><span class="comment"># Images 镜像有几个</span></span><br><span class="line"><span class="comment"># Containers 容器有几个</span></span><br><span class="line"><span class="comment"># Local Volumes 本地卷</span></span><br><span class="line"><span class="comment"># Build Cache 构建的缓存</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>docker rmi 某个xxx镜像名字ID</code>：删除镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f 强制删除</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除单个镜像</span></span><br><span class="line">docker rmi -f 镜像ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多个镜像</span></span><br><span class="line">docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部</span></span><br><span class="line">docker rmi -f $(docker images -qa)</span><br><span class="line"><span class="comment"># $() 引用命令</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>问题：docker虚悬镜像是什么？</strong></p>
<ul>
<li><p>仓库名、标签都是<none>的镜像，俗称虚悬镜像<code>dangling image</code>，工作中没有什么用，建议删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">&lt;none&gt;   			&lt;none&gt;    18e5af790473   9 months ago   9.14kB</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><ul>
<li><p>新建+启动容器</p>
<p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># options 说明</span></span><br><span class="line">--name=<span class="string">&quot;容器新名字&quot;</span>	为容器指定一个名称</span><br><span class="line">-d:	后台运行容器并返回容器ID，即启动守护式容器（后台运行）</span><br><span class="line"></span><br><span class="line">-i: 以交互模式运行容器，通常与-t同时使用</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与-同时使用</span><br><span class="line">即启动交互式容器（前台有伪终端，等待交互），退出终端输入：<span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">-P：随机端口映射</span><br><span class="line">-p：指定端口映射</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用镜像ubuntu:latest 以交互模式启动一个容器，在容器内执行bash命令</span></span><br><span class="line">$ sudo docker run -it ubuntu bash</span><br><span class="line">root@908d43950860:/<span class="comment"># ps -ef</span></span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 13:00 pts/0    00:00:00 bash</span><br><span class="line">root           9       1  0 13:00 pts/0    00:00:00 ps -ef</span><br><span class="line">root@908d43950860:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li>
<li><p>列出当前所有正在运行的容器</p>
<p><code>docker ps [OPTIONS]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># options 说明</span></span><br><span class="line">-a：列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">-l：显示最近创建的容器</span><br><span class="line">-n：显示最近n个创建的容器</span><br><span class="line">-q：静默模式，只显示容器编号</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -it --name=myyu1 ubuntu bash</span><br><span class="line">root@96e714997794:/<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED          STATUS          PORTS     NAMES</span><br><span class="line">96e714997794   ubuntu    <span class="string">&quot;bash&quot;</span>    45 seconds ago   Up 45 seconds             myyu1</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONTAINER ID 容器名</span></span><br><span class="line"><span class="comment"># IMAGE 镜像名</span></span><br><span class="line"><span class="comment"># COMMAND 运行的命令</span></span><br><span class="line"><span class="comment"># CREATED 运行时间</span></span><br><span class="line"><span class="comment"># PORTS 暴露端口号</span></span><br><span class="line"><span class="comment"># NAMES 名称</span></span><br></pre></td></tr></table></figure></li>
<li><p>退出容器</p>
<p><code>exit</code>：run进入容器，exit退出，容器会停止</p>
<p><code>ctrl+p+q</code>：run进入容器，ctrl+p+q退出，容器不会停止</p>
</li>
<li><p>启动已停止运行的容器</p>
<p><code>docker start 容器ID或容器名</code></p>
</li>
<li><p>重启容器</p>
<p><code>docker restart 容器ID或容器名</code></p>
</li>
<li><p>停止容器</p>
<p><code>docker stop 容器ID或容器名</code></p>
</li>
<li><p>强制停止容器</p>
<p><code>docker kill 容器ID或容器名</code></p>
</li>
<li><p>删除已停止的容器</p>
<p><code>docker rm 容器ID</code></p>
</li>
<li><p>一次性删除多个容器实例</p>
<p><code>docker rm -f $(docker ps -aq)</code> 或者 <code>docker ps -aq | xargs docker rm</code></p>
</li>
</ul>
<h3 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h3><h4 id="启动守护式容器（后台服务器）"><a href="#启动守护式容器（后台服务器）" class="headerlink" title="启动守护式容器（后台服务器）"></a>启动守护式容器（后台服务器）</h4><p><code>docker run -d 容器名</code> </p>
<p><strong>注意</strong></p>
<p>使用镜像ubuntu:lates以后台启动一个容器</p>
<p><code>sudo docker run -d ubuntu</code></p>
<p>问题：使用<code>sudo docker ps -a </code> 进行查看，发现容器已经退出</p>
<p><strong>很重要说明一点：<font color="red">Docker容器后台运行，就必须有一个前台进程</font></strong></p>
<p>容器运行的命令如果不是那些<strong>一直挂起的命令（比如运行top、tail），就是会自动退出的</strong></p>
<p>这个是Docker的机制问题，比如你的web容器，我们以nginx为例，正常情况下：</p>
<p>我们配置启动服务只需要启动响应的service即可，例如<code>service nginx start</code></p>
<p>但是，这样做 nginx 为后台进程模式运行，就导致docker前台没有运行的应用。</p>
<p>这样的容器后台启动后，会立即自杀因为他觉得他无事可做了</p>
<p>所以，最佳的解决方案是：**<font color="red">将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示还有交互操作，别中断。</font>**</p>
<h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p><code>docker logs 容器ID</code></p>
<h4 id="查看容器内部运行的进程"><a href="#查看容器内部运行的进程" class="headerlink" title="查看容器内部运行的进程"></a>查看容器内部运行的进程</h4><p><code>docker top 容器ID</code></p>
<h4 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h4><p><code>docker inspect 容器ID</code></p>
<h4 id="进入正在运行的容器并以命令行交互"><a href="#进入正在运行的容器并以命令行交互" class="headerlink" title="进入正在运行的容器并以命令行交互"></a><strong>进入正在运行的容器并以命令行交互</strong></h4><p><code>docker exec -it 容器ID /bin/bash</code>  推荐使用</p>
<p>重新进入 <code>docker attach 容器ID</code></p>
<p>上述两个区别：</p>
<ul>
<li><p>attach 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器停止。</p>
</li>
<li><p>exec 是在容器中打开新的终端，并且可以启动新的进程，用exit退出，不会导致容器停止。</p>
</li>
<li><p>从容器内拷贝文件到主机上</p>
<p><code>docker cp 容器ID:容器内路径 目的主机路径</code></p>
</li>
</ul>
<h4 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h4><ul>
<li>export 导出容器的内容留作为一个tar归档文件 [对应import命令]</li>
<li>import 从tar包中的内容创建一个新的文件系统再导入为镜像 [对应export]</li>
</ul>
<p><strong>案例</strong></p>
<p>export</p>
<p><code>docker export 容器ID &gt; 文件名.tar</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/william/DYJ</span><br><span class="line"></span><br><span class="line">$ sudo docker images</span><br><span class="line">[sudo] password <span class="keyword">for</span> william:</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat        latest    b64abfdee99c   6 months ago    668MB</span><br><span class="line">ubuntu        latest    d5ca7a445605   8 months ago    65.6MB</span><br><span class="line">hello-world   latest    18e5af790473   9 months ago    9.14kB</span><br><span class="line">redis         6.0.8     d4deb73856a2   20 months ago   98.5MB</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it ubuntu /bin/bash</span><br><span class="line">root@69d281c34a71:/<span class="comment"># %</span></span><br><span class="line"></span><br><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">69d281c34a71   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   30 seconds ago   Up 30 seconds             friendly_kapitsa</span><br><span class="line"></span><br><span class="line">$ sudo docker <span class="built_in">export</span> 69d281c34a71 &gt; adcd.tar.gz</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">adcd.tar.gz   git  java  python  shell</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  import </p>
<p><code>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</span></span><br><span class="line">$ cat adcd.tar.gz | docker import - william/ubuntu</span><br><span class="line">sha256:8c2d3dca3bda65e49ad314f30f56c6ae3b7ff5c65d83e6f61d8af87979269b20</span><br></pre></td></tr></table></figure>

<h3 id="小总结-常用命令"><a href="#小总结-常用命令" class="headerlink" title="小总结-常用命令"></a>小总结-常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line"></span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line"></span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line"></span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line"></span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line"></span><br><span class="line">diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化</span><br><span class="line"></span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line"></span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line"></span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line"></span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line"></span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line"></span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line"></span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line"></span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line"></span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line"></span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line"></span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line"></span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line"></span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line"></span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line"></span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line"></span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line"></span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line"></span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"></span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line"></span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line"></span><br><span class="line">rmi       Remove one or more images       # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line"></span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line"></span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line"></span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line"></span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line"></span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line"></span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line"></span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line"></span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line"></span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line"></span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>



<h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><h4 id="镜像是分层的"><a href="#镜像是分层的" class="headerlink" title="镜像是分层的"></a>镜像是分层的</h4><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层下载</p>
<p><img src="1.png"></p>
<h4 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h4><p>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，他支持<font color="red">对文件系统的修改作为一次提交来一层层的叠加，</font>同时可以将不同目录挂载到同一个虚拟文件系统下（unite several disectories into a single virtual filesystem）Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<h4 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h4><p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p>
<p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 </p>
<p><strong>问题</strong>：平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？</p>
<p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p>
<h4 id="Docker为什么要采用这种分层结构？"><a href="#Docker为什么要采用这种分层结构？" class="headerlink" title="Docker为什么要采用这种分层结构？"></a>Docker为什么要采用这种分层结构？</h4><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p>
<p>比如说多个镜像都从相同的base镜像构建而来，那么Docker Host只需要在磁盘上保存同时，内存也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<h3 id="Docker分层重要理解"><a href="#Docker分层重要理解" class="headerlink" title="Docker分层重要理解"></a>Docker分层重要理解</h3><p><strong><font color="coral">Docker镜像层都是只读的，容器层是可写的。</font></strong></p>
<p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都被叫镜像层。</p>
<p>所以，对容器的改动——无论添加、删除、还是修改文件都只会发成在容器层中。只有容器层是可写的，容器层下面的所有镜像层都只是可读的。</p>
<p><img src="2.png"></p>
<h3 id="Docker镜像commit操作案例"><a href="#Docker镜像commit操作案例" class="headerlink" title="Docker镜像commit操作案例"></a>Docker镜像commit操作案例</h3><ul>
<li>docker commit 提交容器副本使之称为一个新的镜像</li>
<li><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</code></li>
</ul>
<p>案例演示：ubunt容器安装vim</p>
<ul>
<li>从Hub上下载ubuntu镜像到本地并成功运行</li>
<li>原始的默认ubuntu镜像不带vim命令</li>
<li>外网连通的情况下，安装vim</li>
<li>安装完成后，commit我们自己的新镜像</li>
<li>启动我们的镜像并和原来的对比</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@arch ~]$ sudo docker run -it ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line">root@57a82b1d18d4:/<span class="comment"># apt-get update</span></span><br><span class="line"></span><br><span class="line">root@57a82b1d18d4:/<span class="comment"># apt-get -y install vim</span></span><br><span class="line"></span><br><span class="line">root@57a82b1d18d4:/<span class="comment"># vim 123.txt</span></span><br><span class="line"></span><br><span class="line">[william@arch ~]$  sudo docker commit -m=<span class="string">&quot;add vim cmd&quot;</span> -a=<span class="string">&quot;william&quot;</span> 57a82b1d18d4 william/ubuntu:1.1</span><br><span class="line"></span><br><span class="line">[william@arch ~]$ sudo docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY       TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">william/ubuntu   1.1       33d04ddcdce9   34 seconds ago   84.1MB</span><br></pre></td></tr></table></figure>



<h2 id="本地镜像发布到阿里云"><a href="#本地镜像发布到阿里云" class="headerlink" title="本地镜像发布到阿里云"></a>本地镜像发布到阿里云</h2><h3 id="本地镜像发布到阿里云流程"><a href="#本地镜像发布到阿里云流程" class="headerlink" title="本地镜像发布到阿里云流程"></a>本地镜像发布到阿里云流程</h3><p><img src="3.png"></p>
<h3 id="镜像的生成方法"><a href="#镜像的生成方法" class="headerlink" title="镜像的生成方法"></a>镜像的生成方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.commit方法</span></span><br><span class="line"><span class="comment"># docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</span></span><br><span class="line">sudo docker commit -a william -m <span class="string">&quot;Vim ubuntu&quot;</span> 镜像ID ubuntu-vim:1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.docker file 之后学</span></span><br></pre></td></tr></table></figure>

<h3 id="将本地镜像推送到阿里云"><a href="#将本地镜像推送到阿里云" class="headerlink" title="将本地镜像推送到阿里云"></a>将本地镜像推送到阿里云</h3><h4 id="创建仓库镜像"><a href="#创建仓库镜像" class="headerlink" title="创建仓库镜像"></a>创建仓库镜像</h4><ul>
<li><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances">选择控制台，进入容器镜像服务</a></p>
</li>
<li><p>选择个人实例</p>
</li>
<li><p>命名空间</p>
</li>
<li><p>仓库名称</p>
</li>
<li><p>进入管理界面获得脚本</p>
<p><img src="4.png"></p>
</li>
</ul>
<h4 id="将镜像推送到阿里云"><a href="#将镜像推送到阿里云" class="headerlink" title="将镜像推送到阿里云"></a>将镜像推送到阿里云</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">ubuntu-vim   1.1       7c0e2d4866ee   14 seconds ago   161MB</span><br><span class="line">redis        latest    97772dcef71b   6 days ago       111MB</span><br><span class="line">ubuntu       latest    a7870fd478f4   5 weeks ago      69.2MB</span><br><span class="line">tomcat       latest    b64abfdee99c   6 months ago     668MB</span><br><span class="line">redis        6.0.8     d4deb73856a2   20 months ago    98.5MB</span><br><span class="line"></span><br><span class="line">$ sudo docker login --username=william117 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">$ sudo docker tag 7c0e2d4866ee registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:1.1</span><br><span class="line">$ sudo docker push registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:1.1</span><br></pre></td></tr></table></figure>



<h3 id="将阿里云上的镜像下载到本地"><a href="#将阿里云上的镜像下载到本地" class="headerlink" title="将阿里云上的镜像下载到本地"></a>将阿里云上的镜像下载到本地</h3><p><code>sudo docker pull registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:[镜像版本号]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/william117/ubuntu:1.1</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it 7c0e2d4866ee /bin/bash</span><br></pre></td></tr></table></figure>



<h2 id="本地镜像发布到私有库"><a href="#本地镜像发布到私有库" class="headerlink" title="本地镜像发布到私有库"></a>本地镜像发布到私有库</h2><h3 id="本地镜像发布到私有库流程"><a href="#本地镜像发布到私有库流程" class="headerlink" title="本地镜像发布到私有库流程"></a>本地镜像发布到私有库流程</h3><p><img src="5.png"></p>
<h3 id="私有库是什么"><a href="#私有库是什么" class="headerlink" title="私有库是什么"></a>私有库是什么</h3><p> Docker Registry是官方提供的工具，可以用于构建私有镜像仓库</p>
<ol>
<li><p>官方Docker Hub地址：<a href="https://hub.docker.com/%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E8%AE%BF%E9%97%AE%E5%A4%AA%E6%85%A2%E4%BA%86%E4%B8%94%E5%87%86%E5%A4%87%E8%A2%AB%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%96%E4%BB%A3%E7%9A%84%E8%B6%8B%E5%8A%BF%EF%BC%8C%E4%B8%8D%E5%A4%AA%E4%B8%BB%E6%B5%81%E3%80%82">https://hub.docker.com/，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。</a></p>
</li>
<li><p>Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。</p>
</li>
</ol>
<h3 id="将本地镜像推送到私有库"><a href="#将本地镜像推送到私有库" class="headerlink" title="将本地镜像推送到私有库"></a>将本地镜像推送到私有库</h3><ol>
<li><p>下载镜像Docker Registry</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker pull registry</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/registry</span><br><span class="line">b48a9fe99aba: Pull complete</span><br><span class="line">095878aa44ca: Pull complete</span><br><span class="line">04df0d597e2b: Pull complete</span><br><span class="line">e0594d0cd6d6: Pull complete</span><br><span class="line">94a758d8738a: Pull complete</span><br><span class="line">Digest: sha256:169211e20e2f2d5d115674681eb79d21a217b296b43374b8e39f97fcf866b375</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> registry:latest</span><br><span class="line">docker.io/library/registry:latest</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   11 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li>
<li><p>运行私有库Registry，相当于本地有个私有的Docker Hub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，仓库被创建在容器的/var/lib/registry目录下，建议自行用容器卷映射，方便与宿主机联调</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -d -p 5000:5000 -v /home/william/myregistry/:/home/<span class="built_in">test</span> --privileged=<span class="literal">true</span> registry</span><br><span class="line">7a74ca4f7bc3bde701d7921c861bd4f799c6e6255e9aa661127bfda1d09b7977</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">7a74ca4f7bc3   registry   <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   16 seconds ago   Up 16 seconds   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   mystifying_joliot</span><br></pre></td></tr></table></figure></li>
<li><p>案例演示创建一个新镜像，ubuntu安装ifconfig命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行ubuntu</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -it ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu容器执行ifconfig命令，发现并没有该命令</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># ifconfig</span></span><br><span class="line">bash: ifconfig: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新ubuntu容器源</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># apt update</span></span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports jammy InRelease [270 kB]</span><br><span class="line">Get:2 http://ports.ubuntu.com/ubuntu-ports jammy-updates InRelease [114 kB]</span><br><span class="line">Get:3 http://ports.ubuntu.com/ubuntu-ports jammy-backports InRelease [99.8 kB]</span><br><span class="line">Get:4 http://ports.ubuntu.com/ubuntu-ports jammy-security InRelease [110 kB]</span><br><span class="line">Get:5 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 Packages [1758 kB]</span><br><span class="line">Get:6 http://ports.ubuntu.com/ubuntu-ports jammy/restricted arm64 Packages [24.2 kB]</span><br><span class="line">Get:7 http://ports.ubuntu.com/ubuntu-ports jammy/universe arm64 Packages [17.2 MB]</span><br><span class="line">Get:8 http://ports.ubuntu.com/ubuntu-ports jammy/multiverse arm64 Packages [224 kB]</span><br><span class="line">Get:9 http://ports.ubuntu.com/ubuntu-ports jammy-updates/restricted arm64 Packages [81.1 kB]</span><br><span class="line">Get:10 http://ports.ubuntu.com/ubuntu-ports jammy-updates/universe arm64 Packages [234 kB]</span><br><span class="line">Get:11 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main arm64 Packages [580 kB]</span><br><span class="line">Get:12 http://ports.ubuntu.com/ubuntu-ports jammy-updates/multiverse arm64 Packages [1250 B]</span><br><span class="line">Get:13 http://ports.ubuntu.com/ubuntu-ports jammy-backports/universe arm64 Packages [5812 B]</span><br><span class="line">Get:14 http://ports.ubuntu.com/ubuntu-ports jammy-security/universe arm64 Packages [108 kB]</span><br><span class="line">Get:15 http://ports.ubuntu.com/ubuntu-ports jammy-security/restricted arm64 Packages [61.7 kB]</span><br><span class="line">Get:16 http://ports.ubuntu.com/ubuntu-ports jammy-security/main arm64 Packages [269 kB]</span><br><span class="line">Fetched 21.2 MB <span class="keyword">in</span> 1min 8s (310 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">16 packages can be upgraded. Run <span class="string">&#x27;apt list --upgradable&#x27;</span> to see them.</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu容器安装net-tools</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># apt install net-tools</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  net-tools</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 16 not upgraded.</span><br><span class="line">Need to get 207 kB of archives.</span><br><span class="line">After this operation, 774 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 net-tools arm64 1.60+git20181103.0eebece-1ubuntu5 [207 kB]</span><br><span class="line">Fetched 207 kB <span class="keyword">in</span> 5s (38.9 kB/s)</span><br><span class="line">debconf: delaying package configuration, since apt-utils is not installed</span><br><span class="line">Selecting previously unselected package net-tools.</span><br><span class="line">(Reading database ... 4389 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../net-tools_1.60+git20181103.0eebece-1ubuntu5_arm64.deb ...</span><br><span class="line">Unpacking net-tools (1.60+git20181103.0eebece-1ubuntu5) ...</span><br><span class="line">Setting up net-tools (1.60+git20181103.0eebece-1ubuntu5) ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu容器执行ifconfig命令</span></span><br><span class="line">root@db6c8a0b2695:/<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 15090  bytes 22180068 (22.1 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3322  bytes 183806 (183.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该有net-tools工具的ubuntu镜像，创建成一个新的镜像</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker commit -m=<span class="string">&quot;ifconfig cmd add&quot;</span> -a=<span class="string">&quot;william&quot;</span> db6c8a0b2695 ubuntu:1.2</span><br><span class="line">sha256:07bca3d7c4a16461b32f57c09a306d9b597bb39c39d6f0dc7d2b1bc8489781f5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地镜像仓库</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">ubuntu                                                1.2       07bca3d7c4a1   8 seconds ago   104MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   11 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li>
<li><p>curl验证私服库上有什么镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">54549fde7be3   ubuntu     <span class="string">&quot;/bin/bash&quot;</span>              41 minutes ago   Up 41 minutes                                               cool_wilbur</span><br><span class="line">7a74ca4f7bc3   registry   <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   42 minutes ago   Up 42 minutes   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   mystifying_joliot</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ curl -XGET http://10.211.55.3:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将新镜像ubuntu:1.2修改符合私服规范的Tag</p>
<p><code>docker tag 镜像:Tag Host:Port/Repository:Tag</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker tag ubuntu:1.2 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">10.211.55.3:5000/ubuntu                               1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">ubuntu                                                1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   12 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置文件使之支持http</p>
<p>Docker默认不允许http方式推送镜像。所以我们需要配置/etc/docker/daemon.json来取消限制</p>
<p><strong>修改完后不生效，建议重启Docker。Docker重启后，所有Docker容器将会停止。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lsq7tfu3.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 上面是之前配置的阿里云镜像加速器，我们需要在阿里云镜像加速器下面写上&quot;insecure-registries&quot;:[&quot;10.211.55.3:5000&quot;]</span></span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lsq7tfu3.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;10.211.55.3:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker后需要重新运行私服仓库</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -d -p 5000:5000 -v /home/william/DYJ/myregistry/:/home/<span class="built_in">test</span> --privileged=<span class="literal">true</span> registry</span><br><span class="line">3bbcd1f874b5bb2b2a3931d3dd77182d239a5a012dd0e54f58e5cb383701990c</span><br></pre></td></tr></table></figure></li>
<li><p>push推送到私服库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker push 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">The push refers to repository [10.211.55.3:5000/ubuntu]</span><br><span class="line">d53c1aceb6e1: Pushed</span><br><span class="line">13e8c0db60e7: Pushed</span><br><span class="line">1.2: digest: sha256:af7b0352137dcbe7c9ea4de6c4c9e438dd8bba885e6937ad1e97cd53a0fc1913 size: 741</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">10.211.55.3:5000/ubuntu                               1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">ubuntu                                                1.2       07bca3d7c4a1   25 hours ago    104MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   12 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br></pre></td></tr></table></figure></li>
<li><p>再次curl验证私服库上有什么镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ curl -XGET http://10.211.55.3:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;ubuntu&quot;</span>]&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pull到本地并运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地镜像以作验证</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker rmi -f 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">Untagged: 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">Untagged: 10.211.55.3:5000/ubuntu@sha256:af7b0352137dcbe7c9ea4de6c4c9e438dd8bba885e6937ad1e97cd53a0fc1913</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker rmi -f ubuntu:1.2</span><br><span class="line">Untagged: ubuntu:1.2</span><br><span class="line">Deleted: sha256:07bca3d7c4a16461b32f57c09a306d9b597bb39c39d6f0dc7d2b1bc8489781f5</span><br><span class="line">Deleted: sha256:ad133ac82d25ca03ee07e8fb53055321eb9ef89b13ce9bbefa957cf90bf76454</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker镜像</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker images</span><br><span class="line">REPOSITORY                                            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/william117/ubuntu   1.1       7c0e2d4866ee   12 days ago     161MB</span><br><span class="line">redis                                                 latest    97772dcef71b   2 weeks ago     111MB</span><br><span class="line">ubuntu                                                latest    a7870fd478f4   7 weeks ago     69.2MB</span><br><span class="line">tomcat                                                latest    b64abfdee99c   7 months ago    668MB</span><br><span class="line">registry                                              latest    11bf57bb5c31   8 months ago    24.5MB</span><br><span class="line">redis                                                 6.0.8     d4deb73856a2   21 months ago   98.5MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从私服库拉取ubuntu镜像，注意Tag号要带上</span></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker pull 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">1.2: Pulling from ubuntu</span><br><span class="line">ed02c6ade914: Already exists</span><br><span class="line">07b9b2314dd0: Pull complete</span><br><span class="line">Digest: sha256:af7b0352137dcbe7c9ea4de6c4c9e438dd8bba885e6937ad1e97cd53a0fc1913</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> 10.211.55.3:5000/ubuntu:1.2</span><br><span class="line">10.211.55.3:5000/ubuntu:1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果忘记了版本号，可以通过curl http://仓库IP:5000/v2/镜像名称/tags/list 查看</span></span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:/etc/docker$ curl http://10.211.55.3:5000/v2/ubuntu/tags/list</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ubuntu&quot;</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;1.2&quot;</span>]&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h2><h3 id="坑：容器卷记得加入-–privilege-true"><a href="#坑：容器卷记得加入-–privilege-true" class="headerlink" title="坑：容器卷记得加入 [–privilege=true]"></a><font color="red"><strong>坑：容器卷记得加入 [–privilege=true]</strong></font></h3><p>为什么要开启权限</p>
<p>Docker挂载主机目录访问如果出现<font color="red">cannot open directory .: Permission denied</font></p>
<p>解决办法：在挂载目录后多加一个–privilege=true参数即可</p>
<p>如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为。</p>
<p>在SELinux里面挂载目录被禁止掉了，如果要开启，我们一般使用–privilege=true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p>
<h3 id="回顾-本地镜像发布到私有库，参数V"><a href="#回顾-本地镜像发布到私有库，参数V" class="headerlink" title="回顾 [本地镜像发布到私有库，参数V]"></a>回顾 [本地镜像发布到私有库，参数V]</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -d -p 5000:5000 -v /william/myregistry/:/tmp/registry --privileged=<span class="literal">true</span> registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#	v 														添加自定义的容器卷</span></span><br><span class="line"><span class="comment"># /william/myregistry/ 					宿主机路径</span></span><br><span class="line"><span class="comment"># /tmp/registry									Docker容器内路径</span></span><br><span class="line"><span class="comment"># --privilege=true							放开权限，运行容器实例以后，完成了容器和宿主机的某个绝对路径互通，实现了信息共享</span></span><br></pre></td></tr></table></figure>

<h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p>Docker容器数据卷，即Docker Volume（卷）</p>
<p>当Docker容器运行的时候，会产生一些列的数据文件，这些数据文件会在关闭Docker容器时，直接消失的。但是其中产生部分的数据内容，我们是希望能够把它给保存起来，另做它用的。</p>
<p><code>关闭Docker容器=删除内部除了image底层数据的其他全部内容，即删库跑路</code></p>
<p>所以我们期望：</p>
<ul>
<li>将应用于运行的环境打包形成容器运行，伴随着容器运行产生的数据，我们希望这些数据能够持久化。</li>
<li>希望容器之间也能够实现数据的共享</li>
</ul>
<p>Docker容器产生的数据同步到本地，这样关闭容器的时候，数据是在本地的，不会影响数据的安全性。</p>
<p>Docker的容器卷技术也就是将容器内部目录和本地目录进行一个同步，即挂载。</p>
<p><code>总结：容器的持久化和同步化操作，容器之间也是可以数据共享的（但是注意挂载不是等于同步！！！）</code></p>
<p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但补数据联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：</p>
<p>卷的设计目的就是<font color="red">数据的持久化</font>，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p>
<ul>
<li><p>一句话：有点类似我们Redis里面的rdb和aof文件</p>
</li>
<li><p>将docker容器内的数据保存进宿主机的磁盘中</p>
</li>
<li><p>运行一个带有容器卷存储功能的容器实例</p>
<p><code>docker run -it --privileged=true -v /宿主机绝对路径目录: /容器内目录 镜像名</code></p>
</li>
</ul>
<h3 id="容器数据卷能干嘛"><a href="#容器数据卷能干嘛" class="headerlink" title="容器数据卷能干嘛"></a>容器数据卷能干嘛</h3><p>将docker容器内的数据保存进宿主机的磁盘中，完成敏感数据和重要数据的持久化和备份</p>
<p>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。为了能保存数据在Docker中我们使用卷。</p>
<p><strong>特点:</strong></p>
<ul>
<li><p>数据卷可在容器之间共享或重用数据</p>
</li>
<li><p>卷中的更改可以直接生效</p>
<ul>
<li>相较于docker cp更方便</li>
</ul>
</li>
<li><p>数据卷中的更改不会包含在镜像的更新中</p>
</li>
<li><p>数据卷的生命周期一直持续到没有容器使用为止</p>
</li>
</ul>
<p><img src="6.png"></p>
<h3 id="数据卷案例"><a href="#数据卷案例" class="headerlink" title="数据卷案例"></a>数据卷案例</h3><h4 id="宿主-vs-容器之间映射添加容器卷"><a href="#宿主-vs-容器之间映射添加容器卷" class="headerlink" title="宿主 vs 容器之间映射添加容器卷"></a>宿主 vs 容器之间映射添加容器卷</h4><p>直接添加命令</p>
<ul>
<li><p>命令</p>
<p>查看容器卷：<code>sudo docker volume ls</code></p>
<p><code>sudo docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录 镜像名 </code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -it -v /home/william/DYJ/myregistry/:/home/<span class="built_in">test</span> ubuntu /bin/bash</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据卷是否挂载成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@27776923a655:~<span class="comment"># cd /home/test</span></span><br><span class="line">root@27776923a655:/home/<span class="built_in">test</span><span class="comment"># touch hello.txt</span></span><br></pre></td></tr></table></figure>

<p><code>docker inspect 容器ID</code>        将容器的版本、属性信息以Json串的形式暴露</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES</span><br><span class="line">27776923a655   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   18 hours ago   Up 18 hours             tender_kilby</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker inspect 27776923a655</span><br><span class="line">			...</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/william/DYJ/myregistry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/home/test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></li>
<li><p>容器和宿主机之间数据共享</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ <span class="built_in">pwd</span></span><br><span class="line">/home/william/DYJ/myregistry</span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ ls</span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="读写规则映射添加说明"><a href="#读写规则映射添加说明" class="headerlink" title="读写规则映射添加说明"></a>读写规则映射添加说明</h4><ol>
<li><p>读写（默认）</p>
<ul>
<li><code>sudo docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:rw 镜像名</code></li>
<li>默认同上案例，默认就是rw</li>
</ul>
</li>
<li><p>只读</p>
<ul>
<li>容器实例内部被限制，只能读取不能写</li>
<li>如果此时宿主机写入内容，可以同步给容器内，容器可以读取到</li>
<li><code>sudo docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</code></li>
<li>ro = read only</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker run -it --privileged=<span class="literal">true</span> -v /home/william/DYJ/myregistry:/home/<span class="built_in">test</span>:ro ubuntu</span><br><span class="line">[sudo] password <span class="keyword">for</span> william:</span><br><span class="line">root@97b22f619d7d:/<span class="comment"># cd /home/test/</span></span><br><span class="line">root@97b22f619d7d:/home/<span class="built_in">test</span><span class="comment"># ls</span></span><br><span class="line">1.txt  2.txt  3.txt  hello.txt</span><br><span class="line">root@97b22f619d7d:/home/<span class="built_in">test</span><span class="comment"># touch 4.txt</span></span><br><span class="line">touch: cannot touch <span class="string">&#x27;4.txt&#x27;</span>: Read-only file system</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="卷的继承和共享"><a href="#卷的继承和共享" class="headerlink" title="卷的继承和共享"></a>卷的继承和共享</h4><ol>
<li><p>容器1完成和宿主机的映射</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker run -it --privileged=<span class="literal">true</span> -v /home/william/DYJ/myregistry:/home/<span class="built_in">test</span> --name tender_kilby ubuntu</span><br></pre></td></tr></table></figure></li>
<li><p>容器2继承容器1的卷规则</p>
<p><code>docker run -it --privileged=true --volumes-from 父类 --name u2 ubuntu</code></p>
<ul>
<li>父类为要u2容器继承的容器名称</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ docker run -it --privileged=<span class="literal">true</span> --volumes-from u1 --name u2 ubuntu</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~/DYJ/myregistry$ sudo docker run -it --privileged=<span class="literal">true</span> --volumes-from tender_kilby --name u2 ubuntu</span><br><span class="line"></span><br><span class="line">root@20699ce4cbc1:/<span class="comment"># cd /home/test/</span></span><br><span class="line"></span><br><span class="line">root@20699ce4cbc1:/home/<span class="built_in">test</span><span class="comment"># ls</span></span><br><span class="line">1.txt  2.txt  3.txt  hello.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>容器1停止后，容器2还会和宿主机挂载同样的路径</li>
<li>容器1恢复后，会同步容器2和宿主机的文件</li>
</ul>
</li>
</ol>
<h2 id="Docker常规安装简介"><a href="#Docker常规安装简介" class="headerlink" title="Docker常规安装简介"></a>Docker常规安装简介</h2><h3 id="总体步骤"><a href="#总体步骤" class="headerlink" title="总体步骤"></a>总体步骤</h3><ul>
<li>搜索镜像</li>
<li>拉去镜像</li>
<li>查看镜像</li>
<li>启动镜像</li>
<li>停止容器</li>
<li>移除容器</li>
</ul>
<h3 id="安装-tomcat"><a href="#安装-tomcat" class="headerlink" title="安装 tomcat"></a>安装 tomcat</h3><ol>
<li><p>docker hub上查找镜像</p>
<p>或者使用命令<code>docker search tomcat</code></p>
</li>
<li><p>从docker hub上拉取tomcat镜像到本地</p>
<p><code>docker pull tomcat</code></p>
</li>
<li><p>docker images查看是否有拉取到的tomcat</p>
<p><code>docker images tomcat</code></p>
</li>
<li><p>使用tomcat镜像创建容器实例（也叫运行镜像）</p>
<p><code>docker run -it -p 8080:8080 tomcat</code></p>
<ul>
<li>-p 小写，主机端口:docker容器端口</li>
<li>-P 大写，随机分配端口</li>
<li>-i 交互</li>
<li>-t 终端</li>
<li>-d 后台</li>
</ul>
<p>通过-P进行演示：主机端口为49153映射到tomcat容器端口8080</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@arch ~]$ sudo docker run -it -P tomcat</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[william@arch ~]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">22747fb85b75   tomcat        <span class="string">&quot;catalina.sh run&quot;</span>        22 hours ago   Up 22 hours   0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp   lucid_mccarthy</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>访问tomcat首页</p>
<ul>
<li><p><strong>问题</strong>：访问 192.168.80.130:49153 出现 404 错误</p>
</li>
<li><p>解决方法：</p>
<ul>
<li>可能没有映射端口或者没有关闭防火墙</li>
<li>把 webapps.dist 目录换成 webapps</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看tomcat容器ID</span></span><br><span class="line">[william@arch ~]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">22747fb85b75   tomcat        <span class="string">&quot;catalina.sh run&quot;</span>        22 hours ago   Up 22 hours   0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp   lucid_mccarthy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入该容器</span></span><br><span class="line">[william@arch ~]$ sudo docker <span class="built_in">exec</span> -it 22747fb85b75 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除/usr/local/tomcat 目录下的webapps目录</span></span><br><span class="line">root@22747fb85b75:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># rm -rf webapps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将webapps.dist更改为webapps</span></span><br><span class="line">root@22747fb85b75:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># mv webapps.dist/ webapps</span></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\William\AppData\Roaming\Typora\typora-user-images\image-20220803125107969.png" alt="image-20220803125107969"></p>
</li>
</ul>
</li>
<li><p>免修改版说明</p>
</li>
</ol>
<ul>
<li><p>安装tomcat8</p>
<p><code>docker pull billygoo/tomcat8-jdk8</code></p>
</li>
<li><p>运行tomcat8</p>
<p><code>docker run -d -p 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8</code></p>
</li>
</ul>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><ol>
<li><p>docker hub 上面查找mysql镜像</p>
<p>或者<code>docker search mysql</code></p>
</li>
<li><p>从docker hub上（阿里云加速器）拉去mysql镜像到本地标签为5.7</p>
<p><code>docker pull mysql:5.7</code></p>
</li>
<li><p>使用mysql5.7镜像创建容器（也叫运行镜像）</p>
<ul>
<li><p>使用命令出处 <strong>hub.docker.com/_/mysql</strong></p>
<p><code>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</code></p>
<p><font color="Darkorange"><strong>docker启动的端口号，可能被主机占用了，导致docker起不来</strong></font></p>
<p>进入mysql</p>
<p><code>docker exec -it some-mysql /bin/bash</code></p>
<p><code>mysql -uroot -p</code></p>
</li>
<li><p>简单版（不推荐）</p>
<ul>
<li><p>建库、建表插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use db01;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; create table aa(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into aa values(1,&#x27;z3&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>外部Win11连接运行在docker上的mysql容器实例服务</p>
</li>
<li><p>问题</p>
<ul>
<li><p>插入中文数据时报错：</p>
<p>docker上默认字符集编码隐患</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;character%&#x27;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>删除容器后，里面的mysql数据怎么办？</p>
<p>删除后就该跑路了</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>实战版</p>
<ul>
<li><p>新建mysql容器实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@arch ~]$ docker run -d -p 3306:3306 --privileged=<span class="literal">true</span> -v /home/william/DYJ/docker/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql -v /home/william/DYJ/docker/mysql/data:/var/lib/mysql -v /home/william/DYJ/docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql mysql:5.7</span><br></pre></td></tr></table></figure>

<p>记录一次启动mysql失败的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@arch ~]$ sudo docker run -d -P --privileged=<span class="literal">true</span> -v /home/william/DYJ/docker/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql -v /home/william/DYJ/docker/mysql/data:/var/lib/mysql -v /home/william/DYJ/docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql1 mysql:5.7</span><br><span class="line">docker: Error response from daemon: Conflict. The container name <span class="string">&quot;/mysql1&quot;</span> is already <span class="keyword">in</span> use by container <span class="string">&quot;2651888e8211ebe53a49bdea5c8ea8a3a41b08d83cea5d92ac8ba509830b1610&quot;</span>. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示这个容器已经被使用，必须删除或者重命名才能使用该容器。如果我们使用docker ps 会发现下面更本没有容器</span></span><br><span class="line"></span><br><span class="line">[william@arch ~]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用docker ps -l 则会显示最新创建的容器包括所有状态</span></span><br><span class="line">[william@arch ~]$ sudo docker ps -l</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS    PORTS     NAMES</span><br><span class="line">2651888e8211   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 minutes ago   Created             mysql1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后便可启动</span></span><br><span class="line">[william@arch ~]$ sudo docker rm 2651888e8211</span><br></pre></td></tr></table></figure></li>
<li><p>新建my.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@arch conf]$ <span class="built_in">cd</span> /home/william/DYJ/docker/mysql/conf</span><br><span class="line"></span><br><span class="line">[william@arch conf]$ vim my.cnf</span><br><span class="line"></span><br><span class="line">[william@arch conf]$ cat my.cnf</span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server=utf8_general_ci</span><br><span class="line">character_set_server=utf8</span><br></pre></td></tr></table></figure></li>
<li><p>重新启动mysql容器实例，再重新进入并查看字符编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@arch conf]$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                                                                        NAMES</span><br><span class="line">75eba7aaa729   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   6 minutes ago   Up 6 minutes   0.0.0.0:49155-&gt;3306/tcp, :::49155-&gt;3306/tcp, 0.0.0.0:49154-&gt;33060/tcp, :::49154-&gt;33060/tcp   mysql1</span><br><span class="line">22747fb85b75   tomcat      <span class="string">&quot;catalina.sh run&quot;</span>        29 hours ago    Up 29 hours    0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp                                                  lucid_mccarthy</span><br><span class="line">57a82b1d18d4   ubuntu      <span class="string">&quot;/bin/bash&quot;</span>              2 weeks ago     Up 2 weeks                                                                                                  busy_jennings</span><br><span class="line">[william@arch conf]$ sudo docker restart 75eba7aaa729</span><br><span class="line">75eba7aaa729</span><br><span class="line"></span><br><span class="line">[william@arch conf]$ sudo docker <span class="built_in">exec</span> -it 75eba7aaa729 bash</span><br><span class="line"></span><br><span class="line">bash-4.2<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.39 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;character%&#x27;</span>;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>新建库新建表，再插入中文测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use db01;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; create table bb(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 没法打中文的话，就远程连接</span><br><span class="line">mysql&gt; GRANT ALL ON *.* TO user@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into bb values(1,&#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bb;</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | name   |</span><br><span class="line">+------+--------+</span><br><span class="line">|    1 | 张三   |</span><br><span class="line">+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li><p>结论：</p>
<ul>
<li><font color="Darkorange">docker安装完MySQL并run出容器后，建议请先修改完字符集编码后，再新建mysql库-表-插入数据</font></li>
<li>数据库最好指定端口号，不要使用-P</li>
</ul>
</li>
<li><p>假如将当前容器实例删除，再重来一次，之前建的db01实例还有吗？</p>
<p>依然存在</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><ol>
<li><p>从docker hub上（阿里云加速器）拉取redis镜像到本地标签为6.0.8</p>
<p>或者<code>docker pull redis:6.0.8</code></p>
</li>
<li><p>入门命令</p>
<p><code>docker run -d -p 6379:6379 redis:6.0.8</code></p>
<p><code>docker exec -it e6df68a8353a /bin/bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@e6df68a8353a:/data<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>命令提醒：容器卷记得加入 <code>--privileged=true</code></p>
</li>
<li><p>在CentOS宿主机下新建目录<code>/app/redis</code></p>
<p><code>mkdir -p /app/redis</code></p>
</li>
<li><p>将一个redis.conf文件模板拷贝进<code>/app/redis</code>目录下</p>
<p><code>cp /home/william/DYJ/redis-6.0.8/redis.conf /app/redis</code></p>
</li>
<li><p><code>/app/readis</code>目录下修改redis.conf文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.允许redis外地连接</span><br><span class="line">注释掉 #bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 2.将daemonize yes 设置成 no，或者注释掉（因为该配置和docker run中 -d 参数冲突，会导致容器一直启动失败）</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 3.开启redis数据持久化（可选）</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 4.关闭保护模式（可选）</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></li>
<li><p>使用redis6.0.8镜像创建容器（也叫运行镜像）</p>
<p><code>sudo docker run -p 6379:6379 --name redis --privileged=true -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker run -p 6379:6379 --name redis --privileged=<span class="literal">true</span> -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">e64e1fb8ed15a85e0fcaf7a68a0ea15ce1f14a8d78b49b3ae7b3851f172f7262</span><br><span class="line"></span><br><span class="line">william@william-ARM-Ubuntu:~$ sudo docker ps</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">e64e1fb8ed15   redis:6.0.8   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   14 seconds ago   Up 13 seconds   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   redis</span><br><span class="line">3bbcd1f874b5   registry      <span class="string">&quot;/entrypoint.sh /etc…&quot;</span>   8 days ago       Up 8 days       0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   youthful_knuth</span><br></pre></td></tr></table></figure></li>
<li><p>测试redis-cli连接上来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">william@william-ARM-Ubuntu:~$ sudo docker <span class="built_in">exec</span> -it redis /bin/bash</span><br><span class="line"></span><br><span class="line">root@e64e1fb8ed15:~<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>请证明docker启动使用了我们自己指定的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.将宿主机的 redis.conf 中 databases 16 更改为 10</span></span><br><span class="line">databases 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.在docker redis-cli中输入</span></span><br><span class="line">127.0.0.1:6379[10]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[10]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过这种方式可以证明docker使用了我们自己指定的配置文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Happy Birthday</title>
    <url>/2021/11/22/Happy-Birthday/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天是我的生日，其实我不喜欢过生日。因为除了我妈没有人记得，也没有人在乎过。</p>
<p>记得小时候，我12岁的生日我记得很清楚，因为那天我奶奶祭祖，我感觉很隆重，我爸还请了亲戚们吃饭。但我似乎并不是这次的主角，除了大姐没有人跟我说生日快乐。</p>
<p>最让我感动的一次生日是大一的时候，因为那次我和一个好友的生日是同一天。他下午给我送了礼物，但是我并不在寝室，于是让细心的室友发现了我的“秘密”。</p>
<span id="more"></span>

<p>那天天气很冷，我上完晚课加上去实验室自习已是晚上十点。其实那天我猜到了室友可能知道我的生日了，当我回到寝室时，还是被感动的落了泪。第一次有人给我真正的过生日，还给我买了蛋糕。</p>
<p>简单却温馨</p>
<p>好像很多人都不爱过生日，因为没人记得，没人会记得，因为很麻烦，会尴尬，因为没有钱，送不起。</p>
<p>但其实我们要的不是礼物，仅仅是一句生日快乐。</p>
<p>今天又是我的生日了，没有告诉别人，下班的时候偷偷给自己买了个蛋糕。其实，你不说别人怎么会记得呢，不过一个人有时候也挺好的。</p>
<p>一个普通平常的一天，如果自己都忘了，谁又能重视呢。</p>
<p>生日快乐！！！</p>
<p><img src="1.jpeg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo next 加搜索功能（Algolia）</title>
    <url>/2021/01/05/Hexo-next-%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%EF%BC%88Algolia%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Algolia-注册帐号"><a href="#Algolia-注册帐号" class="headerlink" title="Algolia 注册帐号"></a>Algolia 注册帐号</h3><ol>
<li><p>在 <a href="https://www.algolia.com/">algolia</a> 注册登录后，打开 <code>dashboard</code><br>Indices -&gt; new index，注意 indexName 中不要有英文引号，避免不必要的麻烦</p>
</li>
<li><p>API Keys 中查看 id/keys，需要：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Application ID</span><br><span class="line"><span class="keyword">Search</span>-<span class="keyword">Only</span> API Key</span><br><span class="line"><span class="keyword">Admin</span> API Key</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<h3 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h3><p>在 <code>_config.yml</code> 中添加配置：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">algolia:</span></span><br><span class="line"><span class="symbol">  applicationID:</span> 上面的 Application ID</span><br><span class="line"><span class="symbol">  apiKey:</span> 上面的 Search-Only API Key</span><br><span class="line"><span class="symbol">  indexName:</span> 上面创建的 new index 的 indexName</span><br></pre></td></tr></table></figure>

<h3 id="安装-hexo-algolia"><a href="#安装-hexo-algolia" class="headerlink" title="安装 hexo-algolia"></a>安装 hexo-algolia</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-algolia <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>algolia 官网声明，Admin API Key 不能写在配置里，会有风险，写到环境变量中(Mac):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> algolia Admin API Key</span></span><br><span class="line">export HEXO_ALGOLIA_INDEXING_KEY=你的 Admin API Key</span><br></pre></td></tr></table></figure>

<h3 id="生成-algolia-索引"><a href="#生成-algolia-索引" class="headerlink" title="生成 algolia 索引"></a>生成 algolia 索引</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo algolia</span></span><br></pre></td></tr></table></figure>

<p>提示成功后可以在 algolia Indices 中看到你的博客记录</p>
<h3 id="修改-next-配置"><a href="#修改-next-配置" class="headerlink" title="修改 next 配置"></a>修改 next 配置</h3><p>themes/next/_config.yml 中修改：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Algolia Search</span></span><br><span class="line"><span class="symbol">algolia_search:</span></span><br><span class="line"><span class="symbol">  enable:</span> true</span><br><span class="line"><span class="symbol">  hits:</span></span><br><span class="line"><span class="symbol">    per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    input_placeholder:</span> 请输入关键字</span><br><span class="line"><span class="symbol">    hits_empty:</span> <span class="string">&quot;没有找到与 $&#123;query&#125; 相关的内容&quot;</span></span><br><span class="line"><span class="symbol">    hits_stats:</span> <span class="string">&quot;$&#123;hits&#125; 条相关记录，共耗时 $&#123;time&#125;ms&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作命令</title>
    <url>/2021/10/10/Git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>创建仓库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用固定目录作为本地仓库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init 目录</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提交</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git add 具体文件</span><br><span class="line">git commit -m <span class="string">&quot;说明文案&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<blockquote>
<p>克隆远程仓库到本地</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git 地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>显示当前 git 配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置提交用户名 - 全局</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;runoob&quot;</span></span><br><span class="line">git config --global user.enail <span class="built_in">test</span>@runoob.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>简单命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 				添加文件到仓库</span><br><span class="line">git status				查看仓库当前的状态，显示有变更的文件</span><br><span class="line">git diff				比较文件得不同，即暂存区和工作区得差异</span><br><span class="line">git commit				提交暂存区到本地仓库</span><br><span class="line">git reset				回退版本</span><br><span class="line">git rm					删除工作区文件</span><br><span class="line">git mv					移动或重命名工作文件</span><br><span class="line">git <span class="built_in">log</span>					查看历史提交记录</span><br><span class="line">git blame &lt;file&gt; 		以列表形式查看指定文件得历史修改记录</span><br><span class="line">git remote				远程仓库操作</span><br><span class="line">git fetch				从远程获取代码库</span><br><span class="line">git pull				下载远程代码并合并</span><br><span class="line">git push				上传远程代码并合并</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分支管理</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建分支：git branch 分支名</span><br><span class="line">切换分支：git checkout 分支名</span><br><span class="line">合并分支：git merge</span><br><span class="line">列出所有分支：git branch</span><br><span class="line">创建分支别切换：git checkout -b 分支名</span><br><span class="line">删除分支：git branch -d 分支名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分支合并</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge 新分支</span><br></pre></td></tr></table></figure>

<blockquote>
<p>冲突管理</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff		查看冲突git commit -am <span class="string">&quot;修改代码说明&quot;</span>git merge 		新分支名cat 冲突文件名手动修改后git status -sgit add 冲突文件名git commit 提交</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Git 查看提交历史</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --onelinegit blame 文件名</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>KDE延时壁纸</title>
    <url>/2019/11/07/KDE%E5%BB%B6%E6%97%B6%E5%A3%81%E7%BA%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>原文: <a href="https://blog.brucezhang.cf/2018/12/07/kde-dynamic-wallpaper.html">https://blog.brucezhang.cf/2018/12/07/kde-dynamic-wallpaper.html</a></p>
<h4 id="1-获取并整理图片"><a href="#1-获取并整理图片" class="headerlink" title="1. 获取并整理图片"></a>1. 获取并整理图片</h4><p><img src="DeepinScreenshot_select-area_20191107175922.png"></p>
<p>你也可以在这里找到所有的资源 <a href="https://www.reddit.com/r/apple/comments/8oz25c/all_16_full_resolution_macos_mojave_dynamic/">Reddit Page</a>，然后按上面的格式排列一下所有的图片，文件名里面的数字表示当前的小时数，你可以根据自己的喜好调整黑夜的时长哦，反正晚上就用最黑的那张就好了。</p>
<span id="more"></span>

<h4 id="2-编写脚本"><a href="#2-编写脚本" class="headerlink" title="2. 编写脚本"></a>2. 编写脚本</h4><p>首先，第一个脚本是用来修改所有桌面的壁纸的脚本，是其他网友分享的脚本，可以保存为 /home/你的用户名/bin/ksetwallpaper ，后文以此路径为例，请注意对应修改为你的路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env python3</span></span><br><span class="line">import dbus</span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line">jscript = &quot;&quot;&quot;</span><br><span class="line">var allDesktops = desktops();</span><br><span class="line">print (allDesktops);</span><br><span class="line">for (i=0;i&lt;allDesktops.length;i++) &#123;</span><br><span class="line">    d = allDesktops[i];</span><br><span class="line">    d.wallpaperPlugin = &quot;org.kde.image&quot;;</span><br><span class="line">    d.currentConfigGroup = Array(&quot;Wallpaper&quot;, &quot;org.kde.image&quot;, &quot;General&quot;);</span><br><span class="line">    d.writeConfig(&quot;Image&quot;, &quot;file://%s&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=&#x27;KDE Wallpaper setter&#x27;)</span><br><span class="line">parser.add_argument(&#x27;file&#x27;, help=&#x27;Wallpaper file name&#x27;)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bus = dbus.SessionBus()</span><br><span class="line">plasma = dbus.Interface(bus.get_object(&#x27;org.kde.plasmashell&#x27;, &#x27;/PlasmaShell&#x27;), </span><br><span class="line">dbus_interface=&#x27;org.kde.PlasmaShell&#x27;)</span><br><span class="line"></span><br><span class="line">plasma.evaluateScript(jscript % args.file)</span><br></pre></td></tr></table></figure>



<p>写入这个脚本以后，执行 chmod +x /home/你的用户名/bin/ksetwallpaper 添加可执行权限。</p>
<p>然后是第二个脚本，目的是获取当前的小时数并且设置壁纸和锁屏壁纸。</p>
<p>保存为 /home/你的用户名/bin/wallpaper_timechange</p>
<p>(假设你的壁纸保存路径为 /home/你的用户名/Pictures/Wallpapers/mojave_dynamic)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/env bash</span></span><br><span class="line">hour=$(date &quot;+%H&quot;)</span><br><span class="line">/home/你的用户名/bin/ksetwallpaper /home/你的用户名/Pictures/Wallpapers/mojave_dynamic/mojave_dynamic_$&#123;hour&#125;.jpeg</span><br><span class="line">kwriteconfig5 --file kscreenlockerrc --group Greeter --group Wallpaper --group org.kde.image --group General --key Image &quot;/home/你的用户名/Pictures/Wallpapers/mojave_dynamic/mojave_dynamic_$&#123;hour&#125;.jpeg&quot;</span><br></pre></td></tr></table></figure>



<p>然后依然是给这个脚本添加可执行权限 chmod +x /home/你的用户名/bin/wallpaper_timechange</p>
<h4 id="3-编写用户单元和定时器"><a href="#3-编写用户单元和定时器" class="headerlink" title="3. 编写用户单元和定时器"></a>3. 编写用户单元和定时器</h4><p>这里当然要用上超级好用的 SYSTEMD! (Selling my underpants!)</p>
<p>我们要新建一个用户单元用于执行换壁纸的任务，另一个用户定时器用来定时执行前面的脚本。</p>
<p>首先，我们新建一个文件，假如文件路径为 /home/你的用户名/.config/systemd/user/wallpaper-hourly.service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Set wallpaper according to hour</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/home/你的用户名/bin/wallpaper_timechange</span><br></pre></td></tr></table></figure>

<p>这个脚本很简单，运行它就执行一遍换壁纸脚本。</p>
<p>第二个就是定时脚本，我们可以很方便的使用 systemd 编写定时器任务 (See U Crontab)，再假如文件路径为 /home/你的用户名/.config/systemd/user/wallpaper-hourly.timer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Change wallpaper hourly</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line"># OnBootSec=10sec</span><br><span class="line">OnActiveSec=5sec</span><br><span class="line">OnCalendar=hourly</span><br><span class="line">Persistent=true</span><br><span class="line">Unit=wallpaper-hourly.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br></pre></td></tr></table></figure>

<p>这个定时器指定了两个任务，一个是 OnBootSec，任务是开机后 10 秒执行，另一个是小时周期任务，预订为每小时 0 分 0 秒执行，安排上了！</p>
<p>保存这两个文件以后，记住两个脚本的名称～</p>
<p>然后进入终端，运行下面的命令们</p>
<blockquote>
<p> systemctl –user daemon-reload # 重载用户单元</p>
</blockquote>
<blockquote>
<p>systemctl –user enable wallpaper-hourly.timer # 开机自启动定时器</p>
</blockquote>
<blockquote>
<p> systemctl –user start wallpaper-hourly.timer # 运行定时器</p>
</blockquote>
<p>然后可以使用 systemctl –user status wallpaper-hourly.timer 检查一下是否正常启动，然后可以看到下次执行时间的显示如下<br> …<br>Trigger: Fri 2018-12-07 22:00:00 CST; 29min left<br>…<br>表示下次执行时间为 2018-12-07 的 22 点整。</p>
<p>然后你的壁纸就会开始跟随你的系统时间变化哦。</p>
<p>当然，下一步还有更加棒的完善哦，比如 SDDM 背景的修改 (也许能行吧FLAG)，还有就是判断当前的日出日落时间调整，夏令时的调整 (Just imagine..)</p>
<p>UPDATE 1:</p>
<p>可以修改条件为 OnActiveSec=5sec 指定 timers 运行后 5 秒运行一次任务。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>KDE</category>
      </categories>
      <tags>
        <tag>延时壁纸</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter使用教程</title>
    <url>/2021/05/27/Jmeter%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="JMeter-工具使用"><a href="#JMeter-工具使用" class="headerlink" title="JMeter 工具使用"></a>JMeter 工具使用</h2><h3 id="主要组件介绍"><a href="#主要组件介绍" class="headerlink" title="主要组件介绍"></a>主要组件介绍</h3><ul>
<li><p><strong>测试计划：</strong>使用 JMeter 进行测试的起点，它是其它 JMeter 测试元件的容器。</p>
</li>
<li><p><strong>线程组：</strong>代表一定数量的并发用户，它可以用来模拟并发用户发送请求。实际的请求内容在Sampler中定义，它被线程组包含。可以在“测试计划-&gt;添加-&gt;线程组”来建立它，然后在线程组面板里有几个输入栏：线程数、Ramp-Up Period(in seconds)、循环次数，其中Ramp-Up Period(in seconds)表示在这时间内创建完所有的线程。如有8个线程，Ramp-Up = 200秒，那么线程的启动时间间隔为200/8=25秒，这样的好处是：一开始不会对服务器有太大的负载。线程组是为模拟并发负载而设计。</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p><strong>取样器（Sampler）：</strong>模拟各种请求。所有实际的测试任务都由取样器承担，存在很多种请求。如：HTTP 、ftp请求等等。</p>
</li>
<li><p><strong>监听器：</strong>负责收集测试结果，同时也被告知了结果显示的方式。功能是对取样器的请求结果显示、统计一些数据（吞吐量、KB/S……）等。</p>
</li>
<li><p><strong>断言：</strong>用于来判断请求响应的结果是否如用户所期望，是否正确。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。</p>
</li>
<li><p><strong>逻辑控制器：</strong>允许自定义JMeter发送请求的行为逻辑，它与Sampler结合使用可以模拟复杂的请求序列。</p>
</li>
<li><p><strong>定时器：</strong>负责定义请求（线程）之间的延迟间隔，模拟对服务器的连续请求。</p>
</li>
<li><p><strong>配置元件：</strong>维护Sampler需要的配置信息，并根据实际的需要会修改请求的内容。</p>
</li>
<li><p><strong>前置处理器和后置处理器：</strong>负责在生成请求之前和之后完成工作。前置处理器常常用来修改请求的设置，后置处理器则常常用来处理响应的数据。</p>
</li>
</ul>
<h3 id="测试计划-Test-Plan"><a href="#测试计划-Test-Plan" class="headerlink" title="测试计划 Test Plan"></a>测试计划 Test Plan</h3><p>用来描述一个性能/接口测试脚本和场景设计，包含与本次测试所有相关的功能。也就是说，使用jmeter进行测试的所有内容都是于基于一个测试计划的。</p>
<p><img src="2.png"></p>
<p><strong>测试计划名称和注释：</strong>整个测试脚本保存的名称，和对该测试计划的注释，可以自定义，最好能表达脚本的意义。</p>
<p><strong>用户定义的变量：</strong>在测试计划上可以添加用户定义的变量，相当于是全局变量。一般添加一些系统常用的配置。如果测试过程中想切换环境，切换配置，<strong>一般不建议在测试计划上添加变量，因为不方便启用和禁用，一般是直接添加用户自定义变量组件</strong>。如下所示：</p>
<p><img src="3.png"></p>
<p>**独立运行每个线程组： **用于控制测试计划中的多个线程组的执行顺序。不勾选时，默认各线程组并行、随机执行。如下图，线程组1和线程组2的线程是并行执行的，执行过程线程的执行顺序是不可预料的。</p>
<p><img src="4.png"></p>
<p>如果勾选了独立运行每个线程组，可以保证线程组1的执行一定在线程组2之前，线程组1执行完毕，才会执行线程组2，即顺序执行各线程组。</p>
<p><em><strong>补充说明：</strong></em></p>
<p>线程组中的取样器的执行顺序：<strong>默认是从上到下执行</strong>。交替控制器、随机控制器、随机顺序控制器和循环控制器等可以改变取样器的执行顺序。</p>
<p><strong>主线程结束后，运行tearDown线程组（Run tearDown Thread Groups after shutdown of main threads）</strong></p>
<p>当线程组停止运行时仍继续运行tearDown线程组，该选项结合线程组的执行配置使用</p>
<p><strong>函数测试模式（Functional Testing）</strong></p>
<p> 如果选中了此选项，同时监听组件如“查看结果树”配置了保存到一个文件中，那么jmeter会将每次的请求结果保存到文件中。一般不建议勾选。</p>
<p><strong>添加目录或jar包到classpath（Add directory or jar to classpath）</strong></p>
<p>添加文件或jar包，此功能最常用于调用外部jar包。当脚本需要调用外部的java文件或jar包时，可以把jar包路径添加到这里，然后在beanshell中直接import进来，并调用jar包中的方法。</p>
<h3 id="线程组-Thread-Group"><a href="#线程组-Thread-Group" class="headerlink" title="线程组  Thread Group"></a>线程组  Thread Group</h3><p>一个性能测试请求是基于一个线程组完成的，一个测试计划必须至少有一个线程组。</p>
<p>一个计划中可创建一个或多个线程组，在测试计划中，多个线程组是并行执行的。也就是说这些线程组是同时被初始化并同时执行线程组下的Sampler的</p>
<p><img src="1.png"></p>
<p><strong>区域1</strong></p>
<ul>
<li>继续：继续执行接下来的操作</li>
<li>Start Next Loop（启动下一进程循环）：忽略错误，执行下一个循环</li>
<li>停止线程：退出该线程（不z再进行此线程的任何操作）</li>
<li>停止测试：等待当前执行的采样器结束后，结束整个测试</li>
<li>Stop Test Now：直接停止整个测试</li>
</ul>
<p><strong>区域2</strong></p>
<ul>
<li><p>线程数：模拟的用户数量。线程数也就是并发数，每个线程将会完全独立的运行测试计划，互不干扰。多个线程用于模仿对服务器的并发访问</p>
</li>
<li><p>Ramp-up Period（in seconds）：达到指定线程数所需要的时间。<code>举例：线程数设置为50，此处设置为5，那么 每秒启动的线程数 = 线程数50/5 = 10</code></p>
<p>当这个值设置的很小、线程数又设置的很大时，在刚开始执行时会对服务器产生很大的负荷</p>
</li>
<li><p>循环次数：选中“永远”，则一直循环下去。</p>
</li>
<li><p>延迟创建线程直到需要（Delay Thread creation until needed）：当线程需要执行的时候，才会被创建。如果不选择这个选项，那么，在计划开始的时候，所有需要的线程就都被创建好了。</p>
</li>
<li><p>调度器：配合区域3说明吧。</p>
</li>
</ul>
<p><strong>区域3</strong></p>
<ul>
<li>持续时间（秒）：在此选项填入N，说明这个计划，从某个开始时间算起，执行N秒后结束。（会忽略 结束时间 的选项）</li>
<li>启动延迟（秒）：在此选项填入N，手动点击开始执行计划，然后延迟N秒后，计划才真正开始执行。（会忽略 启动时间 的选项）</li>
<li>启动时间：当点击开始测试时，将等到此处填写的启动时间，然后真正开始测试。</li>
<li>结束时间：当开始测试时，将等到指定的开始时间开始测试，然后会停在此处填写的时间点结束。</li>
</ul>
<p>调度器</p>
<ul>
<li>如果不想立即执行执行，可以通过调度器控制测试执行的开始时间和结束时间。</li>
<li>当测试开始时，如果设置了调度器，JMeter将等待直到到了开始时间。在每个周期结束，JMeter将会检查是否到达结束时间，如果达到，停止运行；否则测试继续运行直到达到了重复限制。</li>
</ul>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p><img src="5.webp"></p>
<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>监听器(Listener)负责收集测试结果，同时也被告知了结果显示的方式。</p>
<p>我们常用的包括：聚合报告、查看结果树、用表格查看结果，都支持将结果数据写入文件。其他的添加上去看看就行。聚合报告前面我们介绍过，后面是查看结果树和用表格查看结果的截图。</p>
<p><img src="6.webp"></p>
<h3 id="参数化方法"><a href="#参数化方法" class="headerlink" title="参数化方法"></a>参数化方法</h3><p><strong>用户参数</strong></p>
<p>场景：批量注册不同的帐号，参数为用户名、密码、年级等可使用用户参数的方法，这是JMeter自带的方法。</p>
<p>方法：右键单击线程组-&gt;前置处理器-&gt;用户参数</p>
<p><img src="%E7%94%A8%E6%88%B7%E5%8F%82%E6%95%B01.png"></p>
<p>格式：${参数名}</p>
<p><img src="%E5%8F%82%E6%95%B0%E5%8C%962.png"></p>
<p>运行结果</p>
<p><img src="%E5%8F%82%E6%95%B0%E5%8C%963.png"></p>
<p><strong>CSVREAD函数</strong></p>
<p>调用一个自带的自定义函数CSVREAD函数，用于读取CSV文件。</p>
<p>CSV文件的特点是以逗号分隔</p>
<ol>
<li>创建一个CSV文件，最好与 xxxx.jmx 文件放在同一级目录下。使用绝对路径可能会出现问题</li>
<li>CSVREAD函数使用方法<ul>
<li>工具-&gt;函数助手对话框-&gt;函数助手，选择CSVRead函数</li>
<li>填入文件名和文件列号</li>
<li>点击生成</li>
<li>复制函数字符串</li>
</ul>
</li>
</ol>
<p><img src="CSV1.png"></p>
<ol start="3">
<li><p>将函数字符串粘贴到请求信息中</p>
<p><img src="CSV3.png"></p>
</li>
<li><p>运行结果</p>
<p><img src="CSV4.png"></p>
</li>
</ol>
<p><strong>CSV DATA SET CONFIG</strong></p>
<ol>
<li>添加 CSV data set config：右键单击线程组-&gt;添加-&gt;配置元件-&gt;CSV Data Set Config</li>
<li>填入文件名（filename）、编码方式（file encoding）、变量名（以逗号分隔）</li>
</ol>
<p><img src="csvdata1.png"></p>
<p>是否允许带引号（Allow quoted data）：默认不考虑（false），如果数据中有”123,456”，不考虑引号的话，则会按照逗号分隔。如果考虑引号，逗号不会被分隔，即123,456为一个整体。</p>
<p>格式${变量名}</p>
<p><img src="csvdata2.png"></p>
<p>运行结果</p>
<p><img src="csvdata3.png"></p>
<h3 id="Cookie管理器"><a href="#Cookie管理器" class="headerlink" title="Cookie管理器"></a>Cookie管理器</h3><p>场景：只有登录之后才能查看个人动态，所以此时需要使用到cookie</p>
<ul>
<li><p>不添加cookie</p>
<p>不添加cookie时，即使是同一个用户在请求不同接口，服务器并不能知道当前发起请求的人是谁。所以，虽然同一个人登录了，再次请求查看个人动态时，服务器会提示用户未登录。</p>
</li>
<li><p>添加HTTP cookie管理器（在线程组里面添加，添加位置任意，不需要做任何配置）</p>
<p>作用：会获取发起登录请求时的cookie信息，当同一个人再次发起请求（比如查看个人动态）时，cookie信息就会被传入。关联纽带是同一个用户。</p>
<p><code>登录与其他请求需要在同一个线程组内</code></p>
</li>
</ul>
<h3 id="逻辑控制器"><a href="#逻辑控制器" class="headerlink" title="逻辑控制器"></a>逻辑控制器</h3><p><strong>循环控制器</strong></p>
<ul>
<li>循环控制器可以设置请求的循环次数或永久循环</li>
<li>作用：该控制器下的取样器请求可以循环运行</li>
</ul>
<p><strong>事务控制器</strong></p>
<ul>
<li><p>作用： 事务控制器会生产一个额外的采样器，用来统计该控制器子结点的所有时间。<br>在线程组下创建事务控制器</p>
</li>
<li><p>参数</p>
<ul>
<li> Generate parent sample：(选中这个参数结果展示如下图红框，否则显示为下图蓝框)</li>
<li> Include duration of timer and pre-post processors in generated sample：选中这一项会统计定时器(timer)的时间，否则只统计采样器(sample)的时间</li>
</ul>
</li>
<li><p>事务控制器可以将对各请求放在同一个事务中。如果选中Generate parent sample，则聚合报告中只显示事务控制器的数据，而不会显示其中的各个请求的数据，反之则全部显示。</p>
</li>
</ul>
<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>断言(Assertions)可以用来判断请求响应的结果是否如用户所期望的。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。<br> 两个重要断言：响应断言和JSONAssertion</p>
<p><img src="/5.png"></p>
<h3 id="前置-后置处理器"><a href="#前置-后置处理器" class="headerlink" title="前置/后置处理器"></a>前置/后置处理器</h3><p>前置处理器(Pre Processors)和后置处理器(Post Processors)负责在生成请求之前和之后完成工作。前置处理器常常用来修改请求的设置，后置处理器则常常用来处理响应的数据。我们主要在动态关联中用到后置处理器的正则表达式提取器。<br> <a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/fengpingfan/p/4755411.html">https://www.cnblogs.com/fengpingfan/p/4755411.html</a></p>
<h3 id="聚合报告"><a href="#聚合报告" class="headerlink" title="聚合报告"></a>聚合报告</h3><p><img src="%E8%81%9A%E5%90%88%E6%8A%A5%E5%91%8A.png"></p>
<ul>
<li><p>样本：并发量</p>
</li>
<li><p>平均值：平均响应时间</p>
</li>
<li><p>中位数：响应时间的中位数</p>
</li>
<li><p>90%百分位：90％的样品不超过此时间。 剩余的样本至少要花这么长的时间。</p>
</li>
<li><p>95%百分位：95％的样品不超过此时间。 剩余的样本至少要花这么长的时间。</p>
</li>
<li><p>99%百分位：99％的样品不超过此时间。 剩余的样本至少要花这么长的时间。</p>
</li>
<li><p>最小值：最小响应时间</p>
</li>
<li><p>最大值：最大相应时间</p>
</li>
<li><p>异常：本次测试中出现异常的请求的数量/请求的总数量</p>
</li>
<li><p>吞吐量：默认情况下表示每秒完成的请求数</p>
<p><code>吞吐量 = 请求总数 / 总花费时间</code></p>
</li>
<li><p>接收KB/sec：每秒从服务器端接收到的数据量，以kb为计算的单位</p>
</li>
<li><p>发送KB/sec：每秒发送到服务器的数据量，以kb为计算的单位</p>
</li>
</ul>
<p>95%响应时间 2、5、8原则，2秒性能很好，5秒可以接受，8秒快不能接受</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>定时器(Timer)负责定义请求之间的延迟间隔</p>
<p><strong>同步定时器（Synchronizing Timer）：</strong>相当于一个储蓄池，累积一定的请求，当在规定的时间内达到一定的线程数量，这些线程会在同一个时间点一起并发，可以用来做大数据量的并发请求。</p>
<p><img src="7.png"></p>
<p><img src="8.png"></p>
<blockquote>
<p>值得注意的是模拟用户数量和线程数有关。模拟用户数量为3,代表着3个线程一次发送请求。</p>
<p>如果用户数不足，将会一直等待（因为设置超时时间为0，0为一直等待时间。单位为ms）</p>
</blockquote>
<p>并发开始时间基本相同</p>
<p><img src="9.png"></p>
<p><strong>循环并发</strong></p>
<h3 id="图形结果"><a href="#图形结果" class="headerlink" title="图形结果"></a>图形结果</h3><p><strong>作用：</strong>通过图形展示出本次性能测试数据的分布。 图形结果一般作为聚合报告的分析辅佐</p>
<ul>
<li>样本数目：总共发送到服务器的请求数。</li>
<li>最新样本：代表时间的数字，是服务器响应最后一个请求的时间。</li>
<li>吞吐量：服务器每分钟处理的请求数。</li>
<li>平均值：总运行时间除以发送到服务器的请求数。</li>
<li>中间值：有一半的服务器响应时间低于该值而另一半高于该值。</li>
<li>偏离：表示服务器响应时间变化、离散程度测量值的大小。</li>
</ul>
<h3 id="正则表达式提取"><a href="#正则表达式提取" class="headerlink" title="正则表达式提取"></a>正则表达式提取</h3><p>运用Jmeter正则提取器，可以从请求的响应结果中取到需要的内容，从而实现关联。关联是请求与请求之间存在数据依赖关系，需要从上一个请求获取下一个请求需要回传回去的数据<br> **正则表达式(regular expression)**描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>( )</td>
<td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
</tbody></table>
<p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p>
<h3 id="服务器性能监控"><a href="#服务器性能监控" class="headerlink" title="服务器性能监控"></a>服务器性能监控</h3><h4 id="安装JMeter插件管理器-JMeter-Plugins-Manager"><a href="#安装JMeter插件管理器-JMeter-Plugins-Manager" class="headerlink" title="安装JMeter插件管理器 JMeter Plugins Manager"></a>安装JMeter插件管理器 <code>JMeter Plugins Manager</code></h4><p>下载地址：<a href="https://jmeter-plugins.org/wiki/PluginsManager/">https://jmeter-plugins.org/wiki/PluginsManager/</a></p>
<p>将其放在 <code>lib/ext</code>目录下</p>
<p>重启jmeter生效，在选项中，就可以找到plugins manager（插件管理器）</p>
<h4 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h4><p><code>3 Basic Graphs</code>三个基本图表，可以监控：<br>Average Response Time–平均响应时间<br>Active Threads–活动的用户数）<br>Successful/Failed Transactions–成功/失败的事务数</p>
<p><code>5 Additional Graphs</code>五个附加图表，可监控：<br>Response Codes–响应码<br>Bytes Throughput–吞吐量<br>Connect Times–连接时间<br>Latency–latencies over time:主要展示的是负载测试期间的响应延迟时间，延迟时间指的是请求结束到服务器开始响应的这段时间<br>Hits/s–每秒点击数/连接数</p>
<p><code>Custom Thread Groups</code>自定义线程组，jmeter中，一个线程代表一个用户，用于设置用户加载的方式，怎么去增加用户。<br>Adds new Thread Groups–增加新的线程组<br>Stepping Thread Group–步进线程组<br>Ultimate Thread Group–终极线程组<br>Concurrency Thread Group–并发线程组，可以设置梯形的加压方式<br>Arrivals Thread Group–抵达线程组<br>Free-Form Arrivals Thread Group–自由抵达线程组</p>
<p><code>PerfMon (Servers Performance Monitoring)</code>服务器性能监控，允许收集目标服务器资源指标，如cpu，内存，网络，磁盘等。</p>
<p>需要在目标计算机上启动ServerAgent服务。下载地址：<a href="https://github.com/undera/perfmon-agent/blob/master/README.md%E6%8A%8A%E8%BF%99%E5%87%A0%E4%B8%AA%E6%8F%92%E4%BB%B6%E9%83%BD%E5%8B%BE%E4%B8%8A%EF%BC%8C%E7%84%B6%E5%90%8E%E5%AE%89%E8%A3%85%EF%BC%8C%E5%AE%89%E8%A3%85%E5%90%8E%E9%87%8D%E5%90%AF%E5%8D%B3%E5%8F%AF%E4%BD%BF%E7%94%A8%E8%BF%99%E4%BA%9B%E6%8F%92%E4%BB%B6">https://github.com/undera/perfmon-agent/blob/master/README.md把这几个插件都勾上，然后安装，安装后重启即可使用这些插件</a></p>
<p><strong>启动服务方法：</strong><br>运行 CMDRunner.jar 包，启动 jar 包时指定端口为 8085</p>
<p>命令：java -jar CMDRunner.jar –tool PerfMonAgent –udp-port 7777 –tcp-port 8085</p>
<h4 id="如何判断是运维问题还是开发问题"><a href="#如何判断是运维问题还是开发问题" class="headerlink" title="如何判断是运维问题还是开发问题"></a>如何判断是运维问题还是开发问题</h4><p>添加物理资源监控插件，在运行请求时，会动态监测CPU、内存、网络IO等资源。刚开始性能比较低时，CPU压力比较小，当增加压力时，CPU会升高，如果性能不达标，CPU飙升至85%以上就是运维的问题，需要抬升资源。</p>
<p><img src="/home/william/Desktop/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/img/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7.png"></p>
<h4 id="压力测试需要和产品经理进行沟通，询问产品经理到底测试什么场景"><a href="#压力测试需要和产品经理进行沟通，询问产品经理到底测试什么场景" class="headerlink" title="压力测试需要和产品经理进行沟通，询问产品经理到底测试什么场景"></a>压力测试需要和产品经理进行沟通，询问产品经理到底测试什么场景</h4><p><strong>第一种：</strong>先进行测试，出结果后再定测试方向和目标。</p>
<ul>
<li>需要去询问运维，服务器现有配置（硬件信息，如CPU、内存、硬盘、带宽等），再梳理测试场景<ul>
<li>比如我测试的机器 CPU是4核3.8GHz，10TB 7200转 西部数据机械黑盘，8GB双通道内存 3200GHz</li>
<li>测试的场景是批量登录接口</li>
<li>我的性能目标是基于这样的配置，能支撑学校的学生在200人左右登录。或者在不改代码的情况下，该配置最大能支持多少人的并发量或吞吐。</li>
</ul>
</li>
<li>如果把物理配置再加大一倍，能测试出什么水平（代码没问题，物理资源不够）<ul>
<li>需要核算成本，使用人数（规模）</li>
<li>如果2核4G内存可以支持学校200人同时登录，那么400人时需要资源翻倍</li>
<li>测试需要测不同场景，分别能达到什么样的水平</li>
</ul>
</li>
</ul>
<p><strong>第二种：</strong>老前辈已经测试过了，直接告诉你，这次是否能达到目标</p>
<p>非并发场景看吞吐量，并发场景看响应时间</p>
<p>参考</p>
<p><a href="https://blog.csdn.net/Alice_whj/article/details/105386987">JMeter5.2基本使用</a></p>
<p><a href="https://blog.csdn.net/lijing742180/article/details/86514115?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161832067316780271584883%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=161832067316780271584883&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-24-86514115.nonecase&utm_term=jmeter">JMeter 各种逻辑控制器(Logic Controller)</a></p>
<p><a href="https://www.jianshu.com/p/a53b149e6e46">JMeter组件介绍</a></p>
]]></content>
      <categories>
        <category>测试软件</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 禅道安装及使用</title>
    <url>/2021/01/09/Linux-%E7%A6%85%E9%81%93%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Linux一键安装包内置了apache， php， mysql这些应用程序，只需要下载解压缩即可运行禅道企业版。</p>
<p>Linux一键安装包分为32位和64位两个包，请大家根据操作系统的情况下载相应的包。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>将禅道企业版Linux一键安装包直接解压到/opt目录下， 不要 解压到别的目录再拷贝到/opt/，因为这样会导致文件的所有者和读写权限改变， 也不要解压后把整个目录777权限 。</p>
<p> 可以使用命令： tar -zxvf  ZenTaoPMS.Biz1.0.zbox_64.tar.gz -C /opt</p>
<span id="more"></span>    </li>
<li><p>启动程序(建议使用root启动)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">执行/opt/zbox/zbox start 命令开启Apache和Mysql。</span><br><span class="line"></span><br><span class="line">执行/opt/zbox/zbox stop 命令停止Apache和Mysql。</span><br><span class="line"></span><br><span class="line">执行/opt/zbox/zbox restart 命令重启Apache和Mysql。</span><br><span class="line"></span><br><span class="line">可以使用/opt/zbox/zbox -h命令来获取关于zbox命令的帮助。</span><br><span class="line"></span><br><span class="line">其中 -ap参数 可以修改Apache的端口，-mp参数 可以修改Mysql的端口（比如：/opt/zbox/zbox -ap 8080）</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="3">
<li><p><strong>如果MySQL或Apache启动错误，可以查看是否程序已安装过或已启动,停止相关程序服务，再次执行<code>/opt/zbox/zbox restart</code></strong></p>
<blockquote>
<p>sudo systemctl stop mysqld.service 关闭mysql service</p>
</blockquote>
<p> 浏览器访问 <a href="http://localhost/">http://localhost</a> (默认帐号 admin，密码 123456)</p>
</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="https://www.zentao.net/book/zentaobizhelp/281.html">禅道企业版使用帮助-Linux一键安装包安装</a></li>
</ol>
]]></content>
      <categories>
        <category>测试软件</category>
      </categories>
      <tags>
        <tag>禅道</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux awk命令</title>
    <url>/2021/12/13/Linux-awk%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Linux-awk-命令"><a href="#Linux-awk-命令" class="headerlink" title="Linux awk 命令"></a>Linux awk 命令</h3><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具</p>
<p>之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p>
<span id="more"></span>

<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [选项参数] <span class="string">&#x27;script&#x27;</span> var=value file(s)</span><br><span class="line">或</span><br><span class="line">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure>

<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>log.txt文本内容如下：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> this <span class="built_in">is</span> a test</span><br><span class="line"><span class="number">3</span> Are you <span class="built_in">like</span> awk</span><br><span class="line">This<span class="comment">&#x27;s a test</span></span><br><span class="line"><span class="number">10</span> There are orange,apple,mongo</span><br></pre></td></tr></table></figure>

<p>用法一：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;[pattern] action&#125;&#x27;</span> &#123;filenames&#125;   <span class="meta"># 行匹配语句 awk <span class="string">&#x27;&#x27;</span> 只能用单引号</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每行按空格或TAB分割，输出文本中的1、4项</span></span><br><span class="line"> $ awk <span class="string">&#x27;&#123;print $1,$4&#125;&#x27;</span> log.txt</span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 a</span><br><span class="line"> 3 like</span><br><span class="line"> This<span class="string">&#x27;s</span></span><br><span class="line"><span class="string"> 10 orange,apple,mongo</span></span><br><span class="line"><span class="string"> # 格式化输出</span></span><br><span class="line"><span class="string"> $ awk &#x27;</span>&#123;<span class="built_in">printf</span> <span class="string">&quot;%-8s %-10s\n&quot;</span>,<span class="variable">$1</span>,<span class="variable">$4</span>&#125;<span class="string">&#x27; log.txt</span></span><br><span class="line"><span class="string"> ---------------------------------------------</span></span><br><span class="line"><span class="string"> 2        a</span></span><br><span class="line"><span class="string"> 3        like</span></span><br><span class="line"><span class="string"> This&#x27;</span>s</span><br><span class="line"> 10       orange,apple,mongo</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>用法二：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">awk</span> -F  <span class="comment">#-F相当于内置变量FS, 指定分割字符</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="string">&quot;,&quot;</span>分割</span></span><br><span class="line"><span class="meta"> $</span><span class="bash">  awk -F, <span class="string">&#x27;&#123;print $1,$2&#125;&#x27;</span>   log.txt</span></span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this is a test</span><br><span class="line"> 3 Are you like awk</span><br><span class="line"> This&#x27;s a test</span><br><span class="line"> 10 There are orange apple</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 或者使用内建变量</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> awk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; &#123;print $1,$2&#125;&#x27;</span>     log.txt</span></span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this is a test</span><br><span class="line"> 3 Are you like awk</span><br><span class="line"> This&#x27;s a test</span><br><span class="line"> 10 There are orange apple</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 使用多个分隔符.先使用空格分割，然后对分割结果再使用<span class="string">&quot;,&quot;</span>分割</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> awk -F <span class="string">&#x27;[ ,]&#x27;</span>  <span class="string">&#x27;&#123;print $1,$2,$5&#125;&#x27;</span>   log.txt</span></span><br><span class="line"> ---------------------------------------------</span><br><span class="line"> 2 this test</span><br><span class="line"> 3 Are awk</span><br><span class="line"> This&#x27;s a</span><br><span class="line"> 10 There apple</span><br></pre></td></tr></table></figure>

<p>用法三：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">awk</span> -v  <span class="comment"># 设置变量</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -va=1 <span class="string">&#x27;&#123;print $1,$1+a&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">This&#x27;s 1</span><br><span class="line">10 11</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk -va=1 -vb=s <span class="string">&#x27;&#123;print $1,$1+a,$1b&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 3 2s</span><br><span class="line">3 4 3s</span><br><span class="line">This&#x27;s 1 This&#x27;ss</span><br><span class="line">10 11 10s</span><br></pre></td></tr></table></figure>

<p>用法四：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">awk -f </span><span class="template-variable">&#123;awk脚本&#125;</span><span class="xml"> </span><span class="template-variable">&#123;文件名&#125;</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> awk -f cal.awk <span class="built_in">log</span>.txt</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">= += -= *= /= %= ^= **=</td>
<td align="left">赋值</td>
</tr>
<tr>
<td align="left">?:</td>
<td align="left">C条件表达式</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">逻辑或</td>
</tr>
<tr>
<td align="left">&amp;&amp;</td>
<td align="left">逻辑与</td>
</tr>
<tr>
<td align="left">~ 和 !~</td>
<td align="left">匹配正则表达式和不匹配正则表达式</td>
</tr>
<tr>
<td align="left">&lt; &lt;= &gt; &gt;= != ==</td>
<td align="left">关系运算符</td>
</tr>
<tr>
<td align="left">空格</td>
<td align="left">连接</td>
</tr>
<tr>
<td align="left">+ -</td>
<td align="left">加，减</td>
</tr>
<tr>
<td align="left">* / %</td>
<td align="left">乘，除与求余</td>
</tr>
<tr>
<td align="left">+ - !</td>
<td align="left">一元加，减和逻辑非</td>
</tr>
<tr>
<td align="left">^ ***</td>
<td align="left">求幂</td>
</tr>
<tr>
<td align="left">++ –</td>
<td align="left">增加或减少，作为前缀或后缀</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">字段引用</td>
</tr>
<tr>
<td align="left">in</td>
<td align="left">数组成员</td>
</tr>
</tbody></table>
<p>过滤第一列大于2的行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$1&gt;2&#x27;</span> log.txt    <span class="comment">#命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输出</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This&#x27;s a test</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure>

<p>过滤第一列等于2的行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$1==2 &#123;print $1,$3&#125;&#x27;</span> log.txt    <span class="comment">#命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输出</span></span><br><span class="line">2 is</span><br></pre></td></tr></table></figure>

<p>过滤第一列大于2并且第二列等于’Are’的行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&#x27;</span> log.txt    <span class="comment">#命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输出</span></span><br><span class="line">3 Are you</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$n</td>
<td align="left">当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td align="left">$0</td>
<td align="left">完整的输入记录</td>
</tr>
<tr>
<td align="left">ARGC</td>
<td align="left">命令行参数的数目</td>
</tr>
<tr>
<td align="left">ARGIND</td>
<td align="left">命令行中当前文件的位置(从0开始算)</td>
</tr>
<tr>
<td align="left">ARGV</td>
<td align="left">包含命令行参数的数组</td>
</tr>
<tr>
<td align="left">CONVFMT</td>
<td align="left">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>
</tr>
<tr>
<td align="left">ERRNO</td>
<td align="left">最后一个系统错误的描述</td>
</tr>
<tr>
<td align="left">FIELDWIDTHS</td>
<td align="left">字段宽度列表(用空格键分隔)</td>
</tr>
<tr>
<td align="left">FILENAME</td>
<td align="left">当前文件名</td>
</tr>
<tr>
<td align="left">FNR</td>
<td align="left">各文件分别计数的行号</td>
</tr>
<tr>
<td align="left">FS</td>
<td align="left">字段分隔符(默认是任何空格)</td>
</tr>
<tr>
<td align="left">IGNORECASE</td>
<td align="left">如果为真，则进行忽略大小写的匹配</td>
</tr>
<tr>
<td align="left">NF</td>
<td align="left">一条记录的字段的数目</td>
</tr>
<tr>
<td align="left">NR</td>
<td align="left">已经读出的记录数，就是行号，从1开始</td>
</tr>
<tr>
<td align="left">OFMT</td>
<td align="left">数字的输出格式(默认值是%.6g)</td>
</tr>
<tr>
<td align="left">OFS</td>
<td align="left">输出字段分隔符，默认值与输入字段分隔符一致。</td>
</tr>
<tr>
<td align="left">ORS</td>
<td align="left">输出记录分隔符(默认值是一个换行符)</td>
</tr>
<tr>
<td align="left">RLENGTH</td>
<td align="left">由match函数所匹配的字符串的长度</td>
</tr>
<tr>
<td align="left">RS</td>
<td align="left">记录分隔符(默认是一个换行符)</td>
</tr>
<tr>
<td align="left">RSTART</td>
<td align="left">由match函数所匹配的字符串的第一个位置</td>
</tr>
<tr>
<td align="left">SUBSEP</td>
<td align="left">数组下标分隔符(默认值是/034)</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;BEGIN&#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;&#x27;</span>  log.txt</span></span><br><span class="line">FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="line">---------------------------------------------</span><br><span class="line">log.txt    2    1         5    1</span><br><span class="line">log.txt    2    2         5    2</span><br><span class="line">log.txt    2    3         3    3</span><br><span class="line">log.txt    2    4         4    4</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk -F\<span class="string">&#x27; &#x27;</span>BEGIN&#123;<span class="built_in">printf</span> <span class="string">&quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;</span>,<span class="string">&quot;FILENAME&quot;</span>,<span class="string">&quot;ARGC&quot;</span>,<span class="string">&quot;FNR&quot;</span>,<span class="string">&quot;FS&quot;</span>,<span class="string">&quot;NF&quot;</span>,<span class="string">&quot;NR&quot;</span>,<span class="string">&quot;OFS&quot;</span>,<span class="string">&quot;ORS&quot;</span>,<span class="string">&quot;RS&quot;</span>;<span class="built_in">printf</span> <span class="string">&quot;---------------------------------------------\n&quot;</span>&#125; &#123;<span class="built_in">printf</span> <span class="string">&quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;</span>,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;<span class="string">&#x27;  log.txt</span></span></span><br><span class="line">FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="line">---------------------------------------------</span><br><span class="line">log.txt    2    1    &#x27;    1    1</span><br><span class="line">log.txt    2    2    &#x27;    1    2</span><br><span class="line">log.txt    2    3    &#x27;    2    3</span><br><span class="line">log.txt    2    4    &#x27;    1    4</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 输出顺序号 NR, 匹配文本行号</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> awk &#x27;</span>&#123;<span class="built_in">print</span> NR,FNR,<span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>&#125;<span class="string">&#x27; log.txt</span></span></span><br><span class="line">---------------------------------------------</span><br><span class="line">1 1 2 this is</span><br><span class="line">2 2 3 Are you</span><br><span class="line">3 3 This&#x27;s a test</span><br><span class="line">4 4 10 There are</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定输出分割符</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string">  awk &#x27;</span>&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$5</span>&#125;<span class="string">&#x27; OFS=&quot; $ &quot;  log.txt</span></span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 $ this $ test</span><br><span class="line">3 $ Are $ awk</span><br><span class="line">This&#x27;s $ a $</span><br><span class="line">10 $ There $</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用正则，字符串匹配"><a href="#使用正则，字符串匹配" class="headerlink" title="使用正则，字符串匹配"></a>使用正则，字符串匹配</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出第二列包含 <span class="string">&quot;th&quot;</span>，并打印第二列与第四列</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2 ~ /th/ &#123;print $2,$4&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">this a</span><br></pre></td></tr></table></figure>

<p><strong>~ 表示模式开始。// 中是模式。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出包含 <span class="string">&quot;re&quot;</span> 的行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;/re/ &#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">3 Are you like awk</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;BEGIN&#123;IGNORECASE=1&#125; /this/&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">2 this is a test</span><br><span class="line">This&#x27;s a test</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="模式取反"><a href="#模式取反" class="headerlink" title="模式取反"></a>模式取反</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2 !~ /th/ &#123;print $2,$4&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">Are like</span><br><span class="line">a</span><br><span class="line">There orange,apple,mongo</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;!/th/ &#123;print $2,$4&#125;&#x27;</span> log.txt</span></span><br><span class="line">---------------------------------------------</span><br><span class="line">Are like</span><br><span class="line">a</span><br><span class="line">There orange,apple,mongo</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><p>关于 awk 脚本，我们需要注意两个关键词 BEGIN 和 END。</p>
<ul>
<li>BEGIN{ 这里面放的是执行前的语句 }</li>
<li>END {这里面放的是处理完所有的行后要执行的语句 }</li>
<li>{这里面放的是处理每一行时要执行的语句}</li>
</ul>
<p>假设有这么一个文件（学生成绩表）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat score.txt</span></span><br><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure>

<p>我们的 awk 脚本如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat cal.awk</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/awk -f</span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line"> </span><br><span class="line">    printf &quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">运行中</span></span><br><span class="line">&#123;</span><br><span class="line">    math+=$3</span><br><span class="line">    english+=$4</span><br><span class="line">    computer+=$5</span><br><span class="line">    printf &quot;%-6s %-6s %4d %8d %8d %8d\n&quot;, $1, $2, $3,$4,$5, $3+$4+$5</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">运行后</span></span><br><span class="line">END &#123;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">    printf &quot;  TOTAL:%10d %8d %8d \n&quot;, math, english, computer</span><br><span class="line">    printf &quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来看一下执行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk -f cal.awk score.txt</span></span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350</span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="另外一些实例"><a href="#另外一些实例" class="headerlink" title="另外一些实例"></a>另外一些实例</h2><p>AWK 的 hello world 程序为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">BEGIN</span> &#123; <span class="attribute">print</span> <span class="string">&quot;Hello, world!&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>计算文件大小</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">$ ls -l *.txt | awk &#x27;&#123;sum+=$5&#125; END &#123;print sum&#125;&#x27;</span></span><br><span class="line"><span class="section">--------------------------------------------------</span></span><br><span class="line">666581</span><br></pre></td></tr></table></figure>

<p>从文件中找出长度大于 80 的行：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">awk &#x27;length&gt;80&#x27; <span class="built_in">log</span>.txt</span><br></pre></td></tr></table></figure>

<p>打印九九乘法表</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">seq <span class="number">9</span> | sed <span class="string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="string">&#x27;&#x27;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;</span>%dx%d=%d<span class="literal">%s</span><span class="string">&quot;, i, NR, i*NR, i==NR?&quot;</span>\n<span class="string">&quot;:&quot;</span>\t<span class="string">&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多内容：</p>
<ul>
<li><a href="https://www.runoob.com/w3cnote/awk-work-principle.html">AWK 工作原理</a></li>
<li><a href="https://www.runoob.com/w3cnote/awk-arrays.html">AWK 数组</a></li>
<li><a href="https://www.runoob.com/w3cnote/awk-if-loop.html">AWK 条件语句与循环</a></li>
<li><a href="https://www.runoob.com/w3cnote/awk-user-defined-functions.html">AWK 用户自定义函数</a></li>
<li><a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html">AWK 内置函数</a></li>
<li><a href="https://www.runoob.com/w3cnote/8-awesome-awk-built-in-variables.html">8 个有力的 Awk 内建变量</a></li>
<li><a href="http://www.gnu.org/software/gawk/manual/gawk.html">AWK 官方手册</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux tcpdump命令</title>
    <url>/2021/12/01/Linux-tcpdump%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>tcpdump是一个强大的网络抓包Sniffer类工具，通常用在Linux系统中，Windows操作系统中也会使用，可以看作是WireShark的命令行版本。</p>
<p>tcdpump命令最初设计用于观察TCP/IP性能问题，它是一个用于截取网络分组，并输出分组内容的工具。tcpdump可以将网络中传送的数据包的报文头完全截获下来提供分析，它支持针对网络层、协议、主机、网络或端口的过滤，并提供and，or，not等逻辑语句来帮助用户去掉无用的信息。</p>
<span id="more"></span>



<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump [-adeflnNOpqStvx][-c&lt;数据包数目&gt;][-dd][-ddd][-F&lt;表达文件&gt;][-i&lt;网络界面&gt;][-r&lt;数据包文件&gt;][-s&lt;数据包大小&gt;][-tt][-T&lt;数据包类型&gt;][-vv][-w&lt;数据包文件&gt;][输出数据栏位]</span><br></pre></td></tr></table></figure>

<!--more-->



<h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><p><code>tcpdump -i wlan0 -s 0 -w a.cap</code> //监听wlan0网卡上的全部流量，-s代表抓取包的大小，默认为抓取64,设置为0， 表示包有多大，抓多大。-w，表示抓取下来保存为，a.cap</p>
<p><code>tcpdump -r a.cpa</code></p>
<p><code>tcpdump -A -r a.cap</code> //以Ascall显示包文件</p>
<p><code>tcpdump -x -r a.cap</code> //以十六进制显示包文件</p>
<p><code>tcpdump -i eth0 tcp port 22</code> //监听tcp协议的，22端口</p>
<p>tcpdump—筛选</p>
<p><code>tcpdump -n -r http.cap | awk &#39;&#123;print $3&#125;&#39; |sort -u</code> // -n 表示只以ip地址的形式显示出来，不显示域名。awk 参数表示只显示第三列信息; sort表示去掉重复的</p>
<p><code>tcpdump -n src host 145.254.160.237 -r http.cap //source</code></p>
<p><code>tcpdump -n dst host 145.254.160.237 -r http.cap //destination</code></p>
<p><code>tcpdump -n udp port 53 -r http.cap</code> //使用udp 53端口就可以把所有的域名查询包显示出来</p>
<p><code>tcpdump -nX port 80 -r http.cap</code> //十六进制</p>
<p><code>tcpdump -A -n &#39;tcp[13] = 24&#39; -r http.cap</code> //筛选tcp包里面的ack和psh包</p>
<p>Linux tcpdump命令用于倾倒网络传输数据。</p>
<p>执行tcpdump指令可列出经过指定网络界面的数据包文件头，在Linux操作系统中，你必须是系统管理员。</p>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li>-a 尝试将网络和广播地址转换成名称。</li>
<li>-c&lt;数据包数目&gt; 收到指定的数据包数目后，就停止进行倾倒操作。</li>
<li>-d 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。</li>
<li>-dd 把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。</li>
<li>-ddd 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。</li>
<li>-e 在每列倾倒资料上显示连接层级的文件头。</li>
<li>-f 用数字显示网际网络地址。</li>
<li>-F&lt;表达文件&gt; 指定内含表达方式的文件。</li>
<li>-i&lt;网络界面&gt; 使用指定的网络截面送出数据包。</li>
<li>-l 使用标准输出列的缓冲区。</li>
<li>-n 不把主机的网络地址转换成名字。</li>
<li>-N 不列出域名。</li>
<li>-O 不将数据包编码最佳化。</li>
<li>-p 不让网络界面进入混杂模式。</li>
<li>-q 快速输出，仅列出少数的传输协议信息。</li>
<li>-r&lt;数据包文件&gt; 从指定的文件读取数据包数据。</li>
<li>-s&lt;数据包大小&gt; 设置每个数据包的大小。</li>
<li>-S 用绝对而非相对数值列出TCP关联数。</li>
<li>-t 在每列倾倒资料上不显示时间戳记。</li>
<li>-tt 在每列倾倒资料上显示未经格式化的时间戳记。</li>
<li>-T&lt;数据包类型&gt; 强制将表达方式所指定的数据包转译成设置的数据包类型。</li>
<li>-v 详细显示指令执行过程。</li>
<li>-vv 更详细显示指令执行过程。</li>
<li>-x 用十六进制字码列出数据包资料。</li>
<li>-w&lt;数据包文件&gt; 把数据包数据写入指定的文件。</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><p>抓取所有的包</p>
<p><code>tcpdump -i any -n -w xxx.cap</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 安装多个版本JDK并设置默认版本</title>
    <url>/2021/11/03/Linux-%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%ACJDK%E5%B9%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>一台设备不能同事运行两个 Java 版本</p>
</blockquote>
<ol>
<li><p>官网下载 JDK 版本，<code>jdk-8u181-linux-x64.tar.gz</code></p>
</li>
<li><p>使用 ssh 工具上传安装包到 Linux 系统，传至：<code>/usr/local</code></p>
</li>
<li><p>Linux 用户安装的程序一般放在 <code>/usr/local</code>下</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>使用命令解压：tar zxcf jdk-8u181-linux-x64.tar.gz， 解压安装包到 /usr/local/下</p>
</li>
<li><p>配置环境变量</p>
<p>用管理员用户root对 /etc/profile进行编辑，添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181   -- jdk所在目录</span><br><span class="line">export JRE_HOME=/usr/local/jdk1.8.0_181/jre -- jre所在目录</span><br><span class="line">export CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure></li>
<li><p>退出vim编辑器，使环境设置立即生效 <code>source /etc/profile</code></p>
</li>
<li><p>使用<code>java -version</code>命令查看档期那系统正在使用的java版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# java -version</span><br><span class="line">java version &quot;1.7.0&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.170, mixed mode)</span><br></pre></td></tr></table></figure>

<p>发现并不是新安装的jdk版本，使用命令更改当前系统使用的jdk版本</p>
<p><code>alternatives --config java</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# alternatives --config java</span><br><span class="line"></span><br><span class="line">There are 3 programs which provide &#x27;java&#x27;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">*+ 1           /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java</span><br><span class="line">   2           /usr/lib/jvm/jre-1.6.0-openjdk.x86_64/bin/java</span><br><span class="line">   3           /usr/lib/jvm/jre-1.5.0-gcj/bin/java</span><br></pre></td></tr></table></figure>

<p>没有新安装的1.8.1版本jdk，需要使用命令将新安装的jdk放入到java bin中</p>
<p><code>alternatives --install /usr/bin/java java /usr/local/jdk1.8.0_181/bin/java 4</code></p>
<p>再使用<code>alternatives --config java</code>，此时可以看到新安装的 版本，然后选择即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# alternatives --config java</span><br><span class="line"></span><br><span class="line">There are 4 programs which provide &#x27;java&#x27;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">*+ 1           /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java</span><br><span class="line">   2           /usr/lib/jvm/jre-1.6.0-openjdk.x86_64/bin/java</span><br><span class="line">   3           /usr/lib/jvm/jre-1.5.0-gcj/bin/java</span><br><span class="line">   4           /usr/local/jdk1.8.0_181/bin/java</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or type selection number: 4</span><br><span class="line">[root@CentOS ~]# java -version</span><br><span class="line">java version &quot;1.8.0_181&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下GBK文件编码批量转换UTF-8</title>
    <url>/2022/02/06/Linux%E4%B8%8BGBK%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2UTF-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="使用iconv转换"><a href="#使用iconv转换" class="headerlink" title="使用iconv转换"></a>使用iconv转换</h4><hr>
<p><strong>iconv语法</strong></p>
<p><code>$ iconv -f encoding -t encoding inputfile</code></p>
<p><strong>单个文件转换示例</strong></p>
<p><code>$ iconv -f GBK -t UTF-8 file1 -o file2</code></p>
<p><strong>批量转换</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find default -<span class="built_in">type</span> d -<span class="built_in">exec</span> mkdir -p utf/&#123;&#125; \;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> find default -<span class="built_in">type</span> f -<span class="built_in">exec</span> iconv -f GBK -t UTF-8 &#123;&#125; -o utf/&#123;&#125; \;</span></span><br></pre></td></tr></table></figure>

<p>两行命令将default目录下的文件由GBK编码转换为UTF-8编码，目录结构不变，转码后的文件保存在utf/default目录下</p>
<span id="more"></span>

<p><strong>shell脚本</strong>（不好用）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用前先创建rec.txt文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">还有/home/yang/txt/bank_txt/目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">文件目录不唯一 可以自己规定</span></span><br><span class="line"></span><br><span class="line">touch rec.txt</span><br><span class="line"></span><br><span class="line">mkdir -p /home/yang/txt/bank_txt/</span><br><span class="line">for i in `cat rec.txt`;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">iconv -f UTF8 -t GBK &quot;$i&quot; -o ref/&quot;$&#123;i#/home/yang/txt/bank_txt/&#125;&quot;;</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下安装DosBox配置汇编环境</title>
    <url>/2021/02/01/Linux%E4%B8%8B%E5%AE%89%E8%A3%85DosBox%E9%85%8D%E7%BD%AE%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>转载：<a href="https://blog.csdn.net/qq_35572368/article/details/104638739">https://blog.csdn.net/qq_35572368/article/details/104638739</a></p>
<h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><p><strong>首先我们去DosBox官网下载DosBox-0.73<br>或者直接启用终端命令行输入以下代码</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S dosbox</span></span><br></pre></td></tr></table></figure>
<p>其他版本也可以在<a href="https://www.dosbox.com/download.php?main=1">dosbox官网下载</a></p>
<span id="more"></span>

<p><strong>这样我们就下载安装好了DosBox</strong></p>
<h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><p><strong>然后我们还需要DEBUG.exe、LINK.exe、MASM等，这些的文件我在下面这个连接提供压缩包：</strong><br>链接：<a href="https://www.lanzous.com/i9wnzed">https://www.lanzous.com/i9wnzed</a></p>
<h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><p><strong>接着我们构建目录，在命令行依次输入以下代码</strong></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">~<span class="symbol">$</span> mkdir ms-dos</span><br><span class="line">~<span class="symbol">$</span> cd ms-dos</span><br><span class="line">~<span class="symbol">$</span> mkdir MASM</span><br><span class="line">~<span class="symbol">$</span> mkdir ASM</span><br><span class="line">~<span class="symbol">$</span> mkdir <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure>

<p><strong>然后我们将下载的文件解压，将里面的文件全部复制到新建的MASM文件夹内，或者直接将解压的MASM文件夹连同里面的文件一同复制到ms-dos内，选择合并。</strong></p>
<h3 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h3><p><strong>(1) 然后我们来配置环境和自动挂载，首先在终端命令行输入以下代码：</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">~$ vim .dosbox/dosbox<span class="string">-0</span>.74<span class="string">-3</span>.conf</span><br></pre></td></tr></table></figure>

<p><strong>(2) 如未报错则会打开dosbox-0.74.conf文件，然后我们在文件末尾添加如下代码：</strong></p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">mount <span class="keyword">c</span> ~/ms-dos</span><br><span class="line">path<span class="operator">=</span><span class="variable">%path</span>%<span class="comment">;\MASM</span></span><br><span class="line"><span class="symbol">c:</span></span><br></pre></td></tr></table></figure>

<p><strong>(3) 接着我们打开DosBox,输入如下代码：</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">c</span>:&gt;config -writeconf .dosbox/dosbox-<span class="number">0</span>.<span class="number">74</span>-<span class="number">3</span>.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>这样我们便配置成功！</strong></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令笔记</title>
    <url>/2021/04/28/Linux%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="/download/pdf/Linux%E5%91%BD%E4%BB%A4.pdf">点击下载Linux命令</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL使用</title>
    <url>/2021/01/16/PostgreSQL%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="安装PostgreSQL"><a href="#安装PostgreSQL" class="headerlink" title="安装PostgreSQL"></a>安装PostgreSQL</h2><blockquote>
<p>sudo pacman -S postgresql</p>
</blockquote>
<p>在PostgreSQL可以正确使用之前，数据库集群必须被初始化:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta"># sudo su - postgres -c <span class="meta-string">&quot;initdb --locale en_US.UTF-8 -E UTF8 -D &#x27;/var/lib/postgres/data&#x27;&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>启动PostgreSQL，(可选)，添加 PostgreSQL 到daemons列表里作为守护进程同时启动：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># systemctl enable postgresql.service</span></span><br><span class="line"><span class="meta"># systemctl start postgresql.service</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>注意：</strong> 在本篇文章中需要以postgres用户运行的命令以<code>[postgres]$</code>作为前置符号。你可以以root用户执行<code>su - postgres</code>登陆postgres用户。如果你使用<a href="https://wiki.archlinux.org/index.php/Sudo">sudo</a>，可以以普通用户执行<code>sudo -i -u postgres</code>。</p>
<h2 id="创建第一个数据库-用户"><a href="#创建第一个数据库-用户" class="headerlink" title="创建第一个数据库/用户"></a>创建第一个数据库/用户</h2><p>如果创建一个与你的 Arch 用户 ($USER) 同名的数据库用户，并允许其访问 PostgreSQL 数据库的 shell，那么在使用PostgreSQL 数据库 shell 的时候无需指定用户登录（这样做会比较方便）。</p>
<p>以 postgres 用户身份, 添加一个新的数据库用户使用 <a href="http://www.postgresql.org/docs/9.0/static/app-createuser.html">createuser</a> 命令</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[postgres]</span>$ createuser --<span class="built_in">int</span>eractive</span><br><span class="line">输入要增加的角色名称: 我登录 Arch 的用户名</span><br></pre></td></tr></table></figure>

<p>以具备读写权限的用户身份，创建一个新的数据库,使用<a href="http://www.postgresql.org/docs/9.0/static/app-createdb.html">createdb</a> 命令。</p>
<p>从你的 shell (<strong>不是</strong> 以 postrgres 用户的身份)</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>createdb myDatabaseName</span><br></pre></td></tr></table></figure>



<h2 id="PostgreSQL-修改密码"><a href="#PostgreSQL-修改密码" class="headerlink" title="PostgreSQL 修改密码"></a>PostgreSQL 修改密码</h2><h3 id="1-修改PostgreSQL数据库默认用户postgres的密码"><a href="#1-修改PostgreSQL数据库默认用户postgres的密码" class="headerlink" title="1. 修改PostgreSQL数据库默认用户postgres的密码"></a>1. 修改PostgreSQL数据库默认用户postgres的密码</h3><p>PostgreSQL数据库创建一个postgres用户作为数据库的管理员，密码随机，所以需要修改密码，方式如下：</p>
<p>步骤一：登录PostgreSQL</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">sudo` `-u postgres psql</span><br></pre></td></tr></table></figure>

<p>步骤二：修改登录PostgreSQL密码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> postgres <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> ``<span class="string">&#x27;postgres&#x27;</span>``;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<ul>
<li>密码postgres要用引号引起来</li>
<li>命令最后有分号</li>
</ul>
<p>步骤三：退出PostgreSQL客户端</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">\<span class="selector-tag">q</span></span><br></pre></td></tr></table></figure>

<h3 id="2-修改linux系统postgres用户的密码"><a href="#2-修改linux系统postgres用户的密码" class="headerlink" title="2. 修改linux系统postgres用户的密码"></a>2. 修改linux系统postgres用户的密码</h3><p>PostgreSQL会创建一个默认的linux用户postgres，修改该用户密码的方法如下：</p>
<p>步骤一：删除用户postgres的密码</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">sudo` `passwd` `-d postgres</span><br></pre></td></tr></table></figure>

<p>步骤二：设置用户postgres的密码</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">sudo` `-u postgres ``passwd</span><br></pre></td></tr></table></figure>

<p>系统提示输入新的密码</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">Enter <span class="keyword">new</span> UNIX password:<span class="string">``</span>Retype <span class="keyword">new</span> UNIX password:<span class="string">``</span>passwd<span class="string">``</span>: password updated successfully</span><br></pre></td></tr></table></figure>



<h2 id="PostgreSQL命令"><a href="#PostgreSQL命令" class="headerlink" title="PostgreSQL命令"></a>PostgreSQL命令</h2><p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">psql <span class="operator">-</span>l</span><br></pre></td></tr></table></figure>

<p>查看数据库版本信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">psql <span class="comment">--version</span></span><br></pre></td></tr></table></figure>

<p>建立/删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">createdb database</span><br><span class="line">dropdb database</span><br></pre></td></tr></table></figure>

<p>进入数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">psql database</span><br></pre></td></tr></table></figure>

<p>建一个叫cats的表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">test<span class="operator">=</span># <span class="keyword">create</span> <span class="keyword">table</span> posts(name <span class="type">varchar</span>(<span class="number">255</span>), content text);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure>

<p>预览表：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">\<span class="selector-tag">dt</span></span><br></pre></td></tr></table></figure>

<p>查看表的详细信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">\d tablename</span><br></pre></td></tr></table></figure>

<p> 查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">komablog<span class="operator">=</span># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> posts;</span><br><span class="line"> title <span class="operator">|</span> content </span><br><span class="line"><span class="comment">-------+---------</span></span><br><span class="line">(<span class="number">0</span> 行记录)</span><br></pre></td></tr></table></figure>

<p>插入数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">komablog<span class="operator">=</span># <span class="keyword">insert</span> <span class="keyword">into</span> posts <span class="keyword">values</span>(<span class="string">&#x27;leopard&#x27;</span>, <span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>导入sql语句：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim db.sql</span></span><br><span class="line">...</span><br><span class="line">create table posts (title varchar(255), content text);</span><br><span class="line">...</span><br><span class="line"><span class="meta">$</span><span class="bash"> psql komablog</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> \i db.sql	<span class="comment">#导入sql语句</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> \dt</span></span><br></pre></td></tr></table></figure>

<p>退出，帮助分别是：\h \q</p>
<h2 id="PostgreSQL插件——pgcli"><a href="#PostgreSQL插件——pgcli" class="headerlink" title="PostgreSQL插件——pgcli"></a>PostgreSQL插件——pgcli</h2><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>If you already know how to install python packages, then you can simply do:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -U pgcli</span></span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install pgcli <span class="comment"># Only on Debian based Linux (e.g. Ubuntu, Mint, etc)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install pgcli  <span class="comment"># Only on macOS</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pgcli [database_name]</span></span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pgcli postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&amp;other=other-value]]</span></span><br></pre></td></tr></table></figure>

<p>Examples:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pgcli local_database</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pgcli postgres://amjith:pa$<span class="variable">$w0rd</span>@example.com:5432/app_db?sslmode=verify-ca&amp;sslrootcert=/myrootcert</span></span><br></pre></td></tr></table></figure>

<p>For more details:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pgcli --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage: pgcli [OPTIONS] [DBNAME] [USERNAME]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --host TEXT         Host address of the postgres database.</span><br><span class="line">  -p, --port INTEGER      Port number at which the postgres instance is</span><br><span class="line">                          listening.</span><br><span class="line">  -U, --username TEXT     Username to connect to the postgres database.</span><br><span class="line">  -u, --user TEXT         Username to connect to the postgres database.</span><br><span class="line">  -W, --password          Force password prompt.</span><br><span class="line">  -w, --no-password       Never prompt for password.</span><br><span class="line">  --single-connection     Do not use a separate connection for completions.</span><br><span class="line">  -v, --version           Version of pgcli.</span><br><span class="line">  -d, --dbname TEXT       database name to connect to.</span><br><span class="line">  --pgclirc PATH          Location of pgclirc file.</span><br><span class="line">  -D, --dsn TEXT          Use DSN configured into the [alias_dsn] section of</span><br><span class="line">                          pgclirc file.</span><br><span class="line">  --list-dsn              list of DSN configured into the [alias_dsn] section</span><br><span class="line">                          of pgclirc file.</span><br><span class="line">  --row-limit INTEGER     Set threshold for row limit prompt. Use 0 to disable</span><br><span class="line">                          prompt.</span><br><span class="line">  --less-chatty           Skip intro on startup and goodbye on exit.</span><br><span class="line">  --prompt TEXT           Prompt format (Default: &quot;\u@\h:\d&gt; &quot;).</span><br><span class="line">  --prompt-dsn TEXT       Prompt format for connections using DSN aliases</span><br><span class="line">                          (Default: &quot;\u@\h:\d&gt; &quot;).</span><br><span class="line">  -l, --list              list available databases, then exit.</span><br><span class="line">  --auto-vertical-output  Automatically switch to vertical output mode if the</span><br><span class="line">                          result is wider than the terminal width.</span><br><span class="line">  --warn / --no-warn      Warn before running a destructive query.</span><br><span class="line">  --help                  Show this message and exit.</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/dbcli/pgcli">官方文档</a></p>
<h2 id="基础数据类型（常用）"><a href="#基础数据类型（常用）" class="headerlink" title="基础数据类型（常用）"></a>基础数据类型（常用）</h2><ul>
<li><p>数值型</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>长度</th>
<th>描述</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>integer</td>
<td>4 字节</td>
<td>常用的整数</td>
<td>-2147483648 到 +2147483647</td>
</tr>
<tr>
<td>real</td>
<td>4 字节</td>
<td>浮点型</td>
<td>6 位十进制数字精度</td>
</tr>
<tr>
<td>serial</td>
<td>4 字节</td>
<td>序列型</td>
<td>1 到 2147483647</td>
</tr>
</tbody></table>
</li>
<li><p>文字型</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>定长,不足补空白</td>
</tr>
<tr>
<td>varchar</td>
<td>变长，有长度限制</td>
</tr>
<tr>
<td>text</td>
<td>变长，无长度限制</td>
</tr>
</tbody></table>
</li>
<li><p>布尔型</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>存储格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>1 字节</td>
<td>true/false</td>
</tr>
</tbody></table>
</li>
<li><p>日期型</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>长度</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>4 字节</td>
<td>年月日</td>
</tr>
<tr>
<td>time</td>
<td>8 字节</td>
<td>时分秒</td>
</tr>
<tr>
<td>timestamp</td>
<td>8 字节</td>
<td>年月日时分秒</td>
</tr>
</tbody></table>
</li>
<li><p>特色型</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>数组类型可以是任何基本类型或用户定义类型，枚举类型或复合类型。</td>
</tr>
<tr>
<td>网络地址型（inet）</td>
<td></td>
</tr>
<tr>
<td>JSON型</td>
<td>用来存储 JSON数据</td>
</tr>
<tr>
<td>XML型</td>
<td>以存储由XML标准定义的格式良好的”文档”</td>
</tr>
</tbody></table>
</li>
</ul>
<p><a href="https://wiki.archlinux.org/index.php/PostgreSQL_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">PostgreSQL (简体中文)</a></p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro安装笔记</title>
    <url>/2019/10/20/Manjaro%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-了解自己的硬盘分区"><a href="#1-了解自己的硬盘分区" class="headerlink" title="1. 了解自己的硬盘分区"></a>1. 了解自己的硬盘分区</h2><p>通过软件 rufus 制作的启动U盘安装的 manjaro。制作启动U盘之前，先要了解自己的电脑是 GPT 分区还是 MBR 分区，以及查看自己电脑是 UEFI 引导启动还是 Legancy 引导方式启动。这让你制作出正确的启动U盘。关于如何查看自己电脑是 GPT 分区还是 MBR 分区，可以参见<a href="https://jingyan.baidu.com/article/f3ad7d0f29874709c2345b4f.html">这里</a>，一般来说，现在预装 win10 的电脑基本都是GPT分区 。</p>
<p>这里有两个注意的地方，一个是在选择的时候 ，<strong>注意选择是以 GPT 的方式烧制，还是以 MBR 的方式烧制，这里的选项跟你电脑本身相关</strong>。第二个是 <strong>manjaro 只能以 DD 镜像模式写入</strong>（这里我也不知道为什么，网上是说可能无法安装）。</p>
<p>制作完U盘，会显示U盘只有3M多，这是正常现象。可以参考<a href="https://itsfoss.com/create-live-usb-manjaro-linux/">https://itsfoss.com/create-live-usb-manjaro-linux/</a></p>
<span id="more"></span>


<h2 id="2-关闭安全启动"><a href="#2-关闭安全启动" class="headerlink" title="2. 关闭安全启动"></a>2. 关闭安全启动</h2><p>由于是先装的 Windows ，在开始之前，<strong>请确保自己关闭了安全启动</strong>，以避免不必要的麻烦（我就出现过无法进入manjaroU盘引导的问题，安装好manjaro系统后开启安全启动，manjaro引导丢失的问题。之后再关闭安全启动，引导恢复）。如何关闭，也请自行谷歌。</p>
<h2 id="3-显卡驱动问题"><a href="#3-显卡驱动问题" class="headerlink" title="3. 显卡驱动问题"></a>3. 显卡驱动问题</h2><p>显卡驱动一直都是linux装机的一个大问题（起码我装过的ubuntu和manjaro都是这样）</p>
<p><strong>进入安装界面时，显卡 driver 选择 nonfree，确定后移动到 boot Manjaro 那一行，按下 e ，在 quiet 后面那行加上如下一句：</strong></p>
<blockquote>
<p>nomodeset systemd.mask=mhwd-live.service</p>
</blockquote>
<p>其中，<font color="pink">nomodeset</font> 指示内核<a href="https://askubuntu.com/questions/207175/what-does-nomodeset-do">不用加载</a>显卡驱动</p>
<blockquote>
<p>The newest kernels have moved the video mode setting into the kernel. So all the programming of the hardware specific clock rates and registers on the video card happen in the kernel rather than in the X driver when the X server starts… This makes it possible to have high resolution nice looking splash (boot) screens and flicker free transitions from boot splash to login screen. Unfortunately, on some cards this doesnt work properly and you end up with a black screen. Adding the nomodeset parameter instructs the kernel to not load video drivers and use BIOS modes instead until X is loaded.</p>
</blockquote>
<p>而<font color="pink">systemd.mask=mhwd-live.service </font>参数的作用，则是 <a href="https://forum.manjaro.org/t/disable-driver-detection-for-live-media/17070/8">disable MHWD</a>:</p>
<blockquote>
<p>Issue was due to MHWD running during boot creating a fallback xorg conf setting the driver to vesa which is not supported on EFI systems. It’s not clear if the Manjaro devs will address the behaviour but it can be worked around by disabling MHWD from running during boot. At the boot selection prompt, press e and add to the end systemd.mask=mhwd-live.service. X will detect and handle drivers itself fine, the kernel driver for the VGA device lspci -nnk | grep VGA -A2 should show itself in use.</p>
</blockquote>
<p>然后，按下 Ctrl + x或F10保存并进入安装界面(live session)，进入之后，别急，打开终端，进入这个目录：<font color="pink">/usr/lib/calamares/modules/mhwdcfg</font>,编辑<font color="pink">main.py:sudo vim</font> &gt;</p>
<blockquote>
<p>sudo vi /usr/lib/calamares/modules/mhwdcfg/main.py</p>
</blockquote>
<p>编辑为如下形式：</p>
<p>change:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">	<span class="keyword">for</span> b <span class="keyword">in</span> self.bus:</span><br><span class="line">		<span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> self.identifier[<span class="string">&#x27;net&#x27;</span>]:</span><br><span class="line">			self.configure(b,<span class="built_in">id</span>)</span><br><span class="line">		<span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> self.identifier[<span class="string">&#x27;video&#x27;</span>]:</span><br><span class="line">		self.configure(b,<span class="built_in">id</span>)</span><br><span class="line">		<span class="keyword">return</span> Node</span><br></pre></td></tr></table></figure>

<p>to:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Node</span><br></pre></td></tr></table></figure>

<p><strong>不改写成如图格式，可能会遇到安装一半卡死的情况。</strong></p>
<h2 id="4-分区"><a href="#4-分区" class="headerlink" title="4. 分区"></a>4. 分区</h2><p>自定义分区的话，一般来说，这几个分区一定要有：<font color="pink">/</font>，<font color="pink">/boot</font>或者<font color="pink">/boot/efi</font>，<font color="pink">home</font>。<font color="pink">swap</font>（交换分区）可分可不分，不过一般建议多少还是给点。（分区方案可以<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/installation_guide/s2-diskpartrecommend-x86">参见这里</a>）</p>
<p>最后，还有最最重要的/boot分区 ，因为我是GPT分区， uefi 启动，事先已经有一个100M的空间，所以笔者直接把<font color="pink">/boot/efi</font>挂载在已经存在的efi分区上，也就是分区时看见的大小为100M的那个分区（windows10的分区）：</p>
<p><img src="%E5%9B%BE%E7%89%871.png"></p>
<p>重启计算机可能会遇到开机黑屏的情况，需要在manjaro的引导界面，将选项移动至manjaro选项，按e进入，在 quiet 后面那行加上如下一句</p>
<blockquote>
<p>nouveau.modeset=0</p>
</blockquote>
<h2 id="5-配置系统"><a href="#5-配置系统" class="headerlink" title="5. 配置系统"></a>5. 配置系统</h2><ul>
<li><h4 id="解决N卡问题"><a href="#解决N卡问题" class="headerlink" title="解决N卡问题"></a>解决N卡问题</h4><p>安装完成后最重要的<strong>第一步就是修改grub</strong>，解决开机黑屏问题(避免每次开机都要在grub输入一堆参数)。因此，进入系统的第一步，是编辑<font color="pink">/etc/default/grub</font>文件，在quiet下面加上如下的参数：</p>
<p><img src="%E5%9B%BE%E7%89%872.png"></p>
<p>然后在终端输入<font color="pink">sudo update-grub</font>更新 grub 配置。在安装专有显卡驱动后，编辑/etc/default/grub文件，在quiet下面加上如下的参数。（<strong>否则可能会卡机卡死或黑屏，能不动N卡尽量还是不要乱搞</strong>）</p>
<p><img src="%E5%9B%BE%E7%89%873.png"></p>
<p>同样，然后在终端输入<font color="pink">sudo update-grub</font>更新 grub 配置。</p>
<p><font color="red">已知问题</font>：<strong>这样设置会使每次开机屏幕亮度最大，需要手动调节。并且将下方命令设置为开机脚本，并不        管用</strong></p>
<p>#查看最大屏幕亮度</p>
<p>cat  /sys/class/backlight/intel_backlight/max_brightness</p>
<p>#设置默认屏幕亮度</p>
<p>echo 800 &gt; /sys/class/backlight/intel_backlight/brightness</p>
</li>
</ul>
<ul>
<li><h4 id="使用国内源"><a href="#使用国内源" class="headerlink" title="使用国内源"></a>使用国内源</h4><blockquote>
<p>sudo pacman-mirrors -i -c China -m rank</p>
</blockquote>
<p>在弹出窗口中选择排第一位的源，然后刷新缓存：</p>
<blockquote>
<p>sudo pacman -Syy</p>
</blockquote>
<p>然后添加 ArchLinuxCN 的源，编辑<font color="pink">/etc/pacman.conf</font>，在文件末尾添加如下内容：</p>
<blockquote>
<p>[archlinuxcn]</p>
<p>SigLevel = Optional TrustedOnly</p>
<p>Server = <a href="https://mirrors.ustc.edu.cn/archlinuxcn/$arch">https://mirrors.ustc.edu.cn/archlinuxcn/$arch</a></p>
</blockquote>
<p>之后刷新缓存，导入 <font color="pink">archlinuxcn-keyring </font>：</p>
<blockquote>
<p>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring &amp;&amp; sudo pacman -Syy</p>
</blockquote>
</li>
</ul>
<h2 id="6-Manjaro安装后常见问题解决"><a href="#6-Manjaro安装后常见问题解决" class="headerlink" title="6. Manjaro安装后常见问题解决"></a>6. Manjaro安装后常见问题解决</h2><ul>
<li><h4 id="解决Manjaro更新后字体方框问题，即进入tty后会出现方块字"><a href="#解决Manjaro更新后字体方框问题，即进入tty后会出现方块字" class="headerlink" title="解决Manjaro更新后字体方框问题，即进入tty后会出现方块字"></a>解决Manjaro更新后字体方框问题，即进入tty后会出现方块字</h4><blockquote>
<p>sudo pacman -S wqy-microhei</p>
</blockquote>
</li>
<li><h4 id="Manjaro安装搜狗输入法"><a href="#Manjaro安装搜狗输入法" class="headerlink" title="Manjaro安装搜狗输入法"></a>Manjaro安装搜狗输入法</h4><blockquote>
<p>sudo pacman -S yaourt</p>
</blockquote>
<blockquote>
<p>yaourt -S qtwebkit-bin</p>
</blockquote>
<blockquote>
<p>sudo pacman -S fcitx-sogoupinyin fcitx-configtool fcitx-im fcitx-sogoupinyin</p>
</blockquote>
<blockquote>
<p>sudo pacman -U <a href="https://arch-archive.tuna.tsinghua.edu.cn/2019/04-29/community/os/x86_64/fcitx-qt4-4.2.9.6-1-x86_64.pkg.tar.xz">https://arch-archive.tuna.tsinghua.edu.cn/2019/04-29/community/os/x86_64/fcitx-qt4-4.2.9.6-1-x86_64.pkg.tar.xz</a></p>
</blockquote>
<blockquote>
<p>sudo nano /etc/environment</p>
</blockquote>
<p>粘贴下面进去</p>
<p>export GTK_IM_MODULE=fcitx</p>
<p>export QT_IM_MODULE=fcitx</p>
<p>export XMODIFIERS=”@im=fcitx”</p>
<p>终端输入</p>
<blockquote>
<p>qtconfig-qt4</p>
</blockquote>
<p>找到interfac，然后看到Defult Input Method，设置为fcitx左上角save保存</p>
<p>如果设置不生效的话尝试写进~/.xporfile里面</p>
</li>
</ul>
<ul>
<li><h4 id="解决Windows和Linux双系统时间不一致问题"><a href="#解决Windows和Linux双系统时间不一致问题" class="headerlink" title="解决Windows和Linux双系统时间不一致问题"></a>解决Windows和Linux双系统时间不一致问题</h4><blockquote>
<p>sudo timedatectl set-local-rtc true</p>
</blockquote>
</li>
</ul>
<h2 id="7-Manjaro美化"><a href="#7-Manjaro美化" class="headerlink" title="7. Manjaro美化"></a>7. Manjaro美化</h2><ul>
<li><h4 id="连接蓝牙设备"><a href="#连接蓝牙设备" class="headerlink" title="连接蓝牙设备"></a>连接蓝牙设备</h4>如果你的manjaro连接蓝牙总是断开，就算连上也没有声音，等等问题。<br>可以尝试更换内核版本，或者阅读下这篇文章，可能对你有帮助<br><a href="https://wiki.archlinux.org/index.php/Bluetooth_headset">https://wiki.archlinux.org/index.php/Bluetooth_headset</a>_<br><strong>在链接后面添加_(简体中文)，直接点击链接会没有下划线，需要手动加上，即可查看中文文档</strong><br>虽然我看了半天也没弄好，还是更换成LTS版本的内核，瞬间就快乐了。<br>更换内核需要在grub界面选择</li>
</ul>
<ul>
<li><h4 id="个人喜好的设置"><a href="#个人喜好的设置" class="headerlink" title="个人喜好的设置"></a>个人喜好的设置</h4><ul>
<li><p>桌面行为设置</p>
<ol>
<li>桌面特效：个人喜欢的桌面特效为魔灯和摆动窗口</li>
<li>工作空间：点击行为更改成双击打开文件夹</li>
</ol>
</li>
<li><p>窗口管理</p>
<ol>
<li>窗口行为：在高级里将放置策略更改为居中</li>
</ol>
</li>
<li><p>附加程序安装器<br><img src="tupian4.png"></p>
</li>
</ul>
</li>
<li><h4 id="Dock拦的安装"><a href="#Dock拦的安装" class="headerlink" title="Dock拦的安装"></a>Dock拦的安装</h4><blockquote>
<p>sudo pacman -S latte-dock</p>
</blockquote>
</li>
</ul>
<ul>
<li><h4 id="配置详情（cpu温度是显示错误）"><a href="#配置详情（cpu温度是显示错误）" class="headerlink" title="配置详情（cpu温度是显示错误）"></a>配置详情（cpu温度是显示错误）</h4> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">██████████████████  ████████     william@william-pc</span><br><span class="line">██████████████████  ████████     OS: Manjaro 18.1.1 Juhraya</span><br><span class="line">██████████████████  ████████     Kernel: x86_64 Linux 5.2.21-1-MANJARO</span><br><span class="line">██████████████████  ████████     Uptime: 14m</span><br><span class="line">████████            ████████     Packages: 1267</span><br><span class="line">████████  ████████  ████████       Shell: zsh 5.7.1</span><br><span class="line">████████  ████████  ████████       Resolution: 1920x1080</span><br><span class="line">████████  ████████  ████████       DE: KDE 5.62.0 / Plasma 5.16.5</span><br><span class="line">████████  ████████  ████████       WM: KWin</span><br><span class="line">████████  ████████  ████████       GTK Theme: Breath [GTK2], Mojave-light-alt [GTK3]</span><br><span class="line">████████  ████████  ████████       Icon Theme: Adwaita</span><br><span class="line">████████  ████████  ████████       Font: Noto Sans Regular</span><br><span class="line">████████  ████████  ████████       Disk: 24G / 165G (15%)</span><br><span class="line">████████  ████████  ████████       CPU: Intel Core i7-7700HQ @ 8x 3.8GHz [62.0°C]</span><br><span class="line">                                 GPU: Mesa DRI Intel(R) HD Graphics 630 (Kaby Lake GT2) </span><br><span class="line">                                 RAM: 3498MiB / 15918MiB</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-Manjaro常用软件安装"><a href="#8-Manjaro常用软件安装" class="headerlink" title="8. Manjaro常用软件安装"></a>8. Manjaro常用软件安装</h2><ul>
<li><h4 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h4><p>科学上网可以参考如下地址，下载electron-ssr</p>
<p><a href="https://github.com/shadowsocksrr/electron-ssr">https://github.com/shadowsocksrr/electron-ssr</a></p>
<p>Google chrome可使用SwitchyOmega，关于SwitchyOmega的离线下载网址如下：</p>
<p><a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>
<p>Manjaro安装SwitchyOmega时，需将google chrome设置为开发者模式，将离线包后缀改为.zip，再将离线包拖入google chrome即可。</p>
<p>auto switch用到的规则链表<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p>
</li>
<li><h4 id="TIM-QQ"><a href="#TIM-QQ" class="headerlink" title="TIM/QQ"></a>TIM/QQ</h4><p>可参考<a href="https://www.bilibili.com/video/av61530440">https://www.bilibili.com/video/av61530440</a></p>
<p>可能以后腾讯就出linux版本了</p>
</li>
<li><h4 id="百度云网盘"><a href="#百度云网盘" class="headerlink" title="百度云网盘"></a>百度云网盘</h4><p>由于百度云盘出了Linux版，我们可以下载.deb的文件包（<strong>也可使用dpkg包管理来安装.deb包，但不推荐</strong><font color="pink">sudo dpkg -i package.deb</font>）</p>
<p>检查有没有安装debtap</p>
<blockquote>
<p>sudo pacman -Q debtap</p>
</blockquote>
<p>没有就安装</p>
<blockquote>
<p>yaourt -S debtap</p>
</blockquote>
<p>升级</p>
<blockquote>
<p>debtap sudo debtap -u</p>
</blockquote>
<p>使用方法</p>
<blockquote>
<p>sudo debtap xxx.deb</p>
</blockquote>
<p>安装时会提示输入包名，以及license。包名随意，license就填GPL吧。上述操作完成后会在deb包同级目录生成x.tar.xz文件，直接用pacman安装即可</p>
<blockquote>
<p>sudo pacman -U xxx.tar.xz</p>
</blockquote>
</li>
</ul>
<ul>
<li><h4 id="网易云音乐无法输入中文修复"><a href="#网易云音乐无法输入中文修复" class="headerlink" title="网易云音乐无法输入中文修复"></a>网易云音乐无法输入中文修复</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.先安装qcef这个软件包</span></span><br><span class="line">pacman -S qcef</span><br><span class="line"><span class="comment">#2.编辑/opt/netease/netease-cloud-music/netease-cloud-music.bash，把它改成这样：</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="attribute">HERE</span>=<span class="string">&quot;<span class="variable">$(dirname &quot;$(readlink -f &quot;$&#123;0&#125;&quot;)</span>&quot;</span>)&quot;</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">LD_LIBRARY_PATH</span>=/usr/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">QT_PLUGIN_PATH</span>=<span class="string">&quot;<span class="variable">$&#123;HERE&#125;</span>&quot;</span>/plugins</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">QT_QPA_PLATFORM_PLUGIN_PATH</span>=<span class="string">&quot;<span class="variable">$&#123;HERE&#125;</span>&quot;</span>/plugins/platforms</span><br><span class="line">exec <span class="string">&quot;<span class="variable">$&#123;HERE&#125;</span>&quot;</span>/netease-cloud-music <span class="variable">$@</span></span><br><span class="line"><span class="comment">#3.安装vlc这个包</span></span><br><span class="line">pacman -S vlc</span><br></pre></td></tr></table></figure></li>
<li><h4 id="VirtualBox-Kernel-driver-not-installed-rc-1908"><a href="#VirtualBox-Kernel-driver-not-installed-rc-1908" class="headerlink" title="VirtualBox Kernel driver not installed (rc=-1908)"></a>VirtualBox Kernel driver not installed (rc=-1908)</h4><blockquote>
<p>uname -a</p>
</blockquote>
<p>它将显示类似该Linux用户4.6 .0-1-MANJARO ＃1 SMP PREEMPT的内容Mon May 16 02:44:59 2016 x86_64 GNU / Linux</p>
<p>内核版本以粗体显示，因此请为您的内核号安装virtualbox主机模块，以上面显示的内容替换46。</p>
<blockquote>
<p>sudo pacman -S linux46-virtualbox-host-modules</p>
</blockquote>
<p>现在加载您的virtualbox模块</p>
<blockquote>
<p>sudo /sbin/rcvboxdrv setup</p>
</blockquote>
<p>Virtualbox现在应该可以正常运行-否则，请使用pamac并卸载与virtualbox相关的任何内容，然后安装“ virtualbox”软件包，如果您告诉它所使用的内核版本，它将为您完成以上操作</p>
</li>
</ul>
<h2 id="9-参考文档"><a href="#9-参考文档" class="headerlink" title="9. 参考文档"></a>9. 参考文档</h2><ol>
<li><p><a href="https://blog.csdn.net/imilano/article/details/83217039">【Linux折腾记】manjaro初体验</a></p>
</li>
<li><p><a href="https://gist.github.com/mauri870/5a54e415140875b9150ca31c491811f6">Installation of Manjaro 17 and nvidia/bumblebee drivers on Avell G1513</a></p>
</li>
<li><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/installation_guide/s2-diskpartrecommend-x86">recommended partitioning scheme</a></p>
</li>
<li><p><a href="https://manjaro.top/post/jie-jue-manjaro-geng-xin-hou-zi-ti-fang-kuang-wen-ti/">解决Manjaro更新后字体方框问题</a></p>
</li>
<li><p><a href="https://manjaro.top/post/manjaro-an-zhuang-sou-gou-shu-ru-fa/">Manjaro安装搜狗输入法</a></p>
</li>
<li><p><a href="https://blog.csdn.net/aaazz47/article/details/78696899">如何解决 Windows和Manjaro双系统时间差8小时的问题</a></p>
</li>
<li><p><a href="https://hufangyun.com/2017/zsh-plugin/">zsh设置</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL笔记</title>
    <url>/2021/04/23/MySQL%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>DB（data base），实际上是一个文件合集，是一个存储数据的仓库，本质是一个文件系统，数据库是按照特定格式把数据存储起来，用户可以对存储的数据进行增删改查操作</p>
<p>数据库分类：</p>
<ul>
<li><p>关系型数据库：建立在关系模型基础上的数据库</p>
<p>MySQL、Oracle、DB2、SQL Server、PostgreSQL</p>
</li>
<li><p>非关系型数据库：通常指数据之间无关系的数据库（NO SQL）</p>
<p>MongoDB、Redis、Cassandra</p>
</li>
</ul>
<span id="more"></span>

<h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3><ol>
<li><p><strong>ER图的实体（entity）</strong>即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用<strong>长方体</strong>来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）不需要出现在ER图中。</p>
</li>
<li><p><strong>ER图的属性（attribute）</strong>即数据对象所具有的属性（所具有的列），例如学生具有姓名、学号、年级等属性，用<strong>椭圆形</strong>表示，属性分为唯一属性（unique attribute）和非唯一属性，唯一属性（主键）指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。</p>
</li>
<li><p><strong>ER图的关系/联系（relationship）</strong>用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用<strong>菱形</strong>来表示。</p>
</li>
<li><p><strong>ER图</strong>中关联关系有三种：</p>
</li>
</ol>
<ul>
<li><p><strong>1对1（1:1）</strong> ：1对1关系是指对于实体集A与实体集B，A中的每一个实体至多与B中一个实体有关系；反之，在实体集B中的每个实体至多与实体集A中一个实体有关系</p>
</li>
<li><p><strong>1对多（1:N）</strong> ：1对多关系是指实体集A与实体集B中至少有N(N&gt;0)个实体有关系；并且实体集B中每一个实体至多与实体集A中一个实体有关系。</p>
</li>
<li><p><strong>多对多（M:N）</strong> ：多对多关系是指实体集A中的每一个实体与实体集B中至少有M(M&gt;0)个实体有关系，并且实体集B中的每一个实体与实体集A中的至少N（N&gt;0）个实体有关系。</p>
</li>
</ul>
<ol start="5">
<li><p><strong>ER图实例</strong></p>
<p>某公司有若干个部门；每个部门有若干职工、项目和办公室。每个职工都有工作经历，记录该职工做过的每项工作的起止年月和工资。每个办公室有若干部电话。对于部门，需要记录部门号（惟一）、部门名称、预算费和部门领导的职工号。对于职工，除工作经历外，还需要记录职工号（惟一）、职工姓名、家庭住址、当前参加的项目、所在办公室、电话等信息。对于项目，需要记录项目号（惟一）、项目名称和预算。对于办公室，需要记录办公室名称（惟一）、位置、电话。</p>
<p><img src="ER%E5%9B%BE.png"></p>
</li>
</ol>
<h3 id="SQL语法特点"><a href="#SQL语法特点" class="headerlink" title="SQL语法特点"></a>SQL语法特点</h3><ol>
<li>不区分大小写</li>
<li>关键字、字段名、表名需要用空格或者逗号隔开</li>
<li>每个SQL语句是用分号结尾</li>
<li>语句可以写一行或多行分开</li>
</ol>
<h3 id="登录MySQL的方式"><a href="#登录MySQL的方式" class="headerlink" title="登录MySQL的方式"></a>登录MySQL的方式</h3><p>尽量不要在-p后面输入密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">访问mariadb</span></span><br><span class="line">mysql -h127.0.0.1 -P3306 -uroot -p</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果访问 mysql5.7</span>  </span><br><span class="line">mysql -h175.24.117.226 -P3307 -uroot -p</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">直接登录，可在/etc/my.cnf修改</span></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<h3 id="搭建练习环境"><a href="#搭建练习环境" class="headerlink" title="搭建练习环境"></a>搭建练习环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_info (</span><br><span class="line">	user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	user_name <span class="type">CHAR</span> ( <span class="number">10</span> ),</span><br><span class="line">	password <span class="type">VARCHAR</span> ( <span class="number">10</span> ),</span><br><span class="line">	user_nick <span class="type">VARCHAR</span> ( <span class="number">10</span> ),</span><br><span class="line">	card_num <span class="type">BIGINT</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY ( user_id ) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 	user_nick长度不够，修改user_nick的长度再重新插入数据</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info MODIFY user_nick <span class="type">VARCHAR</span> ( <span class="number">20</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info ( user_id, user_name, PASSWORD, user_nick, card_num )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>, <span class="string">&#x27;zhangsanfeng&#x27;</span>, <span class="number">124567894651329785</span> ),</span><br><span class="line">	( <span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;122bbb&#x27;</span>, <span class="string">&#x27;limochou&#x27;</span>, <span class="number">124567894651324567</span> ),</span><br><span class="line">	( <span class="number">3</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;123aaa&#x27;</span>, <span class="string">&#x27;wangbaiwan&#x27;</span>, <span class="number">214567894651324567</span> ),</span><br><span class="line">	( <span class="number">4</span>, <span class="string">&#x27;liuqi&#x27;</span>, <span class="string">&#x27;12aaa&#x27;</span>, <span class="string">&#x27;liuchuanfeng&#x27;</span>, <span class="number">214563356651324567</span> ),</span><br><span class="line">	( <span class="number">5</span>, <span class="string">&#x27;zhangliu&#x27;</span>, <span class="string">&#x27;12aaa&#x27;</span>, <span class="string">&#x27;zhangwuji&#x27;</span>, <span class="number">214563356658966567</span> );</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 创建订单表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> order_info (</span><br><span class="line">	order_id <span class="type">INT</span> UNSIGNED ZEROFILL <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	price <span class="type">DECIMAL</span> ( <span class="number">10</span>, <span class="number">2</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	order_status <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	product_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	created datetime <span class="keyword">DEFAULT</span> &quot;2019-01-01 00:00:00&quot;,</span><br><span class="line">	user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( order_id ) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">1</span>, <span class="number">4.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1001</span>, <span class="string">&#x27;2019-09-25 10:25:26&#x27;</span>, <span class="number">1</span> ),</span><br><span class="line">	( <span class="number">2</span>, <span class="number">9.99</span>, <span class="string">&#x27;nopay&#x27;</span>, <span class="number">1002</span>, <span class="string">&#x27;2019-09-26 10:25:26&#x27;</span>, <span class="number">1</span> ),</span><br><span class="line">	( <span class="number">3</span>, <span class="number">4.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1001</span>, <span class="string">&#x27;2019-09-25 10:25:26&#x27;</span>, <span class="number">2</span> ),</span><br><span class="line">	( <span class="number">4</span>, <span class="number">9.99</span>, <span class="string">&#x27;nopay&#x27;</span>, <span class="number">1002</span>, <span class="string">&#x27;2019-09-24 10:25:26&#x27;</span>, <span class="number">2</span> ),</span><br><span class="line">	( <span class="number">5</span>, <span class="number">19.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1003</span>, <span class="string">&#x27;2019-09-26 10:25:26&#x27;</span>, <span class="number">2</span> ),</span><br><span class="line">	( <span class="number">6</span>, <span class="number">4.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1001</span>, <span class="string">&#x27;2019-09-25 10:25:26&#x27;</span>, <span class="number">3</span> ),</span><br><span class="line">	( <span class="number">7</span>, <span class="number">4.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1001</span>, <span class="string">&#x27;2019-09-25 10:25:26&#x27;</span>, <span class="number">4</span> ),</span><br><span class="line">	( <span class="number">8</span>, <span class="number">9.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1002</span>, <span class="string">&#x27;2019-09-25 10:25:26&#x27;</span>, <span class="number">4</span> ),</span><br><span class="line">	( <span class="number">9</span>, <span class="number">19.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1003</span>, <span class="string">&#x27;2019-09-26 10:25:26&#x27;</span>, <span class="number">4</span> ),</span><br><span class="line">	( <span class="number">10</span>, <span class="number">29.99</span>, <span class="string">&#x27;pay&#x27;</span>, <span class="number">1002</span>, <span class="string">&#x27;2019-09-26 10:25:26&#x27;</span>, <span class="number">6</span> );</span><br></pre></td></tr></table></figure>

<h3 id="创建、查看、删除、使用数据库"><a href="#创建、查看、删除、使用数据库" class="headerlink" title="创建、查看、删除、使用数据库"></a>创建、查看、删除、使用数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库命令</span></span><br><span class="line"><span class="keyword">create</span> databse databasename;</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE DYJ <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;  </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.041</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示数据库</span></span><br><span class="line"><span class="keyword">show</span> databses;</span><br><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> Database             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">000</span>_test             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">001</span>_test             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span>shuangyu           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AX                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CSCS                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DYJ                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据库删除(慎用)</span></span><br><span class="line"><span class="keyword">drop</span> database databasename;</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">drop</span> database DYJ;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.040</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表（慎用）</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tablename;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用数据库（-A快速启动）</span></span><br><span class="line">use databasename;</span><br><span class="line"></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> use diancan;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示数据表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line">MySQL [diancan]<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_diancan  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> admin_info         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> comment            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> food               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hibernate_sequence <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> leimu              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> picture_info       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_info          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wx_order_detail    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wx_order_root      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.038</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> tablename;</span><br><span class="line"></span><br><span class="line">MySQL [diancan]<span class="operator">&gt;</span> <span class="keyword">desc</span> admin_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field       <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> admin_id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> admin_type  <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> create_time <span class="operator">|</span> datetime(<span class="number">6</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> update_time <span class="operator">|</span> datetime(<span class="number">6</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.044</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看创建数据库SQL语句</span></span><br><span class="line">MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> database DYJ;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Database <span class="operator">|</span> <span class="keyword">Create</span> Database                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> DYJ      <span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `DYJ` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.043</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- COLLATE utf8_general_ci 数据库校对规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据表SQL语句</span></span><br><span class="line">MySQL [diancan]<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> admin_info;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>      <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> admin_info <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `admin_info` (</span><br><span class="line">  `admin_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `admin_type` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`admin_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.045</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h3><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">范围（有符号）</th>
<th align="left">范围（无符号）</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TINYINT</td>
<td align="left">1 byte</td>
<td align="left">(-128，127)</td>
<td align="left">(0，255)</td>
<td align="left">小整数值</td>
</tr>
<tr>
<td align="left">SMALLINT</td>
<td align="left">2 bytes</td>
<td align="left">(-32 768，32 767)</td>
<td align="left">(0，65 535)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">MEDIUMINT</td>
<td align="left">3 bytes</td>
<td align="left">(-8 388 608，8 388 607)</td>
<td align="left">(0，16 777 215)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">INT或INTEGER</td>
<td align="left">4 bytes</td>
<td align="left">(-2 147 483 648，2 147 483 647)</td>
<td align="left">(0，4 294 967 295)</td>
<td align="left">大整数值</td>
</tr>
<tr>
<td align="left">BIGINT</td>
<td align="left">8 bytes</td>
<td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
<td align="left">(0，18 446 744 073 709 551 615)</td>
<td align="left">极大整数值</td>
</tr>
<tr>
<td align="left">FLOAT</td>
<td align="left">4 bytes</td>
<td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td align="left">单精度 浮点数值</td>
</tr>
<tr>
<td align="left">DOUBLE</td>
<td align="left">8 bytes</td>
<td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td align="left">双精度 浮点数值</td>
</tr>
<tr>
<td align="left">DECIMAL</td>
<td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td align="left">依赖于M和D的值</td>
<td align="left">依赖于M和D的值</td>
<td align="left">小数值</td>
</tr>
</tbody></table>
<p>有符号和无符号（UNSIGNED）</p>
<ul>
<li><p>有符号可以表示负数、0以及正数</p>
</li>
<li><p>无符号只能表示0或负数</p>
</li>
</ul>
<p>FLOAT（10，2）</p>
<ul>
<li><p>FLOAT类型，总长度为10，小数点后两位为2</p>
</li>
<li><p>DOUBLE和DECIMAL类似超出范围四舍五入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Score`( `s_id` <span class="type">VARCHAR</span>(<span class="number">20</span>), `c_id`  <span class="type">VARCHAR</span>(<span class="number">20</span>), `s_score` <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>), <span class="keyword">PRIMARY</span> KEY(`s_id`,`c_id`) );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.076</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">Values</span>(<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;12.123&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.045</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Score;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> s_id <span class="operator">|</span> c_id <span class="operator">|</span> s_score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">01</span>   <span class="operator">|</span> <span class="number">01</span>   <span class="operator">|</span>   <span class="number">12.12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.038</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>Float和Double会丢精度，相对DECIMAL较好</strong></p>
</li>
</ul>
<h5 id="时间与日期类型"><a href="#时间与日期类型" class="headerlink" title="时间与日期类型"></a>时间与日期类型</h5><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小 ( bytes)</th>
<th align="left">范围</th>
<th align="left">格式</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DATE</td>
<td align="left">3</td>
<td align="left">1000-01-01/9999-12-31</td>
<td align="left">YYYY-MM-DD</td>
<td align="left">日期值</td>
</tr>
<tr>
<td align="left">TIME</td>
<td align="left">3</td>
<td align="left">‘-838:59:59’/‘838:59:59’</td>
<td align="left">HH:MM:SS</td>
<td align="left">时间值或持续时间</td>
</tr>
<tr>
<td align="left">YEAR</td>
<td align="left">1</td>
<td align="left">1901/2155</td>
<td align="left">YYYY</td>
<td align="left">年份值</td>
</tr>
<tr>
<td align="left">DATETIME</td>
<td align="left">8</td>
<td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td align="left">YYYY-MM-DD HH:MM:SS</td>
<td align="left">混合日期和时间值</td>
</tr>
<tr>
<td align="left">TIMESTAMP</td>
<td align="left">4</td>
<td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>
<td align="left">YYYYMMDD HHMMSS</td>
<td align="left">混合日期和时间值，时间戳</td>
</tr>
</tbody></table>
<p>TIMESTAMP和DATETIME区别</p>
<table>
<thead>
<tr>
<th>TIMESTAMP</th>
<th>DATETIME</th>
</tr>
</thead>
<tbody><tr>
<td>存储空间：TIMESTAMP占用4个字节</td>
<td>存储空间：DATETIME占用8个字节</td>
</tr>
<tr>
<td>TIMESTAMP实际记录的是1970-01-01 00:00:01.000000到2038-01-19 03：14：07.999999，受时区影响</td>
<td>时区：DATETIME不受时区影响</td>
</tr>
<tr>
<td>时间范围：‘1970-01-01 00:00:01’ UTC ~ ‘2038-01-19 03:14:07’ UTC</td>
<td>时间范围:‘1000-01-01 00:00:00.000000’ ~ ‘9999-12-31 23:59:59.999999’</td>
</tr>
<tr>
<td>存储方式：对于TIMESTAMP，它把客户端插入的时间从当前时区转化为UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回(中国属于东八区，所以应该是UTC+8）。</td>
<td>存储方式：而对于DATETIME，不做任何改变，基本上是原样输入和输出。</td>
</tr>
</tbody></table>
<h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CHAR</td>
<td align="left">0-255 bytes</td>
<td align="left">定长字符串</td>
</tr>
<tr>
<td align="left">VARCHAR</td>
<td align="left">0-65535 bytes</td>
<td align="left">变长字符串</td>
</tr>
<tr>
<td align="left">TINYBLOB</td>
<td align="left">0-255 bytes</td>
<td align="left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td align="left">TINYTEXT</td>
<td align="left">0-255 bytes</td>
<td align="left">短文本字符串</td>
</tr>
<tr>
<td align="left">BLOB</td>
<td align="left">0-65 535 bytes</td>
<td align="left">二进制形式的长文本数据</td>
</tr>
<tr>
<td align="left">TEXT</td>
<td align="left">0-65 535 bytes</td>
<td align="left">长文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMBLOB</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMTEXT</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">中等长度文本数据</td>
</tr>
<tr>
<td align="left">LONGBLOB</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td align="left">LONGTEXT</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">极大文本数据</td>
</tr>
</tbody></table>
<p>CHAR与VARCHAR</p>
<ol>
<li><p><strong>CHAR</strong>的长度是不可变的，而<strong>VARCHAR</strong>的长度是可变的，也就是说，定义一个CHAR[10]和VARCHAR[10],如果存进去的是‘ABCD’, 那么CHAR所占的长度依然为10，除了字符‘ABCD’外，后面跟六个空格，而VARCHAR的长度变为4了，取数据的时候，CHAR类型的要用trim()去掉多余的空格，而VARCHAR类型是不需要的。</p>
</li>
<li><p><strong>CHAR</strong>的存取速度要比<strong>VARCHAR</strong>快得多，因为其长度固定，方便程序的存储与查找；但是CHAR为此付出的是空间的代价，因为其长度固定，所以难免会有多余的空格占位符占据空间，可以说是以空间换取时间效率，而VARCHAR则是以空间效率为首位的。</p>
</li>
<li><p><strong>CHAR</strong>的存储方式是，一个英文字符（ASCII）占用1个字节，一个汉字占用两个字节；而<strong>VARCHAR</strong>的存储方式是，一个英文字符占用2个字节，一个汉字也占用2个字节</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Student`(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `s_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `s_name` <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `s_birth` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `s_sex` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY</span> KEY(`s_id`)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.064</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">Values</span> (<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;mengxun&#x27;</span>,<span class="string">&#x27;1990-01-01&#x27;</span>,<span class="string">&#x27;male&#x27;</span>); </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.046</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">Values</span> (<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;dyj&#x27;</span>,<span class="string">&#x27;1990-01-01&#x27;</span>,<span class="string">&#x27;male&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.045</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Student;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> s_id <span class="operator">|</span> s_name  <span class="operator">|</span> s_birth    <span class="operator">|</span> s_sex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">001</span>  <span class="operator">|</span> mengxun <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span> male  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">002</span>  <span class="operator">|</span> dyj     <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span> male  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.039</span> sec)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line">(</span><br><span class="line">    fieldnamae1 datatype[(宽度) 约束条件];</span><br><span class="line">    fieldnamae2 datatype[(宽度) 约束条件];</span><br><span class="line">    fieldnamae3 datatype[(宽度) 约束条件];</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h3><p>约束条件就是在给列加一些约束，使该字段存储的值更加符合我们的预期</p>
<p>常用约束条件有以下这些：</p>
<ul>
<li><p>UNSIGNED：无符号，值从0开始，无负数</p>
</li>
<li><p>ZEROFILL：零填充，会自动使用无符号位。零填充指的是位数固定，如果数值长度不足字段类型的长度，则使用0来填充</p>
</li>
<li><p>NOT NULL：非空约束，表示该字段的值不能为空<strong>（多个约束同时出现，非空约束放在最后面）</strong></p>
</li>
<li><p>DEFAULT：表示如果插入数据时没有给该字段赋值，那么就是用该默认值</p>
</li>
<li><p>UNIQUE：限制字段的值唯一</p>
</li>
<li><p>PRIMARY KEY：主键约束，表示唯一标识，不能为空，且一个标只有一个主键。</p>
<p>AUTO_INCREMENT：自增长，只能用于数值列，默认起始值从1开始，每次增长1</p>
</li>
</ul>
<h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p><code>ALTER TABLE tablename ADD column 列的数据格式 约束</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 默认自动添加到数据表字段的末尾</span></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_info <span class="keyword">add</span> id1 <span class="type">int</span>;      </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.081</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">desc</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type                      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>             <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned zerofill <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)             <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)               <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> datetime     <span class="operator">|</span> datetime                  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span>  </span><br><span class="line"><span class="operator">|</span> id1          <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.040</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果要在第一列添加，最后面加 FIRST。</span></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_info <span class="keyword">add</span> id <span class="type">int</span> <span class="keyword">first</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.087</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">desc</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type                      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>             <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned zerofill <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)             <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)               <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> datetime     <span class="operator">|</span> datetime                  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.038</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果要加在某一列的后面，在最后面加个 AFTER column 约束</span></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_info <span class="keyword">add</span> id2 <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> after price;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.078</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">desc</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type                      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>             <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned zerofill <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)             <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id2          <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)               <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> datetime     <span class="operator">|</span> datetime                  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.045</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>删除数据表的某一列</p>
<p><code>ALTER TABLE tablename drop column</code></p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_info <span class="keyword">drop</span> id;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.087</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">desc</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type                      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>             <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned zerofill <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)             <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)               <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> datetime     <span class="operator">|</span> datetime                  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id1          <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.043</span> sec)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改列的类型和名称</li>
</ol>
<p><code>ALTER TABLE tablename MODIFY column 数据格式 [约束]</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_info modify id2 <span class="type">float</span>(<span class="number">10</span>,<span class="number">2</span>) ZEROFILL <span class="keyword">null</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.101</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">desc</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type                          <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>             <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned zerofill     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)                 <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id2          <span class="operator">|</span> <span class="type">float</span>(<span class="number">10</span>,<span class="number">2</span>) unsigned zerofill <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> datetime     <span class="operator">|</span> datetime                      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id1          <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.042</span> sec)</span><br></pre></td></tr></table></figure>

<p><code>ALTER TABLE tablename CHANGE 旧列名 新列名 数据格式</code> (覆盖式操作)</p>
   <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> order_info change id2 id3 <span class="type">int</span>(<span class="number">3</span>); </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.099</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">desc</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type                      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>             <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned zerofill <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)             <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id3          <span class="operator">|</span> <span class="type">int</span>(<span class="number">3</span>)                    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)               <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> datetime     <span class="operator">|</span> datetime                  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id1          <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.040</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ol>
<li>增</li>
</ol>
<p><code>Inster into tablename (column1, column2, column3, ...) values (value1, value2, value3, ...)</code></p>
<ul>
<li>插入的数据应与字段的数据类型相同</li>
<li>数据的大小应在列的规定范围内，例如：不能将一个长度为80的字符串加入到长度为40列中</li>
<li>在values中列出的数据位置必须与被加入的列的排列位置相对应</li>
<li>字符应包含在引号中</li>
<li>列名不加单双引号</li>
<li>插入的数据与列名数量相同，可以不写列名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">desc</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type                      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>             <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>) unsigned zerofill <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)             <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)               <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> datetime     <span class="operator">|</span> datetime                  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)                   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------------------+------+-----+---------------------+-------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.051</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_info (order_id, price, order_status, product_id, datetime, user_id) <span class="keyword">values</span> (<span class="string">&#x27;01&#x27;</span>,<span class="number">4.2</span>,<span class="string">&#x27;nopay&#x27;</span>,<span class="number">3306</span>,<span class="string">&#x27;2009-01-01 00:00:00&#x27;</span>,<span class="number">75651</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.041</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.039</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="string">&#x27;03&#x27;</span>,<span class="number">4.2</span>,<span class="string">&#x27;nopay&#x27;</span>,<span class="number">3306</span>,<span class="string">&#x27;2009-01-01 00:00:00&#x27;</span>,<span class="number">75651</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.041</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_info <span class="keyword">values</span> (<span class="string">&#x27;02&#x27;</span>,<span class="number">4.2</span>,<span class="string">&#x27;nopay&#x27;</span>,<span class="number">3306</span>,<span class="string">&#x27;2009-01-01 00:00:00&#x27;</span>,<span class="number">75651</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.043</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000002</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000003</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.040</span> sec)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查</li>
</ol>
<p><code>SELECT * FROM tablename</code></p>
<p><code>SELECT field1, field2, ... from tablename</code></p>
<ul>
<li>Select 后面跟查询哪些列的数据</li>
<li>*号代表查询所有列，field指定列名</li>
<li>From指定查询哪张表</li>
<li>别名 <code>SELECT field as 别名 from 表名</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.039</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> product_id, price <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+</span></span><br><span class="line"><span class="operator">|</span> product_id <span class="operator">|</span> price <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.038</span> sec)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>改</li>
</ol>
<p><code>update 表名 set 列名称=新值 where 列名称=某值</code></p>
<ul>
<li>UPDATE 语法可以用新值更新原有表行中的各列</li>
<li>SET子句指示要修改哪些列和要给予哪些值</li>
<li>WHERE子句指定应更新哪些行。如果没有WHERE子句，更新所有行</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000002</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000003</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.044</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> update order_info <span class="keyword">set</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span> <span class="keyword">where</span> order_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.041</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000002</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000003</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.039</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> update order_info <span class="keyword">set</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.042</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">3</span>  Changed: <span class="number">2</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000002</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000003</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.042</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--更改多个值</span></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> update order_info <span class="keyword">set</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span>, datetime <span class="operator">=</span> <span class="string">&#x27;1990-01-01&#x27;</span> <span class="keyword">where</span> order_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.050</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000002</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000003</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.036</span> sec)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>删 <strong>(慎用)</strong></li>
</ol>
<p><code>delete from tablename where 条件</code></p>
<ul>
<li>如果不适用where子句，将删除表中所有数据</li>
<li>Delete语句不能删除某一列的值（可使用update）</li>
<li>使用delete语句仅删除符合where条件的行的数据，不删除表中其他行和表本身</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> order_info <span class="keyword">where</span> order_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.051</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.50</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3894</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">23245</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000003</span> <span class="operator">|</span>  <span class="number">4.20</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3306</span> <span class="operator">|</span> <span class="number">2009</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">75651</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.038</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> order_info;</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.041</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.040</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="SELECT语句——WHERE子句"><a href="#SELECT语句——WHERE子句" class="headerlink" title="SELECT语句——WHERE子句"></a>SELECT语句——WHERE子句</h3><p><img src="select.png"></p>
<p><strong>null不参与模糊匹配</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 练习</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 满足价格大于等于9的所有信息</span></span><br><span class="line"><span class="comment">2. 查找满足product_id在1002和1003之间的</span></span><br><span class="line"><span class="comment">3. 查找user_id在1、3、5这三个数内的信息</span></span><br><span class="line"><span class="comment">4. 查找订单状态是已支付的信息</span></span><br><span class="line"><span class="comment">5. 查找用户名类似于已li开头的信息</span></span><br><span class="line"><span class="comment">6. 查找用户名中第二个字母是h的信息</span></span><br><span class="line"><span class="comment">7. 查找用户名中第二个字母不是h的信息</span></span><br><span class="line"><span class="comment">8. 查找用户名中最后一个字母以i结尾的信息</span></span><br><span class="line"><span class="comment">9. 查找价格大于8，并且订单状态是已支付的所有信息</span></span><br><span class="line"><span class="comment">10.查找用户表中user_nick为null的信息</span></span><br><span class="line"><span class="comment">11.查找用户表中user_nick为 not null的信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info_table <span class="keyword">where</span> price <span class="operator">&gt;=</span> <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info_table <span class="keyword">where</span> product_id <span class="keyword">between</span> <span class="number">1002</span> <span class="keyword">and</span> <span class="number">1003</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info_table <span class="keyword">where</span> user_id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info_table <span class="keyword">where</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_name <span class="keyword">like</span> <span class="string">&#x27;li%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_name <span class="keyword">like</span> <span class="string">&#x27;_h%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_name <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;_h%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_name <span class="keyword">like</span> <span class="string">&#x27;%i&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info_table <span class="keyword">where</span> price <span class="operator">&gt;</span> <span class="number">8</span> <span class="keyword">and</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_nick <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_nick <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="数据表排序、聚合、分组"><a href="#数据表排序、聚合、分组" class="headerlink" title="数据表排序、聚合、分组"></a>数据表排序、聚合、分组</h3><h4 id="1-排序子句"><a href="#1-排序子句" class="headerlink" title="1. 排序子句"></a>1. 排序子句</h4><p>使用order by 子句对查询结果进行排序</p>
<p><code>order by 指定排序的列 [Asc 升序 默认] Desc(descent降序)</code></p>
<p>ORDER BY 子句一般位于SELECT语句结尾，LIMIT语句之前</p>
<h4 id="2-常用聚合函数"><a href="#2-常用聚合函数" class="headerlink" title="2. 常用聚合函数"></a>2. 常用聚合函数</h4><ul>
<li><p>DISTINCT 对某一列数据去重</p>
<p><code>SELECT DISTINCT 列名 FROM 表名</code> 显示此列不重复的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> order_id   <span class="operator">|</span> price <span class="operator">|</span> order_status <span class="operator">|</span> product_id <span class="operator">|</span> datetime            <span class="operator">|</span> user_id     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000001</span> <span class="operator">|</span>  <span class="number">4.50</span> <span class="operator">|</span> nopay        <span class="operator">|</span>       <span class="number">3894</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="number">23245</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000002</span> <span class="operator">|</span>  <span class="number">8.67</span> <span class="operator">|</span> nopay        <span class="operator">|</span>      <span class="number">32894</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> <span class="number">-1234567890</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000003</span> <span class="operator">|</span>  <span class="number">3.67</span> <span class="operator">|</span> pay          <span class="operator">|</span>       <span class="number">3894</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="number">23245</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000000005</span> <span class="operator">|</span>  <span class="number">8.67</span> <span class="operator">|</span> nopay        <span class="operator">|</span>      <span class="number">32894</span> <span class="operator">|</span> <span class="number">1990</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>       <span class="number">22245</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------------+------------+---------------------+-------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.038</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> order_status <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> order_status <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> nopay        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> pay          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.040</span> sec)</span><br></pre></td></tr></table></figure></li>
<li><p>COUNT 统计总行数</p>
<ul>
<li>count(*) ：包括所有列，返回表中的总行数，在统计结果的时候，不会忽略列值为NULL的行数</li>
<li>count(1)：包括所有列，1表示一个固定值，没有实际含义，在统计结果的时候，不会忽略列值为NULL的行数。和count(*)区别是执行效率不同</li>
<li>count(列名)：只包括列名指定列，返回指定列的行数，在统计结果的时候，不统计列值为NULL的行数</li>
<li>count (DISTINCT 列名) 返回指定列的不重复的行数，在统计结果的时候，会忽略值为NULL的行数(不包括空字符串和0)，即列值为NULL的行数不统计在内</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.041</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [DYJ]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> order_status) <span class="keyword">from</span> order_info;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> order_status) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                            <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.042</span> sec)</span><br></pre></td></tr></table></figure>

<p>count(*) &amp; count(1) &amp; count (column) 执行效率比较：</p>
<ul>
<li>如果列为主键，count (column) 效率优于count(1)</li>
<li>如果列不为主键，count(1)效率优于count(column)</li>
<li>如果表中存在主键，count(主键列名)效率最优</li>
<li>如果表中只有一列，则count(*)效率最忧</li>
<li>如果表有多列，且不存在主键，则count(1)效率优于count(*)</li>
</ul>
</li>
</ul>
<p>常用聚合函数</p>
<ul>
<li>最大值、最小值——MAX/MIN</li>
<li>MAX/MIN函数返回满足where条件的一列的最大值/最小值</li>
<li>AVG函数返回满足where条件俺的列平均值</li>
<li>SUM函数返回满足where条件的一列求和</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(<span class="keyword">column</span>) <span class="keyword">from</span> tablename</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="keyword">column</span>) <span class="keyword">from</span> tablename</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">column</span>) <span class="keyword">from</span> tablename</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">column</span>) <span class="keyword">from</span> tablename</span><br><span class="line"><span class="comment">-- 也可跟where子句</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [mb21030502]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">avg</span>(price),<span class="built_in">sum</span>(price),<span class="built_in">min</span>(price),<span class="built_in">max</span>(price) <span class="keyword">from</span> order_info_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">avg</span>(price) <span class="operator">|</span> <span class="built_in">sum</span>(price) <span class="operator">|</span> <span class="built_in">min</span>(price) <span class="operator">|</span> <span class="built_in">max</span>(price) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">11.990000</span> <span class="operator">|</span>     <span class="number">119.90</span> <span class="operator">|</span>       <span class="number">4.99</span> <span class="operator">|</span>      <span class="number">29.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.042</span> sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 练习</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 查找订单表中最大的价格，查找订单表中最小的价格</span></span><br><span class="line"><span class="comment">2. 查找订单表中user_id=2的最小价格</span></span><br><span class="line"><span class="comment">3. 分别列出订单表中user_id=2的最小价格和最大价格</span></span><br><span class="line"><span class="comment">4. 分别列出订单表中user_id=2的最小价格和最大价格，并把最小价格的展示结果的列名改为&quot;min_price&quot;</span></span><br><span class="line"><span class="comment">5. 求订单表的价格的平均值，求订单表中user_id=2的价格的平均值</span></span><br><span class="line"><span class="comment">6. 分别列出订单表中user_id=2的价格的平均值、最小值、最大值</span></span><br><span class="line"><span class="comment">7. 求订单表中user_id=1的价格的总和</span></span><br><span class="line"><span class="comment">8. 求订单表中user_id=1或者user_id=3的价格总和</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(price) <span class="built_in">min</span>(price) <span class="keyword">from</span> order_info_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(price) <span class="keyword">from</span> order_info_table <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(price),<span class="built_in">max</span>(price) <span class="keyword">from</span> order_info_table <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(price),<span class="built_in">min</span>(price) <span class="keyword">as</span> min_price <span class="keyword">from</span> order_info_table <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(price), <span class="built_in">min</span>(price), <span class="built_in">max</span>(price) <span class="keyword">from</span> order_info_table <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(price) <span class="keyword">from</span> order_info_table <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(price) <span class="keyword">from</span> order_info_table <span class="keyword">where</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>LIMIT用法</p>
<p><code>select * from tablename limit m,n</code></p>
<p>m指从哪一行开始，0为第一行。n指第m+1行开始，取n条</p>
<p><code>select * from tablename limit 0,2</code>从第1行开始，显示2行数据</p>
<p>  如果只给定一个参数，它表示返回最大值的行数目 <code>select * from tablename limit 5</code> 返回前5行。即LIMIT n等价于 LIMIT 0,n</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- \G 将一行数据转化成列的方式展示</span></span><br><span class="line">MySQL [mb21030502]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info_table limit <span class="number">1</span>,<span class="number">4</span> \G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    order_id: <span class="number">0000000002</span></span><br><span class="line">       price: <span class="number">9.99</span></span><br><span class="line">order_status: nopay</span><br><span class="line">  product_id: <span class="number">1002</span></span><br><span class="line">     created: <span class="number">2019</span><span class="number">-09</span><span class="number">-26</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">26</span></span><br><span class="line">     user_id: <span class="number">1</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    order_id: <span class="number">0000000003</span></span><br><span class="line">       price: <span class="number">4.99</span></span><br><span class="line">order_status: nopay</span><br><span class="line">  product_id: <span class="number">1001</span></span><br><span class="line">     created: <span class="number">2019</span><span class="number">-09</span><span class="number">-25</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">26</span></span><br><span class="line">     user_id: <span class="number">2</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    order_id: <span class="number">0000000004</span></span><br><span class="line">       price: <span class="number">9.99</span></span><br><span class="line">order_status: nopay</span><br><span class="line">  product_id: <span class="number">1002</span></span><br><span class="line">     created: <span class="number">2019</span><span class="number">-09</span><span class="number">-24</span> <span class="number">10</span>:<span class="number">25</span>:<span class="number">26</span></span><br><span class="line">     user_id: <span class="number">2</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    order_id: <span class="number">0000000005</span></span><br><span class="line">       price: <span class="number">19.99</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>GROUP BY</li>
</ol>
<p>使用group by子句对列进行分组，having通常跟在group by后，用于分组</p>
<ul>
<li>不加having过滤  <code>select field 聚合函数 from tablename where 子句 group by field</code></li>
<li>加having过滤  <code>select field 聚合函数 from tablename where 子句 group by having 聚合函数 过滤条件</code></li>
<li>group by 只能展示分组的列名和聚合函数的结果，因为其余列已经基于分组这一列合并</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 联合分组</span></span><br><span class="line">MySQL [mb21030502]<span class="operator">&gt;</span> <span class="keyword">select</span> product_id,order_status,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> order_info_table  <span class="keyword">group</span> <span class="keyword">by</span> product_id,order_status;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> product_id <span class="operator">|</span> order_status <span class="operator">|</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1001</span> <span class="operator">|</span> nopay        <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1001</span> <span class="operator">|</span> pay          <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1002</span> <span class="operator">|</span> nopay        <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1002</span> <span class="operator">|</span> pay          <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1003</span> <span class="operator">|</span> pay          <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+----------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.039</span> sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--练习</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 首先筛选状态为已支付的订单，然后按照user_id分组，分组后每一组对支付金额进行求 和，最终展示user_id和对应组求和金额</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 首先筛选状态为支付的订单，然后按照user_id分组，分组后每一组对支付金额进行求和，再过滤求和金额大于10的，最终展示user_id和对应组的求和金额</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> user_id,<span class="built_in">sum</span>(price) <span class="keyword">from</span> order_info_table <span class="keyword">where</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> user_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> user_id,<span class="built_in">sum</span>(price) <span class="keyword">from</span> order_info_table <span class="keyword">where</span> order_status <span class="operator">=</span> <span class="string">&#x27;pay&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> <span class="built_in">sum</span>(price) <span class="operator">&gt;</span> <span class="number">10</span> [<span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">sum</span>(price) <span class="keyword">desc</span>];</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>数据表连接查询和子查询</li>
</ol>
<ul>
<li><p>两张表连接查询</p>
<ul>
<li><p>INNER JOIN</p>
<ul>
<li>获取两个表字段匹配关系的行的所有信息</li>
<li><code>SELECT * FROM tablename [a] INNER JOIN tablename [b] ON [a].column = [b].column</code></li>
</ul>
</li>
<li><p>LEFT JOIN</p>
<ul>
<li>获取左表所有行信息，即使右表没有对应匹配的行信息，右表没有的部分用NULL代替</li>
<li><code>SELECT * FROM tablename [a] LEFT JOIN tablename [b] ON [a].column = [b].column</code></li>
</ul>
</li>
<li><p>RIGHT JOIN</p>
<ul>
<li>获取右表所有行信息，即使左表没有对应匹配的行信息，左表没有的部分用NULL代替</li>
<li><code>SELECT * FROM tablename [a] RIGHT JOIN tablename [b] ON [a].column = [b].column</code></li>
</ul>
</li>
</ul>
</li>
<li><p>子查询</p>
<p>且套在其他查询中的查询</p>
<p><code>SELECT column1 from table1 where column column2 in(select column2 from table2 where column3 = 某某)</code></p>
<p><strong>一般在子查询中，程序优先运行在嵌套最内层的语句，再运行外层。因此在写子查询语句的时候，可以先测试内层的子查询语句是否输出了想要的内容，再一层层往外测试，增加子查询正确率</strong></p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 练习</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询订单表中的价格大于10元的用户的昵称（小提示：用户昵称在用户表中，订单价格在订单表中）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> b.user_nick <span class="keyword">from</span> user_info_table b <span class="keyword">INNER</span> <span class="keyword">JOIN</span> order_info_table a <span class="keyword">ON</span> b.user_id <span class="operator">=</span> a.user_id <span class="keyword">where</span> a.price <span class="operator">&gt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> user_nick <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_id <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> order_info_table <span class="keyword">where</span> price <span class="operator">&gt;</span> <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.查询用户名以l开头的用户买过的所有订单id和对应价格（小提示：订单id和对应价格在订单表中，用户名在用户表中）</span></span><br><span class="line"><span class="keyword">select</span> a.order_id, a.price <span class="keyword">from</span> order_info_table a <span class="keyword">where</span> a.user_id <span class="keyword">in</span> (<span class="keyword">select</span> user_id  <span class="keyword">from</span> user_info_table <span class="keyword">where</span> user_name <span class="keyword">like</span> &quot;l%&quot;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyenv python版本管理</title>
    <url>/2021/01/31/Pyenv-python%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我觉得如果使用 python 开发的话，还是在 unix/linux 的环境下吧，shell 工具的效率比 windows 高得多，尽管 windows 下也有 cmder 这种神器，而且现在 windows store 也很好的开发出了 linux 子系统，但是瑕疵非常多，unix/linux 才是完美的环境。本文用到的是 archlinux ，另外 debian/ubuntu、centos 也完全适用。mac 用户也可以参考，不过 homebrew 也提供了非常方便的安装方法，但是建议使用文本做法。</p>
<span id="more"></span>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>python 版本比较多，2 和 3 相差非常大，很多项目需要跑在同一台服务器上，我们可以选择直接运行，也可以选择使用 docker。如果用 docker 那就不需要隔离环境了，如果要直接运行在服务器上，那就必须有隔离环境。比如有的项目使用 python 3.5，有的项目使用 python 3.7，此时我们可以借助 pyenv 帮助我们完美的隔离环境，让多个版本的 python 没有任何冲突，完美共存。</p>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>使用 pyenv 和 pyenv-virtualenv ，在 linux 下完美隔离 python 各个版本</p>
<h2 id="第-1-章：使用环境"><a href="#第-1-章：使用环境" class="headerlink" title="第 1 章：使用环境"></a>第 1 章：使用环境</h2><ul>
<li>操作系统：<a href="https://www.archlinux.org/">archlinux</a></li>
<li>shell：<a href="https://github.com/robbyrussell/oh-my-zsh">zsh</a></li>
</ul>
<p><strong>请注意，接下来所有的操作都在 archlinux 下进行，本文不涉及 windows</strong></p>
<h3 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h3><ol>
<li>git</li>
<li>zsh 或者 bash</li>
<li><a href="https://github.com/pyenv/pyenv.git">pyenv</a></li>
<li><a href="https://github.com/pyenv/pyenv-virtualenv.git">pyenv-virtualenv</a></li>
</ol>
<h3 id="1、安装-git"><a href="#1、安装-git" class="headerlink" title="1、安装 git"></a>1、安装 git</h3><p>在各大 linux 的发行版下安装 git 都非常简单，此处只展示部分示例</p>
<h4 id="archlinux"><a href="#archlinux" class="headerlink" title="archlinux"></a>archlinux</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S git</span></span><br></pre></td></tr></table></figure>

<h4 id="debian-ubuntu"><a href="#debian-ubuntu" class="headerlink" title="debian/ubuntu"></a>debian/ubuntu</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install git</span><br></pre></td></tr></table></figure>

<h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>

<h3 id="2、开启终端"><a href="#2、开启终端" class="headerlink" title="2、开启终端"></a>2、开启终端</h3><p>本文使用 zsh</p>
<h3 id="3、安装-pyenv"><a href="#3、安装-pyenv" class="headerlink" title="3、安装 pyenv"></a>3、安装 pyenv</h3><p>*<strong>说明：本文的所有安装都严格遵守官方文档，与官方文档完全保持一致。*</strong></p>
<p>git 地址：<a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv</a></p>
<p>在你的终端中执行如下命令，安全无毒，请放心食用：</p>
<p>首先把项目克隆下来，放在家目录下的隐藏文件夹中：.pyenv</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/pyenv/</span>pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure>

<p>然后配置环境变量</p>
<h5 id="如果你使用-bash，就依次执行如下命令："><a href="#如果你使用-bash，就依次执行如下命令：" class="headerlink" title="如果你使用 bash，就依次执行如下命令："></a>如果你使用 bash，就依次执行如下命令：</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> &#x27;export PYENV_ROOT=<span class="string">&quot;$HOME/.pyenv&quot;</span>&#x27; &gt;&gt; ~<span class="string">/.bashrc</span></span><br><span class="line"><span class="keyword">echo</span> &#x27;export PATH=<span class="string">&quot;$PYENV_ROOT/bin:$PATH&quot;</span>&#x27; &gt;&gt; ~<span class="string">/.bashrc</span></span><br><span class="line"><span class="keyword">echo</span> -e &#x27;<span class="keyword">if</span> <span class="keyword">command</span> -v pyenv 1&gt;<span class="string">/dev/null</span> 2&gt;&amp;1; then\n eval <span class="string">&quot;$(pyenv init -)&quot;</span>\nfi&#x27; &gt;&gt; ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure>

<h5 id="如果你使用-zsh，就依次执行如下命令："><a href="#如果你使用-zsh，就依次执行如下命令：" class="headerlink" title="如果你使用 zsh，就依次执行如下命令："></a>如果你使用 zsh，就依次执行如下命令：</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> &#x27;export PYENV_ROOT=<span class="string">&quot;$HOME/.pyenv&quot;</span>&#x27; &gt;&gt; ~<span class="string">/.zshrc</span></span><br><span class="line"><span class="keyword">echo</span> &#x27;export PATH=<span class="string">&quot;$PYENV_ROOT/bin:$PATH&quot;</span>&#x27; &gt;&gt; ~<span class="string">/.zshrc</span></span><br><span class="line"><span class="keyword">echo</span> -e &#x27;<span class="keyword">if</span> <span class="keyword">command</span> -v pyenv 1&gt;<span class="string">/dev/null</span> 2&gt;&amp;1; then\n eval <span class="string">&quot;$(pyenv init -)&quot;</span>\nfi&#x27; &gt;&gt; ~<span class="string">/.zshrc</span></span><br></pre></td></tr></table></figure>

<p>echo 命令的含义是：将引号中内容写入某文件中<br> 请注意，以上的三条 echo 命令的最后一条长长的命令，请你保证它引号中的内容处于 ~/.bashrc 或者 ~/.zshrc 的最底部。<br> 因为在 pyenv 初始化期间会操作 path 环境变量，导致不可预测的行为。<br> 查看文件的底部内容，可以使用 tail 命令，用法：tail ~/.bashrc 或者 tail ~/.zshrc，编辑文件可以使用 vim 或者 vscode</p>
<p>最后，在使用 pyenv 之前，重新初始化 shell 环境，执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<p>不执行该命令也是完全可以的，你可以关闭当前的终端窗口，重新启动一个就可以了。</p>
<p>此时，你已经完成了 pyenv 的安装了，你使用可以它的全部命令了，但是我建议你先别急着用，一口气装完 pyenv 的一个插件，那就是 pyenv-virtualenv</p>
<h3 id="4、安装-pyenv-virtualenv"><a href="#4、安装-pyenv-virtualenv" class="headerlink" title="4、安装 pyenv-virtualenv"></a>4、安装 pyenv-virtualenv</h3><p>git 地址：<a href="https://github.com/pyenv/pyenv-virtualenv">https://github.com/pyenv/pyenv-virtualenv</a></p>
<p>把插件克隆在刚才已经安装完毕的 pyenv 的 plugins 文件夹中</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/pyenv/</span>pyenv-virtualenv.git $(pyenv root)<span class="regexp">/plugins/</span>pyenv-virtualenv</span><br></pre></td></tr></table></figure>

<p>然后配置环境变量</p>
<h5 id="如果你使用-bash，就执行如下命令："><a href="#如果你使用-bash，就执行如下命令：" class="headerlink" title="如果你使用 bash，就执行如下命令："></a>如果你使用 bash，就执行如下命令：</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> &#x27;eval <span class="string">&quot;$(pyenv virtualenv-init -)&quot;</span>&#x27; &gt;&gt; ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure>

<h5 id="如果你使用-zsh，就执行如下命令："><a href="#如果你使用-zsh，就执行如下命令：" class="headerlink" title="如果你使用 zsh，就执行如下命令："></a>如果你使用 zsh，就执行如下命令：</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> &#x27;eval <span class="string">&quot;$(pyenv virtualenv-init -)&quot;</span>&#x27; &gt;&gt; ~<span class="string">/.zshrc</span></span><br></pre></td></tr></table></figure>

<p>最后，在使用 pyenv 之前，重新初始化 shell 环境，执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<p>不执行该命令也是完全可以的，你可以关闭当前的终端窗口，重新启动一个就可以了。</p>
<p>到此，我们的所有重要安装已经全部完成了，可以开始体验了。</p>
<h2 id="第-2-章：使用-pyenv"><a href="#第-2-章：使用-pyenv" class="headerlink" title="第 2 章：使用 pyenv"></a>第 2 章：使用 pyenv</h2><p>*<strong>此处仅仅展示 pyenv 和 virtualenv 的日常用法*</strong></p>
<h3 id="检查安装是否正确"><a href="#检查安装是否正确" class="headerlink" title="检查安装是否正确"></a>检查安装是否正确</h3><p>检查 pyenv 的版本</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>查看 pyenv 已经托管了哪些 python 版本</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pyenv versions</span></span><br></pre></td></tr></table></figure>

<p>如果你看到了正常的版本信息，就说明可以了，如果看到了类似于 command not found 之类的，就说明安装失败了。</p>
<h3 id="安装-3-7-4版本的-python"><a href="#安装-3-7-4版本的-python" class="headerlink" title="安装 3.7.4版本的 python"></a>安装 3.7.4版本的 python</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pyenv</span> install <span class="number">3</span>.<span class="number">7</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>可以先使用国内的python镜像网站下载好对应的python tar.xz包，放置于$HOME/.pyenv/cache/目录下<strong>解压</strong>，然后再使用安装命令安装的曲线方案。</p>
<p>安装完这些补充的工具之后，再次执行：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pyenv</span> install <span class="number">3</span>.<span class="number">7</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>就可以成功了，你可以不断的使用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pyenv versions</span></span><br></pre></td></tr></table></figure>

<p>来查看被 pyenv 托管的 python 版本</p>
<p>而且你想装什么版本就装什么版本，想装几个装几个，都是完美共存，完美隔离，你可以在终端里输入</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pyenv <span class="keyword">install</span></span><br></pre></td></tr></table></figure>

<p>然后按下 tab 键，就可以看到所有可选的安装版本了</p>
<h3 id="使用刚才安装的-python-3-7-4"><a href="#使用刚才安装的-python-3-7-4" class="headerlink" title="使用刚才安装的 python 3.7.4"></a>使用刚才安装的 python 3.7.4</h3><p>首先我们需要明确一个概念，pyenv 和 pyenv-virtualenv 他们是如何协作的，你可以这么认为：</p>
<p><strong>pyenv 托管 python 版本，virtualenv 使用 python 版本</strong></p>
<p>好了，之前已经装好了版本，那么现在就来使用吧</p>
<h4 id="第-1-步：创建虚拟环境"><a href="#第-1-步：创建虚拟环境" class="headerlink" title="第 1 步：创建虚拟环境"></a>第 1 步：创建虚拟环境</h4><p>首先需要创建一个虚拟环境，执行命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pyenv</span> virtualenv <span class="number">3</span>.<span class="number">7</span>.<span class="number">4</span> my-env</span><br></pre></td></tr></table></figure>

<p>它的格式就是这样固定的，最后一个是你自己想要的环境的名字，可以随便取。稍等片刻，你将会看到：</p>
<p>*<strong>Looking in links: /tmp/tmp0eywgc7v*</strong><br> *<strong>Requirement already satisfied: setuptools in /home/joit/.pyenv/versions/3.6.6/envs/my-env/lib/python3.6/site-packages (39.0.1)*</strong><br> *<strong>Requirement already satisfied: pip in /home/joit/.pyenv/versions/3.6.6/envs/my-env/lib/python3.6/site-packages (10.0.1)*</strong></p>
<p>类似于这样的回显信息，说明环境已经创建成功了，它还告诉了你，该虚拟环境的绝对路径，如果你进去看了，你就会发现，所谓的虚拟环境，就是把 python 装在 pyenv 的安装目录的某个文件夹中，以供它自己调用。</p>
<h4 id="第-2-步：激活虚拟环境"><a href="#第-2-步：激活虚拟环境" class="headerlink" title="第 2 步：激活虚拟环境"></a>第 2 步：激活虚拟环境</h4><p>在任意目录下，执行命令：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">activate</span> <span class="keyword">my</span>-env</span><br><span class="line"></span><br><span class="line">pyenv deactivate <span class="comment"># 退出虚拟环境</span></span><br></pre></td></tr></table></figure>

<p>你会发现，在你的终端里面，多了一个类似于 <code>(my-env)</code> 这样的一个东西，这时候你如果执行：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> --<span class="keyword">version</span></span><br></pre></td></tr></table></figure>

<p>那就是 python 3.7.4 了</p>
<p>如果你执行：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">pip <span class="comment">--version</span></span><br></pre></td></tr></table></figure>

<p>它会告诉你 pip 包安装的绝对路径，也是 pyenv 安装目录下的某个文件夹</p>
<p>如果你关掉了终端，那么下次启动你又得重新激活一次了，你可以使用如下命令：</p>
<p>首先 cd 到某一个目录，比如 ~/test</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>然后在该目录下执行：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">pyenv <span class="keyword">local</span> <span class="keyword">my</span>-env</span><br></pre></td></tr></table></figure>

<p>你会发现已经被激活了，那么 local 命令和刚才有啥不同呢。如果你执行：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">al</span></span><br></pre></td></tr></table></figure>

<p>你就会发现，在 ~/test 目录下，有个隐藏文件 .python-version，你可以看到这个文件里面，只写了一句话 my-env</p>
<p>这样你只要进入 ~/test 目录，就会自动激活虚拟环境</p>
<p>在虚拟环境下，你如果直接执行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span></span><br></pre></td></tr></table></figure>

<p>就会进入到 python 的交互环境</p>
<p>如果你写了一个文件，名字叫做 app.py ，里面的内容只有一句代码：print(1)</p>
<p>然后执行：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> app.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p>这时候，系统就会调用虚拟环境中的 python 解释器来执行这些代码了</p>
<h2 id="第-3-章：更新-pyenv"><a href="#第-3-章：更新-pyenv" class="headerlink" title="第 3 章：更新 pyenv"></a>第 3 章：更新 pyenv</h2><p>由于我们是 git 克隆的，所以更新非常简单</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">cd ~/.pyenv` 或者 `cd $(pyenv root)`</span><br><span class="line"> `git pull</span><br></pre></td></tr></table></figure>

<h2 id="第-4-章：卸载-pyenv"><a href="#第-4-章：卸载-pyenv" class="headerlink" title="第 4 章：卸载 pyenv"></a>第 4 章：卸载 pyenv</h2><p>由于 pyenv 把一切都放在 ~/.pyenv 下了，所以卸载很方便，两个步骤就行了</p>
<p>首先你需要删除环境变量</p>
<p>然后你需要执行：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.pyenv` 或者 `rm -rf <span class="constructor">$(<span class="params">pyenv</span> <span class="params">root</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python文件</title>
    <url>/2021/06/07/Python%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="open-方法"><a href="#open-方法" class="headerlink" title="open 方法"></a>open 方法</h3><p>Python open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程中都需要使用这个函数，如果文件无法被打开，会抛出OSError</p>
<span id="more"></span>

<p><strong>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法</strong></p>
<p>open() 函数常用形式是接收两个参数：文件名(file)和模式(mode)</p>
<p><code>opne(file,momde=&#39;r&#39;)</code></p>
<p>完整的语法格式为：</p>
<p><code>open(file,mode=&#39;r&#39;,buffering=-1,encoding=None,errors=None,newline=None, closefd=True, opener=None)</code></p>
<p>参数说明</p>
<ul>
<li>file: 必需，文件路径（相对或者绝对路径）。</li>
<li>mode: 可选，文件打开模式</li>
<li>buffering: 设置缓冲</li>
<li>encoding: 一般使用utf8</li>
<li>errors: 报错级别</li>
<li>newline: 区分换行符</li>
<li>closefd: 传入的file参数类型</li>
<li>opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。</li>
</ul>
<p>mode参数有：</p>
<table>
<thead>
<tr>
<th>t</th>
<th>文本模式 (默认)。</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td>b</td>
<td>二进制模式。</td>
</tr>
<tr>
<td>+</td>
<td>打开一个文件进行更新(可读可写)。</td>
</tr>
<tr>
<td>U</td>
<td>通用换行模式（<strong>Python 3 不支持</strong>）。</td>
</tr>
<tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<p>默认为文本模式，如果要以二进制模式打开，加上<em>b</em></p>
<p><strong>file 对象</strong></p>
<p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p>
<table>
<thead>
<tr>
<th>1</th>
<th><a href="https://www.runoob.com/python3/python3-file-close.html">file.close()</a>关闭文件。关闭后文件不能再进行读写操作。</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td><a href="https://www.runoob.com/python3/python3-file-flush.html">file.flush()</a>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://www.runoob.com/python3/python3-file-fileno.html">file.fileno()</a>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://www.runoob.com/python3/python3-file-isatty.html">file.isatty()</a>如果文件连接到一个终端设备返回 True，否则返回 False。</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://www.runoob.com/python3/python3-file-next.html">file.next()</a><strong>Python 3 中的 File 对象不支持 next() 方法。</strong>返回文件下一行。</td>
</tr>
<tr>
<td>6</td>
<td>[file.read(<a href="https://www.runoob.com/python3/python3-file-read.html">size])</a>从文件读取指定的字节数，如果未给定或为负则读取所有。</td>
</tr>
<tr>
<td>7</td>
<td>[file.readline(<a href="https://www.runoob.com/python3/python3-file-readline.html">size])</a>读取整行，包括 “\n” 字符。</td>
</tr>
<tr>
<td>8</td>
<td>[file.readlines(<a href="https://www.runoob.com/python3/python3-file-readlines.html">sizeint])</a>读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td>
</tr>
<tr>
<td>9</td>
<td>[file.seek(offset<a href="https://www.runoob.com/python3/python3-file-seek.html">, whence])</a>移动文件读取指针到指定位置</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://www.runoob.com/python3/python3-file-tell.html">file.tell()</a>返回文件当前位置。</td>
</tr>
<tr>
<td>11</td>
<td>[file.truncate(<a href="https://www.runoob.com/python3/python3-file-truncate.html">size])</a>从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 windows 系统下的换行代表2个字符大小。</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://www.runoob.com/python3/python3-file-write.html">file.write(str)</a>将字符串写入文件，返回的是写入的字符长度。</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://www.runoob.com/python3/python3-file-writelines.html">file.writelines(sequence)</a>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody></table>
<h3 id="with-open"><a href="#with-open" class="headerlink" title="with open()"></a>with open()</h3><h4 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h4><p>要读取整个文件，需要包含几行文本文件。下面创建一个文件<strong>pi_digits.txt</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">8979323846</span><br><span class="line">2643383279</span><br></pre></td></tr></table></figure>

<p>下面程序打开并读取这个文件，在将其内容显示在屏幕上，<strong>file_reader.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi_digits.txt&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure>

<p>函数open()接受一个参数，要打开的文件名称。Python在当前执行的文件所在目录中查找指定的文件。函数open()返回一个表示文件的对象。在这里，open(‘pi_digits.txt’) 返回一个表示文件 pi_digits.txt 的对象；Python将这个对象存储在我们将在后面使用的变量中。</p>
<p>关键字with在不需要访问文件后将其关闭。在这个程序中，我们调用了open()，但没有调用close()；通过with open可以让Python去确定，在合适的时候将文件自动关闭。</p>
<p>在有了文件对象后，我们使用read()方法来读取这个文件的全部内容，并将其作为一个长长的字符串存储在变量contents中，再通过打印contents显示文本内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[william@William-arch Desktop]$ python file_reader.py</span><br><span class="line"><span class="number">3.1415926</span></span><br><span class="line"><span class="number">897479203</span></span><br><span class="line"><span class="number">937743020</span></span><br><span class="line"></span><br><span class="line">[william@William-arch Desktop]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>相比原始文件，该输出唯一不同的地方是末尾多了一行空行。为何多出一行空行呢？因为read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行。要删除多出来的空行，可在print语句中使用rstrip()：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi_digits.txt&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents.rstrip())</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch Desktop]$ python file_reader.py</span><br><span class="line">3.1415926</span><br><span class="line">897479203</span><br><span class="line">937743020</span><br><span class="line">[william@William-arch Desktop]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h4><p>注意Windows系统中，在文件路径中使用反斜杠（ \ ）而不是斜杠 ( / )</p>
<h4 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h4><p>读取文件时，常常需要检查其中的每一行：你可能要在文件中查找特定的信息，或者要以某种方式修改文件中的文本。</p>
<p>要以每次一行的方式检查文件，可对文件对象使用for循环<strong>file_reader.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch Desktop]$ python file_reader.py</span><br><span class="line">3.1415926</span><br><span class="line"></span><br><span class="line">897479203</span><br><span class="line"></span><br><span class="line">937743020</span><br><span class="line"></span><br><span class="line">[william@William-arch Desktop]$</span><br></pre></td></tr></table></figure>

<p>当然我们可以在print语句中使用rstrip()去除空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        <span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch Desktop]$ python test.py</span><br><span class="line">3.1415926</span><br><span class="line">897479203</span><br><span class="line">937743020</span><br><span class="line">[william@William-arch Desktop]$ </span><br></pre></td></tr></table></figure>

<h4 id="创建一个文件包含各行内容的列表"><a href="#创建一个文件包含各行内容的列表" class="headerlink" title="创建一个文件包含各行内容的列表"></a>创建一个文件包含各行内容的列表</h4><p>使用关键字with时，open()返回的文件对象只在with代码快内可用。如果要在with代码块外访问文件的内容，可在with代码块将文件的各行存储在一个列表中，并在with代码块外使用该列表：你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p>
<p>下面的是with代码块中将文件pi_digits.txt的各行存储在一个列表中，再在with代码块外打印它们：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure>

<p>我自己写了一个方法也可以实现上述操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        list1.append(line.rstrip())</span><br><span class="line">    <span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<h4 id="使用文件的内容"><a href="#使用文件的内容" class="headerlink" title="使用文件的内容"></a>使用文件的内容</h4><p>在读取文件到内存后，就可以以任何方式使用这些数据了。下面以简单的方式使用圆周率的值。首先，我们将创建一个字符串，它包含文件中存储的所有数字，且没有任何空格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_string.py&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_strinng += line.rstrip()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure>

<h4 id="包含一百万的大型文件"><a href="#包含一百万的大型文件" class="headerlink" title="包含一百万的大型文件"></a>包含一百万的大型文件</h4><p>前面我们分析的都是一个只有三行的文本文件，但这些代码也可处理大得多的文件。如果我们有一个文本文件，其中包含精确到小数点后1 000 000位而不是30位的圆周率值，也可创建一个包含所有这些数字的字符串。在这里我们只打印到小数点后50位，以免终端显示全部是1 000 000位而不断地翻滚：</p>
<p><strong>pi_string.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_million_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(pi_string[:<span class="number">52</span>] + <span class="string">&quot;...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure>

<p>对于你可处理的数据量，Python没有任何限制；只要系统的内存足够多，想处理多少数据都可以</p>
<h4 id="圆周率中包含你的生日吗"><a href="#圆周率中包含你的生日吗" class="headerlink" title="圆周率中包含你的生日吗"></a>圆周率中包含你的生日吗</h4><p>可将生日表示为一个由数字组成的字符串，再检查这个字符串是否包含在pi_string中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_million_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">birthday = <span class="built_in">input</span>(<span class="string">&quot;Enter your birthday, in the form mmddyy: &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> birthday <span class="keyword">in</span> pi_string:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your birthday appears in the first million digits of pi!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your birthday does not appear in the first million digits of pi.&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>10-1 Python 学习笔记：在文本编辑器中新建一个文件，写几句话来总结一下你至此学到的 Python 知识，其中每一行都以“In Python you can”打头。将这个文件命名为learning_python.txt，并将其存储到为完成本章练习而编写的程序所在的目录中。</p>
<p>编写一个程序，它读取这个文件，并将你所写的内容打印三次：</p>
<p>第一次打印时读取整个文件；</p>
<p>第二次打印时遍历文件对象；</p>
<p>第三次打印时将各行存储在一个列表中，再在 with 代码块外打印它们。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename=<span class="string">&#x27;第10章\learning_python.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents=file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一次打印读取整个文件：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(contents.strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次打印遍历文件对象：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        <span class="built_in">print</span>(line.strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:  </span><br><span class="line">    lines=file_object.readlines()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第三次打印将各行存储在一个列表中，再在with代码外打印它们：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line.strip())</span><br></pre></td></tr></table></figure>

<p><strong>这里本来想只写一遍with open的，但是发现，运行正常，但是第二三次没有打印，思考了一下，觉得应该是文件关闭，后面无法进行文件读取，试用了一下open()和close()发现也是一样，所以写了三遍with open用来进行文件读取，希望以后能遇到更好的解决办法</strong></p>
<p>10-2 C语言学习笔记：可使用方法 replace()将字符串中的特定单词都替换为另一个单词。下面是一个简单的示例，演示了如何将句子中的’dog’替换为’cat’：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&quot;I really like dogs.&quot;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message.replace(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>) </span><br><span class="line"><span class="string">&#x27;I really like cats.&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>读取你刚创建的文件 learning_python.txt 中的每一行，将其中的 Python 都替换为另一门语言的名称，如 C。将修改后的各行都打印到屏幕上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename=<span class="string">&#x27;第10章\learning_python.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines=file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    line=line.replace(<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(line.strip())</span><br></pre></td></tr></table></figure>



<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>保存数据的最简单的方式之一是将其写入到文件中。通过将输出写入文件，即便关闭包含程序输出的终端窗口，这些输出也依然存在：你可以在程序结束运行后查看这些输出，可与别人分享输出文件，还可编写程序来将这些输出读取到内存中并进行处理。</p>
<h4 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h4><p>要将文本写入文件，在调用open()时需要应该另一个实参，告诉Python你要写入打开的文件。</p>
<p><strong>wite_message.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&#x27;I lone programming!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上述程序在调用open()时提供了两个实参。第一个实参是要打开的文件名称；第二个实参(‘w’)告诉Python，要以写入模式打开这个文件。打开文件时，可指定读取模式(‘r’)、写入模式(‘w’)、附加模式(‘a’)或让你能够读取和写入文件的模式(‘r+’)。如果你省略了模式实参，Python将以默认的只读模式打开文件</p>
<p>如果要写入的文件不存在，函数open()将自动创建它。</p>
<p>以写入(‘w’)模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p>
<p><strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须系那是用函数str()将其转换为字符串格式。</strong></p>
<h4 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h4><p>函数write()不会在你写入的文本末尾添加换行符，因此写入多行时没有指定换行符。文件看起来可能不是你希望的那样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating new games.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果你打开programming.txt，将发现两行内容挤在一起：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I love programming.I love creating new games.</span><br></pre></td></tr></table></figure>

<p>要让每个字符串都独占一行，需要在write()语句中包含换行符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.\n&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating new games.\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I love programming.</span><br><span class="line">I love creating new games.</span><br></pre></td></tr></table></figure>

<h4 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h4><p>如果你要给文件添加内容，而不是覆盖原有的内容，可以附加模式打开文件。你以附加模式打开文件时，Python不会在返回文件对象前清空文件，而你写入到文件的行都将添加到文件末尾。如果指定的文件不存在，Python将为你创建一个空文件。</p>
<p><strong>write_message.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I also love findding meaning in large datasets.\n&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating apps that can run in a browser.\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I love programming.</span><br><span class="line">I love creating new games.</span><br><span class="line">I also love findding meaning in large datasets.</span><br><span class="line">I love creating apps that can run in a browser.</span><br></pre></td></tr></table></figure>

<p>动手试一试10-3 访客：编写一个程序，提示用户输入其名字；用户作出响应后，将其名字写入到文件guest.txt中。</p>
<p>10-4 访客名单：编写一个while循环，提示用户输入其名字。用户输入其名字后，在屏幕上打印一句问候语，并将一条访问记录添加到文件guest_book.txt中。确保这个文件中的每条记录都独占一行。</p>
<p>10-5 关于编程的调查：编写一个while循环，询问用户为何喜欢编程。每当用户输入一个原因后，都将其添加到一个存储所有原因的文件中。</p>
<blockquote>
<p>本文部分内容来自于《Python编程：从入门到实践》</p>
<p>参考Python菜鸟教程</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>SQL语句练习50题</title>
    <url>/2021/01/11/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A050%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>原文：知乎小番茄<a href="https://zhuanlan.zhihu.com/p/43289968">SQL面试必会50题</a><br>转载: 启明星的指引 <a href="https://blog.csdn.net/fashion2014/article/details/78826299">sql语句练习50题(Mysql版)</a></p>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><span id="more"></span>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="comment">--学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Student`(</span><br><span class="line">	`s_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	`s_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	`s_birth` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	`s_sex` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`s_id`)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--课程表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Course`(</span><br><span class="line">	`c_id`  <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	`c_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	`t_id` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`c_id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--教师表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Teacher`(</span><br><span class="line">	`t_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	`t_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`t_id`)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Score`(</span><br><span class="line">	`s_id` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	`c_id`  <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	`s_score` <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`s_id`,`c_id`)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--插入学生表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;赵雷&#x27;</span> , <span class="string">&#x27;1990-01-01&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;钱电&#x27;</span> , <span class="string">&#x27;1990-12-21&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;孙风&#x27;</span> , <span class="string">&#x27;1990-05-20&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;李云&#x27;</span> , <span class="string">&#x27;1990-08-06&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;周梅&#x27;</span> , <span class="string">&#x27;1991-12-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;吴兰&#x27;</span> , <span class="string">&#x27;1992-03-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;郑竹&#x27;</span> , <span class="string">&#x27;1989-07-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">&#x27;08&#x27;</span> , <span class="string">&#x27;王菊&#x27;</span> , <span class="string">&#x27;1990-01-20&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="comment">--课程表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;语文&#x27;</span> , <span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;数学&#x27;</span> , <span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;英语&#x27;</span> , <span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--教师表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--成绩表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure>

<h2 id="练习题和sql语句"><a href="#练习题和sql语句" class="headerlink" title="练习题和sql语句"></a>练习题和sql语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1、查询&quot;01&quot;课程比&quot;02&quot;课程成绩高的学生的信息及课程分数	</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> ,b.s_score <span class="keyword">as</span> <span class="number">01</span>_score,c.s_score <span class="keyword">as</span> <span class="number">02</span>_score <span class="keyword">from</span> </span><br><span class="line">student a </span><br><span class="line">	<span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id<span class="operator">=</span>b.s_id <span class="keyword">and</span> b.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span></span><br><span class="line">	<span class="keyword">left</span> <span class="keyword">join</span> score c <span class="keyword">on</span> a.s_id<span class="operator">=</span>c.s_id <span class="keyword">and</span> c.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span> <span class="keyword">or</span> c.c_id <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">where</span> b.s_score<span class="operator">&gt;</span>c.s_score</span><br><span class="line">	</span><br><span class="line"><span class="comment">--也可以这样写</span></span><br><span class="line">	<span class="keyword">select</span> a.<span class="operator">*</span>,b.s_score <span class="keyword">as</span> <span class="number">01</span>_score,c.s_score <span class="keyword">as</span> <span class="number">02</span>_score <span class="keyword">from</span> student 		  a,score b,score c </span><br><span class="line">			<span class="keyword">where</span> a.s_id<span class="operator">=</span>b.s_id </span><br><span class="line">			<span class="keyword">and</span> a.s_id<span class="operator">=</span>c.s_id </span><br><span class="line">			<span class="keyword">and</span> b.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span> </span><br><span class="line">			<span class="keyword">and</span> c.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span> </span><br><span class="line">			<span class="keyword">and</span> b.s_score<span class="operator">&gt;</span>c.s_score</span><br><span class="line"><span class="comment">-- 2、查询&quot;01&quot;课程比&quot;02&quot;课程成绩低的学生的信息及课程分数</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> ,b.s_score <span class="keyword">as</span> <span class="number">01</span>_score,c.s_score <span class="keyword">as</span> <span class="number">02</span>_score <span class="keyword">from</span> </span><br><span class="line">	student a <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id<span class="operator">=</span>b.s_id <span class="keyword">and</span> b.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span> <span class="keyword">or</span> b.c_id<span class="operator">=</span><span class="keyword">NULL</span> </span><br><span class="line">	 <span class="keyword">join</span> score c <span class="keyword">on</span> a.s_id<span class="operator">=</span>c.s_id <span class="keyword">and</span> c.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span> <span class="keyword">where</span> b.s_score<span class="operator">&lt;</span>c.s_score</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</span></span><br><span class="line"><span class="keyword">select</span> b.s_id,b.s_name,ROUND(<span class="built_in">AVG</span>(a.s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> </span><br><span class="line">	student b </span><br><span class="line">	<span class="keyword">join</span> score a <span class="keyword">on</span> b.s_id <span class="operator">=</span> a.s_id</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> b.s_id,b.s_name <span class="keyword">HAVING</span> avg_score <span class="operator">&gt;=</span><span class="number">60</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩</span></span><br><span class="line">		<span class="comment">-- (包括有成绩的和无成绩的)</span></span><br><span class="line">		</span><br><span class="line"><span class="keyword">select</span> b.s_id,b.s_name,ROUND(<span class="built_in">AVG</span>(a.s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> </span><br><span class="line">	student b </span><br><span class="line">	<span class="keyword">left</span> <span class="keyword">join</span> score a <span class="keyword">on</span> b.s_id <span class="operator">=</span> a.s_id</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> b.s_id,b.s_name <span class="keyword">HAVING</span> avg_score <span class="operator">&lt;</span><span class="number">60</span></span><br><span class="line">	<span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,a.s_name,<span class="number">0</span> <span class="keyword">as</span> avg_score <span class="keyword">from</span> </span><br><span class="line">	student a </span><br><span class="line">	<span class="keyword">where</span> a.s_id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">				<span class="keyword">select</span> <span class="keyword">distinct</span> s_id <span class="keyword">from</span> score);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,a.s_name,<span class="built_in">count</span>(b.c_id) <span class="keyword">as</span> sum_course,<span class="built_in">sum</span>(b.s_score) <span class="keyword">as</span> sum_score <span class="keyword">from</span> </span><br><span class="line">	student a </span><br><span class="line">	<span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id<span class="operator">=</span>b.s_id</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id,a.s_name;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line"><span class="comment">-- 6、查询&quot;李&quot;姓老师的数量 </span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(t_id) <span class="keyword">from</span> teacher <span class="keyword">where</span> t_name <span class="keyword">like</span> <span class="string">&#x27;李%&#x27;</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 7、查询学过&quot;张三&quot;老师授课的同学的信息 </span></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">	student a </span><br><span class="line">	<span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id<span class="operator">=</span>b.s_id <span class="keyword">where</span> b.c_id <span class="keyword">in</span>(</span><br><span class="line">		<span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> t_id <span class="operator">=</span>(</span><br><span class="line">			<span class="keyword">select</span> t_id <span class="keyword">from</span> teacher <span class="keyword">where</span> t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8、查询没学过&quot;张三&quot;老师授课的同学的信息 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">    student c </span><br><span class="line">    <span class="keyword">where</span> c.s_id <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">        <span class="keyword">select</span> a.s_id <span class="keyword">from</span> student a <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id<span class="operator">=</span>b.s_id <span class="keyword">where</span> b.c_id <span class="keyword">in</span>(</span><br><span class="line">        <span class="keyword">select</span> a.c_id <span class="keyword">from</span> course a <span class="keyword">join</span> teacher b <span class="keyword">on</span> a.t_id <span class="operator">=</span> b.t_id <span class="keyword">where</span> t_name <span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>));</span><br><span class="line"><span class="comment">-- 9、查询学过编号为&quot;01&quot;并且也学过编号为&quot;02&quot;的课程的同学的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">	student a,score b,score c </span><br><span class="line">	<span class="keyword">where</span> a.s_id <span class="operator">=</span> b.s_id  <span class="keyword">and</span> a.s_id <span class="operator">=</span> c.s_id <span class="keyword">and</span> b.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span> <span class="keyword">and</span> c.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 10、查询学过编号为&quot;01&quot;但是没有学过编号为&quot;02&quot;的课程的同学的信息</span></span><br><span class="line">			</span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">	student a </span><br><span class="line">	<span class="keyword">where</span> a.s_id <span class="keyword">in</span> (<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span> ) <span class="keyword">and</span> a.s_id <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>)</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 11、查询没有学全所有课程的同学的信息 </span></span><br><span class="line"><span class="comment">--@wendiepei的写法</span></span><br><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span> <span class="keyword">from</span> student s </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Score s1 <span class="keyword">on</span> s1.s_id<span class="operator">=</span>s.s_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.s_id <span class="keyword">having</span> <span class="built_in">count</span>(s1.c_id)<span class="operator">&lt;</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> course)	</span><br><span class="line"><span class="comment">--@k1051785839的写法</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> s_id <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> s_id <span class="keyword">from</span> score t1  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_id <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> c_id)  <span class="keyword">from</span> course)) </span><br><span class="line"><span class="comment">-- 12、查询至少有一门课与学号为&quot;01&quot;的同学所学相同的同学的信息 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">in</span>(</span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> a.s_id <span class="keyword">from</span> score a <span class="keyword">where</span> a.c_id <span class="keyword">in</span>(<span class="keyword">select</span> a.c_id <span class="keyword">from</span> score a <span class="keyword">where</span> a.s_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span>)</span><br><span class="line">	);</span><br><span class="line">			</span><br><span class="line"><span class="comment">-- 13、查询和&quot;01&quot;号的同学学习的课程完全相同的其他同学的信息 </span></span><br><span class="line"><span class="comment">--@ouyang_1993的写法</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> Student.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> Student</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"> s_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> Score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(s_id) <span class="operator">=</span> (</span><br><span class="line">    #下面的语句是找到<span class="string">&#x27;01&#x27;</span>同学学习的课程数</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(c_id) <span class="keyword">FROM</span> Score <span class="keyword">WHERE</span> s_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">   )</span><br><span class="line"> )</span><br><span class="line"><span class="keyword">AND</span> s_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"> #下面的语句是找到学过‘<span class="number">01</span>’同学没学过的课程，有哪些同学。并排除他们</span><br><span class="line"> <span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> Score</span><br><span class="line"> <span class="keyword">WHERE</span> c_id <span class="keyword">IN</span>(</span><br><span class="line">   #下面的语句是找到‘<span class="number">01</span>’同学没学过的课程</span><br><span class="line">   <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> c_id <span class="keyword">FROM</span> Score</span><br><span class="line">   <span class="keyword">WHERE</span> c_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">     #下面的语句是找出‘<span class="number">01</span>’同学学习的课程</span><br><span class="line">     <span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> Score <span class="keyword">WHERE</span> s_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  ) <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">) #下面的条件是排除<span class="number">01</span>同学</span><br><span class="line"><span class="keyword">AND</span> s_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;01&#x27;</span>)</span><br><span class="line"><span class="comment">--@k1051785839的写法</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> t3.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">   s_id,</span><br><span class="line">   group_concat(c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> c_id) group1</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">   score</span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">   s_id <span class="operator">&amp;</span>lt;<span class="operator">&gt;</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">   s_id</span><br><span class="line"> ) t1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">  group_concat(c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> c_id) group2</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">  score</span><br><span class="line"> <span class="keyword">WHERE</span></span><br><span class="line">  s_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  s_id</span><br><span class="line">) t2 <span class="keyword">ON</span> t1.group1 <span class="operator">=</span> t2.group2</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> student t3 <span class="keyword">ON</span> t1.s_id <span class="operator">=</span> t3.s_id</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 14、查询没学过&quot;张三&quot;老师讲授的任一门课程的学生姓名 </span></span><br><span class="line"><span class="keyword">select</span> a.s_name <span class="keyword">from</span> student a <span class="keyword">where</span> a.s_id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">	<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id <span class="operator">=</span> </span><br><span class="line">				(<span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> t_id <span class="operator">=</span>(</span><br><span class="line">					<span class="keyword">select</span> t_id <span class="keyword">from</span> teacher <span class="keyword">where</span> t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </span></span><br><span class="line"><span class="keyword">select</span> a.s_id,a.s_name,ROUND(<span class="built_in">AVG</span>(b.s_score)) <span class="keyword">from</span> </span><br><span class="line">	student a </span><br><span class="line">	<span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id</span><br><span class="line">	<span class="keyword">where</span> a.s_id <span class="keyword">in</span>(</span><br><span class="line">			<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> s_score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span>  s_id <span class="keyword">having</span> <span class="built_in">count</span>(<span class="number">1</span>)<span class="operator">&gt;=</span><span class="number">2</span>)</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id,a.s_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 16、检索&quot;01&quot;课程分数小于60，按分数降序排列的学生信息</span></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>,b.c_id,b.s_score <span class="keyword">from</span> </span><br><span class="line">	student a,score b </span><br><span class="line">	<span class="keyword">where</span> a.s_id <span class="operator">=</span> b.s_id <span class="keyword">and</span> b.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span> <span class="keyword">and</span> b.s_score<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> b.s_score <span class="keyword">DESC</span>;</span><br><span class="line">		</span><br><span class="line"><span class="comment">-- 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,(<span class="keyword">select</span> s_score <span class="keyword">from</span> score <span class="keyword">where</span> s_id<span class="operator">=</span>a.s_id <span class="keyword">and</span> c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span>) <span class="keyword">as</span> 语文,</span><br><span class="line">				(<span class="keyword">select</span> s_score <span class="keyword">from</span> score <span class="keyword">where</span> s_id<span class="operator">=</span>a.s_id <span class="keyword">and</span> c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>) <span class="keyword">as</span> 数学,</span><br><span class="line">				(<span class="keyword">select</span> s_score <span class="keyword">from</span> score <span class="keyword">where</span> s_id<span class="operator">=</span>a.s_id <span class="keyword">and</span> c_id<span class="operator">=</span><span class="string">&#x27;03&#x27;</span>) <span class="keyword">as</span> 英语,</span><br><span class="line">			round(<span class="built_in">avg</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> 平均分 <span class="keyword">from</span> score a  <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> 平均分 <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">--@喝完这杯还有一箱的写法</span></span><br><span class="line"><span class="keyword">SELECT</span> a.s_id,<span class="built_in">MAX</span>(<span class="keyword">CASE</span> a.c_id <span class="keyword">WHEN</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">THEN</span> a.s_score <span class="keyword">END</span> ) 语文, </span><br><span class="line"><span class="built_in">MAX</span>(<span class="keyword">CASE</span> a.c_id <span class="keyword">WHEN</span> <span class="string">&#x27;02&#x27;</span> <span class="keyword">THEN</span> a.s_score <span class="keyword">END</span> ) 数学, </span><br><span class="line"><span class="built_in">MAX</span>(<span class="keyword">CASE</span> a.c_id <span class="keyword">WHEN</span> <span class="string">&#x27;03&#x27;</span> <span class="keyword">THEN</span> a.s_score <span class="keyword">END</span> ) 英语, </span><br><span class="line"><span class="built_in">avg</span>(a.s_score),b.s_name <span class="keyword">FROM</span> Score a <span class="keyword">JOIN</span> Student b <span class="keyword">ON</span> a.s_id<span class="operator">=</span>b.s_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">5</span> <span class="keyword">DESC</span>		</span><br><span class="line"><span class="comment">-- 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</span></span><br><span class="line"><span class="comment">--及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</span></span><br><span class="line"><span class="keyword">select</span> a.c_id,b.c_name,<span class="built_in">MAX</span>(s_score),<span class="built_in">MIN</span>(s_score),ROUND(<span class="built_in">AVG</span>(s_score),<span class="number">2</span>),</span><br><span class="line">	ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 及格率,</span><br><span class="line">	ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score<span class="operator">&gt;=</span><span class="number">70</span> <span class="keyword">and</span> a.s_score<span class="operator">&lt;=</span><span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 中等率,</span><br><span class="line">	ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">and</span> a.s_score<span class="operator">&lt;=</span><span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 优良率,</span><br><span class="line">	ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 优秀率</span><br><span class="line">	<span class="keyword">from</span> score a <span class="keyword">left</span> <span class="keyword">join</span> course b <span class="keyword">on</span> a.c_id <span class="operator">=</span> b.c_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.c_id,b.c_name</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 19、按各科成绩进行排序，并显示排名</span></span><br><span class="line"><span class="comment">-- mysql没有rank函数</span></span><br><span class="line">	<span class="keyword">select</span> a.s_id,a.c_id,</span><br><span class="line">        <span class="variable">@i</span>:<span class="operator">=</span><span class="variable">@i</span> <span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> i保留排名,</span><br><span class="line">        <span class="variable">@k</span>:<span class="operator">=</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="variable">@score</span><span class="operator">=</span>a.s_score <span class="keyword">then</span> <span class="variable">@k</span> <span class="keyword">else</span> <span class="variable">@i</span> <span class="keyword">end</span>) <span class="keyword">as</span> rank不保留排名,</span><br><span class="line">        <span class="variable">@score</span>:<span class="operator">=</span>a.s_score <span class="keyword">as</span> score</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> s_id,c_id,s_score <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id,c_id,s_score <span class="keyword">ORDER</span> <span class="keyword">BY</span> s_score <span class="keyword">DESC</span></span><br><span class="line">)a,(<span class="keyword">select</span> <span class="variable">@k</span>:<span class="operator">=</span><span class="number">0</span>,<span class="variable">@i</span>:<span class="operator">=</span><span class="number">0</span>,<span class="variable">@score</span>:<span class="operator">=</span><span class="number">0</span>)s</span><br><span class="line"><span class="comment">--@k1051785839的写法</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> </span><br><span class="line">t1.c_id,</span><br><span class="line">t1.s_score,</span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> t2.s_score) <span class="keyword">from</span> score t2 <span class="keyword">where</span> t2.s_score<span class="operator">&gt;=</span>t1.s_score <span class="keyword">and</span> t2.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span>) rank</span><br><span class="line"><span class="keyword">FROM</span> score t1 <span class="keyword">where</span> t1.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.s_score <span class="keyword">desc</span>) t1)</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> </span><br><span class="line">t1.c_id,</span><br><span class="line">t1.s_score,</span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> t2.s_score) <span class="keyword">from</span> score t2 <span class="keyword">where</span> t2.s_score<span class="operator">&gt;=</span>t1.s_score <span class="keyword">and</span> t2.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>) rank</span><br><span class="line"><span class="keyword">FROM</span> score t1 <span class="keyword">where</span> t1.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.s_score <span class="keyword">desc</span>) t2)</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> </span><br><span class="line">t1.c_id,</span><br><span class="line">t1.s_score,</span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> t2.s_score) <span class="keyword">from</span> score t2 <span class="keyword">where</span> t2.s_score<span class="operator">&gt;=</span>t1.s_score <span class="keyword">and</span> t2.c_id<span class="operator">=</span><span class="string">&#x27;03&#x27;</span>) rank</span><br><span class="line"><span class="keyword">FROM</span> score t1 <span class="keyword">where</span> t1.c_id<span class="operator">=</span><span class="string">&#x27;03&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.s_score <span class="keyword">desc</span>) t3)</span><br><span class="line"><span class="comment">-- 20、查询学生的总成绩并进行排名</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,</span><br><span class="line">	<span class="variable">@i</span>:<span class="operator">=</span><span class="variable">@i</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> i,</span><br><span class="line">	<span class="variable">@k</span>:<span class="operator">=</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="variable">@score</span><span class="operator">=</span>a.sum_score <span class="keyword">then</span> <span class="variable">@k</span> <span class="keyword">else</span> <span class="variable">@i</span> <span class="keyword">end</span>) <span class="keyword">as</span> rank,</span><br><span class="line">	<span class="variable">@score</span>:<span class="operator">=</span>a.sum_score <span class="keyword">as</span> score</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> s_id,<span class="built_in">SUM</span>(s_score) <span class="keyword">as</span> sum_score <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> sum_score <span class="keyword">DESC</span>)a,</span><br><span class="line">	(<span class="keyword">select</span> <span class="variable">@k</span>:<span class="operator">=</span><span class="number">0</span>,<span class="variable">@i</span>:<span class="operator">=</span><span class="number">0</span>,<span class="variable">@score</span>:<span class="operator">=</span><span class="number">0</span>)s</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 21、查询不同老师所教不同课程平均分从高到低显示 </span></span><br><span class="line">		</span><br><span class="line">	<span class="keyword">select</span> a.t_id,c.t_name,a.c_id,ROUND(<span class="built_in">avg</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> course a</span><br><span class="line">		<span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.c_id<span class="operator">=</span>b.c_id </span><br><span class="line">		<span class="keyword">left</span> <span class="keyword">join</span> teacher c <span class="keyword">on</span> a.t_id<span class="operator">=</span>c.t_id</span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span> a.c_id,a.t_id,c.t_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_score <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">select</span> d.<span class="operator">*</span>,c.排名,c.s_score,c.c_id <span class="keyword">from</span> (</span><br><span class="line">                <span class="keyword">select</span> a.s_id,a.s_score,a.c_id,<span class="variable">@i</span>:<span class="operator">=</span><span class="variable">@i</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> 排名 <span class="keyword">from</span> score a,(<span class="keyword">select</span> <span class="variable">@i</span>:<span class="operator">=</span><span class="number">0</span>)s <span class="keyword">where</span> a.c_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span>  </span><br><span class="line">								<span class="keyword">ORDER</span> <span class="keyword">BY</span> a.s_score <span class="keyword">DESC</span>  </span><br><span class="line">            )c</span><br><span class="line">            <span class="keyword">left</span> <span class="keyword">join</span> student d <span class="keyword">on</span> c.s_id<span class="operator">=</span>d.s_id</span><br><span class="line">            <span class="keyword">where</span> 排名 <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line">            <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">select</span> d.<span class="operator">*</span>,c.排名,c.s_score,c.c_id <span class="keyword">from</span> (</span><br><span class="line">                <span class="keyword">select</span> a.s_id,a.s_score,a.c_id,<span class="variable">@j</span>:<span class="operator">=</span><span class="variable">@j</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> 排名 <span class="keyword">from</span> score a,(<span class="keyword">select</span> <span class="variable">@j</span>:<span class="operator">=</span><span class="number">0</span>)s <span class="keyword">where</span> a.c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>  </span><br><span class="line">								<span class="keyword">ORDER</span> <span class="keyword">BY</span> a.s_score <span class="keyword">DESC</span></span><br><span class="line">            )c</span><br><span class="line">            <span class="keyword">left</span> <span class="keyword">join</span> student d <span class="keyword">on</span> c.s_id<span class="operator">=</span>d.s_id</span><br><span class="line">            <span class="keyword">where</span> 排名 <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line">            <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">select</span> d.<span class="operator">*</span>,c.排名,c.s_score,c.c_id <span class="keyword">from</span> (</span><br><span class="line">                <span class="keyword">select</span> a.s_id,a.s_score,a.c_id,<span class="variable">@k</span>:<span class="operator">=</span><span class="variable">@k</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> 排名 <span class="keyword">from</span> score a,(<span class="keyword">select</span> <span class="variable">@k</span>:<span class="operator">=</span><span class="number">0</span>)s <span class="keyword">where</span> a.c_id<span class="operator">=</span><span class="string">&#x27;03&#x27;</span> </span><br><span class="line">								<span class="keyword">ORDER</span> <span class="keyword">BY</span> a.s_score <span class="keyword">DESC</span></span><br><span class="line">            )c</span><br><span class="line">            <span class="keyword">left</span> <span class="keyword">join</span> student d <span class="keyword">on</span> c.s_id<span class="operator">=</span>d.s_id</span><br><span class="line">            <span class="keyword">where</span> 排名 <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br><span class="line">			</span><br><span class="line"><span class="comment">-- 23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">select</span> <span class="keyword">distinct</span> f.c_name,a.c_id,b.`<span class="number">85</span><span class="number">-100</span>`,b.百分比,c.`<span class="number">70</span><span class="number">-85</span>`,c.百分比,d.`<span class="number">60</span><span class="number">-70</span>`,d.百分比,e.`<span class="number">0</span><span class="number">-60</span>`,e.百分比 <span class="keyword">from</span> score a</span><br><span class="line">				<span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;</span><span class="number">85</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">100</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> `<span class="number">85</span><span class="number">-100</span>`,</span><br><span class="line">											ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;</span><span class="number">85</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">100</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">								<span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)b <span class="keyword">on</span> a.c_id<span class="operator">=</span>b.c_id</span><br><span class="line">				<span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;</span><span class="number">70</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> `<span class="number">70</span><span class="number">-85</span>`,</span><br><span class="line">											ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;</span><span class="number">70</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">								<span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)c <span class="keyword">on</span> a.c_id<span class="operator">=</span>c.c_id</span><br><span class="line">				<span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;</span><span class="number">60</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> `<span class="number">60</span><span class="number">-70</span>`,</span><br><span class="line">											ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;</span><span class="number">60</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">								<span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)d <span class="keyword">on</span> a.c_id<span class="operator">=</span>d.c_id</span><br><span class="line">				<span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> `<span class="number">0</span><span class="number">-60</span>`,</span><br><span class="line">											ROUND(<span class="number">100</span><span class="operator">*</span>(<span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score <span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">and</span> s_score <span class="operator">&lt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">								<span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)e <span class="keyword">on</span> a.c_id<span class="operator">=</span>e.c_id</span><br><span class="line">				<span class="keyword">left</span> <span class="keyword">join</span> course f <span class="keyword">on</span> a.c_id <span class="operator">=</span> f.c_id</span><br><span class="line">				 </span><br><span class="line"><span class="comment">-- 24、查询学生平均成绩及其名次 </span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">select</span> a.s_id,</span><br><span class="line">				<span class="variable">@i</span>:<span class="operator">=</span><span class="variable">@i</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> <span class="string">&#x27;不保留空缺排名&#x27;</span>,</span><br><span class="line">				<span class="variable">@k</span>:<span class="operator">=</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="variable">@avg</span>_score<span class="operator">=</span>a.avg_s <span class="keyword">then</span> <span class="variable">@k</span> <span class="keyword">else</span> <span class="variable">@i</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;保留空缺排名&#x27;</span>,</span><br><span class="line">				<span class="variable">@avg</span>_score:<span class="operator">=</span>avg_s <span class="keyword">as</span> <span class="string">&#x27;平均分&#x27;</span></span><br><span class="line">		<span class="keyword">from</span> (<span class="keyword">select</span> s_id,ROUND(<span class="built_in">AVG</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_s <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_s <span class="keyword">DESC</span>)a,(<span class="keyword">select</span> <span class="variable">@avg</span>_score:<span class="operator">=</span><span class="number">0</span>,<span class="variable">@i</span>:<span class="operator">=</span><span class="number">0</span>,<span class="variable">@k</span>:<span class="operator">=</span><span class="number">0</span>)b;</span><br><span class="line"><span class="comment">-- 25、查询各科成绩前三名的记录</span></span><br><span class="line">			<span class="comment">-- 1.选出b表比a表成绩大的所有组</span></span><br><span class="line">			<span class="comment">-- 2.选出比当前id成绩大的 小于三个的</span></span><br><span class="line">		<span class="keyword">select</span> a.s_id,a.c_id,a.s_score <span class="keyword">from</span> score a </span><br><span class="line">			<span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.c_id <span class="operator">=</span> b.c_id <span class="keyword">and</span> a.s_score<span class="operator">&lt;</span>b.s_score</span><br><span class="line">			<span class="keyword">group</span> <span class="keyword">by</span> a.s_id,a.c_id,a.s_score <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(b.s_id)<span class="operator">&lt;</span><span class="number">3</span></span><br><span class="line">			<span class="keyword">ORDER</span> <span class="keyword">BY</span> a.c_id,a.s_score <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 26、查询每门课程被选修的学生数 </span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">select</span> c_id,<span class="built_in">count</span>(s_id) <span class="keyword">from</span> score a <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 27、查询出只有两门课程的全部学生的学号和姓名 </span></span><br><span class="line">		<span class="keyword">select</span> s_id,s_name <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">in</span>(</span><br><span class="line">				<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(c_id)<span class="operator">=</span><span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 28、查询男生、女生人数 </span></span><br><span class="line">		<span class="keyword">select</span> s_sex,<span class="built_in">COUNT</span>(s_sex) <span class="keyword">as</span> 人数  <span class="keyword">from</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_sex</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 29、查询名字中含有&quot;风&quot;字的学生信息</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> s_name <span class="keyword">like</span> <span class="string">&#x27;%风%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 30、查询同名同性学生名单，并统计同名人数 </span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">select</span> a.s_name,a.s_sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student a  <span class="keyword">JOIN</span> </span><br><span class="line">					student b <span class="keyword">on</span> a.s_id <span class="operator">!=</span>b.s_id <span class="keyword">and</span> a.s_name <span class="operator">=</span> b.s_name <span class="keyword">and</span> a.s_sex <span class="operator">=</span> b.s_sex</span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_name,a.s_sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 31、查询1990年出生的学生名单</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">select</span> s_name <span class="keyword">from</span> student <span class="keyword">where</span> s_birth <span class="keyword">like</span> <span class="string">&#x27;1990%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 </span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">select</span> c_id,ROUND(<span class="built_in">AVG</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_score <span class="keyword">DESC</span>,c_id <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 </span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">select</span> a.s_id,b.s_name,ROUND(<span class="built_in">avg</span>(a.s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> score a</span><br><span class="line">		<span class="keyword">left</span> <span class="keyword">join</span> student b <span class="keyword">on</span> a.s_id<span class="operator">=</span>b.s_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> avg_score<span class="operator">&gt;=</span><span class="number">85</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 34、查询课程名称为&quot;数学&quot;，且分数低于60的学生姓名和分数 </span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">select</span> a.s_name,b.s_score <span class="keyword">from</span> score b <span class="keyword">join</span> student a <span class="keyword">on</span> a.s_id<span class="operator">=</span>b.s_id <span class="keyword">where</span> b.c_id<span class="operator">=</span>(</span><br><span class="line">					<span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> c_name <span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>) <span class="keyword">and</span> b.s_score<span class="operator">&lt;</span><span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 35、查询所有学生的课程及分数情况； </span></span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">select</span> a.s_id,a.s_name,</span><br><span class="line">					<span class="built_in">SUM</span>(<span class="keyword">case</span> c.c_name <span class="keyword">when</span> <span class="string">&#x27;语文&#x27;</span> <span class="keyword">then</span> b.s_score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">					<span class="built_in">SUM</span>(<span class="keyword">case</span> c.c_name <span class="keyword">when</span> <span class="string">&#x27;数学&#x27;</span> <span class="keyword">then</span> b.s_score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">					<span class="built_in">SUM</span>(<span class="keyword">case</span> c.c_name <span class="keyword">when</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">then</span> b.s_score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">					<span class="built_in">SUM</span>(b.s_score) <span class="keyword">as</span>  <span class="string">&#x27;总分&#x27;</span></span><br><span class="line">		<span class="keyword">from</span> student a <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id </span><br><span class="line">		<span class="keyword">left</span> <span class="keyword">join</span> course c <span class="keyword">on</span> b.c_id <span class="operator">=</span> c.c_id </span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id,a.s_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">-- 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数； </span></span><br><span class="line">			<span class="keyword">select</span> a.s_name,b.c_name,c.s_score <span class="keyword">from</span> course b <span class="keyword">left</span> <span class="keyword">join</span> score c <span class="keyword">on</span> b.c_id <span class="operator">=</span> c.c_id</span><br><span class="line">				<span class="keyword">left</span> <span class="keyword">join</span> student a <span class="keyword">on</span> a.s_id<span class="operator">=</span>c.s_id <span class="keyword">where</span> c.s_score<span class="operator">&gt;=</span><span class="number">70</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 37、查询不及格的课程</span></span><br><span class="line">		<span class="keyword">select</span> a.s_id,a.c_id,b.c_name,a.s_score <span class="keyword">from</span> score a <span class="keyword">left</span> <span class="keyword">join</span> course b <span class="keyword">on</span> a.c_id <span class="operator">=</span> b.c_id</span><br><span class="line">			<span class="keyword">where</span> a.s_score<span class="operator">&lt;</span><span class="number">60</span> </span><br><span class="line">		</span><br><span class="line"><span class="comment">--38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； </span></span><br><span class="line">		<span class="keyword">select</span> a.s_id,b.s_name <span class="keyword">from</span> score a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student b <span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id</span><br><span class="line">			<span class="keyword">where</span> a.c_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span>	<span class="keyword">and</span> a.s_score<span class="operator">&gt;</span><span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 39、求每门课程的学生人数 </span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 40、查询选修&quot;张三&quot;老师所授课程的学生中，成绩最高的学生信息及其成绩</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 查询老师id	</span></span><br><span class="line">		<span class="keyword">select</span> c_id <span class="keyword">from</span> course c,teacher d <span class="keyword">where</span> c.t_id<span class="operator">=</span>d.t_id <span class="keyword">and</span> d.t_name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span></span><br><span class="line">		<span class="comment">-- 查询最高分（可能有相同分数）</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">MAX</span>(s_score) <span class="keyword">from</span> score <span class="keyword">where</span> c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span></span><br><span class="line">		<span class="comment">-- 查询信息</span></span><br><span class="line">		<span class="keyword">select</span> a.<span class="operator">*</span>,b.s_score,b.c_id,c.c_name <span class="keyword">from</span> student a</span><br><span class="line">			<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score b <span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id</span><br><span class="line">			<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course c <span class="keyword">on</span> b.c_id<span class="operator">=</span>c.c_id</span><br><span class="line">			<span class="keyword">where</span> b.c_id <span class="operator">=</span>(<span class="keyword">select</span> c_id <span class="keyword">from</span> course c,teacher d <span class="keyword">where</span> c.t_id<span class="operator">=</span>d.t_id <span class="keyword">and</span> d.t_name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">			<span class="keyword">and</span> b.s_score <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">MAX</span>(s_score) <span class="keyword">from</span> score <span class="keyword">where</span> c_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 </span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">DISTINCT</span> b.s_id,b.c_id,b.s_score <span class="keyword">from</span> score a,score b <span class="keyword">where</span> a.c_id <span class="operator">!=</span> b.c_id <span class="keyword">and</span> a.s_score <span class="operator">=</span> b.s_score</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 42、查询每门功成绩最好的前两名 </span></span><br><span class="line">		<span class="comment">-- 牛逼的写法</span></span><br><span class="line">	<span class="keyword">select</span> a.s_id,a.c_id,a.s_score <span class="keyword">from</span> score a</span><br><span class="line">		<span class="keyword">where</span> (<span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">from</span> score b <span class="keyword">where</span> b.c_id<span class="operator">=</span>a.c_id <span class="keyword">and</span> b.s_score<span class="operator">&gt;=</span>a.s_score)<span class="operator">&lt;=</span><span class="number">2</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.c_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  </span></span><br><span class="line">		<span class="keyword">select</span> c_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id <span class="keyword">HAVING</span> total<span class="operator">&gt;</span><span class="number">5</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> total,c_id <span class="keyword">ASC</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">-- 44、检索至少选修两门课程的学生学号 </span></span><br><span class="line">		<span class="keyword">select</span> s_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sel <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> sel<span class="operator">&gt;=</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 45、查询选修了全部课程的学生信息 </span></span><br><span class="line">		<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">in</span>(		</span><br><span class="line">			<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--46、查询各学生的年龄</span></span><br><span class="line">	<span class="comment">-- 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">select</span> s_birth,(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y&#x27;</span>)<span class="operator">-</span>DATE_FORMAT(s_birth,<span class="string">&#x27;%Y&#x27;</span>) <span class="operator">-</span> </span><br><span class="line">				(<span class="keyword">case</span> <span class="keyword">when</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%m%d&#x27;</span>)<span class="operator">&gt;</span>DATE_FORMAT(s_birth,<span class="string">&#x27;%m%d&#x27;</span>) <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">end</span>)) <span class="keyword">as</span> age</span><br><span class="line">		<span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 47、查询本周过生日的学生</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> WEEK(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y%m%d&#x27;</span>))<span class="operator">=</span>WEEK(s_birth)</span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> YEARWEEK(s_birth)<span class="operator">=</span>YEARWEEK(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y%m%d&#x27;</span>))</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">select</span> WEEK(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y%m%d&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 48、查询下周过生日的学生</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> WEEK(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y%m%d&#x27;</span>))<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span>WEEK(s_birth)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 49、查询本月过生日的学生</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">MONTH</span>(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y%m%d&#x27;</span>)) <span class="operator">=</span><span class="keyword">MONTH</span>(s_birth)</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 50、查询下月过生日的学生</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">MONTH</span>(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y%m%d&#x27;</span>))<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span><span class="keyword">MONTH</span>(s_birth)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium笔记</title>
    <url>/2021/05/04/Selenium%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="自动化测试简介"><a href="#自动化测试简介" class="headerlink" title="自动化测试简介"></a>自动化测试简介</h3><ol>
<li><p>UI自动化的本质</p>
<ul>
<li><p>定位元素：定位元素控件 eg：定位到输入框</p>
</li>
<li><p>操作元素：对元素控件进行点击，输入，拖动等操作</p>
</li>
<li><p>模拟页面动作：不能跨步骤的实现</p>
</li>
<li><p>断言结果：预期结果与实际结果的比对</p>
</li>
<li><p>生成报告：给出结果，False/Pass</p>
</li>
</ul>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>适合自动化测试场景</p>
<ul>
<li><p>需求不会频繁变动：项目的需求不会频繁的变动。产品在探索阶段频繁变动需求，就要修改测试用例，自动化脚本就要重新写</p>
</li>
<li><p>UI比较稳定：前端结构不会频繁变动，频繁变动UI，UI自动化就要变动了</p>
</li>
<li><p>项目周期较长：6个月以上的项目周期，时间短的话，没有时间写自动化</p>
</li>
<li><p>大量回归测试任务：敏捷开发，不断添加新功能，之前老给功能不会被轻易改动（对老功能回归，怕新功能影响到老功能）。只需要测试一遍做自动化就没有什么意义了，自动化看的是使用频率。</p>
<p>国内环境以敏捷开发为主，快速迭代，需要大量回归测试进行验证，节省时间和成本</p>
<p><strong>（使用频率*每次减少的时间）- 投入时间 = 自动化收益</strong></p>
</li>
<li><p>冒烟测试：（针对于新需求）对本次迭代新需求的P0级别case实现自动化。对主干功能进行验证</p>
</li>
<li><p>回归测试：（对老功能的回归）如：1.1.1版本是在1.0版本基础上做的改动，需要测试新功能对老功能是否有影响，可以交给自动化去完成（不断的维护，不断的添加）企业主要是回归测试中用自动化</p>
</li>
</ul>
</li>
</ol>
<p>问题：之前所在企业自动化覆盖率达到多少？</p>
<ul>
<li><p>自动化测试覆盖率达到70%左右：项目稳定的，改动小的国企项目，对之前老功能不会有太大的影响，处于稳定期。</p>
</li>
<li><p>自动化测试覆盖率达到60%左右：项目周期比较长6个月甚至1年的手机项目，用户界面已经非常稳定，开发都在调试底层（音质，驱动…）</p>
</li>
<li><p>自动化测试覆盖率达到30%左右：一个月一个迭代，我们把P0级+一些核心部分的P1级case实现了自动化</p>
</li>
<li><p>自动化测试覆盖率达到10-15%左右：两周一个迭代，只做了核心的P0级case自动化</p>
</li>
<li><p>核心的几个场景实现了自动化：一周一个迭代，没有回归验证的话，会对用户产生非常大的影响。（核心的场景十几条case）</p>
</li>
</ul>
<ol start="3">
<li><p>那些场景不适合做自动化</p>
<ul>
<li>图片核对类的</li>
<li>视频内容核对类的（音频/画面）</li>
<li>交互性非常强的（通话后要听音质、内容等等无法用自动化验证）</li>
</ul>
</li>
<li><p>UI自动化测试原则</p>
<ul>
<li><p>一个Case完成一个功能点测试：一个自动化用例对应一条手工用例</p>
</li>
<li><p>一个脚本是一个完整的场景：一条完整的手工用例是一个脚本</p>
<p>eg: 打开京东，输入框搜索商家，在商家页面选择商品，加入购物车。核对订单页面有没有加入的商品，有通过。没有，失败。</p>
</li>
<li><p>脚本之间独立，不能有依赖：每条用例都是重新开始的，没有对其他脚本有依赖关系。</p>
</li>
<li><p>设置合适的检查点：用预期结果与实际结果比对，没有对比自动化没有意义</p>
</li>
<li><p>设计良好的框架</p>
</li>
</ul>
</li>
<li><p>Selenium的特点</p>
<ul>
<li>开源，免费：开始的自动化框架可能存在一些bug，开源便于修改</li>
<li>多浏览器支持: FireFox、Chrome（居多）、IE、Opera、 Edge;</li>
<li>多平台支持:Linux . Windows、MAC</li>
<li>多语言支持: Java、Python、Ruby、C#、JavaScript、C++;·对Web页面有良好的支持;</li>
<li>简单（API简单)、灵活（用开发语言驱动）</li>
<li>足够成熟：Selenium经历了三个版本，Selenium 1.0和 Selenium 2.0到现在的selenium3.0。Selenium 不是由单独一个工具构成的，而是由一些插件、类库组成，每个部分都有其特点和应用场景</li>
</ul>
</li>
<li><p>selenium3.x介绍</p>
<ul>
<li>Selenium经历了三个版本，Selenium 1.0和 Selenium 2.0到现在的selenium3.0。Selenium3.x版本最大的变化应该是去掉了Selenium RC，Selenium RC是Selenium1.0的产物，Selenium2.0以WebDriver为主，也使用Selenium RC，到Selenium3.x完全去掉Selenium RC。</li>
<li>Selenium3.0中 的Firefox驱动独立了。Selenium3.0之前，Selenium库中移动包含了Firefox浏览驱动，然而，现在Firefox浏览器驱动与Selenium库分离，单独提供下载。</li>
<li>Edge 和safari原生驱动的支持</li>
</ul>
</li>
</ol>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>安装selenium</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install selenium  -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>下载 chromedriver或geckodriver <code>https://github.com/mozilla/geckodriver/releases</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chrome官网下载</span></span><br><span class="line"></span><br><span class="line">wget https://chromedriver.storage.googleapis.com/2.38/chromedriver_linux64.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 淘宝源（推荐）</span></span><br><span class="line"></span><br><span class="line">wget http://npm.taobao.org/mirrors/chromedriver/2.41/chromedriver_linux64.zip</span><br></pre></td></tr></table></figure>

<p>将下载的文件解压，放在如下位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip chromedriver_linux64.zip</span><br><span class="line"></span><br><span class="line">mv chromedriver /usr/bin/</span><br></pre></td></tr></table></figure>

<p>给予执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/bin/chromedriver</span><br></pre></td></tr></table></figure>

<h3 id="八大元素定位法则"><a href="#八大元素定位法则" class="headerlink" title="八大元素定位法则"></a>八大元素定位法则</h3><ol>
<li><p>id：基于元素属性中的id的值来进行定位</p>
<p><code>webdriver.find_element_by_id()</code></p>
</li>
<li><p>name：基于元素属性中的name的值来进行定位</p>
<p><code>webdriver.find_element_by_name()</code></p>
</li>
<li><p>link text：主要用于超链接进行定位</p>
<p><code>webdriver.find_element_by_link_text()</code></p>
</li>
<li><p>partial link text：link text的模糊查询版本，类似于数据库的like %。当匹配多个元素的时候，选取第一个元素。</p>
<p><code>webdriver.find_element_by_partial_link_text()</code></p>
</li>
<li><p>classname：基于元素样式测试，易遇到重复内容</p>
<p><code>webdriver.find_element_by_class_name()</code></p>
</li>
<li><p>tagname：用标签来进行定位</p>
<p><code>webdriver.find_element_by_tag_name()</code></p>
</li>
<li><p>csselector：应用相对较多的一种行为，完全基于class属性来实现定位</p>
<p><code>webdriver.find_element_by_css_elector()</code></p>
<ul>
<li>绝对路径</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绝对路径demo1</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;html&gt;body&gt;table&gt;tbody&gt;tr&gt;td&gt;div&gt;div#sbox&gt;div.search_controls&gt;form&gt;div&gt;input&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对路径demo2</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;星际穿越&quot;</span></span><br><span class="line"></span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;html&gt;body&gt;table&gt;tbody&gt;tr&gt;td&gt;div&gt;div#sbox&gt;div.search_controls&gt;form&gt;div&gt;input&#x27;</span>).send_keys(key)</span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;html&gt;body&gt;table&gt;tbody&gt;tr&gt;td&gt;div&gt;div#sbox&gt;div.search_controls&gt;form&gt;div&gt;div&gt;input&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到输入框</span></span><br><span class="line">element = WebDriverWait(driver,<span class="number">5</span>,<span class="number">0.5</span>).until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">&#x27;html&gt;body&gt;header&gt;form&gt;div&gt;input&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟键盘删除输入</span></span><br><span class="line"><span class="comment"># element.clear()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    element.send_keys(Keys.BACK_SPACE)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<ul>
<li>相对路径</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># id选择器</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;#scpl0&#x27;).click()</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># css选择器</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;.b_searchbox&#x27;).send_keys(&quot;星际穿越&quot;)</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 父级元素</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;#scpl0/..&#x27;)</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 子级元素</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;.b_searchboxForm&gt;input&#x27;).send_keys(&quot;星际穿越&quot;)</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 多属性</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;input[class=&quot;b_searchbox&quot;][name=&quot;q&quot;]&#x27;).send_keys(&quot;星际穿越&quot;)</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他属性</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;input[name=&quot;q&quot;]&#x27;).send_keys(&quot;星际穿越&quot;)</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># first-child</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;#sc_hdu&gt;li:first-child&gt;a&#x27;).click()</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># last-child</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;#sc_hdu&gt;li:last-child&gt;a&#x27;).click()</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># nth-child(2) 父元素的第二个子元素</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;#sc_hdu&gt;li:nth-child(2)&gt;a&#x27;).click()</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># nth-last-child(2) 父元素倒数第二个子元素</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&#x27;#sc_hdu&gt;li:nth-last-child(2)&gt;a&#x27;).click()</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>xpath：目前应用最多的一种行为，基于页面结构进行定位</p>
<p><code>webdriver.find_element_by_xpath()</code></p>
<p>绝对路径：从html根路径下一层一层往下数，找到对应的层级，从而找到元素</p>
<p>相对路径：基于匹配制度来查找元素，依照xpath语法结构</p>
<ul>
<li><p><strong>[] 表示筛选条件（查找函数）</strong></p>
<p>如果要基于text来定位元素</p>
<p>在[]中添加text()=”文本内容”进行查找</p>
<p>例如：//a[text()=”登录”]</p>
<p>//input[contains(@id,’kw’)]</p>
</li>
<li><p>contains表示进一步查找，匹配项模糊查找</p>
<p>//input[contains(text(),’包含帅字的元素都是要找的元素’)]</p>
</li>
<li><p>XPath 相对路径</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">id</span>定位 //<span class="built_in">input</span>[(@<span class="built_in">id</span>=<span class="string">&quot;kw&quot;</span>)]</span><br><span class="line">    driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//input[(@id=&quot;sb_form_q&quot;)]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> tag定位</span><br><span class="line">    *匹配任何标签</span><br><span class="line">    driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[(@id=&quot;sb_form_q&quot;)]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line"></span><br><span class="line">    指定标签//<span class="built_in">input</span>[(@<span class="built_in">id</span>=<span class="string">&quot;kw&quot;</span>)]</span><br><span class="line">    driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[(@title=&quot;输入搜索词&quot;)]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> clss定位  //<span class="built_in">input</span>[@<span class="class"><span class="keyword">class</span>=&quot;<span class="title">s_ipt</span>&quot;]</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&#x27;//*[(@class=&quot;b_searchbox&quot;)]&#x27;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">4. <span class="title">name</span>定位 //<span class="title">input</span>[@<span class="title">name</span>=&quot;<span class="title">wd</span>&quot;]</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&#x27;//*[(@name=&quot;q&quot;)]&#x27;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">5. 其他属性 //<span class="title">input</span>[@<span class="title">autocomplete</span>=&quot;<span class="title">off</span>&quot;] 非隐藏属性</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&#x27;//*[@autocomplete=&quot;off&quot;]&#x27;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">6. 多属性组合 //<span class="title">input</span>[@<span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">and</span> @<span class="title">name</span>=&quot;<span class="title">wd</span>&quot;]</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&#x27;//input[@type=&quot;search&quot; and @maxlength=&quot;100&quot;]&#x27;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">7. 层级关系 //<span class="title">from</span>[@<span class="title">id</span>=&quot;<span class="title">form</span>&quot;]/<span class="title">span</span>/<span class="title">input</span>      (<span class="params">/代表绝对路径，//代表相对路径</span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&#x27;//form[@id=&quot;sb_form&quot;]/div/input&#x27;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">8. 同一父级多个子元素 //*[@<span class="title">id</span>=&quot;<span class="title">u1</span>&quot;]/<span class="title">a</span>[2]</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&#x27;//ul[@id=&quot;sc_hdu&quot;]/li[3]/a&#x27;</span></span>).<span class="title">click</span>()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">模糊匹配</span></span><br><span class="line"><span class="class">    1.<span class="title">contains</span>模糊匹配<span class="title">text</span>：<span class="title">contains</span></span></span><br><span class="line"><span class="class">    如，通过模糊匹配<span class="title">text</span>属性，找到<span class="title">bing</span>首页的“学术”网站超链接</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&quot;//a[contains(text(),&#x27;学&#x27;)]&quot;</span></span>).<span class="title">click</span>()</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">    2.模糊匹配某个属性：<span class="title">contains</span></span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&quot;//input[contains(@class,&#x27;earchbo&#x27;)]&quot;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    3.模糊匹配以<span class="title">xx</span>开头：<span class="title">starts</span>-<span class="title">with</span></span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&quot;//input[starts-with(@class,&#x27;b_s&#x27;)]&quot;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    4.模糊匹配以<span class="title">xx</span>结尾：<span class="title">ends</span>-<span class="title">with</span> [<span class="title">xpath2</span>.0语法，一般浏览器只支持<span class="title">xpath1</span>.0]</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">get</span>(<span class="params"><span class="string">&quot;https://cn.bing.com&quot;</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">driver</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&quot;//input[ends-with(@class,&#x27;box&#x27;)]&quot;</span></span>).<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;星际穿越&quot;</span></span>)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="操作浏览器的基本方法"><a href="#操作浏览器的基本方法" class="headerlink" title="操作浏览器的基本方法"></a>操作浏览器的基本方法</h3><h3 id="浏览器大小控制"><a href="#浏览器大小控制" class="headerlink" title="浏览器大小控制"></a>浏览器大小控制</h3><p>很多时候我们希望打开浏览器后，它能够全屏显示，也就是浏览器最大化。WebDriver提供了maximize_window()方法来将浏览器最大化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.maximize_window()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>运行代码打开浏览器之后往往默认就是最大化显示，看不到maximize_window()方法的效果。有时希望打开浏览器后在指定的尺寸下运行，如800×600，WebDriver提供了set_window_size()方法来控制浏览器的大小。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.maximize_window()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.set_window_size(<span class="number">800</span>,<span class="number">600</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.minimize_window()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h3 id="浏览器的前进与后退"><a href="#浏览器的前进与后退" class="headerlink" title="浏览器的前进与后退"></a>浏览器的前进与后退</h3><p>在通过浏览器访问网页时，有时会借助浏览器的前进与后退按钮查看浏览历史</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># back()和forward()</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//a[@id=&#x27;scpl2&#x27;]&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后退</span></span><br><span class="line">driver.back()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前进</span></span><br><span class="line">driver.forward()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="页面刷新"><a href="#页面刷新" class="headerlink" title="页面刷新"></a>页面刷新</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;http://cn.bing.com&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.refresh()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="获取页面URL地址与标题"><a href="#获取页面URL地址与标题" class="headerlink" title="获取页面URL地址与标题"></a>获取页面URL地址与标题</h4><p>WebDriver提供的current_url与title可以获取当前页面的URL地址与标题，这样在实际测试过程中，可以帮助我们校验实际结果是否与期望结果一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;============The first page============&quot;</span>)</span><br><span class="line"><span class="comment"># 打印首页title</span></span><br><span class="line">first_title = driver.title</span><br><span class="line">first_url = driver.current_url</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the first page title is：%s&quot;</span> % first_title)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the first page url is %s&quot;</span> % first_url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;============The target page============&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//a[@id=&quot;scpl2&quot;]&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 打印跳转页title</span></span><br><span class="line">second_title = driver.title</span><br><span class="line">second_url = driver.current_url</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the first page title is：%s&quot;</span> % second_title)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the first page url is %s&quot;</span> % second_url)</span><br><span class="line"></span><br><span class="line">Expect_title = <span class="string">&quot;Bing 学术&quot;</span></span><br><span class="line"><span class="keyword">if</span> second_title == Expect_title:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="获取浏览器类型"><a href="#获取浏览器类型" class="headerlink" title="获取浏览器类型"></a>获取浏览器类型</h4><p>Selenium实现的自动化测试脚本，在实际过程中常常会与CI平台进行集成。当自动化测试程序运行失败时，如果通过测试结果知道自动化程序是在哪种类型的浏览器上运行失败的，则为我们排查问题提供了一个方向</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出浏览器的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The Browser is: &quot;</span>+ driver.name)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="关闭当前窗口与退出浏览器"><a href="#关闭当前窗口与退出浏览器" class="headerlink" title="关闭当前窗口与退出浏览器"></a>关闭当前窗口与退出浏览器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭当前窗口(与窗口切换例子一起展示)</span></span><br><span class="line">.driver.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出浏览器，关闭所有窗口</span></span><br><span class="line">.driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="元素的操作方法"><a href="#元素的操作方法" class="headerlink" title="元素的操作方法"></a>元素的操作方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># send_keys()输入</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;sb_form_q&#x27;]&quot;</span>).send_keys(<span class="string">&quot;bella&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># click()点击</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;sb_form_go&#x27;]&quot;</span>).click()</span><br></pre></td></tr></table></figure>

<h3 id="元素操作方法"><a href="#元素操作方法" class="headerlink" title="元素操作方法"></a>元素操作方法</h3><h4 id="清除元素"><a href="#清除元素" class="headerlink" title="清除元素"></a>清除元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clear()清楚元素中已有的内容</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).clear()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h4><p>submit()方法用于提交form表单内容或者模拟回车操作，有时可替代click()方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># driver.find_element_by_xpath(&#x27;//input[@type=&quot;submit&quot;]&#x27;).click()</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).submit()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="获取元素尺寸"><a href="#获取元素尺寸" class="headerlink" title="获取元素尺寸"></a>获取元素尺寸</h4><p>size方法获取元素尺寸</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取bing图标尺寸</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing首页的logo</span></span><br><span class="line">size = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;bLogo&quot;]&#x27;</span>).size</span><br><span class="line"><span class="built_in">print</span>(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> size.items():</span><br><span class="line">    <span class="built_in">print</span>(key+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(value))</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;<span class="string">&#x27;height&#x27;</span>: <span class="number">150.0</span>, <span class="string">&#x27;width&#x27;</span>: <span class="number">300.0</span>&#125;</span><br><span class="line">height:<span class="number">150.0</span></span><br><span class="line">width:<span class="number">300.0</span></span><br></pre></td></tr></table></figure>

<h4 id="获取元素的属性与文本"><a href="#获取元素的属性与文本" class="headerlink" title="获取元素的属性与文本"></a>获取元素的属性与文本</h4><p>get_attribute()方法用于获取元素的相关属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取name属性</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">nameValue = driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).get_attribute(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nameValue)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取text文本内容</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">textValue = driver.find_element_by_xpath(<span class="string">&#x27;//div[@id=&quot;est_cn&quot;]&#x27;</span>).text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(textValue)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h3 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h3><p>在自动化测试工程中，可能会遇到页面中的某个元素，需要把鼠标光标移动到该元素上面才能显示出来。当遇到这种情况时，可借助ActionChains类来处理。</p>
<p>在模拟使用鼠标操作时，需要先导入ActionChains类</p>
<p><code>from selenium.webdriver.common.action_chains import ActionChains</code></p>
<p>ActionChains用于生成用户的行为，可以模拟鼠标操作，如单击、双击、单击鼠标右键、拖曳等。<strong>所有的行为都存储在ActionChains对象中</strong>，再通过perform()方法执行所有Action-Chains对象中存储的行为。</p>
<p>perform()也是ActionChains类提供的方法，通常与ActionChains()配合使用</p>
<table>
<thead>
<tr>
<th>方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>click(on_element=None)</td>
<td align="left">单机鼠标左键</td>
</tr>
<tr>
<td>content_click(on_element=None)</td>
<td align="left">单机鼠标右键</td>
</tr>
<tr>
<td>double_click(on_element=None)</td>
<td align="left">双击鼠标左键</td>
</tr>
<tr>
<td>darg_and_drop(source,target)</td>
<td align="left">拖拽到某个元素上然后松开</td>
</tr>
<tr>
<td>perform()</td>
<td align="left">执行所有ActionChains中存储的行为</td>
</tr>
<tr>
<td>release(on_element=None)</td>
<td align="left">在某个元素位置松开鼠标左键</td>
</tr>
<tr>
<td>send_keys(*keys_to_send)</td>
<td align="left">发送某个键到当前焦点的元素</td>
</tr>
</tbody></table>
<h4 id="右击操作"><a href="#右击操作" class="headerlink" title="右击操作"></a>右击操作</h4><p>context_click()方法是先定位一个元素，然后对定位的元素执行右击。首先要先定位一个元素，其次执行需要的操作，最后需要提交操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 输入框右击</span></span><br><span class="line">right = driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>)</span><br><span class="line">ActionChains(driver).context_click(right).perform()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="双击操作"><a href="#双击操作" class="headerlink" title="双击操作"></a>双击操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&#x27;星际穿越&#x27;</span>)</span><br><span class="line">double = driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_go&quot;]&#x27;</span>)</span><br><span class="line">ActionChains(driver).double_click(double).perform()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="拖动操作（如何释放拖动元素）"><a href="#拖动操作（如何释放拖动元素）" class="headerlink" title="拖动操作（如何释放拖动元素）"></a><font color="red">拖动操作（如何释放拖动元素）</font></h4><p>drag_and_drop()方法实现元素拖动的功能，即通过鼠标拖曳某个元素到指定的元素后再松开</p>
<p><code>ActuonChains(driver).drag_and_drop_offset(source,100,0)</code> 从原始位置拖拽到任一位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将学术链接元素拖动到搜索框中</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到学术元素</span></span><br><span class="line">element = driver.find_element_by_xpath(<span class="string">&#x27;//a[@id=&quot;scpl2&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到搜索框</span></span><br><span class="line">target = driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ActionChains(driver).drag_and_drop(element,target).perform()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="鼠标指针悬停"><a href="#鼠标指针悬停" class="headerlink" title="鼠标指针悬停"></a>鼠标指针悬停</h4><p>通过move_to_element()方法，可以将鼠标指针悬停在一个元素上，从而查看该元素的一些提示信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到搜索框</span></span><br><span class="line">element = driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ActionChains(driver).move_to_element(element).perform()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h3 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h3><p>除了鼠标操作外，我们在操作浏览器的过程中还会用到一些键盘操作事件，例如按键盘回车键、回退键，通过键盘进行复制、粘贴等操作</p>
<p>Selenium提供了比较完整的键盘操作，同样的，在模拟键盘操作之前也需要导入Keys类</p>
<p><code>from selenium.webdriver.common.keys import Keys</code></p>
<p>常用键盘操作</p>
<table>
<thead>
<tr>
<th>引用方法</th>
<th>对应键盘</th>
</tr>
</thead>
<tbody><tr>
<td>send_keys(Keys.BACK_SPACE)</td>
<td>删除键（BackSpace）</td>
</tr>
<tr>
<td>send_keys(Keys.SPACE)</td>
<td>空格键（Space）</td>
</tr>
<tr>
<td>send_keys(Keys.TAB)</td>
<td>制表符（Tab）</td>
</tr>
<tr>
<td>send_keys(Keys.ALTERNATE)</td>
<td>换挡键（Alt）</td>
</tr>
<tr>
<td>send_keys(Keys.ENTER)</td>
<td>回车键（Enter）</td>
</tr>
<tr>
<td>send_keys(Keys.SHIFT)</td>
<td>大小写转换键（Shift）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,’a’)</td>
<td>全选（Ctrl+A）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,’b’)</td>
<td>复制（Ctrl+C）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,’x’)</td>
<td>剪切（Ctrl+X）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,’v’)</td>
<td>粘贴（Ctrl+V）</td>
</tr>
<tr>
<td>send_keys(Keys.F1)</td>
<td>F1键</td>
</tr>
<tr>
<td>send_keys(Keys.F12)</td>
<td>F12键</td>
</tr>
<tr>
<td>send_keys(Keys.PAGE_UP)</td>
<td>向上翻页键（Page Up）</td>
</tr>
<tr>
<td>send_keys(Keys.PAGE_DOWN)</td>
<td>向下翻页键（Page Down）</td>
</tr>
<tr>
<td>send_keys(Keys.LEFT)</td>
<td>向左方向键（Left）</td>
</tr>
<tr>
<td>send_keys(Keys.RIGHT)</td>
<td>向右方向键（Right）</td>
</tr>
<tr>
<td>send_keys(Keys.ESCAPE)</td>
<td>回退键（Esc）</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常见键盘操作</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(<span class="string">&quot;火星救援&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入删除键</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(Keys.BACK_SPACE)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(<span class="string">&quot;降临&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全选</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 剪切</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 粘贴</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;V&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;V&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Enter</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;sb_form_q&quot;</span>).send_keys(Keys.ENTER)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.close()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h3 id="定位一组元素"><a href="#定位一组元素" class="headerlink" title="定位一组元素"></a>定位一组元素</h3><p>WebDriver有8种定位单个元素的方法，以及与之对应的用于定位一组元素的8种方法</p>
<ol>
<li>通过tag name定位一组元素</li>
</ol>
<p><img src="%E5%AE%9A%E4%BD%8D%E4%B8%80%E7%BB%84%E5%85%83%E7%B4%A0.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复选框测试实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择你喜欢的水果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>苹果<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>橘子<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mango&quot;</span>&gt;</span>芒果<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;file:///home/william/DYJ/software-test/21.Selenium/html/checkbox.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inputs = driver.find_elements_by_tag_name(&quot;input&quot;)</span></span><br><span class="line">inputs = driver.find_elements_by_xpath(<span class="string">&quot;//*[@name=&#x27;fruit&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> inputs:</span><br><span class="line">    <span class="keyword">if</span> i.get_attribute(<span class="string">&quot;type&quot;</span>) == <span class="string">&quot;checkbox&quot;</span>:</span><br><span class="line">    <span class="comment"># if i.get_attribute(&quot;name&quot;) == &quot;fruit&quot;:</span></span><br><span class="line">        i.click()</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>层级定位</p>
<p>如果被定位的元素无法通过自身属性来唯一标识自己，此时可以考虑借助上级元素来定位自己。举个生活中的例子，一个婴儿刚出生时还没有姓名与身份证号，此时给婴儿进行检查时往往会标注为“某某之女”。因为婴儿的母亲是确定的，找到母亲也就找到了婴儿。</p>
<p>XPath的层级与属性结合定位的原理也是如此。</p>
<p>在定位一组元素时，也可以用层级定位的方法。例如常见的表格、下拉列表框等，都可能用到层级定位。</p>
<table>
<thead>
<tr>
<th>省份</th>
<th>城市</th>
</tr>
</thead>
<tbody><tr>
<td>辽宁</td>
<td>沈阳</td>
</tr>
<tr>
<td>吉林</td>
<td>长春</td>
</tr>
</tbody></table>
<p>国籍    中国↓</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格&amp;下拉列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#qw</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;qw&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>省份<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>沈阳<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>吉林<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>长春<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;site&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>英国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>德国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过层级定位方式获取表格“吉林”这个单元格的值</span></span><br><span class="line"><span class="comment"># 在“国籍”下拉列表框中选择“中国”</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;file:///home/william/DYJ/software-test/21.Selenium/html/table.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = driver.find_element_by_id(<span class="string">&quot;qw&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取行</span></span><br><span class="line">row = table.find_elements_by_tag_name(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列数</span></span><br><span class="line">col = row[<span class="number">0</span>].find_elements_by_tag_name(<span class="string">&quot;th&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一行第一列的值</span></span><br><span class="line">Row_Col = row[<span class="number">1</span>].find_elements_by_tag_name(<span class="string">&quot;td&quot;</span>)[<span class="number">0</span>].text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Row_Col)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在下拉列表框中选择第二个值</span></span><br><span class="line">checkvalue = driver.find_element_by_name(<span class="string">&quot;site&quot;</span>)</span><br><span class="line">checkvalue.find_element_by_xpath(<span class="string">&#x27;//option[@value=&quot;2&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h3><p>有时有些元素还没加载出来脚本就对其进行操作了，这样必然是无法成功的，所以需要加入等待时间，尽量不因为元素没加载出来而报错。</p>
<p>自动化测试过程中必然会遇到环境不稳定、网络加载缓慢等情况。当定位没有问题，但程序运行时却报出元素不存在（不可见）的错误时，就需要思考是否是因为程序运行太快或者页面加载太慢而造成了元素不可见，此时就必须设置等待时间，直到元素可见后再继续运行程序。</p>
<p>等待时间以最长等待时间为基准</p>
<p>当UI自动化页面元素不存在时，常见的发生异常的原因有如下几点：</p>
<ul>
<li>页面加载时间过慢，需要查找的元素代码已经执行完成，但是页面还未加载成功，从而发生异常；</li>
<li>查到的元素没有在当前的iframe或者frame中，此时需要切换至对应的iframe或者frame中；</li>
<li>代码中对元素的描述错误</li>
</ul>
<h4 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h4><p>强制等待也叫作固定休眠时间，是设置等待的最简单的方法，如sleep(5)，其中5的单位为s</p>
<p>sleep(*)不管什么情况代码运行到它所在的位置时，都会让脚本暂停运行一定时间（如sleep(5)为暂停5s），时间到达后再继续运行。</p>
<p>sleep()的缺点是不够智能，如果设置的时间太短，而元素还没有加载出来，代码照样会报错；如果设置的时间太长，则又会浪费时间。不要忽视每次几秒的时间，当用例多了，代码量大了，多几秒就会影响脚本的整体运行速度，所以应尽量少用强制等待sleep()（至少生产环境中尽量避免使用）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://cn.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&#x27;豆瓣&#x27;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制等待</span></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># import time 和 from time import sleep 区别, 一个是导入模块，一个是导入模块的函数</span></span><br></pre></td></tr></table></figure>

<h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p>隐式等待也叫作智能等待（implicitly_wait(xx)），当设置了一段时间后，在这段时间内如果页面完成加载，则进行下一步，如果未加载完，则会报超时错误。</p>
<p>设置隐式等待（implicitly_wait()）后，如果整个页面很快加载完毕，而因为程序代码中对元素的描述属性不正确，造成不能在页面中很快找到该元素时，代码会根据隐式等待时设置的一个最长等待时间（如implicitly_wait(10)，最长等待时间等于10s），不断地尝试查找元素，直到超过最长等待时间（10s）后才会抛出异常，告知找不到该元素。因此，隐式等待中的最长等待时间也可理解为查找元素的最长时间。隐式等待（implicitly_wait()）也是存在缺点的。</p>
<p><strong>隐式等待是设置了一个最长等待时间（implicitly_wait(10)，最长等待时间等于10s），如果在规定时间内（10s以内）网页很快加载完成（如5s），则执行下一步，否则一直等到时间（10s）截止，然后才执行下一步。</strong>这里就存在弊端了，例如有时程序代码中想要操作的页面中的某个元素早就加载完成了，但是显示过程中如JS等代码加载特别慢，整个网页还处在加载过程中，那么程序代码会一直等待整个页面加载完成才会执行下一步。下面以Bing搜索页为例来理解隐式等待implicitly_wait()的应用，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># implicitly_wait隐式等待</span></span><br><span class="line"><span class="comment"># 判断某元素，如果超过10s未发现，则抛出错误</span></span><br><span class="line"><span class="comment"># 如果在5s内页面家在完毕，则对该元素进行操作</span></span><br><span class="line"></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 输出第一个时间</span></span><br><span class="line">    <span class="built_in">print</span>(ctime())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># driver.find_element_by_xpath(&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;).send_keys(&quot;星际穿越&quot;)</span></span><br><span class="line">    <span class="comment"># driver.find_element_by_xpath(&#x27;//input[@id=&quot;sb_form_go&quot;]&#x27;).click()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入错误xpath，检查是否等待10s</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_gog&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e:</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 输出第一个时间，观察间隔</span></span><br><span class="line">    <span class="built_in">print</span>(ctime())</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@william-pc ~]$ python /home/william/DYJ/software-test/21.Selenium/Untitled-1.py</span><br><span class="line">Mon Mar 22 23:15:56 2021</span><br><span class="line">Message: Unable to locate element: //input[@id=&quot;sb_form_gog&quot;]</span><br><span class="line"></span><br><span class="line">Mon Mar 22 23:16:06 2021</span><br><span class="line"></span><br><span class="line">[william@william-pc ~]$ python /home/william/DYJ/software-test/21.Selenium/Untitled-1.py</span><br><span class="line">Mon Mar 22 23:16:36 2021</span><br><span class="line">Mon Mar 22 23:16:37 2021</span><br></pre></td></tr></table></figure>

<h4 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h4><p>显式等待（WebDriverWait）配合该类的until()和until_not()方法，能够根据判断条件进行灵活地等待。它的执行原理是：程序每隔多长时间检查一次，如果条件成立了，则执行下一步，否则继续等待，直到超过设置的最长时间，然后抛出TimeoutException。</p>
<p>WebDriverWait等待也是我们推荐的方法。在使用WebDriverWait方法前需要导入该方法。使用WebDriverWait方法时常常会结合expected_conditions模块一起使用。</p>
<p>结合前面的Bing搜索测试场景，等搜索框元素在DOM树中被加载后再对搜索框元素完成赋值操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔0.5秒检查一次，超过5秒未找到id为sb_form_q,则抛出TimeoutException</span></span><br><span class="line">element = WebDriverWait(driver,<span class="number">5</span>,<span class="number">0.5</span>).until(EC.presence_of_element_located</span><br><span class="line">((By.ID,<span class="string">&quot;sb_form_q&quot;</span>)))</span><br><span class="line">element.send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>WebDriverWait方法：</p>
<ul>
<li>.dirver：传入WebDriver实例</li>
<li>.timeout：超时时间，即等待最长时间（同时要考虑隐式等待时间）</li>
<li>.poll_frequency：调用until或until_not中的方法间隔时间，默认是0.5秒</li>
<li>.ignored_exceptions：忽略的异常。如果在调用until或until_not的过程中抛出这个元组中的异常，则不中断代码，继续等待；如果抛出的是这个元组外的异常，则中断代码，抛出异常。默认只有NoSuchElementException</li>
</ul>
<p><strong>WebDriverWait需要与unitl()或者until_not()方法结合使用</strong></p>
<p>调用该方法提供的驱动程序作为参数，直到返回值为True </p>
<p><code>WebDriverWati(driver,5).until(method,message = &quot;&quot;)</code></p>
<ul>
<li>·method：在等待期间，每隔一段时间调用这个传入的方法，直到返回值不是False</li>
<li>·message：如果超时，抛出TimeoutException，将message传入异常</li>
</ul>
<p>调用该方法提供的驱动程序作为参数，直到返回值为False</p>
<p><code>WebDriverWati(driver,5).until_not(method,message = &quot;&quot;)</code></p>
<p>·until_not与until相反，until是当某元素出现或某个条件成立则继续执行，until_not是当某元素消失或某个条件不成立则继续执行，两者参数相同。</p>
<p>expected_conditions是Selenium的一个模块，其中包含一系列可用于判断的条件。expected_conditions模块包含十几个condition，与until、until_not组合能够实现很多判断，如果将其灵活封装，可以大大提高脚本的稳定性。</p>
<ul>
<li>·title_is：判断当前页面的标题是否完全等于预期字符串，返回布尔值。</li>
<li>·title_contains：判断当前页面的标题是否包含预期字符串，返回布尔值。</li>
<li>·presence_of_element_located：判断某个元素是否被加到了DOM树里，并不代表该元素一定可见。</li>
<li>·visibility_of_element_located：判断某个元素是否可见。可见代表元素非隐藏，并且元素的宽和高都不等于0。</li>
<li>·visibility_of：跟前面的几个方法做一样的事情，只是前面的方法要传入locator，而该方法直接传定位到的element即可。</li>
<li>·presence_of_all_elements_located：判断是否至少有一个元素存在于DOM树中。例如，如果页面上有n个元素的class都是’b_searchbox’，那么只要有一个元素存在，这个方法就返回True。</li>
<li>·text_to_be_present_in_element：判断某个元素中的text是否包含预期的字符串。</li>
<li>·text_to_be_present_in_element_value：判断某个元素中的value属性是否包含预期的字符串。·frame_to_be_available_and_switch_to_it：判断该frame是否可以切换（switch）进Frame，如果可以的话则返回True并且切换进去，否则返回False。</li>
<li>·invisibility_of_element_located：判断某个元素是否不存在于DOM树中或不可见。</li>
<li>·element_to_be_clickable：判断某个元素是否可见并且是可以单击的。</li>
<li>·staleness_of：当某个元素从DOM树中移除后，返回True或False。</li>
<li>·element_to_be_selected：判断某个元素是否被选中了，一般用在下拉列表框中。</li>
<li>·element_selection_state_to_be：判断某个元素的选中状态是否符合预期。</li>
<li>·element_located_selection_state_to_be：跟前面的方法作用一样，只是前面的方法传入定位到的element，而该方法传入locator。·alert_is_present：判断页面上是否存在alert。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐式等待和显式等待是可以结合</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐式等待</span></span><br><span class="line">driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 显示等待</span></span><br><span class="line">    WebDriverWait(driver,<span class="number">10</span>,<span class="number">0.5</span>).until(EC.presence_of_element_located((By.NAME,<span class="string">&quot;q&quot;</span>)))</span><br><span class="line">    </span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure>

<p>设置了隐式等待和显式等待，在其他操作中，隐式等待起决定性作用，而在WebDriverWait中，显式等待起主要作用。需要注意的是，最长的等待时间取决于两者之间的大者，此例中为20，隐式等待时间大于显式等待时间，则该代码的最长等待时间等于隐式等待设置的时间。</p>
<h3 id="警告框与弹出框的处理"><a href="#警告框与弹出框的处理" class="headerlink" title="警告框与弹出框的处理"></a>警告框与弹出框的处理</h3><p>在实际开发过程中常常会见到JavaScript生成的警告框，提示错误信息、报警信息、执行的操作等内容。</p>
<table>
<thead>
<tr>
<th>方法/属性</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>text()</td>
<td>获取警告窗口文本</td>
<td>alert.text</td>
</tr>
<tr>
<td>accept()</td>
<td>点击“确认”按钮，接受警告信息</td>
<td>alert.accept()</td>
</tr>
<tr>
<td>dismiss()</td>
<td>驳回警告信息，点击“取消”或叉号按钮关闭对话框</td>
<td>alert.dismiss()</td>
</tr>
<tr>
<td>send_keys()</td>
<td>模拟给元素输入文本值</td>
<td>alert.send_keys()</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">value</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;一个致命的错误&#x27;);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirm&quot;</span> <span class="attr">value</span>=<span class="string">&quot;confirm&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;confirm(&#x27;你确定要这样吗&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prompt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;prompt&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;var name = prompt(&#x27;请输入:&#x27;,&#x27;!!!!&#x27;); document.write(name)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>alert按钮的操作</p>
<ol>
<li>调用switch_to.alert()方法切换到alert弹出框</li>
<li>调用text方法获取弹出的文本信息</li>
<li>调用accept()方法单击“确定”按钮</li>
<li>调用dismiss()方法相当于取消弹出框或单击右上角的关闭按钮</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;file:///home/william/DYJ/software-test/21.Selenium/html/alert.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;alert&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回alert弹出框中的文本信息</span></span><br><span class="line">alertInfo = driver.switch_to.alert</span><br><span class="line"><span class="built_in">print</span>(alertInfo.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告信息</span></span><br><span class="line"><span class="comment"># alertInfo.accept()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 驳回警告信息</span></span><br><span class="line">alertInfo.dismiss()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;file:///home/william/DYJ/software-test/21.Selenium/html/alert.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;confirm&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回alert弹出框中的文本信息</span></span><br><span class="line">alertInfo = driver.switch_to.alert</span><br><span class="line"><span class="built_in">print</span>(alertInfo.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告信息</span></span><br><span class="line">alertInfo.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驳回警告信息</span></span><br><span class="line"><span class="comment"># alertInfo.dismiss()</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;file:///home/william/DYJ/software-test/21.Selenium/html/alert.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;prompt&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回alert弹出框中的文本信息</span></span><br><span class="line">alertInfo = driver.switch_to.alert</span><br><span class="line"><span class="built_in">print</span>(alertInfo.text)</span><br><span class="line"></span><br><span class="line">alertInfo.send_keys(<span class="string">&quot;输入啥&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告信息</span></span><br><span class="line"><span class="comment"># alertInfo.accept()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 驳回警告信息</span></span><br><span class="line"><span class="comment"># alertInfo.dismiss()</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h3 id="单选按钮、复选框和下拉列表框的处理"><a href="#单选按钮、复选框和下拉列表框的处理" class="headerlink" title="单选按钮、复选框和下拉列表框的处理"></a>单选按钮、复选框和下拉列表框的处理</h3><p>HTML页面中的单选按钮、复选框、下拉列表框均可通过WebDriver实现操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Radio&amp;Select&amp;checkBox<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>单选：Radio<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>复选框：CheckBox<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>Java <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c2&quot;</span>&gt;</span>Python <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c3&quot;</span>&gt;</span>C++ <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c4&quot;</span>&gt;</span>Go <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>下拉框：Select<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>国籍<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;site&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>英国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>德国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get( <span class="string">&quot;file://C:/Users/quanxh/Desktop/3/Radio&amp;Select.html&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单选按钮</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;girl&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;boy&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复选框选中所有,再去掉</span></span><br><span class="line">checkboxs = driver.find_elements_by_xpath(<span class="string">&#x27;//*[@type=&quot;checkbox&quot;]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> checkboxs:</span><br><span class="line">    <span class="keyword">if</span> i.get_attribute(<span class="string">&#x27;type&#x27;</span>) == <span class="string">&#x27;checkbox&#x27;</span>:</span><br><span class="line">        i.click()</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 去除最后选中的复选框</span></span><br><span class="line">driver.find_elements_by_xpath(<span class="string">&quot;//*[@type=&#x27;checkbox&#x27;]&quot;</span>).pop().click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>is_selected()方法在复选框操作中会常常用到，有时候复选框本身就是选中的状态，如果再次单击，就变为未被选中的状态了，这样就不是我们所期望的状态了。</p>
<p>那可不可以当复选框没选中的时候再去单击（click）一下；当它已经是选中状态就不再单击呢？is_selected()方法用来检查是否选中该元素，一般针对单选按钮、复选框，其返回的结果是Bool值。</p>
<p>通过is_selected()方法先检查复选框是否被选中，如被选中则结束代码运行，如未被选中则执行选中操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get( <span class="string">&quot;file://C:/Users/quanxh/Desktop/3/Radio&amp;Select.html&quot;</span> )</span><br><span class="line"></span><br><span class="line">selected = driver.find_element_by_id(<span class="string">&#x27;c1&#x27;</span>).is_selected()</span><br><span class="line"><span class="keyword">if</span> selected == <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(selected)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;c1&#x27;</span>).click()</span><br><span class="line">    newSelected = driver.find_element_by_id(<span class="string">&#x27;c1&#x27;</span>).is_selected()</span><br><span class="line">    <span class="built_in">print</span>(newSelected)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>Select 下拉列表</p>
<p>Select提供了3种选择方法来定位下拉列表框</p>
<ul>
<li>·select_by_index(index)：通过选项的顺序来定位，第一个选项索引为0；</li>
<li>·select_by_value(value)：通过value属性来定位。</li>
<li>·select_by_visible_text(text)：通过选项可见文本来定位。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get( <span class="string">&quot;file://C:/Users/quanxh/Desktop/3/Radio&amp;Select.html&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">selectElement = driver.find_element_by_name(<span class="string">&quot;site&quot;</span>)</span><br><span class="line">selectElement.find_element_by_xpath(<span class="string">&#x27;//option[@value=&quot;2&quot;]&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line"><span class="comment"># 导入Select模块</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过select_by_index(index)方法来定位下拉框</span></span><br><span class="line">selectElement = Select(driver.find_element_by_name(<span class="string">&quot;site&quot;</span>))</span><br><span class="line"><span class="comment"># 选择德国</span></span><br><span class="line">selectElement.select_by_index(<span class="number">1</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过select_by_value(value)方法定位下拉框</span></span><br><span class="line">selectElement = Select(driver.find_element_by_name(<span class="string">&quot;site&quot;</span>))</span><br><span class="line"><span class="comment"># 选择英国</span></span><br><span class="line">selectElement.select_by_value(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过select_by_visible_text(value)方法定位下拉框</span></span><br><span class="line">selectElement = Select(driver.find_element_by_name(<span class="string">&quot;site&quot;</span>))</span><br><span class="line"><span class="comment"># 选择中国</span></span><br><span class="line">selectElement.select_by_visible_text(<span class="string">&quot;中国&quot;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>Select提供了4种方法取消选择。</p>
<ul>
<li>·deselect_by_index(index)：取消对应的index选项</li>
<li>·deselect_by_value(value)：取消对应的value选项</li>
<li>·deselect_by_visible_text(text)：取消对应的文本选项</li>
<li>·deselect_all()：取消所有选项。Select提供了3个属性方法。</li>
<li>·options：提供所有选项的列表，其中均为选项的WebElement元素</li>
<li>·all_selected_options：提供所有被选中的选项列表，其中也均为选项的WebElement元素</li>
<li>·first_selected_option：提供第一个被选中的选项，也是下拉列表框的默认值。</li>
</ul>
<h3 id="检查元素是否启用和显示"><a href="#检查元素是否启用和显示" class="headerlink" title="检查元素是否启用和显示"></a>检查元素是否启用和显示</h3><p>当判断元素在屏幕上是否可见的时候，可调用is_displayed()方法来实现；当判断元素是否可编辑的时候，可调用is_enabled()方法实现；is_selected()方法用于判断元素是否为选中状态。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">objectq = driver.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;sb_form_q&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(objectq.is_displayed())</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>is_enabled()方法用于存储input、select等元素的可编辑状态，可以编辑返回True，否则返回False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">objectq = driver.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;sb_form_q&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(objectq.is_enabled())</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>is_enabled()方法可以判断按钮的单击状态，如有一个按钮在某种情况下置灰不可单击，可以用is_enable()来判断</p>
<h3 id="Frame切换"><a href="#Frame切换" class="headerlink" title="Frame切换"></a>Frame切换</h3><p>我们在使用Selenium定位页面元素的时候，有时会遇到定位不到的问题，在页面上可以看到元素，用浏览器的开发者工具也能够看到，而代码运行就是定位不到。当遇到这种情况时，很有可能是有Frame存在。</p>
<p>Frame标签有Frameset、Frame和IFrame 3种，Frameset跟其他普通标签没有区别，不会影响到正常的定位。在页面中我们经常能看到Frame或IFrame（Frame是整个页面的框架，IFrame是内嵌的框架），由于WebDriver定位元素时只能在一个页面上定位，所以对于IFrame这样的情况，WebDriver是无法直接定位到元素的。</p>
<p>Selenium中有对应的方法对Frame进行操作。</p>
<p>WebDriver提供了switch_to.frame()方法来切换Frame  <code>switch_to.frame(reference)</code></p>
<p><img src="farme.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>The link</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span-ifrme&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>iframe<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;nf&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cn.bing.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单击Bing搜索页的搜索框完成关键字的搜索。iframe.html代码中IFrame标签的id等于&quot;iname&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;file:/home/william/DYJ/software-test/21.Selenium/html/frame.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作IFrame,切换窗体IFrame(id:iname,name:nf)</span></span><br><span class="line"><span class="comment"># 使用switch_to_frame时会在该方法上出现下划线，不再推荐</span></span><br><span class="line"><span class="comment"># driver.switch_to.frame(&quot;iname&quot;)</span></span><br><span class="line"></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;iname&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>切换到主窗体</p>
<p>当切换到子窗体Frame中之后，便不能继续操作主窗体中的元素了，这时如果要操作主窗体中的元素，则需切换回主窗体。</p>
<p>就是当对Bing搜索页完成操作后，如想单击外部的baidu链接，则需要切换到主窗体。切换到主窗体的方法是driver.switch_to.default_content() [跳到最外层窗体]。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;file:/home/william/DYJ/software-test/21.Selenium/html/frame.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作IFrame,切换窗体IFrame(id:iname,name:nf)</span></span><br><span class="line"><span class="comment"># 使用switch_to_frame时会在该方法上出现下划线，不再推荐</span></span><br><span class="line"><span class="comment"># driver.switch_to.frame(&quot;iname&quot;)</span></span><br><span class="line"></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;iname&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># driver.switch_to.default_content() 跳到最外层窗体</span></span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//a&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>如果遇到嵌套的Frame，由子窗体切换到它的上一级父窗体，则可以使用switch_to.parent_frame()方法。</p>
<p>就是当对Bing搜索页进行操作后，如果想单击外部的baidu链接，其实就是切换到它的父级，因此也可以通过switch_to.parent_frame()方法实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;file:/home/william/DYJ/software-test/21.Selenium/html/frame.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作IFrame,切换窗体IFrame(id:iname,name:nf)</span></span><br><span class="line"><span class="comment"># 使用switch_to_frame时会在该方法上出现下划线，不再推荐</span></span><br><span class="line"><span class="comment"># driver.switch_to.frame(&quot;iname&quot;)</span></span><br><span class="line"></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;iname&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@id=&quot;sb_form_go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># driver.switch_to.parent_frame() 跳到上一层窗体</span></span><br><span class="line">driver.switch_to.parent_frame()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//a&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p>在测试脚本执行过程中，当运行到某些步骤时存在运行失败的可能性。当脚本运行失败时，可以看脚本运行错误信息是常用的方法，如果可以把当前步骤所操作的场景通过图形展现出来（类似黑盒测试中提交Bug同时配图），就更容易让自动化测试工程师判别测试脚本执行失败的原因了。</p>
<p>WebDriver提供的屏幕截图方法有下面4个</p>
<ol>
<li><p>save_screenshot()方法</p>
<p>save_screenshot()方法是保存一张后缀名为png的图片。</p>
<p>save_screenshot()的参数是文件名称，截图会保存在当前代码的目录下(Linux 保存在home/username目录下)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以日期为截图的名称</span></span><br><span class="line">picture_time = time.strftime(<span class="string">&quot;%Y-%m-%d-%H_%M_%S&quot;</span>, time.localtime(time.time()))</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">driver.save_screenshot(picture_time + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>get_screenshot_as_file(filename)方法</p>
<p>将截图保存到指定的路径（该路径为绝对路径）下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;/home/william/DYJ/software-test/21.Selenium/picture/bing.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>get_screenshot_as_png()方法</p>
<p>get_screenshot_as_png()方法是获取当前屏幕截图的二进制文件数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">screenshot = driver.get_screenshot_as_png()</span><br><span class="line"><span class="built_in">print</span>(screenshot)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>get_screenshot_as_base64()方法</p>
<p>get_screenshot_as_base64()方法是获取当前屏幕截图的Base64编码字符串，便于HTML页面直接嵌入Base64编码图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">screenshot = driver.get_screenshot_as_base64()</span><br><span class="line"><span class="built_in">print</span>(screenshot)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="标签页切换"><a href="#标签页切换" class="headerlink" title="标签页切换"></a>标签页切换</h3><p>点击链接可能会跳转到其他页面，但定位的元素是当前页面的，我们可以通过标签页进行切换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前窗口</span></span><br><span class="line">handle = driver.current_window_handle</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;q&quot;]&#x27;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;go&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用JS打开新标签</span></span><br><span class="line">js = <span class="string">&#x27;window.open(&quot;https://www.baidu.com&quot;);&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有窗口</span></span><br><span class="line">handles = driver.window_handles</span><br><span class="line"><span class="comment"># 关闭当前窗口</span></span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># 切换窗口</span></span><br><span class="line">driver.switch_to.window(handles[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;wd&quot;</span>).send_keys(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h3 id="执行JavaScript脚本"><a href="#执行JavaScript脚本" class="headerlink" title="执行JavaScript脚本"></a>执行JavaScript脚本</h3><p>页面上的操作有时通过Selenium是无法实现的，如滚动条、时间控件等，此时就需要借助JavaScript来完成</p>
<p>WebDriver提供了一个内置方法来操作JavaScript<code>driver.execute_script(self,script,args)</code></p>
<p>可以通过两种方式在浏览器中执行JavaScript。</p>
<ol>
<li><p>在文档根级别执行JavaScript在文档根级别下，使用JavaScript提供的方法捕获想要的元素，然后声明一些操作并使用WebDriver执行此JavaScript。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">js = <span class="string">&#x27;document.getElementsByName(&quot;input&quot;)[1].click();&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure></li>
<li><p>在元素级别执行JavaScript在元素级别下，使用WebDriver捕获想要使用的元素，然后使用JavaScript声明一些操作，并通过将Web元素作为参数传递给JavaScript来使用WebDriver执行此JavaScript。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = driver.find_element_by_xpath(<span class="string">&quot;//input[@name=&#x27;go&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># 通过execute_script()使用js语句作为字符串值调用方法</span></span><br><span class="line"><span class="comment"># arguments[0].click()声明JavaScript并对元素执行单击操作</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>,element)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多个js操作</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">searchName = driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;q&quot;]&#x27;</span>)</span><br><span class="line">btnName = driver.find_element_by_xpath(<span class="string">&#x27;//input[@name=&quot;go&quot;]&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&#x27;arguments[0].value=&quot;星际穿越&quot;; arguments[1].click();&#x27;</span>,searchName,btnName)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="JavaScript操作日期控件"><a href="#JavaScript操作日期控件" class="headerlink" title="JavaScript操作日期控件"></a>JavaScript操作日期控件</h4><p>当通过send_keys给时间控件赋值时，看到只是把时间控件打开了，并没有选择设定的日期。</p>
<p>采用JS赋值，则可以完成对时间控件的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.html5tricks.com/demo/jquery-bootstrap-calendar/index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过send_keys无法操控，只能打开控件</span></span><br><span class="line"><span class="comment"># driver.find_element_by_xpath(&#x27;//input[@id=&quot;mydatepicker&quot;]&#x27;).send_keys(&quot;2021-03-24&quot;)</span></span><br><span class="line"></span><br><span class="line">js = <span class="string">&quot;document.getElementById(&#x27;mydatepicker&#x27;).value=&#x27;2021-03-24&#x27;&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>readonly日期控件</p>
<p>有些日期控件元素包含readonly属性，要想实现给readonly属性的日期控件赋值，需要先通过JS去掉readonly属性，然后再给日期控件赋值。</p>
<p><code>&lt;input type=&quot;text&quot; class=&quot;input&quot; value=&quot;2018-07-21&quot; id=&quot;train_date&quot; readonly=&quot;&quot;&gt;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.12306.cn/index/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 代码运行到.clear()会报错Message: invalid element state，虽然可以写入</span></span><br><span class="line"><span class="string">driver.find_element_by_xpath(&#x27;//*[@id=&quot;train_date&quot;]&#x27;).clear()</span></span><br><span class="line"><span class="string">driver.find_element_by_xpath(&#x27;//*[@id=&quot;train_date&quot;]&#x27;).send_keys(&#x27;2021-03-24&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 通过js写入同样报错</span></span><br><span class="line"><span class="string">driver.find_element_by_xpath(&#x27;//*[@id=&quot;train_date&quot;]&#x27;).clear()</span></span><br><span class="line"><span class="string">js = &quot;document.getElementById(&#x27;train_date&#x27;).value=&#x27;2021-03-24&#x27;&quot;</span></span><br><span class="line"><span class="string">driver.execute_script(js)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先通过.removeAttribute()去掉readonly属性</span></span><br><span class="line">js = <span class="string">&quot;document.getElementById(&#x27;train_date&#x27;).removeAttribute(&#x27;readonly&#x27;)&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在使用js更改value值 或 .send_keys() 写入</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;train_date&quot;]&#x27;</span>).clear()</span><br><span class="line">js = <span class="string">&quot;document.getElementById(&#x27;train_date&#x27;).value=&#x27;2021-03-24&#x27;&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="JavaScript处理多窗口"><a href="#JavaScript处理多窗口" class="headerlink" title="JavaScript处理多窗口"></a>JavaScript处理多窗口</h4><p>当单击某链接时，单击的链接有时不是在原标签页上实现跳转，而是新打开一个标签页。</p>
<p>可以修改HTML中元素的属性。通过JS修改元素属性可以实现多窗口之间的切换</p>
<p>对于多窗口的处理，只需要修改target属性即可。（target=_blank用一个新窗口打开链接)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有id，name，class的li标签如何使用dom获取</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">js = <span class="string">&#x27;document.getElementById(&quot;sb_help&quot;).target=&quot;&quot;&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;sb_help&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="JavaScript控制浏览器滚动条"><a href="#JavaScript控制浏览器滚动条" class="headerlink" title="JavaScript控制浏览器滚动条"></a>JavaScript控制浏览器滚动条</h4><p>当访问页面上的展现结果超过一屏时，如果想浏览或操作屏幕下半部分的内容时，由于被屏幕遮挡，因此无法操作对应的元素。此时，就需要借助滚动条来拖动屏幕，实现浏览更多的内容或使被操作的元素展现在屏幕上。</p>
<p>滚动条是无法直接被定位到的，WebDriver中也没有直接的方法控制滚动条。此时便需要借助JavaScript来操作滚动条。</p>
<ol>
<li><p>控制纵向滚动条上下滑动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 滚动条回到顶部</span></span><br><span class="line">js = <span class="string">&#x27;var scroll=doument.documentElement.scrollTop=0&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滚动条到底部</span></span><br><span class="line">js = <span class="string">&#x27;var scroll=doument.documentElement.scrollTop=10000&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get( <span class="string">&quot;https://cn.bing.com&quot;</span> )</span><br><span class="line"></span><br><span class="line">driver.set_window_size(<span class="number">800</span>,<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">js = <span class="string">&quot;var scroll=document.documentElement.scrollTop=10000&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">js = <span class="string">&#x27;var scroll=document.documentElement.scrollTop=0&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>控制横向滚动条左右滑动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.set_window_size(<span class="number">800</span>,<span class="number">600</span>)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 通过scrollTop(x,y)实现横纵滚动条移动</span></span><br><span class="line">js = <span class="string">&#x27;window.scrollTo(100,500)&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>scrollTo()函数</p>
<ul>
<li>scrollTo()函数也可通过其他的方式实现滚动条的滚动。</li>
<li>·scrollHeight：获取对象（浏览器）的滚动高度；</li>
<li>·scrollWidth：获取对象（浏览器）的滚动宽度；</li>
<li>·scrollLeft：设置或获取左边界和窗口可见内容与最左端之间的距离；</li>
<li>·scrollTop：设置或获取最顶部和窗口可见内容与最顶端之间的距离。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get( <span class="string">&quot;https://cn.bing.com&quot;</span> )</span><br><span class="line"></span><br><span class="line">driver.set_window_size(<span class="number">800</span>,<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 纵向滚动到底部</span></span><br><span class="line">downJs = <span class="string">&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;</span></span><br><span class="line">driver.execute_script(downJs)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 纵向滚动到滚动条高度的0.1倍</span></span><br><span class="line">middleDJs = <span class="string">&#x27;window.scrollTo(0,document.body.scrollHeight*0.1)&#x27;</span></span><br><span class="line">driver.execute_script(middleDJs)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滚动条回到初始位置</span></span><br><span class="line">initJs = <span class="string">&#x27;window.scrollTo(0,0)&#x27;</span></span><br><span class="line">driver.execute_script(initJs)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向滚动到最左侧</span></span><br><span class="line">leftJs = <span class="string">&#x27;window.scrollTo(document.body.scrollWidth,0)&#x27;</span></span><br><span class="line">driver.execute_script(leftJs)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向滚动到滚动条宽度的0.1倍</span></span><br><span class="line">middleLJs = <span class="string">&#x27;window.scrollTo(document.body.scrollWidth*0.1,0)&#x27;</span></span><br><span class="line">driver.execute_script(middleLJs)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<ul>
<li>·document.body.scrollWidth：网页正文全文宽度，包括（存在滚动条）未见区域</li>
<li>·document.body.scrollHeight：网页正文全文高度，包括（存在滚动条）未见区域</li>
<li>·document.documentElement.clientWidth：可见区域宽度，不包含存在滚动条时的未见区域；</li>
<li>·document.documentElement.clientHeight：可见区域高度，不包含存在滚动条时的未见区域</li>
<li>·document.documentElement.scrollTop=200：设置或返回匹配元素相对滚动条顶部的偏移；</li>
<li>·document.documentElement.scrollLeft=200：设置或返回匹配元素相对滚动条左侧的偏移；</li>
<li>·window.scrollTo(200,300)：设置滚动条的left（横坐标）=200，top（纵坐标）=300</li>
</ul>
</li>
</ol>
<h4 id="JavaScript的其他操作"><a href="#JavaScript的其他操作" class="headerlink" title="JavaScript的其他操作"></a>JavaScript的其他操作</h4><ol>
<li><p>取消置灰</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementByClassName(<span class="string">&quot;wd&quot;</span>).disabled=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>隐藏与可见</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 隐藏</span></span><br><span class="line">document.getElementById(<span class="string">&quot;Id&quot;</span>).style.display=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="comment"># 可见</span></span><br><span class="line">document.getElementById(<span class="string">&quot;Id&quot;</span>).style.display=<span class="string">&quot;block&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="验证码处理"><a href="#验证码处理" class="headerlink" title="验证码处理"></a><a href="http://www.bcbxhome.com/bcbxxy/forum.php?mod=viewthread&tid=295">验证码处理</a></h3><ul>
<li>让开发人员把验证码变成万能验证码，不对验证码进行校验</li>
<li>注入cookies</li>
<li>通过接口请求，拿到对应验证码信息</li>
<li>待更新….</li>
</ul>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://xxx.xxx.xxx.xxx:xxxx&quot;</span>)</span><br><span class="line"><span class="comment"># 取决于你浏览器打开速度</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Cookies</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;login&#x27;</span>,<span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;xxx&#x27;</span>&#125;)</span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;IS000000&#x27;</span>,<span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;ASP.NET_SessionId&#x27;</span>,<span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;vsxxx4tsfyxxxxjd0xxxxxfz&#x27;</span>&#125;)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">driver.refresh()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入系统</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#spDengLuHou&gt;a:nth-child(2)&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取决于网速和服务器响应速度</span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位弹窗页面</span></span><br><span class="line">current_window = driver.current_window_handle</span><br><span class="line"></span><br><span class="line">all_window = driver.window_handles</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;all_window:: &quot;</span>,all_window)</span><br><span class="line"><span class="keyword">for</span> window <span class="keyword">in</span> all_window:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;window:: &quot;</span>,window)</span><br><span class="line">    <span class="keyword">if</span> window != current_window:</span><br><span class="line">        driver.switch_to.window(window)</span><br><span class="line"></span><br><span class="line">current_window = driver.current_window_handle</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;current_window::&quot;</span> ,current_window)</span><br><span class="line"><span class="built_in">print</span>(driver.current_url)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;iframeDesktop&quot;</span>)</span><br><span class="line"><span class="comment"># 点击仪器预约</span></span><br><span class="line">el = driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;kuaiJieYingYong&quot;]/dl[3]&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(el).click().perform()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 返回主体，再切换</span></span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line">iframe = driver.find_element(By.XPATH, <span class="string">&#x27;//iframe[contains(@src,&quot;ISWeb/IS05/IS050100.aspx&quot;)]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframe)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 预约流式细胞分析仪</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[1]/div/div/div/div[2]/div[2]/div[2]/table/tbody/tr[2]/td[1]/div/a[1]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line">iframe = driver.find_element(By.XPATH, <span class="string">&#x27;//iframe[contains(@src, &quot;ISWeb/IS05/IS050101.aspx?YIQIID=ede9159f-2be4-4a23-94e4-3d1cd3cc6034&quot;)]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframe)</span><br><span class="line"><span class="comment"># 网页强制等待10s</span></span><br><span class="line">sleep(<span class="number">11</span>)</span><br><span class="line"><span class="comment"># driver.switch_to.frame(&quot;custom-area&quot;)</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">el = driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;DingShiGuanBi&quot;]/span/span&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(el).click().perform()</span><br></pre></td></tr></table></figure>



<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h4><p><strong>选取节点</strong></p>
<p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 下面列出了最有用的路径表达式：</p>
<table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nodename</td>
<td align="left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">从根节点选取。</td>
</tr>
<tr>
<td align="left">//</td>
<td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">选取当前节点。</td>
</tr>
<tr>
<td align="left">..</td>
<td align="left">选取当前节点的父节点。</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">选取属性。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bookstore</td>
<td align="left">选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td align="left">/bookstore</td>
<td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td align="left">bookstore/book</td>
<td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td align="left">//book</td>
<td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td align="left">bookstore//book</td>
<td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td align="left">//@lang</td>
<td align="left">选取名为 lang 的所有属性。</td>
</tr>
</tbody></table>
<p><strong>谓语（Predicates）</strong></p>
<p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p>
<p>谓语被嵌在方括号中。</p>
<p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p>
<table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/bookstore/book[1]</td>
<td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()]</td>
<td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()-1]</td>
<td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[position()&lt;3]</td>
<td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang]</td>
<td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang=’eng’]</td>
<td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]</td>
<td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]//title</td>
<td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<p><strong>选取未知节点</strong></p>
<p>XPath 通配符可用来选取未知的 XML 元素。</p>
<table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任何元素节点。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配任何属性节点。</td>
</tr>
<tr>
<td align="left">node()</td>
<td align="left">匹配任何类型的节点。</td>
</tr>
</tbody></table>
<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>
<table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/bookstore/*</td>
<td align="left">选取 bookstore 元素的所有子元素。</td>
</tr>
<tr>
<td align="left">//*</td>
<td align="left">选取文档中的所有元素。</td>
</tr>
<tr>
<td align="left">//title[@*]</td>
<td align="left">选取所有带有属性的 title 元素。</td>
</tr>
</tbody></table>
<p><strong>选取若干路径</strong></p>
<p>通过在路径表达式中使用”|”运算符，您可以选取若干个路径。</p>
<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：R F</p>
<table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//book/title | //book/price</td>
<td align="left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">//title | //price</td>
<td align="left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book/title | //price</td>
<td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
<h4 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h4><p>DOM（Document Object Model）是文档对象模型的简称。DOM为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构，目的其实就是为了能让JS操作HTML元素而制定的一个规范。</p>
<p>DOM是由节点组成的，它并不是一种技术，而是一种访问结构化文档的思想。例如JavaScript对HTML DOM进行的操纵，里面的节点、方法、属性等都是JavaScript语言自身所提供的，而不是DOM所具有的。</p>
<p>基于这种思想，每种语言都有自己的DOM解析器。HTML加载完毕后，渲染引擎会在内存中把HTML文档生成一个DOM树，getElement-ById用于获取内存中DOM树上的元素节点，操作的时候修改的是该元素的属性。</p>
<p><img src="ct_htmltree.gif"></p>
<h4 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h4><table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">例子</th>
<th align="left">例子描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_class.asp">.<em>class</em></a></td>
<td align="left">.intro</td>
<td align="left">选择 class=”intro” 的所有元素。</td>
</tr>
<tr>
<td align="left">.<em>class1</em>.<em>class2</em></td>
<td align="left">.name1.name2</td>
<td align="left">选择 class 属性中同时有 name1 和 name2 的所有元素。</td>
</tr>
<tr>
<td align="left">.<em>class1</em> .<em>class2</em></td>
<td align="left">.name1 .name2</td>
<td align="left">选择作为类名 name1 元素后代的所有类名 name2 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_id.asp">#<em>id</em></a></td>
<td align="left">#firstname</td>
<td align="left">选择 id=”firstname” 的元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_all.asp">*</a></td>
<td align="left">*</td>
<td align="left">选择所有元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element.asp"><em>element</em></a></td>
<td align="left">p</td>
<td align="left">选择所有 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_class.asp"><em>element</em>.<em>class</em></a></td>
<td align="left">p.intro</td>
<td align="left">选择 class=”intro” 的所有 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_comma.asp"><em>element</em>,<em>element</em></a></td>
<td align="left">div, p</td>
<td align="left">选择所有 <div> 元素和所有 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_element.asp"><em>element</em> <em>element</em></a></td>
<td align="left">div p</td>
<td align="left">选择 <div> 元素内的所有 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_gt.asp"><em>element</em>&gt;<em>element</em></a></td>
<td align="left">div &gt; p</td>
<td align="left">选择父元素是 <div> 的所有 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_plus.asp"><em>element</em>+<em>element</em></a></td>
<td align="left">div + p</td>
<td align="left">选择紧跟 <div> 元素的首个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_gen_sibling.asp"><em>element1</em>~<em>element2</em></a></td>
<td align="left">p ~ ul</td>
<td align="left">选择前面有 <p> 元素的每个 <ul> 元素。</td>
</tr>
<tr>
<td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute.asp"><em>attribute</em>]</a></td>
<td align="left">[target]</td>
<td align="left">选择带有 target 属性的所有元素。</td>
</tr>
<tr>
<td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value.asp"><em>attribute</em>=<em>value</em>]</a></td>
<td align="left">[target=_blank]</td>
<td align="left">选择带有 target=”_blank” 属性的所有元素。</td>
</tr>
<tr>
<td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp"><em>attribute</em>~=<em>value</em>]</a></td>
<td align="left">[title~=flower]</td>
<td align="left">选择 title 属性包含单词 “flower” 的所有元素。</td>
</tr>
<tr>
<td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_start.asp"><em>attribute</em>|=<em>value</em>]</a></td>
<td align="left">[lang|=en]</td>
<td align="left">选择 lang 属性值以 “en” 开头的所有元素。</td>
</tr>
<tr>
<td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_begin.asp"><em>attribute</em>^=<em>value</em>]</a></td>
<td align="left">a[href^=”https”]</td>
<td align="left">选择其 src 属性值以 “https” 开头的每个 <a> 元素。</td>
</tr>
<tr>
<td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_end.asp"><em>attribute</em>$=<em>value</em>]</a></td>
<td align="left">a[href$=”.pdf”]</td>
<td align="left">选择其 src 属性以 “.pdf” 结尾的所有 <a> 元素。</td>
</tr>
<tr>
<td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_contain.asp"><em>attribute</em>*=<em>value</em>]</a></td>
<td align="left">a[href*=”w3schools”]</td>
<td align="left">选择其 href 属性值中包含 “abc” 子串的每个 <a> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_active.asp">:active</a></td>
<td align="left">a:active</td>
<td align="left">选择活动链接。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_after.asp">::after</a></td>
<td align="left">p::after</td>
<td align="left">在每个 <p> 的内容之后插入内容。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_before.asp">::before</a></td>
<td align="left">p::before</td>
<td align="left">在每个 <p> 的内容之前插入内容。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_checked.asp">:checked</a></td>
<td align="left">input:checked</td>
<td align="left">选择每个被选中的 <input> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_default.asp">:default</a></td>
<td align="left">input:default</td>
<td align="left">选择默认的 <input> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_disabled.asp">:disabled</a></td>
<td align="left">input:disabled</td>
<td align="left">选择每个被禁用的 <input> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_empty.asp">:empty</a></td>
<td align="left">p:empty</td>
<td align="left">选择没有子元素的每个 <p> 元素（包括文本节点）。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_enabled.asp">:enabled</a></td>
<td align="left">input:enabled</td>
<td align="left">选择每个启用的 <input> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-child.asp">:first-child</a></td>
<td align="left">p:first-child</td>
<td align="left">选择属于父元素的第一个子元素的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-letter.asp">::first-letter</a></td>
<td align="left">p::first-letter</td>
<td align="left">选择每个 <p> 元素的首字母。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-line.asp">::first-line</a></td>
<td align="left">p::first-line</td>
<td align="left">选择每个 <p> 元素的首行。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-of-type.asp">:first-of-type</a></td>
<td align="left">p:first-of-type</td>
<td align="left">选择属于其父元素的首个 <p> 元素的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_focus.asp">:focus</a></td>
<td align="left">input:focus</td>
<td align="left">选择获得焦点的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_fullscreen.asp">:fullscreen</a></td>
<td align="left">:fullscreen</td>
<td align="left">选择处于全屏模式的元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_hover.asp">:hover</a></td>
<td align="left">a:hover</td>
<td align="left">选择鼠标指针位于其上的链接。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_in-range.asp">:in-range</a></td>
<td align="left">input:in-range</td>
<td align="left">选择其值在指定范围内的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_indeterminate.asp">:indeterminate</a></td>
<td align="left">input:indeterminate</td>
<td align="left">选择处于不确定状态的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_invalid.asp">:invalid</a></td>
<td align="left">input:invalid</td>
<td align="left">选择具有无效值的所有 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_lang.asp">:lang(<em>language</em>)</a></td>
<td align="left">p:lang(it)</td>
<td align="left">选择 lang 属性等于 “it”（意大利）的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-child.asp">:last-child</a></td>
<td align="left">p:last-child</td>
<td align="left">选择属于其父元素最后一个子元素每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-of-type.asp">:last-of-type</a></td>
<td align="left">p:last-of-type</td>
<td align="left">选择属于其父元素的最后 <p> 元素的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_link.asp">:link</a></td>
<td align="left">a:link</td>
<td align="left">选择所有未访问过的链接。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_not.asp">:not(<em>selector</em>)</a></td>
<td align="left">:not(p)</td>
<td align="left">选择非 <p> 元素的每个元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-child.asp">:nth-child(<em>n</em>)</a></td>
<td align="left">p:nth-child(2)</td>
<td align="left">选择属于其父元素的第二个子元素的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-child.asp">:nth-last-child(<em>n</em>)</a></td>
<td align="left">p:nth-last-child(2)</td>
<td align="left">同上，从最后一个子元素开始计数。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-of-type.asp">:nth-of-type(<em>n</em>)</a></td>
<td align="left">p:nth-of-type(2)</td>
<td align="left">选择属于其父元素第二个 <p> 元素的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-of-type.asp">:nth-last-of-type(<em>n</em>)</a></td>
<td align="left">p:nth-last-of-type(2)</td>
<td align="left">同上，但是从最后一个子元素开始计数。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-of-type.asp">:only-of-type</a></td>
<td align="left">p:only-of-type</td>
<td align="left">选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-child.asp">:only-child</a></td>
<td align="left">p:only-child</td>
<td align="left">选择属于其父元素的唯一子元素的每个 <p> 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_optional.asp">:optional</a></td>
<td align="left">input:optional</td>
<td align="left">选择不带 “required” 属性的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_out-of-range.asp">:out-of-range</a></td>
<td align="left">input:out-of-range</td>
<td align="left">选择值超出指定范围的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_placeholder.asp">::placeholder</a></td>
<td align="left">input::placeholder</td>
<td align="left">选择已规定 “placeholder” 属性的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-only.asp">:read-only</a></td>
<td align="left">input:read-only</td>
<td align="left">选择已规定 “readonly” 属性的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-write.asp">:read-write</a></td>
<td align="left">input:read-write</td>
<td align="left">选择未规定 “readonly” 属性的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_required.asp">:required</a></td>
<td align="left">input:required</td>
<td align="left">选择已规定 “required” 属性的 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_root.asp">:root</a></td>
<td align="left">:root</td>
<td align="left">选择文档的根元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_selection.asp">::selection</a></td>
<td align="left">::selection</td>
<td align="left">选择用户已选取的元素部分。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_target.asp">:target</a></td>
<td align="left">#news:target</td>
<td align="left">选择当前活动的 #news 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_valid.asp">:valid</a></td>
<td align="left">input:valid</td>
<td align="left">选择带有有效值的所有 input 元素。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/cssref/selector_visited.asp">:visited</a></td>
<td align="left">a:visited</td>
<td align="left">选择所有已访问的链接。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Showdoc安装</title>
    <url>/2021/01/26/Showdoc%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自动脚本脚本利用docker来安装运行环境，适用于linux服务器。如果你的服务器没有docker服务，脚本会尝试安装之。安装docker的过程可能有些慢。如果你已经安装过docker，脚本会省略部分步骤，从而加快showdoc安装进度。</p>
<p>当脚本安装docker失败时，你可以手动安装好docker后再执行脚本 。若装好了docker后还是再失败，则可根据此教程一步步地安装和调试： <a href="https://www.showdoc.com.cn/help?page_id=65610">https://www.showdoc.com.cn/help?page_id=65610</a></p>
<span id="more"></span>

<p>如果服务器系统本身不支持docker，则只能通过手动安装PHP环境的方式来运行showdoc：<a href="https://www.showdoc.com.cn/help?page_id=13732">https://www.showdoc.com.cn/help?page_id=13732</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#下载脚本并赋予权限   wget https:<span class="comment">//www.showdoc.com.cn/script/showdoc;chmod +x showdoc;  #默认安装中文版。如果想安装英文版，请加上en参数，如 ./showdoc en  ./showdoc</span></span></span><br></pre></td></tr></table></figure>

<h3 id="安装后说明"><a href="#安装后说明" class="headerlink" title="安装后说明"></a>安装后说明</h3><p>安装好后，showdoc的数据都会存放在 /showdoc_data/html 目录下。./showdoc 脚本可放置在任何目录，方便以后使用。也可以重新从官方地址下载。</p>
<p>你可以打开 <a href="http://xxx.com:4999/">http://xxx.com:4999</a> 来访问showdoc (xxx.com为你的服务器域名或者IP)。账户密码是showdoc/123456，登录后你便可以看到右上方的管理后台入口。建议登录后修改密码。</p>
<h3 id="从手动方式升级到自动脚本方式"><a href="#从手动方式升级到自动脚本方式" class="headerlink" title="从手动方式升级到自动脚本方式"></a>从手动方式升级到自动脚本方式</h3><p>如果你之前是手动安装showdoc，可考虑升级到现在这种自动脚本方式。升级到脚本方式后，就可以使用上脚本的自动化功能 ，比如说升级到最新版，重启，卸载等。<br>升级方法：</p>
<p>1，首先参考前文部分，在服务器全新安装一个showdoc</p>
<p>2，把原来showdoc目录的Sqlite/showdoc.db.php覆盖/showdoc_data/html/Sqlite/showdoc.db.php ，Public/Uploads覆盖 /showdoc_data/html/Public/Uploads</p>
<p>3，执行命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> -R <span class="regexp">/showdoc_data/</span>html ./showdoc update</span><br></pre></td></tr></table></figure>

<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#下面附上脚本其他命令，以便管理showdoc时可以用得上。 #停止 ./showdoc stop  #重启 ./showdoc restart #升级showdoc到最新版 ./showdoc update #卸载showdoc ./showdoc uninstall</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>测试软件</category>
      </categories>
      <tags>
        <tag>Showdoc</tag>
      </tags>
  </entry>
  <entry>
    <title>coc.nvim报错解决方案</title>
    <url>/2019/10/22/coc-nvim%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="安装coc-nvim时-报-coc-nvim-javascript-file-not-found-错误的解决方案"><a href="#安装coc-nvim时-报-coc-nvim-javascript-file-not-found-错误的解决方案" class="headerlink" title="安装coc.nvim时 报[coc.nvim] javascript file not found 错误的解决方案"></a>安装coc.nvim时 报[coc.nvim] javascript file not found 错误的解决方案</h4><p>错误提示：</p>
<p>[coc.nvim] javascript file not found, please compile the code or use release branch.<br>Press ENTER or type command to continue</p>
<h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>1.进入coc.nvim目录</p>
<blockquote>
<p>cd ~/.vim/plugged/coc.nvim/</p>
</blockquote>
<p>2.执行install.sh</p>
<blockquote>
<p>./install.sh</p>
</blockquote>
<p>3.进入.vimrc执行命令</p>
<blockquote>
<p>:PlugInstall</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 两数之和II-输入有序数组</title>
    <url>/2021/11/29/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h4><p>给定一个已按照 <strong>非递减顺序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p>
<p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p>
<p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p>
<span id="more"></span>

<p><strong>示例 1：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">numbers</span> = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], <span class="attr">target</span> = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">解释：<span class="number">2</span> 与 <span class="number">7</span> 之和等于目标数 <span class="number">9</span> 。因此 <span class="attr">index1</span> = <span class="number">1</span>, <span class="attr">index2</span> = <span class="number">2</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：numbers = <span class="comment">[2,3,4]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[1,3]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：numbers = <span class="comment">[-1,0]</span>, target = -1</span><br><span class="line">输出：<span class="comment">[1,2]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li>
<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>
<li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li>
<li><code>-1000 &lt;= target &lt;= 1000</code></li>
<li><strong>仅存在一个有效答案</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type numbers: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<p><strong>思考</strong></p>
<p>写两个for循环，然后将每个列表的两个值一一相加，直到得出目标值。</p>
<p>通过enumerate()得出下标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type numbers: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        num = <span class="built_in">len</span>(numbers)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,num):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,num):</span><br><span class="line">                <span class="keyword">if</span> numbers[i]+numbers[k] == target:</span><br><span class="line">					<span class="keyword">return</span> i+<span class="number">1</span>,k+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>但这样并没有通过，超出了时间限制，还记得二分查找吗？</p>
<p><strong>非递归二分查找</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params"><span class="built_in">list</span>,item</span>):</span></span><br><span class="line">    <span class="comment"># 列表的头和尾，代表着数组范围的最小和最大</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当找到item的时候，low是小于high，也有可能相等</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high)//<span class="number">2</span></span><br><span class="line">        <span class="comment"># 取数组的中间值</span></span><br><span class="line">        guess = <span class="built_in">list</span>[mid]</span><br><span class="line">        <span class="comment"># 如果中间值等于索引值，那么就返回中间值的下标</span></span><br><span class="line">        <span class="keyword">if</span> guess == item:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果中间值&gt;索引值，因为不包含中间值，所以最大范围high=中间值的下标往左移1位</span></span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果中间值&lt;索引值，因为不包含中间值，所以最小范围low=中间值的下标往右移1位</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(my_list,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改进后             </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(numbers)-<span class="number">1</span>      </span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> numbers[left] + numbers[right] == target:                </span><br><span class="line">                <span class="keyword">return</span> [left+<span class="number">1</span>, right+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> numbers[left] + numbers[right] &lt; target:</span><br><span class="line">                left = left + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = right - <span class="number">1</span></span><br></pre></td></tr></table></figure>



<p><strong>附递归二分查找</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params"><span class="built_in">list</span>,data</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line">    mid = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>[mid] &gt; data:</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="built_in">list</span>[<span class="number">0</span>:mid],data)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">list</span>[mid] &lt; data:</span><br><span class="line">        <span class="keyword">return</span> binary_search(<span class="built_in">list</span>[mid+<span class="number">1</span>:],data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br></pre></td></tr></table></figure>



<p><strong>java双指针</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.length - <span class="number">1</span>; i &lt; j;) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[i] + numbers[j];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) j--;</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode 亲密字符串</title>
    <url>/2021/11/23/leetcode-%E4%BA%B2%E5%AF%86%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="859-亲密字符串"><a href="#859-亲密字符串" class="headerlink" title="859. 亲密字符串"></a><a href="https://leetcode-cn.com/problems/buddy-strings/">859. 亲密字符串</a></h4><p>给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。</p>
<p>交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i != j ，接着交换 s[i] 和 s[j] 处的字符。</p>
<ul>
<li>例如，在 “abcd” 中交换下标 0 和下标 2 的元素可以生成 “cbad” 。</li>
</ul>
<span id="more"></span>


<p><strong>示例 1：</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ab&quot;</span>, <span class="keyword">goal</span> = <span class="string">&quot;ba&quot;</span></span><br><span class="line">输出：true</span><br><span class="line">解释：你可以交换 s[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span> 和 s[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span> 生成 <span class="string">&quot;ba&quot;</span>，此时 s 和 <span class="keyword">goal</span> 相等。</span><br></pre></td></tr></table></figure>



<p><strong>示例 2：</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;ab&quot;</span>, <span class="keyword">goal</span> = <span class="string">&quot;ab&quot;</span></span><br><span class="line">输出：false</span><br><span class="line">解释：你只能交换 s[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span> 和 s[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span> 生成 <span class="string">&quot;ba&quot;</span>，此时 s 和 <span class="keyword">goal</span> 不相等。</span><br></pre></td></tr></table></figure>


<p><strong>示例 3：</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;aa&quot;</span>, <span class="keyword">goal</span> = <span class="string">&quot;aa&quot;</span></span><br><span class="line">输出：true</span><br><span class="line">解释：你可以交换 s[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span> 和 s[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span> 生成 <span class="string">&quot;aa&quot;</span>，此时 s 和 <span class="keyword">goal</span> 相等。</span><br></pre></td></tr></table></figure>


<p><strong>示例 4：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;aaaaaaabc&quot;</span>, <span class="attr">goal</span> = <span class="string">&quot;aaaaaaacb&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>提示：</p>
<ul>
<li>1 &lt;= s.length, goal.length &lt;= 2 * 104</li>
<li>s 和 goal 由小写英文字母组成</li>
</ul>
<p><strong>思路</strong></p>
<ol>
<li>字符串长度不相等, 直接返回false</li>
<li>字符串相等的时候, 只要有重复的元素就返回true</li>
<li>A, B字符串有不相等的两个地方, 需要查看它们交换后是否相等即可.</li>
</ol>
<p><strong>参考答案</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buddyStrings</span>(<span class="params">self, s, goal</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type goal: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 长度不同直接false</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="built_in">len</span>(goal): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 由于必须交换一次，在相同的情况下，交换相同的字符</span></span><br><span class="line">        <span class="keyword">if</span> s == goal <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">set</span>(goal)) &lt; <span class="built_in">len</span>(goal): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用 zip 进行匹配对比，挑出不同的字符对</span></span><br><span class="line">        dif = [(a, b) <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(s, goal) <span class="keyword">if</span> a != b]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对数只能为2，并且对称，如 (a,b)与(b,a)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(dif) == <span class="number">2</span> <span class="keyword">and</span> dif[<span class="number">0</span>] == dif[<span class="number">1</span>][::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/buddy-strings">https://leetcode-cn.com/problems/buddy-strings</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode 分糖果</title>
    <url>/2021/11/11/leetcode-%E5%88%86%E7%B3%96%E6%9E%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="575-分糖果"><a href="#575-分糖果" class="headerlink" title="575. 分糖果"></a><a href="https://leetcode-cn.com/problems/distribute-candies/">575. 分糖果</a></h4><p>Alice 有 n 枚糖，其中第 i 枚糖的类型为 candyType[i] 。Alice 注意到她的体重正在增长，所以前去拜访了一位医生。</p>
<p>医生建议 Alice 要少摄入糖分，只吃掉她所有糖的 n / 2 即可（n 是一个偶数）。Alice 非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。</p>
<p>给你一个长度为 n 的整数数组 candyType ，返回： Alice 在仅吃掉 n / 2 枚糖的情况下，可以吃到糖的最多种类数。</p>
<span id="more"></span>

<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：candyType = [1,1,2,2,3,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：Alice 只能吃 6 / 2 = 3 枚糖，由于只有 3 种糖，她可以每种吃一枚。</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：candyType = [1,1,2,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：Alice 只能吃 4 / 2 = 2 枚糖，不管她选择吃的种类是 [1,2]、[1,3] 还是 [2,3]，她只能吃到两种不同类的糖。</span><br></pre></td></tr></table></figure>


<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：candyType = [6,6,6,6]</span><br><span class="line">输出：1</span><br><span class="line">解释：Alice 只能吃 4 / 2 = 2 枚糖，尽管她能吃 2 枚，但只能吃到 1 种糖。</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ul>
<li>n == candyType.length</li>
<li>2 &lt;= n &lt;= 104</li>
<li>n 是一个偶数</li>
<li>-105 &lt;= candyType[i] &lt;= 105</li>
</ul>
<p>设糖果数为N，由于妹妹只能分到一半的糖果，所以答案不会超过n/2；另一方面，一共有M种，答案也不会超过M</p>
<p>若M &lt;= n/2，则每种糖果至少可分一颗给妹妹，此时最多能分M个糖果</p>
<p>若M &gt; n/2，只能分到n/2种糖果，每种糖果分一颗，此时最多能分n/2个糖果</p>
<p>贪心算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distrubuteCandies</span>(<span class="params">self,candyType</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">len</span>(<span class="built_in">set</span>(candyType)),<span class="built_in">len</span>(candyType)//<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 检测大写字母</title>
    <url>/2021/12/13/leetcode-%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="520-检测大写字母"><a href="#520-检测大写字母" class="headerlink" title="520. 检测大写字母"></a><a href="https://leetcode-cn.com/problems/detect-capital/">520. 检测大写字母</a></h4><p>我们定义，在以下情况时，单词的大写用法是正确的：</p>
<ul>
<li>全部字母都是大写，比如 <code>&quot;USA&quot;</code> 。</li>
<li>单词中所有字母都不是大写，比如 <code>&quot;leetcode&quot;</code> 。</li>
<li>如果单词不只含有一个字母，只有首字母大写， 比如 <code>&quot;Google&quot;</code> 。</li>
</ul>
<p>给你一个字符串 <code>word</code> 。如果大写用法正确，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<span id="more"></span>

<p><strong>示例 1：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">&quot;USA&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">&quot;FlaG&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= word.length &lt;= 100</code></li>
<li><code>word</code> 由小写和大写英文字母组成</li>
</ul>
<p><strong>分析</strong></p>
<p>如果第一个字母是大写，则后面的字母都是大写</p>
<p>如果第一个字母不是大写，则后面的字母都不是大写</p>
<p>Python写法一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCapitalUse</span>(<span class="params">self,word</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        upper,lower = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(s) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(s) &lt;= <span class="number">90</span>:</span><br><span class="line">                upper += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lower += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> upper == <span class="number">0</span> <span class="keyword">or</span> lower == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(word[<span class="number">0</span>]) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(word[<span class="number">0</span>]) &lt;= <span class="number">90</span> <span class="keyword">and</span> lower == <span class="built_in">len</span>(word) -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>Python写法二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calss Solution(<span class="built_in">object</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detetCapitalUse</span>(<span class="params">self,word</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> word.upper()==word <span class="keyword">or</span> word.lower()==word <span class="keyword">or</span> word.title()==word</span><br></pre></td></tr></table></figure>



<p>C写法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deteCapitaUse</span><span class="params">(<span class="keyword">char</span> * word)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 记录大写字母、小写字母最后出现的位置</span></span><br><span class="line">    <span class="keyword">int</span> lastUpperCharIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> lastLowerCharIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    wile(word[index])&#123;</span><br><span class="line">        <span class="keyword">if</span>(word[index] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; word[index] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            lastLowerCharIndex = index;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lastUpperCharIndex = index;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果一个单词里存在小写字母，且大写字母的位置不为0，则大写用法不正确</span></span><br><span class="line">    <span class="keyword">if</span>(lastUpperIndex &gt;= <span class="number">1</span> &amp;&amp; lastLowerCharIndex &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode 最长公共前缀</title>
    <url>/2021/11/24/leetcode-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;fl&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>示例 2：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;&quot;</span></span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= strs.length &lt;= 200</code></li>
<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>
<li><code>strs[i]</code> 仅由小写英文字母组成</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>



<p>大概有这五种思路, 一般都会采用第四种, 但是耗时太多</p>
<p>1、所求的最长公共前缀子串一定是每个字符串的前缀子串。所以随便选择一个字符串作为标准，把它的前缀串，与其他所有字符串进行判断，看是否是它们所有人的前缀子串。这里的时间性能是O(m*n*m)。</p>
<p>2、列出所有的字符串的前缀子串，将它们合并后排序，找出其中个数为n且最长的子串。时间性能为O(n*m+m*n*log(m*n))</p>
<p>3、纵向扫描：从下标0开始，判断每一个字符串的下标0，判断是否全部相同。直到遇到不全部相同的下标。时间性能为O(n*m)。</p>
<p>4、横向扫描：前两个字符串找公共子串，将其结果和第三个字符串找公共子串……直到最后一个串。时间性能为O(n*m)。</p>
<p>5、借助trie字典树。将这些字符串存储到trie树中。那么trie树的第一个分叉口之前的单分支树的就是所求。</p>
<p>python两种让你拍大腿的解法，时间复杂度你想象不到，短小精悍。 1、利用python的max()和min()，在Python里字符串是可以比较的，按照ascII值排，举例abb， aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    s1 = <span class="built_in">min</span>(strs)</span><br><span class="line">    s2 = <span class="built_in">max</span>(strs)</span><br><span class="line">    <span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(s1):</span><br><span class="line">        <span class="keyword">if</span> x != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> s2[:i]</span><br><span class="line">    <span class="keyword">return</span> s1</span><br></pre></td></tr></table></figure>

<p>2、利用python的zip函数，把str看成list然后把输入看成二维数组，左对齐纵向压缩，然后把每项利用集合去重，之后遍历list中找到元素长度大于1之前的就是公共前缀</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    ss = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">set</span>, <span class="built_in">zip</span>(*strs)))</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(ss):</span><br><span class="line">        x = <span class="built_in">list</span>(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        res = res + x[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode 搜索插入位置</title>
    <url>/2021/12/13/leetcode-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a></h4><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p>
<span id="more"></span> 

<p><strong>示例 1:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 5</span></span><br><span class="line"><span class="section">输出: 2</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 2</span></span><br><span class="line"><span class="section">输出: 1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 7</span></span><br><span class="line"><span class="section">输出: 4</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 4:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: nums = [1,3,5,6], target = 0</span></span><br><span class="line"><span class="section">输出: 0</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 5:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: nums = [1], target = 0</span></span><br><span class="line"><span class="section">输出: 0</span></span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>nums</code> 为<strong>无重复元素</strong>的<strong>升序</strong>排列数组</li>
<li><code>-104 &lt;= target &lt;= 104</code></li>
</ul>
<p>思想：</p>
<p>log n 的时间复杂度为二分法，如果target在列表中没有，low=high，则插入位置为low与high重合点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :type nums: List[int]</span></span><br><span class="line"><span class="string">    :type target: int</span></span><br><span class="line"><span class="string">    :rtype: int</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (high + low)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            low = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> low</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode 转换成小写字母</title>
    <url>/2021/12/13/leetcode-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a><a href="https://leetcode-cn.com/problems/to-lower-case/">709. 转换成小写字母</a></h4><p>给你一个字符串 <code>s</code> ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p>
<span id="more"></span>

<p><strong>示例 1：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">输出：<span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;here&quot;</span></span><br><span class="line">输出：<span class="string">&quot;here&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;LOVELY&quot;</span></span><br><span class="line">输出：<span class="string">&quot;lovely&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 100</code></li>
<li><code>s</code> 由 ASCII 字符集中的可打印字符组成</li>
</ul>
<p>方法一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toLowerCase</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> s.lower()</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toLowerCase</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(i) &gt;= <span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i) &lt;= <span class="number">90</span>:</span><br><span class="line">                i = <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">32</span>)</span><br><span class="line">                res += <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += i</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>manjaro20.2 2020</title>
    <url>/2020/12/24/manjaro20-2-2020/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="使用国内源"><a href="#使用国内源" class="headerlink" title="使用国内源"></a>使用国内源</h2><blockquote>
<p>sudo pacman-mirrors -i -c China -m rank</p>
</blockquote>
<p>然后添加 ArchLinuxCN 的源，编辑/etc/pacman.conf，在文件末尾添加如下内容：</p>
<blockquote>
<p>[archlinuxcn]</p>
<p>SigLevel = Optional TrustedOnly</p>
<p>Server = <a href="https://mirrors.ustc.edu.cn/archlinuxcn/$arch">https://mirrors.ustc.edu.cn/archlinuxcn/$arch</a></p>
</blockquote>
<span id="more"></span>

<p>之后刷新缓存，导入 archlinuxcn-keyring ：</p>
<blockquote>
<p>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring &amp;&amp; sudo pacman -Syy</p>
</blockquote>
<h4 id="解决WINDOWS和LINUX双系统时间不一致问题"><a href="#解决WINDOWS和LINUX双系统时间不一致问题" class="headerlink" title="解决WINDOWS和LINUX双系统时间不一致问题"></a>解决WINDOWS和LINUX双系统时间不一致问题</h4><blockquote>
<p>sudo timedatectl set-local-rtc true</p>
</blockquote>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="一、zsh-oh-my-zsh"><a href="#一、zsh-oh-my-zsh" class="headerlink" title="一、zsh / oh my zsh"></a>一、zsh / oh my zsh</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S zsh</span><br><span class="line"></span><br><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="二、搜狗输入法（更推荐现在使用fcitx5或者rime）"><a href="#二、搜狗输入法（更推荐现在使用fcitx5或者rime）" class="headerlink" title="二、搜狗输入法（更推荐现在使用fcitx5或者rime）"></a>二、搜狗输入法（更推荐现在使用fcitx5或者rime）</h3><p>fcitx5的安装可参考我的文章 <a href="https://austinwilliam117.github.io/2020/12/28/%E4%BD%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5%E6%B3%95%E4%BD%95%E5%BF%85%E6%98%AF%E6%90%9C%E7%8B%97%EF%BC%8C%E6%8B%A5%E6%8A%B1fcitx5/">你的下一个输入法何必是搜狗，拥抱fictx5</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx-im             # 全部安装</span><br><span class="line">sudo pacman -S fcitx-configtool     # 图形化配置工具</span><br><span class="line">yay fcitx-sogoupinyin</span><br></pre></td></tr></table></figure>

<p> 安装完成后，新建并配置~/.xprofile，添加如下内容：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LC_ALL</span>=zh_CN.UTF-8</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GTK_IM_MODULE</span>=fcitx</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">QT_IM_MODULE</span>=fcitx</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">XMODIFIERS</span>=<span class="string">&quot;@im=fcitx&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启或注销即可显示，可在终端用fcitx-configtool配置输入法</p>
<h3 id="三、mysql"><a href="#三、mysql" class="headerlink" title="三、mysql"></a>三、mysql</h3><blockquote>
<p>//下载Mysql<br>pacman -S mysql<br>//初始化Mysql，记住生成的密码，方便修改<br>sudo mysqld –initialize –user=mysql –basedir=/usr –datadir=/var/lib/mysql<br>//设置开机启动<br>systemctl enable mysqld.service<br>//启动Mysql<br>sudo systemctl start mysqld.service<br>//修改密码<br>mysql -u root -p<br>mysql&gt; ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘新密码’;</p>
</blockquote>
<h3 id="四、其他软件-字体"><a href="#四、其他软件-字体" class="headerlink" title="四、其他软件/字体"></a>四、其他软件/字体</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S code                 #VScode</span><br><span class="line">sudo pacman -S google-chrome        #Chrome浏览器</span><br><span class="line">sudo pacman -S typora</span><br><span class="line">sudo pacman -S latte-dock</span><br><span class="line">sudo pacman -S yay</span><br><span class="line">yay wps-office</span><br><span class="line">sudo pacman -S flameshot        #火焰截图</span><br></pre></td></tr></table></figure>

<p>中文字体安装：manjaro的中文字体比较丑，还有辨识度低的问题。<strong>极为推荐安装其他字体</strong><br>个人认为思源黑体最为好看</p>
<p><strong>用法sudo pacman -S packname</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">思源字体包名</span><br><span class="line">adobe-source-han-serif-cn-fonts - 思源宋体简体中文部分</span><br><span class="line">adobe-source-han-serif-tw-fonts - 思源宋体繁体中文部分</span><br><span class="line">adobe-source-han-sans-cn-fonts - 思源黑体简体中文部分</span><br><span class="line">adobe-source-han-sans-tw-fonts - 思源黑体繁体中文部分</span><br><span class="line"></span><br><span class="line">文泉驿字体包名</span><br><span class="line">wqy-zenhei - 文泉驿正黑体，黑体 (无衬线) 的中文轮廓字体，附带文泉驿点阵宋体 (也支持部分日韩字符)。</span><br><span class="line">wqy-bitmapfont - 文泉驿点阵宋体 (衬线) 中文字体。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://wiki.archlinux.org/index.php/Fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">可参考wiki.archlinux fonts中文</a></p>
<p><strong>Hack Nerd Font的安装</strong> <strong><font color="FF5733">mono类字体会导致zsh图标过下，慎用</font></strong></p>
<p>链接及教程：<a href="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Hack">https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Hack</a></p>
<p>下载过慢可网盘链接: <a href="https://pan.baidu.com/s/1PjrhtPwWG_XaAyCZ-xZ0OA">https://pan.baidu.com/s/1PjrhtPwWG_XaAyCZ-xZ0OA</a>  密码: mbdp</p>
<p>可参考<br><a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a> 提供多种字体</p>
<h3 id="五、-QQ、WeChat"><a href="#五、-QQ、WeChat" class="headerlink" title="五、 QQ、WeChat"></a>五、 QQ、WeChat</h3><p>安装deepin-wine5的qq(由于基于deepin-wine 2版的不能使用，直接从aur下载安装</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">yay -S com<span class="selector-class">.qq</span><span class="selector-class">.im</span><span class="selector-class">.deepin</span></span><br><span class="line">yay -S deepin-wine-tim</span><br></pre></td></tr></table></figure>

<p>安装deepin-wine的微信</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">yay -S com<span class="selector-class">.qq</span><span class="selector-class">.weixin</span>.deepin</span><br></pre></td></tr></table></figure>

<p>KDE、XFCE以及其他不是基于gnome桌面的用户看过来（<strong>重要，重要，重要</strong>）<br>kde运行deepin-wine的话需要安装xsettingsd</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S xsettingsd</span></span><br></pre></td></tr></table></figure>

<p>之后就可以愉快的玩耍了</p>
<p>字体有些虚的话安装lib32-freetype2-infinality-ultimate</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S lib<span class="number">32</span>-freetype<span class="number">2</span>-infinality-ultimate</span><br></pre></td></tr></table></figure>



<h4 id="修改字体DPI-Tim与qq修改下关键字）"><a href="#修改字体DPI-Tim与qq修改下关键字）" class="headerlink" title="修改字体DPI(Tim与qq修改下关键字）"></a>修改字体DPI(Tim与qq修改下关键字）</h4><p>微信</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">env <span class="attribute">WINEPREFIX</span>=<span class="string">&quot;<span class="variable">$HOME</span>/.deepinwine/Deepin-WeChat&quot;</span> deepin-wine5 winecfg</span><br></pre></td></tr></table></figure>

<p>QQ</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">env <span class="attribute">WINEPREFIX</span>=<span class="string">&quot;<span class="variable">$HOME</span>/.deepinwine/Deepin-QQ&quot;</span> deepin-wine5 winecfg</span><br></pre></td></tr></table></figure>

<p>调节DPI到125</p>
<h4 id="修改deepin-wechat中文输入时为方块问题"><a href="#修改deepin-wechat中文输入时为方块问题" class="headerlink" title="修改deepin wechat中文输入时为方块问题"></a>修改deepin wechat中文输入时为方块问题</h4><blockquote>
<p>sudo gedit /opt/deepinwine/tools/run.sh</p>
</blockquote>
<p>找到 <strong>WINE_CMD=”deepin-wine”</strong> 修改为</p>
<blockquote>
<p>WINE_CMD=”LC_ALL=zh_CN.UTF-8 deepin-wine”</p>
</blockquote>
<h3 id="六、科学上网"><a href="#六、科学上网" class="headerlink" title="六、科学上网"></a>六、科学上网</h3><p>科学上网可以参考如下地址，下载electron-ssr</p>
<p><a href="https://github.com/shadowsocksrr/electron-ssr">https://github.com/shadowsocksrr/electron-ssr</a></p>
<p>Google chrome可使用SwitchyOmega，关于SwitchyOmega的离线下载网址如下：</p>
<p><a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>
<p>Manjaro安装SwitchyOmega时，需将google chrome设置为开发者模式，将离线包后缀改为.zip并解压，再将离线包拖入google chrome即可。</p>
<p>auto switch用到的规则链表<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt%EF%BC%88%E5%9C%A8%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%BD%BF%E7%94%A8%EF%BC%89">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt（在代理模式下使用）</a></p>
<h3 id="七、终端下Trojan代理"><a href="#七、终端下Trojan代理" class="headerlink" title="七、终端下Trojan代理"></a>七、终端下Trojan代理</h3><p>命令行使用Trojan代理</p>
<p>下载: <code>sudo pacman -S proxychains</code> </p>
<p>配置: <code>sudo vim /etc/proxychains.conf</code> </p>
<p>在最后的ProxyList里注释默认的socks代理： socks4 前增加# </p>
<p>在最后的ProxyList里加入Trojan的代理设置： <code>socks5 127.0.0.1 1080</code> (1080 为代理的端口号，以实际代理为准。) </p>
<p>测试本地IP: <code>curl -4 ip.sb</code>，将显示自己的IP </p>
<p>测试代理IP: <code>proxychains curl -4 ip.sb</code>，将显示Trojan代理的IP </p>
<p>后续使用的命令行需要代理时，只需要在前面加上 <code>proxychains</code> 即可 如 <code>proxychains npm install</code></p>
<h3 id="八、manjaro下网易云音乐无法输入中文"><a href="#八、manjaro下网易云音乐无法输入中文" class="headerlink" title="八、manjaro下网易云音乐无法输入中文"></a>八、manjaro下网易云音乐无法输入中文</h3><p>在manjaro下安装好网易云音乐后，却无法输入中文。原因是manjaro下没有用它的框架导致，通过以下方法解决。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /opt/netease/netease-cloud-music/netease-cloud-music.bash</span></span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">HERE=&quot;$(dirname &quot;$(readlink -f &quot;$&#123;0&#125;&quot;)&quot;)&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;<span class="variable">$&#123;HERE&#125;</span>&quot;</span>/libs</span></span><br><span class="line">export QT_PLUGIN_PATH=&quot;$&#123;HERE&#125;&quot;/plugins </span><br><span class="line">export QT_QPA_PLATFORM_PLUGIN_PATH=&quot;$&#123;HERE&#125;&quot;/plugins/platforms</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> XDG_CURRENT_DESKTOP=DDE</span></span><br><span class="line">export LD_LIBRARY_PATH=/usr/lib</span><br><span class="line">exec &quot;$&#123;HERE&#125;&quot;/netease-cloud-music $@</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure>

<p>将上述文件修改成这个样子。</p>
<p>然后安装qcef，由于aur已经移除qcef，所以只能自己构建安装包。</p>
<p>这个包能还在github上找到，需要克隆下来自己构建。我这里上传已经构建好的qcef，直接安装就行了。 链接: <a href="https://pan.baidu.com/s/1z0Q_Qb83OKIztsinKN1TvQ">https://pan.baidu.com/s/1z0Q_Qb83OKIztsinKN1TvQ</a> 提取码: xm2j </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -U qcef-1.1.6-1-x86_64.pkg.tar.xz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S vlc</span></span><br></pre></td></tr></table></figure>



<h3 id="九、安装deb包的方法"><a href="#九、安装deb包的方法" class="headerlink" title="九、安装deb包的方法"></a>九、安装deb包的方法</h3><p>由于百度云盘出了Linux版，我们可以下载.deb的文件包（<strong>也可使用dpkg包管理来安装.deb包，但不推荐</strong>sudo dpkg -i package.deb）</p>
<p>检查有没有安装debtap</p>
<blockquote>
<p>sudo pacman -Q debtap</p>
</blockquote>
<p>没有就安装</p>
<blockquote>
<p>yaourt -S debtap</p>
</blockquote>
<p>升级</p>
<blockquote>
<p>debtap sudo debtap -u</p>
</blockquote>
<p>使用方法</p>
<blockquote>
<p>sudo debtap xxx.deb</p>
</blockquote>
<p>安装时会提示输入包名，以及license。包名随意，license就填GPL吧。上述操作完成后会在deb包同级目录生成x.tar.xz文件，直接用pacman安装即可</p>
<blockquote>
<p>sudo pacman -U xxx.tar.xz</p>
</blockquote>
<h3 id="十、powerlevel10k-vim-plug"><a href="#十、powerlevel10k-vim-plug" class="headerlink" title="十、powerlevel10k / vim-plug"></a>十、powerlevel10k / vim-plug</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> powerlevel10k</span></span><br><span class="line"></span><br><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k</span><br><span class="line">echo &#x27;source ~/powerlevel10k/powerlevel10k.zsh-theme&#x27; &gt;&gt;! ~/.zshrc</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim-plug</span></span><br><span class="line">mkdir ~/.vim/autoload/</span><br><span class="line">cd ~/.vim/autoload/</span><br><span class="line">wget https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>postman使用教程</title>
    <url>/2021/06/02/postman%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MzgyODQxMQ==&mid=2650376717&idx=1&sn=0c8185549886429508e11d3461be396c&chksm=be9c315989ebb84ff2eeb4a1b7fd4365d97eae02033bbed828a4ffe92cdd1d28b533da3b1c40&mpshare=1&scene=1&srcid=0514q3kqCE2EQhyXA4PNR3XD&sharer_sharetime=1622636907480&sharer_shareid=e8bb2f6912e1110d59f1131f38f4af59&key=2ad168659d206d22919304cb2e91f0e076f38e8108b7441caa1427bedd72a53013feb720de6a3f8fd559387d41834eff57d6a7c3045695acb93c863963dfdb19a6af3ee03918315a017233179d6ace457a000810d100bc90d9304233552a3fed8873c47202b8d8771618bf9fe2b4421df53f4c3c92f44a15664a03b07d18f4c3&ascene=1&uin=MTIyMDQzNTcxOA==&devicetype=Windows+7&version=62090529&lang=zh_CN&exportkey=A68yJ1tDBDMLa9STZIDvVM0=&pass_ticket=WEKVk7c/Eo5cgTRn1uiwIdZIk0qUQxjLIfDKo2GJEF06/7dk+n5BJ3o34595d4sV&wx_header=0">地表最强，接口调试神器Postman ，写得太好了！</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>接口测试</tag>
      </tags>
  </entry>
  <entry>
    <title>python enumerate()说明</title>
    <url>/2021/11/25/python-enumerate-%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="enumerate-说明"><a href="#enumerate-说明" class="headerlink" title="enumerate()说明"></a>enumerate()说明</h2><ul>
<li><p>enumerate()是python的内置函数</p>
</li>
<li><p>enumerate在字典上是枚举、列举的意思</p>
</li>
<li><p>对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>enumerate多用于在for循环中得到计数</p>
</li>
<li><p>例如对于一个seq，得到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">0</span>,seq[<span class="number">0</span>]),(<span class="number">1</span>,seq[<span class="number">1</span>]),(<span class="number">2</span>,seq[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>enumerate()返回一个enumerate对象，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">enumerate</span>(seq)</span><br><span class="line">&lt;<span class="built_in">enumerate</span> <span class="built_in">object</span> at <span class="number">0x7f74995b8140</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="enumerate-使用"><a href="#enumerate-使用" class="headerlink" title="enumerate()使用"></a>enumerate()使用</h2><ul>
<li><p>如果对一个列表，既要遍历索引又要遍历元素时，首先可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&quot;这&quot;</span>,<span class="string">&quot;是&quot;</span>,<span class="string">&quot;一个&quot;</span>,<span class="string">&quot;测试&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i,list1[i])</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> 这</span><br><span class="line"><span class="number">1</span> 是</span><br><span class="line"><span class="number">2</span> 一个</span><br><span class="line"><span class="number">3</span> 测试</span><br></pre></td></tr></table></figure></li>
<li><p>上述方法有些累赘，利用enumerate()会更加直接和优美：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&quot;这&quot;</span>,<span class="string">&quot;是&quot;</span>,<span class="string">&quot;一个&quot;</span>,<span class="string">&quot;测试&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(index,item)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> 这</span><br><span class="line"><span class="number">1</span> 是</span><br><span class="line"><span class="number">2</span> 一个</span><br><span class="line"><span class="number">3</span> 测试</span><br></pre></td></tr></table></figure></li>
<li><p>enumerate还可以接收第二个参数，用于指定索引起始值，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&quot;这&quot;</span>,<span class="string">&quot;是&quot;</span>,<span class="string">&quot;一个&quot;</span>,<span class="string">&quot;测试&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1,<span class="number">1</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(index,item)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> 这</span><br><span class="line"><span class="number">2</span> 是</span><br><span class="line"><span class="number">3</span> 一个</span><br><span class="line"><span class="number">4</span> 测试</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果要统计文件的行数，可以这样写：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">count = <span class="built_in">len</span>(<span class="built_in">open</span>(filepath,<span class="string">&#x27;r&#x27;</span>).readlines())</span><br></pre></td></tr></table></figure>

<p>这种方法简单，但是可能比较慢，当文件比较大时甚至不能工作。</p>
<p>可以利用enumerate()：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">open</span>(filepath,<span class="string">&#x27;r&#x27;</span>)):</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>转载自：<a href="https://www.cnblogs.com/oddcat/articles/9630404.html">https://www.cnblogs.com/oddcat/articles/9630404.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python __name__==&#39;__main__&#39;作用详解</title>
    <url>/2021/11/27/python-name-main-%E4%BD%9C%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在阅读别人写的自定义模块时，经常会看到有如下这行判断语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br></pre></td></tr></table></figure>

<p>这行代码的作用是什么呢？本节就详解讲解以下它的作用。</p>
<span id="more"></span>

<p>一般情况下，当我们写完自定义的模块之后，都会写一个测试代码，检验一些模块中各个功能是否能够成功运行。例如，创建一个 candf.py 文件，并编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">摄氏度和华氏度的相互转换模块</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c2f</span>(<span class="params">cel</span>):</span></span><br><span class="line">    fah = cel * <span class="number">1.8</span> + <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> fah</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2c</span>(<span class="params">fah</span>):</span></span><br><span class="line">    cel = (fah - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">    <span class="keyword">return</span> cel</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据：0 摄氏度 = %.2f 华氏度&quot;</span> % c2f(<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据：0 华氏度 = %.2f 摄氏度&quot;</span> % f2c(<span class="number">0</span>))</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<p>单独运行此模块文件，可以看到如下运行结果：</p>
<p>测试数据：0 摄氏度 = 32.00 华氏度<br>测试数据：0 华氏度 = -17.78 摄氏度</p>
<p>在 candf.py 模块文件的基础上，在同目录下再创建一个 demo.py 文件，并编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> candf</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;32 摄氏度 = %.2f 华氏度&quot;</span> % candf.c2f(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;99 华氏度 = %.2f 摄氏度&quot;</span> % candf.f2c(<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<p>运行 demo.py 文件，其运行结果如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试数据：0 摄氏度 = 32.00 华氏度</span><br><span class="line">测试数据：0 华氏度 = -17.78 摄氏度</span><br><span class="line">32 摄氏度 = 89.60 华氏度</span><br><span class="line">99 华氏度 = 37.22 摄氏度</span><br></pre></td></tr></table></figure>

<p>可以看到，<a href="http://c.biancheng.net/python/">Python</a>解释器将模块（candf.py）中的测试代码也一块儿运行了，这并不是我们想要的结果。想要避免这种情况的关键在于，要让 Python 解释器知道，当前要运行的程度代码，是模块文件本身，还是导入模块的其它程序。</p>
<p>为了实现这一点，就需要使用 Python 内置的系统变量 __name__，它用于标识所在模块的模块名。例如，在 demo.py 程序文件中，添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(__name__)</span><br><span class="line"><span class="built_in">print</span>(candf.__name__)</span><br><span class="line">其运行结果为：</span><br><span class="line">__main__</span><br><span class="line">candf</span><br></pre></td></tr></table></figure>

<p>可以看到，当前运行的程序，其 <strong>name</strong> 的值为 __main__，而导入到当前程序中的模块，其 <strong>name</strong> 值为自己的模块名。</p>
<p>因此，<code>if __name__ == &#39;__main__&#39;:</code> 的作用是确保只有单独运行该模块时，此表达式才成立，才可以进入此判断语法，执行其中的测试代码；反之，如果只是作为模块导入到其他程序文件中，则此表达式将不成立，运行其它程序时，也就不会执行该判断语句中的测试代码。</p>
<blockquote>
<p>转载自：<a href="http://c.biancheng.net/view/4643.html">http://c.biancheng.net/view/4643.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python zip()函数</title>
    <url>/2021/11/28/python-zip-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol>
<li>zip含有两种，其中一种是zip()——压缩，另外一种是zip(* )——解压</li>
<li>zip 函数在 Python 2 和 Python 3 中是有所不同的：<ul>
<li>在 Python 3.x 中为了减少内存，zip() 返回的是一个对象object。如果需展示列表，需手动 list() 转换。</li>
<li>在Python2.x中返回的是一个列表list。</li>
</ul>
</li>
</ol>
<span id="more"></span>

<p><strong>语法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zip</span>([iterable, ...])</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p>iterable：一个序列或其他的可迭代对象</p>
<p><strong>功能</strong></p>
<p>将可迭代的对象作为参数，将对象中对应的元素打包成一个个<strong>元组</strong>，然后返回由这些元组组成的<strong>列表</strong>。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。（可利用 * 号操作符，可以将元组解压为列表。）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>=([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip压缩</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1=<span class="built_in">zip</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># zip解压</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2=<span class="built_in">zip</span>(*<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出压缩后的a1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a1)</span><br><span class="line">[([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],), ([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>],)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出解压后的a2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a2)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1</span><br><span class="line">&lt;<span class="built_in">zip</span> <span class="built_in">object</span> at <span class="number">0x7f273dc97200</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">zip</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>在LeetCode上有一道题（14.Longest Common Prefix），使用set()与zip()函数是最快的解决方法，时间复杂度也是最小的。<a href="https://leetcode.com/problems/longest-common-prefix/">https://leetcode.com/problems/longest-common-prefix/</a> 。下面贴出解答方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longsetCommonPrefix</span>(<span class="params">strs</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化一个字符串s，用来接受无门要求的最长的公共前缀</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 先判断strs是不是一个空字符串，如果是，则返回 ”“</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(list(zip(strs)))</span></span><br><span class="line">    <span class="comment"># print(list(zip(*strs)))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 利用zip(*)函数对字符串strs进行解压，得到一个列表，再遍历该列表</span></span><br><span class="line">    <span class="comment"># 该列表是由字符串strs每个元素打包成一个一个元组，然后再将这些元组解压（拆分）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">zip</span>(*strs):</span><br><span class="line">    <span class="comment"># 3. 对zip解压得到的列表中的每个元素用set()创建一个无序不重复的元素集合</span></span><br><span class="line">    <span class="comment"># 判断每个集合的长度是否为1，如果为1，则说明是公共前缀，并入字符串s中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 利用集合创建一个无序不重复的元素集</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(each)) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># print(set(each))</span></span><br><span class="line">            s += each[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>调用longestCommonPrefix()函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大公共前缀为：%s&quot;</span> %longsetCommonPrefix(<span class="built_in">str</span>))</span><br></pre></td></tr></table></figure>

<p>下面是Python的运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;flower&#x27;</span>,), (<span class="string">&#x27;flow&#x27;</span>,), (<span class="string">&#x27;flight&#x27;</span>,)]</span><br><span class="line">[(<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>), (<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>), (<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;i&#x27;</span>), (<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)]</span><br><span class="line">&#123;<span class="string">&#x27;f&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line">最大公共前缀为：fl</span><br></pre></td></tr></table></figure>



<blockquote>
<p>转载自：<a href="https://blog.csdn.net/weixin_44412496/article/details/97925652">https://blog.csdn.net/weixin_44412496/article/details/97925652</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python 文件去重</title>
    <url>/2022/07/31/python-%E6%96%87%E4%BB%B6%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@File    :   txt_deduplication.py    </span></span><br><span class="line"><span class="string">@Contact :   wangweiqing@pachiratech.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Modify Time      @Author    @Version    @Description</span></span><br><span class="line"><span class="string">------------      -------    --------    -----------</span></span><br><span class="line"><span class="string">2020/11/16 17:54   wangwq      1.0         None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">SOURCE_FILE = <span class="string">&#x27;//User//william//Desktop//allname.txt&#x27;</span></span><br><span class="line">TARGET_FILE = SOURCE_FILE + <span class="string">&#x27;.new&#x27;</span></span><br><span class="line">RM_FILE = SOURCE_FILE + <span class="string">&#x27;.remove&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distinct_txt</span>():</span></span><br><span class="line">    repetition_dict = &#123;&#125;</span><br><span class="line">    content_set = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SOURCE_FILE, <span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(TARGET_FILE, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> g:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                <span class="keyword">if</span> line <span class="keyword">in</span> content_set:</span><br><span class="line">                    repetition_dict[row + <span class="number">1</span>] = line</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    g.write(line)</span><br><span class="line">                    content_set.add(line)</span><br><span class="line">                row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(<span class="built_in">str</span>(row + <span class="number">1</span>))</span><br><span class="line">    length = length <span class="keyword">if</span> length &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(RM_FILE, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;此文件记录了重复行消息。\nrow | content \n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> row, content <span class="keyword">in</span> repetition_dict.items():</span><br><span class="line">            f.write(<span class="string">&quot;&#123;0:&gt;&#123;1&#125;&#125; | &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(row, length, content))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;去重开始。。。&#x27;</span>)</span><br><span class="line">        distinct_txt()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;去重结束。success&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请查看如下文件，原文件：%s，去重后的文件：%s, 删除行的文件：%s&#x27;</span> %(SOURCE_FILE, TARGET_FILE, RM_FILE))</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&quot;去重失败，原因：%s&quot;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&quot;去重失败，原因：%s&quot;</span>, e)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python 算法（持续更新）</title>
    <url>/2021/12/16/python-%E7%AE%97%E6%B3%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归的两个特点：</p>
<ul>
<li>调用自身</li>
<li>结束条件</li>
</ul>
<span id="more"></span>

<h4 id="两个递归实例："><a href="#两个递归实例：" class="headerlink" title="两个递归实例："></a>两个递归实例：</h4><p><strong>先打印结果再调用自身</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    func1(x-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">func1(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>先调用自身再打印结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">  	func2(x-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">func2(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="汉诺塔（hanoi）"><a href="#汉诺塔（hanoi）" class="headerlink" title="汉诺塔（hanoi）"></a>汉诺塔（hanoi）</h4><p><img src="hanoi.png"></p>
<p><strong>思考</strong></p>
<p>n个盘子时：</p>
<ol>
<li>把n-1个盘子从A经过C移动到B</li>
<li>把第n个盘子从A移动到C</li>
<li>把n-1个小盘子从B经过A移动到C</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n个盘子，a、b、c三个柱子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">n,a,b,c</span>):</span></span><br><span class="line">  <span class="comment"># 盘子的数量大于0，不然就减成负数了</span></span><br><span class="line">  <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 我们会通过很多步骤讲n-1个盘子经过c柱子移动到b柱子上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">    <span class="comment"># 再将最底下的盘子n移动到c上</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;moving form %s to %s&quot;</span> % (a,c))</span><br><span class="line">    <span class="comment"># 再将b柱子上的盘子经过a移动到c上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,b,a,c)</span><br><span class="line"> </span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> A to B</span><br><span class="line">moving <span class="keyword">from</span> C to B</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> B to A</span><br><span class="line">moving <span class="keyword">from</span> B to C</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="列表查找（Linear-Search）"><a href="#列表查找（Linear-Search）" class="headerlink" title="列表查找（Linear Search）"></a>列表查找（Linear Search）</h4><p>列表查找（线性表查找）：从列表中查找指定元素</p>
<ul>
<li>输入：列表、待查找元素</li>
<li>输出：元素下标（未找到元素时一般返回None或-1）</li>
</ul>
<p>内置列表查找函数：index（）</p>
<p>顺序查找：也叫线性查找，从列表第一个元素开始，顺序搜索，直到找到元素或搜索到列表最后一个元素为止</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#传入一个列表，与要查找的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linearSearch</span>(<span class="params">li,val</span>):</span></span><br><span class="line">    <span class="keyword">for</span> ind,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">        <span class="keyword">if</span> v == val:</span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">val = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(LinearSearch(li,val))</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度：O(n)</strong></p>
<p><br><br></p>
<h4 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h4><p>二分查找：又叫折半查找，从有序列表的初始候选区<code>li[O:n]</code>开始 ，通过对待查找的值与候选区域中间值得比较，可以使候选区减少一半</p>
<p><strong>二分查找需要先排序，但是有可能排序时间要远多于线性查找O(n)，所以如果你对这个列表需要以后的多次查找，可以使用二分查找</strong></p>
<p>Python的内置查找函数：<code>.index()</code>是线性查找的，因为没办法确定列表是有序的</p>
<p><img src="BinarySearch.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span>(<span class="params">li,val</span>):</span></span><br><span class="line">  left = <span class="number">0</span></span><br><span class="line">  right = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt;= right:		<span class="comment"># 候选区有值就循环</span></span><br><span class="line">  mid = (left+right)//<span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> li[mid] &lt; val:</span><br><span class="line">    left = left[mid]+<span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">    right = right[mid]-<span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> li[mid] == val:</span><br><span class="line">    <span class="keyword">return</span> mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度：O(logn)</strong></p>
<p><br><br></p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>常见排序书算法</p>
<ol>
<li><p>排序Low B三人组</p>
<ul>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
</ul>
</li>
<li><p>排序NB三人组</p>
<ul>
<li>快速排序</li>
<li>堆排序</li>
<li>归并排序</li>
</ul>
</li>
<li><p>其他排序</p>
<ul>
<li>希尔排序</li>
<li>计数排序</li>
<li>基数排序</li>
</ul>
</li>
</ol>
<br>

<h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><ul>
<li>列表排序：将无序的列表变为有序的列表<ul>
<li>输入：列表</li>
<li>输出：有序列表</li>
</ul>
</li>
<li>升序与降序</li>
<li>内置排序函数：sort()</li>
</ul>
<p><br><br></p>
<h4 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h4><ul>
<li>列表每两个相邻的数，如果前面比后面大，则交换这两个数。</li>
<li>一趟排序完成后，则无序区减少一个数，有序区增加一个数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span>(<span class="params">li</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(li)-i-<span class="number">1</span>:</span><br><span class="line">      <span class="keyword">if</span> li[k] &gt; li[k+<span class="number">1</span>]:</span><br><span class="line">        li[k],li[k+<span class="number">1</span>] = li[k+<span class="number">1</span>],li[k]</span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>,<span class="number">10000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">bubble_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="选择排序-（Select-Sort）"><a href="#选择排序-（Select-Sort）" class="headerlink" title="选择排序 （Select Sort）"></a>选择排序 （Select Sort）</h4><ul>
<li>一趟排序记录最小的数，放到第一个位置</li>
<li>再一趟排序记录记录列表无序区最小的数，放到第二个位置</li>
<li>算法关键点：有序区和无序区、无序区最小数的位置</li>
</ul>
<p><strong>方法一「不推荐」</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">  li_new = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">    min_val = <span class="built_in">min</span>(li)</span><br><span class="line">    li_new.append(min_val)</span><br><span class="line">    li.remove(min_val)</span><br><span class="line">  <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure>

<ul>
<li>min()函数的时间复杂度为O(n)</li>
<li>remove()函数的时间复杂度为O(n)，因为删除列表的一个个数后，需要将被删除数后的其他数一一移动一个位置</li>
<li>因为新创建了一个列表，所以他的空间复杂度也增加了</li>
</ul>
<p><strong>方法二</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):	<span class="comment"># i是第几趟</span></span><br><span class="line">    min_loc = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(li)):</span><br><span class="line">			<span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">        min_loc = j</span><br><span class="line">    li[j],li[min_loc] = li[min_loc],li[j]</span><br><span class="line">  <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="插入排序（Insert-Sort）"><a href="#插入排序（Insert-Sort）" class="headerlink" title="插入排序（Insert Sort）"></a>插入排序（Insert Sort）</h4><ul>
<li>初始时手里（有序区）只有一张手牌</li>
<li>每次（从无序区）摸一张牌，插入到手里已有牌的正确位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(li)):			<span class="comment"># i 指摸到牌的下标</span></span><br><span class="line">    tmp = li[i]</span><br><span class="line">    j = i - <span class="number">1</span>											<span class="comment"># j 指手里牌的下标</span></span><br><span class="line">    <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">      li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">      j -= <span class="number">1</span></span><br><span class="line">    li[j+<span class="number">1</span>] = tmp</span><br><span class="line">      </span><br><span class="line">li = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">insert_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度为：O(n^2)</li>
</ul>
<p><br><br></p>
<h4 id="快速排序（Quick-sort）"><a href="#快速排序（Quick-sort）" class="headerlink" title="快速排序（Quick_sort）"></a>快速排序（Quick_sort）</h4><ul>
<li>取一个元素p（第一个元素），使元素p归位；</li>
<li>列表被p分成两部分，左边都比p小，右边都比p大</li>
<li>递归完成排序</li>
</ul>
<p><img src="QuickSort.png"></p>
<p>快速排序-框架</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">data,left,right</span>):</span></span><br><span class="line">  <span class="keyword">if</span> left &lt; right:</span><br><span class="line">    mid = partition(data,left,right)</span><br><span class="line">    quick_sort(data,left,mid-<span class="number">1</span>)</span><br><span class="line">   	quick_sort(data,mid+<span class="number">1</span>,right)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>python数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python 装饰器</title>
    <url>/2021/12/14/python-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">装饰器</a></h3><p>装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。大多数初学者不知道在哪儿使用它们，所以我将要分享下，哪些区域里装饰器可以让你的代码更简洁。 首先，让我们讨论下如何写你自己的装饰器。</p>
<p>这可能是最难掌握的概念之一。我们会每次只讨论一个步骤，这样你能完全理解它。</p>
<span id="more"></span>

<h4 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h4><p>首先我们来理解下 Python 中的函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hi())</span><br><span class="line"><span class="comment"># output: &#x27;hi yasoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span></span><br><span class="line">greet = hi</span><br><span class="line"><span class="comment"># 我们这里没有在使用小括号，因为我们并不是在调用hi函数</span></span><br><span class="line"><span class="comment"># 而是在将它放在greet变量里头。我们尝试运行下这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet())</span><br><span class="line"><span class="comment"># output: &#x27;hi yasoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果我们删掉旧的hi函数，看看会发生什么！</span></span><br><span class="line"><span class="keyword">del</span> hi</span><br><span class="line"><span class="built_in">print</span>(hi())</span><br><span class="line"><span class="comment">#outputs: NameError</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet())</span><br><span class="line"><span class="comment">#outputs: &#x27;hi yasoob&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="在函数中定义函数"><a href="#在函数中定义函数" class="headerlink" title="在函数中定义函数"></a>在函数中定义函数</h4><p>刚才那些就是函数的基本知识了。我们来让你的知识更进一步。在 Python 中我们可以在一个函数中定义另一个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now you are inside the hi() function&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the greet() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the welcome() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(greet())</span><br><span class="line">    <span class="built_in">print</span>(welcome())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now you are back in the hi() function&quot;</span>)</span><br><span class="line"></span><br><span class="line">hi()</span><br><span class="line"><span class="comment">#output:now you are inside the hi() function</span></span><br><span class="line"><span class="comment">#       now you are in the greet() function</span></span><br><span class="line"><span class="comment">#       now you are in the welcome() function</span></span><br><span class="line"><span class="comment">#       now you are back in the hi() function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面展示了无论何时你调用hi(), greet()和welcome()将会同时被调用。</span></span><br><span class="line"><span class="comment"># 然后greet()和welcome()函数在hi()函数之外是不能访问的，比如：</span></span><br><span class="line"></span><br><span class="line">greet()</span><br><span class="line"><span class="comment">#outputs: NameError: name &#x27;greet&#x27; is not defined</span></span><br></pre></td></tr></table></figure>

<p>那现在我们知道了可以在函数中定义另外的函数。也就是说：我们可以创建嵌套的函数。现在你需要再多学一点，就是函数也能返回函数。</p>
<h4 id="从函数中返回函数"><a href="#从函数中返回函数" class="headerlink" title="从函数中返回函数"></a>从函数中返回函数</h4><p>其实并不需要在一个函数里去执行另一个函数，我们也可以将其作为输出返回出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the greet() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the welcome() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;yasoob&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> greet</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> welcome</span><br><span class="line"></span><br><span class="line">a = hi()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span></span><br><span class="line"><span class="comment">#现在试试这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line"><span class="comment">#outputs: now you are in the greet() function</span></span><br></pre></td></tr></table></figure>

<p>再次看看这个代码。在 if/else 语句中我们返回 greet 和 welcome，而不是 greet() 和 welcome()。为什么那样？这是因为当你把一对小括号放在后面，这个函数就会执行；然而如果你不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。 你明白了吗？让我再稍微多解释点细节。</p>
<p>当我们写下 **a = hi()**，hi() 会被执行，而由于 name 参数默认是 yasoob，所以函数 greet 被返回了。如果我们把语句改为 **a = hi(name = “ali”)**，那么 welcome 函数将被返回。我们还可以打印出 **hi()()**，这会输出 <strong>now you are in the greet() function</strong>。</p>
<h4 id="将函数作为参数传给另一个函数"><a href="#将函数作为参数传给另一个函数" class="headerlink" title="将函数作为参数传给另一个函数"></a>将函数作为参数传给另一个函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi yasoob!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSomethingBeforeHi</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing hi()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(func())</span><br><span class="line"></span><br><span class="line">doSomethingBeforeHi(hi)</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing hi()</span></span><br><span class="line"><span class="comment">#        hi yasoob!</span></span><br></pre></td></tr></table></figure>

<p>现在你已经具备所有必需知识，来进一步学习装饰器真正是什么了。装饰器让你在一个函数的前后去执行代码。</p>
<h4 id="你的第一个装饰器"><a href="#你的第一个装饰器" class="headerlink" title="你的第一个装饰器"></a>你的第一个装饰器</h4><p>在上一个例子里，其实我们已经创建了一个装饰器！现在我们修改下上一个装饰器，并编写一个稍微更有用点的程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapTheFunction</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line"></span><br><span class="line">        a_func()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br><span class="line"><span class="comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span></span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure>

<p>你看明白了吗？我们刚刚应用了之前学习到的原理。这正是 python 中装饰器做的事情！它们封装一个函数，并且用这样或者那样的方式来修改它的行为。现在你也许疑惑，我们在代码里并没有使用 <strong>@</strong> 符号？那只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用 <strong>@</strong> 来运行之前的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the @a_new_decorator is just a short way of saying:</span></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure>

<p>希望你现在对 Python 装饰器的工作原理有一个基本的理解。如果我们运行如下代码会存在一个问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: wrapTheFunction</span></span><br></pre></td></tr></table></figure>

<p>这并不是我们想要的！Ouput输出应该是”a_function_requiring_decoration”。这里的函数被warpTheFunction替代了。它重写了我们函数的名字和注释文档(docstring)。幸运的是Python提供给我们一个简单的函数来解决这个问题，那就是functools.wraps。我们修改上一个例子来使用functools.wraps：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapTheFunction</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey yo! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure>

<h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logging</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,func</span>):</span></span><br><span class="line">    self.func = func</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self,*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[DEBUG]: enter &#123;&#125;()&quot;</span>.<span class="built_in">format</span>(self.func.__name__))</span><br><span class="line">    <span class="keyword">return</span> self.func(*args,**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(a,b,c)</span><br><span class="line"></span><br><span class="line">hello(<span class="string">&quot;hello,&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="string">&quot;morning&quot;</span>)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">&gt;&gt;&gt;[DEBUG]: enter hello()</span><br><span class="line">&gt;&gt;&gt;hello, good moring</span><br></pre></td></tr></table></figure>

<p>类装饰器也可以带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logging</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, level</span>):</span></span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[&#123;0&#125;]: enter &#123;1&#125;()&quot;</span>.<span class="built_in">format</span>(self.level, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(<span class="params">level=<span class="string">&quot;TEST&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line">hello(<span class="string">&quot;hello,&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="string">&quot;morning&quot;</span>)</span><br><span class="line">-----------------------------</span><br><span class="line">&gt;&gt;&gt;[TEST]: enter hello()</span><br><span class="line">&gt;&gt;&gt;hello, good morning</span><br></pre></td></tr></table></figure>

<h4 id="装饰器嵌套"><a href="#装饰器嵌套" class="headerlink" title="装饰器嵌套"></a>装饰器嵌套</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arg_fun</span>(<span class="params">sex</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">            func()</span><br><span class="line">            <span class="keyword">if</span> sex == <span class="string">&#x27;man&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;你不可以生孩子&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> sex == <span class="string">&#x27;woman&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;你可以生孩子&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;和你没关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> func2</span><br><span class="line">    <span class="keyword">return</span> func1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@arg_fun(<span class="params">sex=<span class="string">&#x27;man&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">man</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;好好上班, man&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@arg_fun(<span class="params">sex=<span class="string">&#x27;woman&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">woman</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;好好上班，woman&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@arg_fun(<span class="params">sex=<span class="string">&#x27;child&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">child</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;好好上学，child&#x27;</span>)</span><br><span class="line"></span><br><span class="line">man()</span><br><span class="line">woman()</span><br><span class="line">child()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python 递归</title>
    <url>/2021/12/07/python-%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归的两个特点：</p>
<ul>
<li>调用自身</li>
<li>结束条件</li>
</ul>
<span id="more"></span>

<h4 id="两个递归实例："><a href="#两个递归实例：" class="headerlink" title="两个递归实例："></a>两个递归实例：</h4><p><strong>先打印结果再调用自身</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    func1(x-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">func1(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>先调用自身再打印结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">  	func2(x-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">func2(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>



<h4 id="汉诺塔（hanoi）"><a href="#汉诺塔（hanoi）" class="headerlink" title="汉诺塔（hanoi）"></a>汉诺塔（hanoi）</h4><p><img src="hanoi.png"></p>
<p><strong>思考</strong></p>
<p>n个盘子时：</p>
<ol>
<li>把n-1个盘子从A经过C移动到B</li>
<li>把第n个盘子从A移动到C</li>
<li>把n-1个小盘子从B经过A移动到C</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n个盘子，a、b、c三个柱子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">n,a,b,c</span>):</span></span><br><span class="line">  <span class="comment"># 盘子的数量大于0，不然就减成负数了</span></span><br><span class="line">  <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 我们会通过很多步骤讲n-1个盘子经过c柱子移动到b柱子上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">    <span class="comment"># 再将最底下的盘子n移动到c上</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;moving form %s to %s&quot;</span> % (a,c))</span><br><span class="line">    <span class="comment"># 再将b柱子上的盘子经过a移动到c上</span></span><br><span class="line">    hanoi(n-<span class="number">1</span>,b,a,c)</span><br><span class="line"> </span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> A to B</span><br><span class="line">moving <span class="keyword">from</span> C to B</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br><span class="line">moving <span class="keyword">from</span> B to A</span><br><span class="line">moving <span class="keyword">from</span> B to C</span><br><span class="line">moving <span class="keyword">from</span> A to C</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>python数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python中sys.argv[]的用法简明解释</title>
    <url>/2021/11/28/python%E4%B8%ADsys-argv-%E7%9A%84%E7%94%A8%E6%B3%95%E7%AE%80%E6%98%8E%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python中 sys.argv[]的用法简明解释</p>
<p>   因为是看书自学的python，开始后不久就遇到了这个引入的模块函数，且一直在IDLE上编辑了后运行，试图从结果发现它的用途，然而结果一直都是没结果，也在网上查了许多，但发现这个问题的比较详细的解释只有一个版本，大部分都是转载和复制的。给的都是简明python教程上那个一长串代码的例子，说看了就明白了，可我看得晕头转向的还是没真正明白，只知道“sys.argv[0]表示代码本身文件路径”这点，其实还是不明其意。后来经过大量努力，多方求教才真正明悟了，谨以记录和分享，希望能从另一个角度给同在求索过程中的同学一点启发。</p>
<span id="more"></span>

<p>　　sys.argv[]说白了就是一个从程序外部获取参数的桥梁，这个“外部”很关键，所以那些试图从代码来说明它作用的解释一直没看明白。因为我们从外部取得的参数可以是多个，所以获得的是一个列表（list)，也就是说sys.argv其实可以看作是一个列表，所以才能用[]提取其中的元素。其第一个元素是程序本身，随后才依次是外部给予的参数。</p>
<p>下面我们通过一个极简单的test.py程序的运行结果来说明它的用法。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>#test.py</span><br><span class="line"><span class="symbol">2 </span></span><br><span class="line"><span class="symbol">3 </span>import sys</span><br><span class="line"><span class="symbol">4 </span>a=sys.argv[<span class="number">0</span>]</span><br><span class="line"><span class="symbol">5 </span><span class="keyword">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>将test.py保存在c盘的根目录下。</p>
<p>在程序中找到 ‘运行’-&gt;点击-&gt;输入”cmd”-&gt;回车键  进入控制台命令窗口（如下图），先输入cd c:\  (作用是将命令路径改到c盘根目录)，然后输入test.py运行我们刚刚写的程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">william@DESKTOP:~/DYJ/Python$ python3 test.py</span><br><span class="line">test.py</span><br></pre></td></tr></table></figure>

<p>得到的结果是C:\test.py，这就是0指代码（即此.py程序）本身的意思。</p>
<p>然后我们将代码中0改为1 :</p>
<p>a=sys.argv[1]</p>
<p>保存后，再从控制台窗口运行，这次我们加上一个参数，输入：test.py what</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">william@DESKTOP-MDEKEAT:~/DYJ/Python$ python3 test.py what</span><br><span class="line">what</span><br></pre></td></tr></table></figure>

<p> 得到的结果就是我们输入的参数what，看到这里你是不是开始明白了呢。</p>
<p>那我们再把代码修改一下：</p>
<p>a=sys.argv[2：]</p>
<p>保存后，再从控制台窗台运行程序，这次多加几个参数，以空格隔开:</p>
<p>test.py a b c d e f</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">william@DESKTOP-MDEKEAT:~/DYJ/Python$ python3 test.py a b c d e f</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>得到的结果为[‘b’, ’c’, ’d’, ’e’, ’f’]</p>
<p>应该大彻大悟了吧。Sys.argv[ ]其实就是一个列表，里边的项为用户输入的参数，关键就是要明白这参数是从程序外部输入的，而非代码本身的什么地方，要想看到它的效果就应该将程序保存了，从外部来运行程序并给出参数。</p>
<p><a href="http://www.cnblogs.com/aland-1415/p/7128121.html">Python3 从入门到开车</a></p>
<blockquote>
<p><a href="https://www.cnblogs.com/aland-1415/p/6613449.html">https://www.cnblogs.com/aland-1415/p/6613449.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python内置函数</title>
    <url>/2021/06/05/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>\1. time</p>
<p>\2. os</p>
<p>\3. sys</p>
<p>\4. classmethod 修饰符</p>
<p>\5. JSON字典的序列化与反序列化</p>
<p>如果你从Python解释器退出再进入，那么你定义的所有的方法和变量就都消失了。为此Python提供了一个办法，把这些定义存放在文件中，为一些脚本或者交互式的解释器实例使用，这个文件被成为模块</p>
<span id="more"></span>

<h3 id="time内置函数"><a href="#time内置函数" class="headerlink" title="time内置函数"></a>time内置函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取时间戳（1970年开始计时）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间的时间戳</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(time.time()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1622864228</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前时间</span></span><br><span class="line"><span class="built_in">print</span>(time.localtime(time.time()))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">time.struct_time(tm_year=2021, tm_mon=6, tm_mday=5, tm_hour=11, tm_min=35, tm_sec=42, tm_wday=5, tm_yday=156, tm_isdst=0)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出当前时间</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%y-%m-%d %H:%M:%S&#x27;</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">21-06-05 11:39:11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time.sleep(2) 休眠2秒</span></span><br></pre></td></tr></table></figure>

<h3 id="os内置函数"><a href="#os内置函数" class="headerlink" title="os内置函数"></a>os内置函数</h3><p>在python中，os模块提供了对操作系统进行操作的接口。查看os模块使用的方法为dir()，查看该模块的帮助方法为help()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在D盘创建文件夹log</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;d:/log&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件夹</span></span><br><span class="line">os.rename(<span class="string">&#x27;d:/log&#x27;</span>,<span class="string">&#x27;d:newLog&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件夹</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;d:/newLog&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;对目录文件的处理&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前文件的目录 `os.path.dirname(__file__)`</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前文件的目录为：&#x27;</span>, os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前文件的目录的上一级目录</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前文件的上一级目录为：&#x27;</span>,os.path.dirname(os.path.dirname(__file__)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现对当前文件下其他文件的拼接</span></span><br><span class="line">base_dir = os.path.dirname(__file__)</span><br><span class="line"><span class="comment"># 将本文件目录下的login文件与当前目录地址拼接</span></span><br><span class="line"><span class="built_in">print</span>(os.path.join(base_dir,<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"><span class="comment"># 读取login文件下内容</span></span><br><span class="line">f = <span class="built_in">open</span>(os.path.join(base_dir,<span class="string">&#x27;login&#x27;</span>),<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;请求参数不确定，有可能一个，也可能N个参数&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> kwargs</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(name=<span class="string">&#x27;mengxun&#x27;</span>,age=<span class="string">&#x27;18&#x27;</span>,address=<span class="string">&#x27;beijing&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h3><p>sys 提供对解释器使用或维护的一些变量以及与解释器强烈交互的函数的访问</p>
<ul>
<li>import sys 引入 python 标准库中的 sys.py 模块</li>
<li>sys.argv 是一个包含命令行参数的列表</li>
<li>sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表</li>
</ul>
<p>sys.argv[]说白了就是一个从程序外部获取参数的桥梁，这个“外部”很关键，所以那些试图从代码来说明它作用的解释一直没看明白。因为我们从外部取得的参数可以是多个，所以获得的是一个列表（list)，也就是说sys.argv其实可以看作是一个列表，所以才能用[]提取其中的元素。其第一个元素是程序本身，随后才依次是外部给予的参数。</p>
<p>下面我们通过一个极简单的test.py程序的运行结果来说明它的用法。将其保存在~/Desktop/test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = sys.argv[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>得到的结果为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test.py</span><br></pre></td></tr></table></figure>

<p>然后我们将代码中的0改为1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>然后在shell中输入一个参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python test.py what</span></span><br><span class="line"></span><br><span class="line">what</span><br></pre></td></tr></table></figure>

<p>得到的结果为我们输入的参数what，看到这里你是不是还不明白呢，那我们在把代码改一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = sys.argv[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>这次我们在shell中多添加几个参数，以空格隔开：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python test.py a b c d e f g</span></span><br><span class="line"></span><br><span class="line">[&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;]</span><br></pre></td></tr></table></figure>

<p>我们再稍微更改一下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = sys.argv[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>我们在shell中输入和上次一样的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python test.py a b c d e f g</span></span><br><span class="line"></span><br><span class="line">[&#x27;test.py&#x27;, &#x27;a&#x27;]</span><br></pre></td></tr></table></figure>

<p>应该大彻大悟了吧。sys.argv[ ]其实就是一个列表，里边的项为用户输入的参数，关键就是要明白这参数是从程序外部输入的，而非代码本身的什么地方，要想看到它的效果就应该将程序保存了，从外部来运行程序并给出参数</p>
<p><strong>变量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;sleep&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sleep&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">$ python file.py sleep</span><br><span class="line">sleep</span><br><span class="line"></span><br><span class="line">$ python file.py s</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p><strong>常用的方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(sys.version)</span><br><span class="line"><span class="number">3.9</span><span class="number">.5</span> (tags/v3<span class="number">.9</span><span class="number">.5</span>:0a7dcbd, May  <span class="number">3</span> <span class="number">2021</span>, <span class="number">17</span>:<span class="number">27</span>:<span class="number">52</span>) [MSC v<span class="number">.1928</span> <span class="number">64</span> bit (AMD64)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看平台</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(sys.platform)</span><br><span class="line">win32</span><br></pre></td></tr></table></figure>

<p><strong>python包下的模块明显存在，而就是提示不存在</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看python的包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sys.path:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">C:\Python39\python39.<span class="built_in">zip</span></span><br><span class="line">C:\Python39\DLLs</span><br><span class="line">C:\Python39\lib</span><br><span class="line">C:\Python39</span><br><span class="line">C:\Python39\lib\site-packages</span><br></pre></td></tr></table></figure>

<ol>
<li>标准库：C:\Python39\lib</li>
<li>第三方库：C:\Python39\lib\site-packages</li>
<li>自定义的库：</li>
</ol>
<p>如果自己写的包，无法调用。可以通过<code>sys.path.append()</code>加入到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&#x27;包的地址&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如 sys.path.append(&#x27;D:\git\GITHUB\stack\day3&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> login <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">index() <span class="comment"># 调用login文件下的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以再次查看sys.path路径</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sys.path</span><br><span class="line">	<span class="built_in">print</span>(item)  </span><br></pre></td></tr></table></figure>

<p><strong>IDE代码可以正常执行，当把代码上传到Linux中或CI之后，提示模块不存在</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以在文件之前添加这样的代码</span></span><br><span class="line"></span><br><span class="line">file_path = os.path.join(os.path.dirname(os.path.dirname(__file__)),<span class="string">&#x27;包名&#x27;</span>)</span><br><span class="line">sys.path.append(file_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 包下的文件名 <span class="keyword">import</span> 函数</span><br><span class="line"><span class="keyword">from</span> 包下的文件名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>



<h3 id="JSON字典的序列化与反序列化"><a href="#JSON字典的序列化与反序列化" class="headerlink" title="JSON字典的序列化与反序列化"></a>JSON字典的序列化与反序列化</h3><ul>
<li>序列化：把python的数据类型转化为str的类型过程</li>
<li>反序列化：把str的类型转化为python的数据结构</li>
</ul>
<p>json.dumps 语法</p>
<blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt;json.dumps(obj, <span class="attribute">skipkeys</span>=<span class="literal">False</span>, <span class="attribute">ensure_ascii</span>=<span class="literal">True</span>, <span class="attribute">check_circular</span>=<span class="literal">True</span>, <span class="attribute">allow_nan</span>=<span class="literal">True</span>, <span class="attribute">cls</span>=None, <span class="attribute">indent</span>=None, <span class="attribute">separators</span>=None, <span class="attribute">encoding</span>=<span class="string">&quot;utf-8&quot;</span>, <span class="attribute">default</span>=None, <span class="attribute">sort_keys</span>=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列化 json.dumps()	将 Python 对象编码成 JSON 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mengxun&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化：dict--&gt;str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_str = json.dumps(dict1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;dict_str&#x27;</span>,<span class="built_in">type</span>(dict_str))</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;mengxun&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125; &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>sort_keys=True</code> 告诉编码器按照字典排序(a到z)输出，如果是字典类型的python对象，就把关键字按照字典排序。</p>
<p><code>indent</code>参数根据数据格式缩进显示，读起来更加清晰</p>
<p><code>separators</code>分隔符的意思，参数意思分别为不同dict项之间的分隔符和dict项内key和value之间的分隔符，把：和，后面的空格都除去了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用参数让JSON数据格式化输出</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mengxun&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_str = json.dumps(dict1,sort_keys=<span class="literal">True</span>,indent=<span class="number">4</span>,separators=(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;:&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#123;\n    &quot;age&quot;:18,\n    &quot;name&quot;:&quot;mengxun&quot;\n&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<p>json.loads</p>
<p>json.loads 用于解码 JSON 数据。该函数返回 Python 字段的数据类型</p>
<p>语法</p>
<blockquote>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">json.loads(s<span class="comment">[, encoding<span class="comment">[, cls<span class="comment">[, object_hook<span class="comment">[, parse_float<span class="comment">[, parse_int<span class="comment">[, parse_constant<span class="comment">[, object_pairs_hook<span class="comment">[, **kw]</span>]</span>]</span>]</span>]</span>]</span>]</span>]</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反序列化 json.loads() 将已编码的 JSON 字符串解码为 Python 对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jsonData = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;mengxun&quot;,&quot;age&quot;:18&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = json.loads(jsonData)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(text,<span class="built_in">type</span>(text))</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;mengxun&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125; &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>列表的序列化与反序列化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表的序列化</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;mengxun&#x27;</span>,<span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_str = json.dumps(list1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(list_str,<span class="built_in">type</span>(list_str))</span><br><span class="line"></span><br><span class="line">[<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;mengxun&quot;</span>, <span class="number">18</span>] &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 列表的反序列化</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">import</span> <span class="title">json</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">str_list</span> = <span class="title">json</span>.<span class="title">loads</span>(<span class="params">list_str</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">str_list,<span class="built_in">type</span>(<span class="params">str_list</span>)</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">[&#x27;<span class="title">admin</span>&#x27;, &#x27;<span class="title">mengxun</span>&#x27;, 18] &lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>元组的序列化与反序列化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_str = json.dumps(tuple1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tuple_str,<span class="built_in">type</span>(tuple_str))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 反序列化</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">str_tuple</span> = <span class="title">json</span>.<span class="title">loads</span>(<span class="params">tuple_str</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">str_tuple,<span class="built_in">type</span>(<span class="params">str_tuple</span>)</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">[1, 2, 3] &lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Python-os-path-模块"><a href="#Python-os-path-模块" class="headerlink" title="Python os.path() 模块"></a>Python os.path() 模块</h3><p>os.path 模块主要用于获取文件的属性</p>
<p>以下是os.path 模块的几种常用方法</p>
<table>
<thead>
<tr>
<th>os.path.abspath(path)</th>
<th>返回绝对路径</th>
</tr>
</thead>
<tbody><tr>
<td>os.path.basename(path)</td>
<td>返回文件名</td>
</tr>
<tr>
<td>os.path.commonprefix(list)</td>
<td>返回list(多个路径)中，所有path共有的最长的路径</td>
</tr>
<tr>
<td>os.path.dirname(path)</td>
<td>返回文件路径</td>
</tr>
<tr>
<td>os.path.exists(path)</td>
<td>如果路径 path 存在，返回 True；如果路径 path 不存在，返回 False。</td>
</tr>
<tr>
<td>os.path.lexists</td>
<td>路径存在则返回True,路径损坏也返回True</td>
</tr>
<tr>
<td>os.path.expanduser(path)</td>
<td>把path中包含的”<del>“和”</del>user”转换成用户目录</td>
</tr>
<tr>
<td>os.path.expandvars(path)</td>
<td>根据环境变量的值替换path中包含的”$name”和”${name}”</td>
</tr>
<tr>
<td>os.path.getatime(path)</td>
<td>返回最近访问时间（浮点型秒数）</td>
</tr>
<tr>
<td>os.path.getmtime(path)</td>
<td>返回最近文件修改时间</td>
</tr>
<tr>
<td>os.path.getctime(path)</td>
<td>返回文件 path 创建时间</td>
</tr>
<tr>
<td>os.path.getsize(path)</td>
<td>返回文件大小，如果文件不存在就返回错误</td>
</tr>
<tr>
<td>os.path.isabs(path)</td>
<td>判断是否为绝对路径</td>
</tr>
<tr>
<td>os.path.isfile(path)</td>
<td>判断路径是否为文件</td>
</tr>
<tr>
<td>os.path.isdir(path)</td>
<td>判断路径是否为目录</td>
</tr>
<tr>
<td>os.path.islink(path)</td>
<td>判断路径是否为链接</td>
</tr>
<tr>
<td>os.path.ismount(path)</td>
<td>判断路径是否为挂载点</td>
</tr>
<tr>
<td>os.path.join(path1[, path2[, …]])</td>
<td>把目录和文件名合成一个路径</td>
</tr>
<tr>
<td>os.path.normcase(path)</td>
<td>转换path的大小写和斜杠</td>
</tr>
<tr>
<td>os.path.normpath(path)</td>
<td>规范path字符串形式</td>
</tr>
<tr>
<td>os.path.realpath(path)</td>
<td>返回path的真实路径</td>
</tr>
<tr>
<td>os.path.relpath(path[, start])</td>
<td>从start开始计算相对路径</td>
</tr>
<tr>
<td>os.path.samefile(path1, path2)</td>
<td>判断目录或文件是否相同</td>
</tr>
<tr>
<td>os.path.sameopenfile(fp1, fp2)</td>
<td>判断fp1和fp2是否指向同一文件</td>
</tr>
<tr>
<td>os.path.samestat(stat1, stat2)</td>
<td>判断stat tuple stat1和stat2是否指向同一个文件</td>
</tr>
<tr>
<td>os.path.split(path)</td>
<td>把路径分割成 dirname 和 basename，返回一个元组</td>
</tr>
<tr>
<td>os.path.splitdrive(path)</td>
<td>一般用在 windows 下，返回驱动器名和路径组成的元组</td>
</tr>
<tr>
<td>os.path.splitext(path)</td>
<td>分割路径，返回路径名和文件扩展名的元组</td>
</tr>
<tr>
<td>os.path.splitunc(path)</td>
<td>把路径分割为加载点与文件</td>
</tr>
<tr>
<td>os.path.walk(path, visit, arg)</td>
<td>遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td>
</tr>
<tr>
<td>os.path.supports_unicode_filenames</td>
<td>设置是否支持unicode路径名</td>
</tr>
</tbody></table>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.basename(<span class="string">&#x27;~/Desktop/runboot.txt&#x27;</span>))		<span class="comment"># 返回文件名</span></span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(<span class="string">&#x27;~/Desktop/runboot.txt&#x27;</span>))			<span class="comment"># 返回目录路径</span></span><br><span class="line"><span class="built_in">print</span>(os.path.split(<span class="string">&#x27;~/Desktop/runboot.txt&#x27;</span>))				<span class="comment"># 分割文件名和路径</span></span><br><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">&#x27;~&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;runboot.txt&#x27;</span>))				<span class="comment"># 将目录和文件名合成一个路径</span></span><br></pre></td></tr></table></figure>

<p>执行以上程序输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">runboot.txt</span><br><span class="line">~/Desktop</span><br><span class="line">~/test/runboot.txt</span><br><span class="line">~/test/runboot.txt</span><br></pre></td></tr></table></figure>

<p>以下实例输出文件的相关信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">file=<span class="string">&#x27;/root/runoob.txt&#x27;</span> <span class="comment"># 文件路径</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>( os.path.getatime(file) )   <span class="comment"># 输出最近访问时间</span></span><br><span class="line"><span class="built_in">print</span>( os.path.getctime(file) )   <span class="comment"># 输出文件创建时间</span></span><br><span class="line"><span class="built_in">print</span>( os.path.getmtime(file) )   <span class="comment"># 输出最近修改时间</span></span><br><span class="line"><span class="built_in">print</span>( time.gmtime(os.path.getmtime(file)) )  <span class="comment"># 以struct_time形式输出最近修改时间</span></span><br><span class="line"><span class="built_in">print</span>( os.path.getsize(file) )   <span class="comment"># 输出文件大小（字节为单位）</span></span><br><span class="line"><span class="built_in">print</span>( os.path.abspath(file) )   <span class="comment"># 输出绝对路径</span></span><br><span class="line"><span class="built_in">print</span>( os.path.normpath(file) )  <span class="comment"># 规范path字符串形式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1623576450.1366549</span></span><br><span class="line"><span class="number">1623576450.1366549</span></span><br><span class="line"><span class="number">1623576450.1366549</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">6</span>, tm_mday=<span class="number">13</span>, tm_hour=<span class="number">9</span>, tm_min=<span class="number">27</span>, tm_sec=<span class="number">30</span>, tm_wday=<span class="number">6</span>, tm_yday=<span class="number">164</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"><span class="number">531</span></span><br><span class="line">/root/runoob.txt</span><br><span class="line">/root/runoob.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python发送邮件</title>
    <url>/2022/03/08/python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>发送电子邮件是个很常见的开发需求。比如你写了个监控天气的脚本，发现第二天要下雨，或者网站上关注的某个商品降价了，就可以发个邮件到邮箱来提醒自己。</p>
<p>使用 Python 脚本发送邮件并不复杂。不过由于各家邮件的发送机制和安全策略不同，常常会因为一些配置问题造成发送失败。今天我们来举例讲讲如何使用 Python 发送邮件。</p>
<p>本文主要内容包括，了解发邮件的思路，发送邮件需要的一些设置，发送一封简单的邮件，发送一封包含附件的邮件，在写代码过程中我们需要注意哪些问题等等。（完整参考代码地址见文末）</p>
<span id="more"></span>



<h3 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h3><p>使用脚本发送邮件的思路其实和客户端发送邮件一样，过程都是：</p>
<p><strong>登录 —&gt; 写邮件 —&gt; 发送</strong></p>
<p>只不过通过脚本发送时我们需要考虑到整个过程的方方面面。以下为思路导图：</p>
<p><img src="Python-Email.png"></p>
<h3 id="2-Python-email-模块"><a href="#2-Python-email-模块" class="headerlink" title="2. Python-email 模块"></a>2. Python-email 模块</h3><p>与发送邮件相关的 Python 模块：</p>
<p><strong>smtplib</strong></p>
<p>是关于 SMTP（简单邮件传输协议）的操作模块，在发送邮件的过程中起到服务器之间互相通信的作用。</p>
<p><strong>email</strong></p>
<p>简单来说，即服务器之间通信的信息，包括信息头、信息主体等等。</p>
<p>举个简单的例子，当你登录邮箱，写好邮件后点击发送，这部分是由 SMTP 接管；而写邮件、添加附件是由 email 模块控制。</p>
<h3 id="3-开通电子邮箱的SMTP功能"><a href="#3-开通电子邮箱的SMTP功能" class="headerlink" title="3. 开通电子邮箱的SMTP功能"></a>3. 开通电子邮箱的SMTP功能</h3><p>在使用脚本发邮件之前，我们需要打开自己邮箱的 SMTP 功能，各家邮箱的设置方法就不一一讲述了，具体使用时可以百度一下，下面以 163 邮箱设置为例做一个简单的演示：</p>
<p><img src="1.png"></p>
<p><img src="2.png"></p>
<h3 id="4-简单代码"><a href="#4-简单代码" class="headerlink" title="4. 简单代码"></a>4. 简单代码</h3><p>实践出真知，我们结合一个简单的代码来理解这一过程：登录 163 邮箱，向 qq 邮箱发送邮件。</p>
<p>脚本分为三个步骤：</p>
<ol>
<li>设置好服务器端信息</li>
<li>邮件主体信息</li>
<li>登录发送</li>
</ol>
<p>另外在处理文本时，我们需要使用 MIMEText 类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment">#设置服务器所需信息</span></span><br><span class="line"><span class="comment">#163邮箱服务器地址</span></span><br><span class="line">mail_host = <span class="string">&#x27;smtp.163.com&#x27;</span>  </span><br><span class="line"><span class="comment">#163用户名</span></span><br><span class="line">mail_user = <span class="string">&#x27;176*****10&#x27;</span>  </span><br><span class="line"><span class="comment">#密码(部分邮箱为授权码) </span></span><br><span class="line">mail_pass = <span class="string">&#x27;7******x&#x27;</span>   </span><br><span class="line"><span class="comment">#邮件发送方邮箱地址</span></span><br><span class="line">sender = <span class="string">&#x27;176*****10@163.com&#x27;</span>  </span><br><span class="line"><span class="comment">#邮件接受方邮箱地址，注意需要[]包裹，这意味着你可以写多个邮件地址群发</span></span><br><span class="line">receivers = [<span class="string">&#x27;45*****34@qq.com&#x27;</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置email信息</span></span><br><span class="line"><span class="comment">#邮件内容设置</span></span><br><span class="line">message = MIMEText(<span class="string">&#x27;content&#x27;</span>,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#邮件主题       </span></span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;title&#x27;</span> </span><br><span class="line"><span class="comment">#发送方信息</span></span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = sender </span><br><span class="line"><span class="comment">#接受方信息     </span></span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] = receivers[<span class="number">0</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#登录并发送邮件</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP() </span><br><span class="line">    <span class="comment">#连接到服务器</span></span><br><span class="line">    smtpObj.connect(mail_host,<span class="number">25</span>)</span><br><span class="line">    <span class="comment">#登录到服务器</span></span><br><span class="line">    smtpObj.login(mail_user,mail_pass) </span><br><span class="line">    <span class="comment">#发送</span></span><br><span class="line">    smtpObj.sendmail(</span><br><span class="line">        sender,receivers,message.as_string()) </span><br><span class="line">    <span class="comment">#退出</span></span><br><span class="line">    smtpObj.quit() </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>,e) <span class="comment">#打印错误</span></span><br></pre></td></tr></table></figure>



<p><strong>注意事项：</strong></p>
<p>一些邮箱登录比如 QQ 邮箱需要 SSL 认证，所以 SMTP 已经不能满足要求，而需要SMTP_SSL，解决办法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">smtpObj = smtplib.SMTP()</span><br><span class="line"><span class="comment">#连接到服务器</span></span><br><span class="line">smtpObj.connect(mail_host,<span class="number">25</span>)</span><br><span class="line"><span class="comment">#######替换为########</span></span><br><span class="line">smtpObj = smtplib.SMTP_SSL(mail_host)</span><br></pre></td></tr></table></figure>



<h3 id="5-带附件的Email"><a href="#5-带附件的Email" class="headerlink" title="5. 带附件的Email"></a>5. 带附件的Email</h3><p>上面我们介绍了发送字符串的邮件，但这明显不满足现代邮件的需求，下面我们介绍如何发送内容以 HTML 格式，并且带有图片和文本文件的邮件。</p>
<p>处理多种形态的邮件主体我们需要 MIMEMultipart 类，而处理图片需要 MIMEImage 类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置登录及服务器信息</span></span><br><span class="line">mail_host = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line">mail_user = <span class="string">&#x27;176*****10&#x27;</span></span><br><span class="line">mail_pass = <span class="string">&#x27;7******x&#x27;</span></span><br><span class="line">sender = <span class="string">&#x27;176*****10@163.com&#x27;</span></span><br><span class="line">receivers = [<span class="string">&#x27;4******4@qq.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置eamil信息</span></span><br><span class="line"><span class="comment">#添加一个MIMEmultipart类，处理正文及附件</span></span><br><span class="line">message = MIMEMultipart()</span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] = receivers[<span class="number">0</span>]</span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;title&#x27;</span></span><br><span class="line"><span class="comment">#推荐使用html格式的正文内容，这样比较灵活，可以附加图片地址，调整格式等</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;abc.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line"><span class="comment">#设置html格式参数</span></span><br><span class="line">part1 = MIMEText(content,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#添加一个txt文本附件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;abc.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)<span class="keyword">as</span> h:</span><br><span class="line">    content2 = h.read()</span><br><span class="line"><span class="comment">#设置txt参数</span></span><br><span class="line">part2 = MIMEText(content2,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#附件设置内容类型，方便起见，设置为二进制流</span></span><br><span class="line">part2[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line"><span class="comment">#设置附件头，添加文件名</span></span><br><span class="line">part2[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment;filename=&quot;abc.txt&quot;&#x27;</span></span><br><span class="line"><span class="comment">#添加照片附件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> fp:</span><br><span class="line">    picture = MIMEImage(fp.read())</span><br><span class="line">    <span class="comment">#与txt文件设置相似</span></span><br><span class="line">    picture[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">    picture[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment;filename=&quot;1.png&quot;&#x27;</span></span><br><span class="line"><span class="comment">#将内容附加到邮件主体中</span></span><br><span class="line">message.attach(part1)</span><br><span class="line">message.attach(part2)</span><br><span class="line">message.attach(picture)</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录并发送</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP()</span><br><span class="line">    smtpObj.connect(mail_host,<span class="number">25</span>)</span><br><span class="line">    smtpObj.login(mail_user,mail_pass)</span><br><span class="line">    smtpObj.sendmail(</span><br><span class="line">        sender,receivers,message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    smtpObj.quit()</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>,e)</span><br></pre></td></tr></table></figure>

<h3 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h3><p>通过上面的代码，想必大家已经对发邮件有了基本的认识。</p>
<p>从整体上我们要把握整个过程的思路：</p>
<ol>
<li>登录</li>
<li>写邮件</li>
<li>发送</li>
</ol>
<p>微观上我们需要了解：</p>
<ul>
<li>smtplib/email 模块的代码规则；</li>
<li>什么时候使用 SMTP，什么时候使用 SMTP_SSL？</li>
<li>针对不同的邮件内容需要使用到不同的类，MIMEmultipart、MIMEText、MIMEIamge 等等；</li>
<li>怎么去设置附件信息</li>
</ul>
<p>当然，看再多教程，不如亲自动手写一段代码。大家不妨都自己发一封邮件试一试。</p>
<h3 id="7-监控进程，发送邮件"><a href="#7-监控进程，发送邮件" class="headerlink" title="7. 监控进程，发送邮件"></a>7. 监控进程，发送邮件</h3><p>这个脚本只是做了简单的监控程序进程，当然也可以监控进程后重启进程，发送时间点等，就不过多详写了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">test16.py修改你所检测的进程名称</span></span><br><span class="line"></span><br><span class="line">while true;do</span><br><span class="line">    count=`ps -ef | grep test16.py |grep -v grep`</span><br><span class="line">    if [ &quot;$?&quot; != &quot;0&quot; ];then</span><br><span class="line">        echo  &quot;&gt;&gt;&gt;&gt; no process,run it&quot;</span><br><span class="line">        python3 send_email.py</span><br><span class="line">    else</span><br><span class="line">        echo &quot;&gt;&gt;&gt;&gt; process is runing...&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    sleep 300</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<blockquote>
<p>转载自：<a href="https://zhuanlan.zhihu.com/p/24180606">Crossin的编程教室</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>shell 基本运算符</title>
    <url>/2021/01/10/shell-%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="shell-基本运算符"><a href="#shell-基本运算符" class="headerlink" title="shell 基本运算符"></a>shell 基本运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table>
<thead>
<tr>
<th>算数运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>==</td>
<td>相等</td>
</tr>
<tr>
<td>!=</td>
<td>不相等</td>
</tr>
</tbody></table>
<br>  
<span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`expr $a + $b`</span><br><span class="line">echo &quot;a + b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a - $b`</span><br><span class="line">echo &quot;a - b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a \* $b`</span><br><span class="line">echo &quot;a * b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a / $b`</span><br><span class="line">echo &quot;a / b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a % $b`</span><br><span class="line">echo &quot;a % b : $val&quot;</span><br><span class="line"></span><br><span class="line">if [ $a == $b ]; then echo &quot;a == b&quot; ; fi</span><br><span class="line"></span><br><span class="line">if [ $a != $b ]; then echo &quot;a != b&quot; ; fi</span><br></pre></td></tr></table></figure>

<br> 

<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-eq</td>
<td>检测两个数是否相等，相等返回true</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两数是否相等，不相等返回true</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，大于返回true</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的，小于返回true</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大于等于右边的，大于等于返回true</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的，小于等于返回true</td>
</tr>
</tbody></table>
<br> 

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑与  AND</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或  OR</td>
</tr>
</tbody></table>
<br> 

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</span><br><span class="line">then </span><br><span class="line">    echo &quot;return ture&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;return false&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 100 || $b -gt 100 ]]</span><br><span class="line">then</span><br><span class="line">    echo &quot;return true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;return false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<br> 


<h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>检测两个字符串是否相等，相等返回true</td>
</tr>
<tr>
<td>!=</td>
<td>检测两个字符串是否相等，不相等返回true</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0，为0返回true</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否为0，不为0返回true</td>
</tr>
<tr>
<td>str</td>
<td>检测字符串是否为空，不为空返回true</td>
</tr>
</tbody></table>
<br> 

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=&quot;bac&quot;</span><br><span class="line">b=&quot;fef&quot;</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a = $b : a == b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a = $b : a != b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n $a ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;-n $a : The string length is not 0&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;-n $a : The string length is 0&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a : The string length is not empty&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a : The string length is empty&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<br> 

<h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><table>
<thead>
<tr>
<th>操作符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td align="left">文件存在</td>
</tr>
<tr>
<td>-a</td>
<td align="left">文件存在，这个选项的效果与-e相同。但它已经被“弃用”，并且不鼓励使用</td>
</tr>
<tr>
<td>-f</td>
<td align="left">表示这个文件是一个一般文件（并不是目录或设备文件）</td>
</tr>
<tr>
<td>-s</td>
<td align="left">文件大小不为零</td>
</tr>
<tr>
<td>-d</td>
<td align="left">表示这是一个目录</td>
</tr>
<tr>
<td>-b</td>
<td align="left">表示这是一个设备（光驱，软盘等）</td>
</tr>
<tr>
<td>-c</td>
<td align="left">表示这是一个字符设备（键盘，modem，声卡等）</td>
</tr>
<tr>
<td>-p</td>
<td align="left">这个文件是一个管道</td>
</tr>
<tr>
<td>-h</td>
<td align="left">这是一个符号链接</td>
</tr>
<tr>
<td>-L</td>
<td align="left">这是一个符号链接</td>
</tr>
<tr>
<td>-S</td>
<td align="left">表示这是一个socket</td>
</tr>
<tr>
<td>-t</td>
<td align="left">文件（描述符）被关联到一个终端设备上，这个测试选项一般被用来检测脚本中的stdin([ -t 0 ])或者stdout([ -t 1 ])是否来自一个终端</td>
</tr>
<tr>
<td>-r</td>
<td align="left">文件是否有可读读权限（指的是正在运行这个测试命令的用户是否有可读权限）</td>
</tr>
<tr>
<td>-w</td>
<td align="left">文件是否有可读写权限（指的是正在运行这个测试命令的用户是否有可写权限）</td>
</tr>
<tr>
<td>-x</td>
<td align="left">文件是否具有可执行权限（指的是正在运行这个测试命令的用户是否有可执行权限）</td>
</tr>
<tr>
<td>-g</td>
<td align="left">set-group-id(sgid)标记被设置到文件或目录上</td>
</tr>
<tr>
<td>-k</td>
<td align="left">设置粘贴位</td>
</tr>
<tr>
<td>-O</td>
<td align="left">判断你是否是文件的拥有者</td>
</tr>
<tr>
<td>-G</td>
<td align="left">文件的group-id是否与你相同</td>
</tr>
<tr>
<td>-N</td>
<td align="left">从文件上一次被读取到现在为止，文件是否被修改过</td>
</tr>
<tr>
<td>f1 -nt f2</td>
<td align="left">文件 f1 比 f2 新</td>
</tr>
<tr>
<td>f1 -ot f2</td>
<td align="left">文件 f1 比 f2 旧</td>
</tr>
<tr>
<td>f1 -ef f2</td>
<td align="left">文件 f1 和文件 f2 是相同文件的硬链接</td>
</tr>
<tr>
<td>!</td>
<td align="left">“非”，反转上边所有测试结果（如果没给出条件，那么返回真）</td>
</tr>
</tbody></table>
<br> 

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">file=&quot;/home/william/DYJ/test/test.sh&quot;</span><br><span class="line"></span><br><span class="line">if [ -r $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;The file is readable&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;The file is not readable&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -e $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;File exists&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;File not exists&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The file is readable</span><br><span class="line">File exists</span><br></pre></td></tr></table></figure>

<br> 

<p>思考：浮点运算，比如实现求圆的面积和周长。</p>
<p><code>expr</code> 只能用于整数计算，可以使用 <code>bc</code> 或者 <code>awk</code> 进行浮点数运算。scale保留小数点，但对乘法无效</p>
<br> 

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">pi=3.141592</span><br><span class="line"></span><br><span class="line">radius=2.5</span><br><span class="line"></span><br><span class="line">area=$(echo &quot;scale=4; $pi * $radius * $radius&quot; | bc)</span><br><span class="line"></span><br><span class="line">girth=$(echo &quot;scale=4; $pi * $radius *2&quot; | bc)</span><br><span class="line"></span><br><span class="line">echo &quot;area=$area&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;girth=$girth&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell变量</title>
    <url>/2021/06/16/shell%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>变量介绍</li>
<li>变量分类</li>
<li>变量定义</li>
</ul>
<hr>
<h3 id="一、变量介绍"><a href="#一、变量介绍" class="headerlink" title="一、变量介绍"></a>一、变量介绍</h3><blockquote>
<ol>
<li>在编程中，我们总有一些数据需要临时存放在内存，以待后续使用时快速读出。内存在系统启动的时候被按照1B一个单位划分为若干个块，然后统一</li>
<li>编号(16进制编号)，并对内存的使用情况做记录，保存在内存跟踪表中。</li>
</ol>
</blockquote>
<span id="more"></span>

<p>1）内存占用：如果存的是一个字符则占用1个字节，如果存的是字符串则是字符串的长度加1个字节长度(\0是一个特殊字符，代表字符串结束)。</p>
<p>2）变量名与内存空间关系：计算机中会将对应的内存空间和变量名称绑定在一起，此时代表这段内存空间已经被程序占用，其他程序不可复用；然后将变量名对应的值存在对应内存地址的空间里。</p>
<h3 id="二、变量分类"><a href="#二、变量分类" class="headerlink" title="二、变量分类"></a>二、变量分类</h3><ol>
<li>本地变量：用户私有变量，只有本用户可以使用，保存在家目录下的.bash_profile、.bashrc文件中</li>
<li>全局变量：所有用户都可以使用，保存在/etc/profile、/etc/bashrc文件中</li>
<li>用户自定义变量：用户自定义，比如脚本中的变量</li>
</ol>
<h3 id="三、变量定义"><a href="#三、变量定义" class="headerlink" title="三、变量定义"></a>三、变量定义</h3><p>变量名命名规则：</p>
<ul>
<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>
<li>中间不能有空格，可以使用下划线</li>
<li>不能使用标点符号</li>
<li>不能使用bash里的关键字（可以使用help命令查看保留关键字）</li>
</ul>
<h4 id="临时变量"><a href="#临时变量" class="headerlink" title="临时变量"></a>临时变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ name=&quot;william&quot;</span><br><span class="line">[william@William-arch ~]$ age=18</span><br><span class="line">[william@William-arch ~]$ score=98</span><br></pre></td></tr></table></figure>



<h4 id="读取变量内容"><a href="#读取变量内容" class="headerlink" title="读取变量内容"></a>读取变量内容</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ echo $name</span><br><span class="line">william</span><br><span class="line">[william@William-arch ~]$ echo $age</span><br><span class="line">18</span><br><span class="line">[william@William-arch ~]$ echo $score</span><br><span class="line">98</span><br></pre></td></tr></table></figure>



<h4 id="取消变量-unset"><a href="#取消变量-unset" class="headerlink" title="取消变量 unset"></a>取消变量 unset</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ unset name</span><br><span class="line">[william@William-arch ~]$ echo $name</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="定义全局变量-export"><a href="#定义全局变量-export" class="headerlink" title="定义全局变量 export"></a>定义全局变量 export</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ export name=&#x27;mengxun&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上述设置的变量其实都是一次性变量，系统重启就会丢失。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果希望本地变量或者全局变量可以永久使用，可以将需要设置的变量写入变量文件中即可。</span></span><br></pre></td></tr></table></figure>



<h4 id="定义永久变量"><a href="#定义永久变量" class="headerlink" title="定义永久变量"></a>定义永久变量</h4><p>本地变量：用户私有变量，只有本用户可以使用，保存在家目录下的.bash_profile、.bashrc文件中</p>
<p>全局变量：所有用户都可以使用，保存在/etc/profile、/etc/bashrc文件中</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell基本输入</title>
    <url>/2021/06/15/shell%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>read 命令</li>
</ul>
<hr>
<h3 id="read-命令"><a href="#read-命令" class="headerlink" title="read 命令"></a>read 命令</h3><p>默认接受键盘的输入，回车符代表输入结束</p>
<p>read 命令选项</p>
<p>-p 打印信息</p>
<p>-t 限定时间</p>
<p>-s 不回显</p>
<p>-n 输入字符个数</p>
<span id="more"></span>

<p><strong>登录小案例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span> 后面跟变量名，将输入的内容存入内存中</span></span><br><span class="line">echo -ne &quot;Login: &quot;</span><br><span class="line">read username</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span> -p <span class="string">&quot;Login: &quot;</span> username 可替代前面的<span class="built_in">echo</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后面跟命令不换行的话加分号。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t 5 指定5秒不输入密码自动结束，-s 不显示输入的数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -n 6 密码只识别前6位输入的数据，多输入直接返回，并保留前6位</span></span><br><span class="line">echo -ne &quot;Password: &quot;;read -st 5 -n 6 password</span><br><span class="line">echo</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span> -p 可以替换<span class="built_in">echo</span>, 但不会结束</span></span><br><span class="line">read -p &quot;Username $username, Password $password&quot;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Login: root</span><br><span class="line">Password: 123456</span><br><span class="line">Username root, Password 123456</span><br></pre></td></tr></table></figure>

<p><strong>Linux登录小脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line">echo &quot;Arch Linux (Core)&quot;</span><br><span class="line">echo -e &quot;Kernel `uname -r` an `uname -m`\n&quot;</span><br><span class="line"></span><br><span class="line">echo -ne &quot;$HOSTNAME Login: &quot;;read username</span><br><span class="line">read -sp &quot;Password: &quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> -ne <span class="string">&quot;Password: &quot;</span>;<span class="built_in">read</span> -s passwd</span></span><br><span class="line"></span><br><span class="line">echo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell数组</title>
    <url>/2021/06/17/shell%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>数组介绍</li>
<li>基本数组</li>
<li>关联数组</li>
<li>案列分享</li>
</ul>
<hr>
<h3 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h3><p>一个变量只能存一个值，但是现实中又又很多值需要存储，那么变量就有些拘谨了。比如做一个学员信息表，一个班50个人，每个人6条信息，我们需要定义300个变量才能完成。恐怖恐怖，这只是一个班的学生，一个学校呢？一个市呢？……我想静静了！</p>
<p>仔细想想上述的案例，一个学生六个信息:ID、姓名、性别、年龄、成绩、班级。可不可以定义六个变量就能存储这六类信息呢？答案是当然可以的！变量不行，我们就用数组。</p>
<span id="more"></span>

<h3 id="基本数组"><a href="#基本数组" class="headerlink" title="基本数组"></a>基本数组</h3><p>数组可以让用户一次赋予多个值，需要读取数据时只需通过索引调用就可以方便读出了。</p>
<h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p><code>数组名称=(元素1 元素2 元素3 ...)</code></p>
<h3 id="数组读出"><a href="#数组读出" class="headerlink" title="数组读出"></a>数组读出</h3><p><code>$&#123;数组名称&#125;[索引]</code></p>
<h4 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h4><p><strong>一次赋一个值</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array[0]=&#x27;tom&#x27;</span><br><span class="line"></span><br><span class="line">array[1]=&#x27;william&#x27;</span><br><span class="line"></span><br><span class="line">array[2]=&#x27;peter&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>一次赋多个值</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array2=(tom jack alice)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 希望是将该文件中的每一个行作为一个元素赋值给数组array3</span></span><br><span class="line">array3=(`cat /etc/passwd`) </span><br><span class="line"></span><br><span class="line">array4=(`ls /var/ftp/Shell/for*`)</span><br><span class="line"></span><br><span class="line"> array5=(tom jack alice “bash shell”)</span><br></pre></td></tr></table></figure>

<p><strong>查看数组</strong></p>
<p><code>declare -a</code>  查看系统所有数组</p>
<p><strong>访问数组元数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 访问数组中第一个元素</span></span><br><span class="line">echo $&#123;array1[0]&#125; </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问数组中所有元素</span></span><br><span class="line">echo $&#123;array1[@]&#125;</span><br><span class="line">echo $&#123;array1[*]&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计数组元素的个数</span></span><br><span class="line">echo $&#123;#array1&#123;@&#125;&#125;</span><br><span class="line">echo $&#123;#array1&#123;*&#125;&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组元素的索引</span></span><br><span class="line">echo $&#123;!array1[@]&#125;</span><br><span class="line">echo $&#123;!array1[*]&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从数组下标1开始</span></span><br><span class="line">echo $&#123;array1[@]:1&#125;</span><br><span class="line">echo $&#123;array1[*]:1&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从数组下标1开始，访问两个元素</span></span><br><span class="line">echo $&#123;array1[@]:1:2&#125;</span><br><span class="line">echo $&#123;array1[*]:1:2&#125;</span><br></pre></td></tr></table></figure>

<p><strong>遍历数组</strong></p>
<p>默认数组通过数组元素的个数进行遍历</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ array=(<span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;b&#x27;</span> <span class="string">&#x27;c&#x27;</span> <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line">a</span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br><span class="line">b</span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span></span><br><span class="line">c</span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure>



<p>方法二：针对关联数组可以通过数组元素的索引进行遍历</p>
<h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><p>关联数组可以允许用户自定义数组的索引，这样使用起来更加方便、高效</p>
<p><strong>定义关联数组</strong></p>
<p>声明关联数组变量 <code>declare -A array</code></p>
<p><strong>关联数组赋值</strong></p>
<p>方法一：一次赋一个值</p>
<p><code>数组名[索引]=变量名</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ass_array[index1]=pear</span><br><span class="line"></span><br><span class="line">ass_array[index2]=apple</span><br><span class="line"></span><br><span class="line">ass_array[index3]=orange</span><br><span class="line"></span><br><span class="line">ass_array[index4]=peach</span><br></pre></td></tr></table></figure>

<p>方法二：一次赋多个值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ass_array=([index1]=william [index2]=austin [index3]=peter)</span><br></pre></td></tr></table></figure>



<p><strong>查看数组</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ <span class="built_in">declare</span> -A | grep ass_array</span><br><span class="line">ass_array=( [1]=pear [2]=apple [3]=orange [4]=peach )</span><br></pre></td></tr></table></figure>



<p><strong>访问数组元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ass_array[index2]&#125;</span> 访问数组中的第二个元数</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ass_array@]&#125;</span> 访问数组中所有元数 等同于 <span class="built_in">echo</span> <span class="variable">$&#123;array1[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#ass_array[@]&#125;</span> 获得数组元数的个数</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!ass_array[@]&#125;</span> 获得数组元数的索引</span><br></pre></td></tr></table></figure>



<p><strong>遍历数组</strong></p>
<p>通过数组元数的索引进行遍历,针对关联数组可以通过数组元素的索引进行遍历</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ <span class="built_in">declare</span> -A array</span><br><span class="line"></span><br><span class="line">[william@William-arch ~]$ array=(<span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;b&#x27;</span> <span class="string">&#x27;c&#x27;</span> <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line">a</span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br><span class="line">b</span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span></span><br><span class="line">c</span><br><span class="line">[william@William-arch ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure>



<h3 id="案例分享——学员信息系统"><a href="#案例分享——学员信息系统" class="headerlink" title="案例分享——学员信息系统"></a>案例分享——学员信息系统</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">for ((i=0;i&lt;3;i++))</span><br><span class="line">   do</span><br><span class="line">      read -p &quot;输入第$((i + 1))个人名: &quot; name[$i]</span><br><span class="line">      read -p &quot;输入第$[$i + 1]个年龄: &quot; age[$i]</span><br><span class="line">      read -p &quot;输入第`expr $i + 1`个性别: &quot; gender[$i]</span><br><span class="line">done</span><br><span class="line">clear</span><br><span class="line">      echo -e &quot;\t\t\t\t学员查询系统&quot;</span><br><span class="line">while :</span><br><span class="line">   do</span><br><span class="line">      cp=0</span><br><span class="line"><span class="meta">#</span><span class="bash">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\t\t学员查询系统&quot;</span></span></span><br><span class="line">      read -p &quot;输入要查询的姓名: &quot; xm</span><br><span class="line">      [ $xm == &quot;Q&quot; ]&amp;&amp;exit</span><br><span class="line">      for ((i=0;i&lt;3;i++))</span><br><span class="line">         do</span><br><span class="line">              if [ &quot;$xm&quot; == &quot;$&#123;name[$i]&#125;&quot; ];then</span><br><span class="line">                  echo &quot;$&#123;name[$i]&#125; $&#123;age[$i]&#125; $&#123;gender[$i]&#125;&quot;</span><br><span class="line">                  cp=1</span><br><span class="line">              fi</span><br><span class="line">      done</span><br><span class="line">      [ $cp -eq 0 ]&amp;&amp;echo &quot;not found student&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<p>作业：</p>
<ul>
<li>使用关联数组统计文件 /etc/passwd 中用户的不同类型shell的数量</li>
<li>使用关联数组按扩展名统计指定目录中文件的数量</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell格式化输出</title>
    <url>/2021/06/15/shell%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>echo 命令</li>
<li>颜色输出</li>
</ul>
<hr>
<p>一个程序需要有0个以上输入，一个或更多输出</p>
<h3 id="一、-echo-命令介绍"><a href="#一、-echo-命令介绍" class="headerlink" title="一、 echo 命令介绍"></a>一、 echo 命令介绍</h3><p>功能：将内容输出到默认显示设备</p>
<p>echo 命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。功能说明：显示文字</p>
<span id="more"></span>

<p>语法：echo [-ne][字符串]</p>
<p>补充说明：echo 会将输入的字符串送往标准输出。输出的字符串间以空白字符间隔，并在最后加上换行号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ echo &quot;hello world&quot;</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">[william@William-arch ~]$ echo -n &quot;hello world&quot;</span><br><span class="line">hello world[william@William-arch ~]$</span><br></pre></td></tr></table></figure>

<p>命令选型：</p>
<p>-n 不要在最后自动换行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[william@William-arch ~]$ echo -n &quot;Login: &quot;;read</span><br><span class="line">Login: william</span><br><span class="line"></span><br><span class="line">[william@William-arch ~]$ echo -n &quot;date: &quot;;date +%F</span><br><span class="line">date: 2021-06-15</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>-e 若字符串中出现一下字符，则特别加以处理，而不会将它当成一般文字输出：</p>
<p>转义字符</p>
<p>\a 发出警报声</p>
<p>\b 删除前一个字符</p>
<p>\c 最后不加上换行符号</p>
<p>\f 换行但光标仍旧停留在原来的位置</p>
<p>\n 换行且光标移至行首</p>
<p>\r 光标移至行首，但不换行</p>
<p>\t 插入tab</p>
<p>\v 与\f 相同</p>
<p>\nnn 插入nnn（八进制）所代表的 ASCII 字符</p>
<p>-help 显示帮助</p>
<p>-version 显示版本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除一个字符的时候，必须要加参数n，换行之后就不在同一行了，没办法删除</span></span><br><span class="line">[william@William-arch ~]$ echo -ne &quot;a\b&quot;</span><br><span class="line">[william@William-arch ~]$ </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 举例说明：倒计时</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for time in `seq 9 -1 0`; do</span><br><span class="line">    echo -n $time</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo  </span><br><span class="line"></span><br><span class="line">for time in `seq 9 -1 0`; do</span><br><span class="line">    echo -ne &quot;\b$time&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo</span><br></pre></td></tr></table></figure>

<p>格式化输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo -e &#x27;\t\t\t Fruits Shop&#x27;</span><br><span class="line">echo -e &quot;\t1) Apple&quot;</span><br><span class="line">echo -e &quot;\t2) Orange&quot;</span><br><span class="line">echo -e &quot;\t3) Banana&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果</span></span><br><span class="line">[william@William-arch test]$ sh fruit.sh </span><br><span class="line">                         Fruits Shop</span><br><span class="line">        1) Apple</span><br><span class="line">        2) Orange</span><br><span class="line">        3) Banana</span><br></pre></td></tr></table></figure>



<h3 id="二、颜色代码"><a href="#二、颜色代码" class="headerlink" title="二、颜色代码"></a>二、颜色代码</h3><p>脚本中 echo 显示内容带颜色显示，echo 显示带颜色，需要使用参数 -e</p>
<p>格式如下：</p>
<p><code>echo -e &quot;\033[41;36m something here \033[0m&quot;</code></p>
<p>其中41的位置代表底色，36的位置代表字的颜色</p>
<ol>
<li>字背景颜色和文字颜色之间是英文的””</li>
<li>文字颜色后面有个m</li>
<li>字符串前后没有空格，如果有的话，输出也是同样有空格</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下面是相应的字和背景颜色，可以自己来尝试找出不同颜色搭配</span><br><span class="line">　　例</span><br><span class="line">　　echo -e “\033[31m 红色字 \033[0m”</span><br><span class="line">　　echo -e “\033[34m 黄色字 \033[0m”</span><br><span class="line">　　echo -e “\033[41;33m 红底黄字 \033[0m”</span><br><span class="line">　　echo -e “\033[41;37m 红底白字 \033[0m”</span><br><span class="line">　　</span><br><span class="line">字颜色：30—–37</span><br><span class="line">　　echo -e “\033[30m 黑色字 \033[0m”</span><br><span class="line">　　echo -e “\033[31m 红色字 \033[0m”</span><br><span class="line">　　echo -e “\033[32m 绿色字 \033[0m”</span><br><span class="line">　　echo -e “\033[33m 黄色字 \033[0m”</span><br><span class="line">　　echo -e “\033[34m 蓝色字 \033[0m”</span><br><span class="line">　　echo -e “\033[35m 紫色字 \033[0m”</span><br><span class="line">　　echo -e “\033[36m 天蓝字 \033[0m”</span><br><span class="line">　　echo -e “\033[37m 白色字 \033[0m”</span><br><span class="line">　　</span><br><span class="line">字背景颜色范围：40—–47</span><br><span class="line">　　echo -e “\033[40;37m 黑底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[41;37m 红底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[42;37m 绿底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[43;37m 黄底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[44;37m 蓝底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[45;37m 紫底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[46;37m 天蓝底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[47;30m 白底黑字 \033[0m”</span><br><span class="line">　　</span><br><span class="line">最后面控制选项说明</span><br><span class="line">　　\033[0m		 									关闭所有属性</span><br><span class="line">　　\033[1m 										设置高亮度</span><br><span class="line">　　\033[4m 										下划线</span><br><span class="line">　　\033[5m 										闪烁</span><br><span class="line">　　\033[7m 										反显</span><br><span class="line">　　\033[8m 										消隐</span><br><span class="line">　　\033[30m — \33[37m 				                设置前景色</span><br><span class="line">　　\033[40m — \33[47m 				                设置背景色</span><br><span class="line">　　\033[nA 										光标上移n行</span><br><span class="line">　　\033[nB 										光标下移n行</span><br><span class="line">　　\033[nC 										光标右移n行</span><br><span class="line">　　\033[nD 										光标左移n行</span><br><span class="line">　　\033[y;xH										设置光标位置</span><br><span class="line">　　\033[2J 										清屏</span><br><span class="line">　　\033[K 											清除从光标到行尾的内容</span><br><span class="line">　　\33[s 											保存光标位置</span><br><span class="line">　　\033[u 											恢复光标位置</span><br><span class="line">　　\033[?25l 										隐藏光标</span><br><span class="line">　　\033[?25h 									    显示光标</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell编程一</title>
    <url>/2021/05/30/shell%E7%BC%96%E7%A8%8B%E4%B8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Shell 语法</p>
<ul>
<li>如何书写一个shell脚本</li>
<li>shell脚本运行</li>
<li>shell中的特殊符号</li>
<li>管道</li>
<li>shell中数学运算</li>
<li>脚本退出</li>
</ul>
<hr>
<p>shell脚本就是将完成一个任务的所有命令按照执行的先后顺序，自上而下写入到一个文本文件中，然后给予执行权限</p>
<h3 id="一、如何书写一个shell脚本"><a href="#一、如何书写一个shell脚本" class="headerlink" title="一、如何书写一个shell脚本"></a>一、如何书写一个shell脚本</h3><p>shell脚本的命名：</p>
<p>名只要有意义，最好不要用 a、b、c、1、2 这种命名方式；虽然 linux 系统中，文件没有扩展名的概念，依然建议你用.sh结尾；名字不要太长，最好能在30个字以内解决。例如：check_memory.sh</p>
<span id="more"></span>

<p>shell 脚本格式：</p>
<p>shell 脚本开头必须指定脚本运行环境，以<code>#!</code>这个特殊符号为组成。如：#!/bin/bash 指定该脚本是运行解析由<code>/bin/bash</code>来完成的</p>
<p>shell中的注释使用#号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shell 脚本中，最好加入脚本说明字段</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author: Meng xun</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Created Time: 2021/05/28 18:41</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Script Description: first shell study script</span></span><br></pre></td></tr></table></figure>



<h3 id="二、如何运行一个-shell-脚本"><a href="#二、如何运行一个-shell-脚本" class="headerlink" title="二、如何运行一个 shell 脚本"></a>二、如何运行一个 shell 脚本</h3><p>脚本运行需要执行权限，当我们给一个文件赋予执行权限后，该脚本就可以运行</p>
<p><code>chomd u+x filename</code></p>
<p>如果不希望赋予执行权限，那么可以使用bash命令来运行未给予执行权限的脚本bash filename</p>
<p><code>bash filename</code></p>
<h3 id="三、shell中的特殊符号"><a href="#三、shell中的特殊符号" class="headerlink" title="三、shell中的特殊符号"></a>三、shell中的特殊符号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不要和正则表达式中的符号含义搞混淆了</span><br><span class="line"></span><br><span class="line">~										家目录</span><br><span class="line">!										执行历史命令</span><br><span class="line">$										变量中取内容符</span><br><span class="line">+ - * \ %				 对应数学运算		加 减 乘 除 取余数</span><br><span class="line">&amp;										后台执行</span><br><span class="line">*										星号是shell中的通配符，匹配所有</span><br><span class="line">?										问号是shell中的通配符，匹配除回车以外的一个字符</span><br><span class="line">;										分号可以在shell中一行执行多个命令，命令之间用分号分割</span><br><span class="line">|										管道符，上一个命令的输出作为下一个命令的输入 `cat filename | grep &quot;abc&quot;`</span><br><span class="line">\										转义字符</span><br><span class="line">``									反引号，命令中执行命令 echo &quot;today is \`date +%F`&quot;</span><br><span class="line">&#x27;&#x27;									单引号，脚本中字符串要用单引号引起来，但是不同于双引号的是，但引号不解释变量</span><br><span class="line">&quot;&quot;									双引号，脚本中出现的字符串可以用双引号引起来</span><br></pre></td></tr></table></figure>

<h3 id="四、Shell-中管道符的运用"><a href="#四、Shell-中管道符的运用" class="headerlink" title="四、Shell 中管道符的运用"></a>四、Shell 中管道符的运用</h3><p><code>|</code> 管道符在shell中使用的最多的，很多组合命令都需要通过组合命令来完成</p>
<h3 id="五、shell-重定向"><a href="#五、shell-重定向" class="headerlink" title="五、shell 重定向"></a>五、shell 重定向</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&gt;				重定向输入		覆盖原有数据</span><br><span class="line">&gt;&gt;				重定向追加输入，在原数据的末尾添加</span><br><span class="line">&lt;				重定向输出	wc -l &lt; /etc/passwd</span><br><span class="line">&lt;&lt;				重定向追加输出		fdisk /dev/sdb &lt;&lt;EOF 	...... 	EOF</span><br></pre></td></tr></table></figure>

<h3 id="六、shell-数学运算"><a href="#六、shell-数学运算" class="headerlink" title="六、shell 数学运算"></a>六、shell 数学运算</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expr 命令： 只能做整数运算，格式比较古板，注意空格</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr 1 + 1</span></span><br><span class="line">2</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr 5 - 2</span></span><br><span class="line">3</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr 5 \* 2				<span class="comment">#注意*号出现为转义，否则为通配符</span></span></span><br><span class="line">10</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr 5 / 2</span></span><br><span class="line">2</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr 5 % 2</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">使用bc计算器处理浮点运算，scale=2代表小数点保留两位(不过arch上不知道为什么不是)</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;scale=2;3.764+100&quot;</span>|bc</span></span><br><span class="line">103.764</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;scale=2;100.237-3&quot;</span>|bc</span></span><br><span class="line">97.237</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;scale=2;100/3&quot;</span>|bc</span></span><br><span class="line">33.33</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;scale=2;100*3.6754&quot;</span>|bc</span></span><br><span class="line">367.5400</span><br><span class="line"></span><br><span class="line">双小圆括号运算，在shell中(())也可以用来做数学运算</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((<span class="number">100.12</span>+<span class="number">3</span>))</span></span><br><span class="line">103.12</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((<span class="number">100</span>-<span class="number">3</span>))</span></span><br><span class="line">97</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((<span class="number">100</span>*<span class="number">3</span>))</span></span><br><span class="line">300</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((<span class="number">100</span>/<span class="number">3</span>))</span></span><br><span class="line">33</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $((<span class="number">100</span>**<span class="number">3</span>))</span></span><br><span class="line">1000000</span><br></pre></td></tr></table></figure>

<h3 id="七、退出脚本"><a href="#七、退出脚本" class="headerlink" title="七、退出脚本"></a>七、退出脚本</h3><p><code>exit</code> NUM 退出脚本，释放系统资源，NUM代表一个整数，代表返回值</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>sql循环生成数据</title>
    <url>/2022/03/11/sql%E5%BE%AA%E7%8E%AF%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用python脚本，批量生成mysql数据，并插入到服务器中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入pymysql模块</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接database</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;ip&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, port=<span class="number">3306</span>, password=<span class="string">&#x27;admin&#x27;</span>, db=<span class="string">&#x27;iod&#x27;</span>,charset=<span class="string">&#x27;utf8mb4&#x27;</span>)</span><br><span class="line"><span class="comment"># 得到一个可以执行SQL语句的光标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 插入sql</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;INSERT INTO table(column1,column2...) VALUES (value1,value2,...);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行SQL语句，一次生成100W条太费时间，每1000条循环一次</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    [cursor.execute(sql) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done &quot;</span>+<span class="built_in">str</span>(k))</span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>ssh服务命令</title>
    <url>/2021/01/07/ssh%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>虚拟机网络设置为桥接模式</p>
<blockquote>
<p>systemctl enable sshd.service 开机启动<br>systemctl start sshd.service 立即启动<br>systemctl restart sshd.service 立即重启</p>
</blockquote>
<p>ssh命令</p>
<blockquote>
<p>ssh username@remote_ip </p>
</blockquote>
<p>之后输入密码即可</p>
<p>ssh连接失败</p>
<blockquote>
<p>ssh-keygen -R 服务器地址</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>unittest框架详解</title>
    <url>/2021/06/14/unittest%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>UNITTEST内容</p>
<ol>
<li>unittest介绍（各个组件的介绍）</li>
<li>测试固件<ul>
<li>setUp&amp;tearDown</li>
<li>setUpClass&amp;tearDownClass</li>
<li>程序执行的顺序</li>
<li>测试用例的编写</li>
</ul>
</li>
<li>测试执行</li>
</ol>
<span id="more"></span>

<ol start="4">
<li>构建测试套件<ul>
<li>用例按顺序执行（addTest）</li>
<li>测试用例执行顺序的详解</li>
<li>按测试类执行（makeSuite）</li>
<li>加载测试类（TestLoader）</li>
<li>按测试模块来执行</li>
<li>优化测试套件</li>
</ul>
</li>
<li>分离测试固件（模块化的应用）</li>
<li>测试断言<ul>
<li>assertEqual(a,b)</li>
<li>assertTrue(x)</li>
<li>assertIn(a,b)</li>
<li>测试断言的注意事项<ul>
<li>不正确的使用if</li>
<li>不正确的使用异常</li>
</ul>
</li>
</ul>
</li>
<li>批量执行测试用例（discover）<ul>
<li>获取所有测试用例</li>
<li>discover方法的解读</li>
</ul>
</li>
<li>生成测试报告<ul>
<li>Python2生成测试报告</li>
<li>Python3生成测试报告</li>
<li>测试报告的注意事项</li>
<li>新增当前时间</li>
</ul>
</li>
<li> unittest的缺陷</li>
<li>Cocerage的应用</li>
</ol>
<h2 id="Unittest组成"><a href="#Unittest组成" class="headerlink" title="Unittest组成"></a>Unittest组成</h2><p><img src="u1.png"></p>
<h3 id="TestSuite-测试套件"><a href="#TestSuite-测试套件" class="headerlink" title="TestSuite 测试套件"></a>TestSuite 测试套件</h3><p><strong>加载测试用例</strong></p>
<p>先通过 unittest.TestSuite() 创建测试套件实例对象，如：suite = unittest.TestSuite()</p>
<p>再通过 addTest() 往测试套件里添加当个测试用例，或通过addTests([…]) 添加多个测试用例（列表中伪测试用例方法名）执行测试套件里的测试用例</p>
<p>如果有多个测试用例，类里有100个用例？怎么办，要添加100次吗？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHC</span>(<span class="params">unittest.TestCaase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_01</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例1&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_02</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例2&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;方式1添加单条测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建suite实例</span></span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    <span class="comment"># 添加单条测试用例</span></span><br><span class="line">    <span class="comment"># addTest()里参数格式为：测试类(&quot;测试方法&quot;)</span></span><br><span class="line">    suite.addTest(TestHC(<span class="string">&#x27;test_02&#x27;</span>))</span><br><span class="line">    suite.addTest(TestHC(<span class="string">&#x27;test_01&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;方式2添加多条测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># suite.addTests([TestHC(&#x27;test_02&#x27;),TestHC(&#x27;test_01&#x27;)]) </span></span><br></pre></td></tr></table></figure>

<p><strong>加载测试用例类</strong></p>
<p>先通过 unittest.TestSuite() 创建测试套件实例对象</p>
<p>再通过 unittest.TestLoader() 创建加载对象，加载测试用例类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHC</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例1&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例2&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Action</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例3&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例4&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;方式1添加单条用例&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建suite实例</span></span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    loader = unittest.TestLoader()</span><br><span class="line">    suite.addTest(loader.loaderTestFromTestCase(TestHC))</span><br><span class="line">    suite.addTest(loader.loaderTestFromTestCase(TestAction))</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;添加多个类的方法&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建suite实例</span></span><br><span class="line">    suite1 = unittest.TestLoader().loadTestFromCase(TestHC)</span><br><span class="line">    suite2 = unittest.TestLoader().loadTestFromCase(Test_Action)</span><br><span class="line">    suite = unittest.TestSuite(suite1,suite2)</span><br></pre></td></tr></table></figure>

<p><strong>加载指定路径里的测试用例</strong></p>
<p>通过 unittest.defaultTestLoader.discover()将指定路径的测试用例加载至测试用例集。注意：这里不需要创建 unittest.TestSuite 对象。如下代码所示，test_dir 为指定路径。pattern = test_*.py 表示加载以 test_ 开头的模块中的测试用例，指定运行某模块时 pattern 参数指定全名即可，如：pattern=’test_sum.py’。路径跟 pattern 参数都可以自定义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># discover 可以一次调用多个脚本</span></span><br><span class="line"><span class="comment"># test_dir 被测脚本的路径</span></span><br><span class="line"><span class="comment"># pattern 脚本名称匹配规则</span></span><br><span class="line"></span><br><span class="line">test_dir = <span class="string">&#x27;./test_case&#x27;</span></span><br><span class="line"></span><br><span class="line">discover = unittest.defaultTestLoader.discover(test_dir,pattern=<span class="string">&#x27;test*.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 test_case 目录下所有以 test 开头的 py 文件，执行这些 py 文件下所有测试用例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    runner = unittest.TextTestRunner()</span><br><span class="line">    runner.run(discover)</span><br></pre></td></tr></table></figure>

<p><strong>使用 TextTestRunner 执行测试用例</strong></p>
<p>unittest 框架执行测试用例之前，需先创建 TextTestRunner 实例 ，再调用该实例的 run() 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 TextTestRunner 实例</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 run() 方法运行测试套件（即运行测试套件中的所有用例）</span></span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure>

<p><strong>整合的最终结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;方式3批量添加&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">import</span> os,sys</span><br><span class="line">   <span class="keyword">import</span> unittest</span><br><span class="line">   <span class="keyword">import</span> time</span><br><span class="line">   <span class="keyword">from</span> report <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 获取当前py文件路径地址，并进行路径分割(分割成目录路径和文件名)</span></span><br><span class="line">   <span class="comment"># os.path.abspath(file) 返回文件的绝对路径</span></span><br><span class="line">   <span class="comment"># sys.argv[0] 返回文件名称，其sys.argv[]是一个列表，具体可参考本博客《python内置函数》</span></span><br><span class="line">   dirname,filename = os.path.split(os.path.abspath(sys.argv[<span class="number">0</span>]))</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">print</span>(dirname,filename)</span><br><span class="line">   case_path = <span class="string">&quot;.\\case\\&quot;</span></span><br><span class="line">   result = dirname + <span class="string">&quot;\\report\\&quot;</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">creatsuite</span>():</span></span><br><span class="line">       <span class="comment"># 定义单元测试容器</span></span><br><span class="line">       testunit = unittest.TestSuite()</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># 定义搜索用例文件的方法</span></span><br><span class="line">       discover = unittest.defaultTestLoader.discover(case_path,pattern=<span class="string">&#x27;*.py&#x27;</span>,top_level_dir=<span class="literal">None</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># 将测试用例加入测试容器中,外循环为每个case中的py文件，内循环test_sutite为为测试用例</span></span><br><span class="line">       <span class="keyword">for</span> test_suite <span class="keyword">in</span> discover:</span><br><span class="line">           <span class="keyword">for</span> casename <span class="keyword">in</span> test_suite:</span><br><span class="line">               testunit.addTest(casename)</span><br><span class="line">           <span class="comment"># print(testunit)</span></span><br><span class="line">       <span class="keyword">return</span> testunit</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 调用函数createsuite(),将函数返回的testunit赋值给test_case</span></span><br><span class="line">   test_case = createsuite()</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 获取当前系统时间</span></span><br><span class="line">   now = time.strftime(<span class="string">&#x27;%Y-m-%d-%H_%M_%S&#x27;</span>,time.localtime(time.time()))</span><br><span class="line">   day = time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>,time.localtime((time.time())))</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 定义报告存储路径，支持相对路径</span></span><br><span class="line">   report_dir = result + day</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 检验路径下文件夹是否存在，不存在创建文件夹</span></span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(report_dir):</span><br><span class="line">       os.mkdir(report_dir)</span><br><span class="line">       </span><br><span class="line">   <span class="comment"># 命名文件</span></span><br><span class="line">   filename = report_dir + <span class="string">&quot;\\&quot;</span> + now + <span class="string">&quot;_result.html&quot;</span></span><br><span class="line">   fp = <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 定义测试报告</span></span><br><span class="line">   runner = HTMLTestRunner.HTMLTestRunner(</span><br><span class="line">       stream = fp,</span><br><span class="line">       title = <span class="string">&quot;xxx测试报告&quot;</span></span><br><span class="line">       description = <span class="string">&quot;执行情况：&quot;</span></span><br><span class="line">   )</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 运行测试用例</span></span><br><span class="line">   <span class="comment"># runner = unittest.TextTestRunner(verbosity=2)</span></span><br><span class="line">   runner = unittest.TextTestRunner()</span><br><span class="line">   runner.run(test_case)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 关闭文件</span></span><br><span class="line">   fp.close()</span><br></pre></td></tr></table></figure>

<p><strong>verbosity=[0/1/2]</strong></p>
<ul>
<li>0代表得到执行的测试总数和全局结构</li>
<li>1代表得到成功的现实，失败显示F，错误显示E，成功显示.</li>
<li>2可以得到详细的信息</li>
</ul>
<h3 id="TestCase-测试用例"><a href="#TestCase-测试用例" class="headerlink" title="TestCase 测试用例"></a>TestCase 测试用例</h3><p>测试用例类，我们做单元测试时编写的测试用例就是继承TestCase类来实现具体的测试用例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例1&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例2&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<p>可以这样理解：每一个继承TestCase类的子类里面实现的具体的方法（以test开头的方法）都是一条用例</p>
<p>既然我们写了用例，那用例又是如何被执行的呢？这就是下面要讲的TestCase类里面run方法，先贴一下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, result=<span class="literal">None</span></span>):</span></span><br><span class="line">    orig_result = result</span><br><span class="line">    <span class="comment">#初始化result类，此类就是TestResult类或者其子类，用来记录用例的执行结果信息等</span></span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        result = self.defaultTestResult()   </span><br><span class="line">        startTestRun = <span class="built_in">getattr</span>(result, <span class="string">&#x27;startTestRun&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> startTestRun <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            startTestRun()</span><br><span class="line"></span><br><span class="line">    self._resultForDoCleanups = result</span><br><span class="line">    result.startTest(self)</span><br><span class="line"></span><br><span class="line">    testMethod = <span class="built_in">getattr</span>(self, self._testMethodName)    <span class="comment">#获取当前TestCase类里面实现的某一个具体的方法（以test开头的方法）</span></span><br><span class="line">    <span class="comment">#判断TestCase类是否有被skip装饰，或类的testMethod方法有没有被skip装饰，如果有skip装饰，则直接跳过这个类或者这个方法不执行（包括后面tearDown也不会被执行），</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getattr</span>(self.__class__, <span class="string">&quot;__unittest_skip__&quot;</span>, <span class="literal">False</span>) <span class="keyword">or</span></span><br><span class="line">        <span class="built_in">getattr</span>(testMethod, <span class="string">&quot;__unittest_skip__&quot;</span>, <span class="literal">False</span>)):</span><br><span class="line">        <span class="comment"># If the class or method was skipped.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            skip_why = (<span class="built_in">getattr</span>(self.__class__, <span class="string">&#x27;__unittest_skip_why__&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">or</span> <span class="built_in">getattr</span>(testMethod, <span class="string">&#x27;__unittest_skip_why__&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">            self._addSkip(result, skip_why)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            result.stopTest(self)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#下面部分的代码逻辑是：执行setup部分，如果没有异常执行testMethod（即我们写的以test开头的TestCase类的方法），然后执行tearDown部分代码（不管testMethod是否通过）</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        success = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.setUp()</span><br><span class="line">        <span class="keyword">except</span> SkipTest <span class="keyword">as</span> e:</span><br><span class="line">            self._addSkip(result, <span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            result.addError(self, sys.exc_info())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                testMethod()</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">except</span> self.failureException:</span><br><span class="line">                result.addFailure(self, sys.exc_info())</span><br><span class="line">            <span class="keyword">except</span> _ExpectedFailure <span class="keyword">as</span> e:</span><br><span class="line">                addExpectedFailure = <span class="built_in">getattr</span>(result, <span class="string">&#x27;addExpectedFailure&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> addExpectedFailure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    addExpectedFailure(self, e.exc_info)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    warnings.warn(<span class="string">&quot;TestResult has no addExpectedFailure method, reporting as passes&quot;</span>,</span><br><span class="line">                                  RuntimeWarning)</span><br><span class="line">                    result.addSuccess(self)</span><br><span class="line">            <span class="keyword">except</span> _UnexpectedSuccess:</span><br><span class="line">                addUnexpectedSuccess = <span class="built_in">getattr</span>(result, <span class="string">&#x27;addUnexpectedSuccess&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> addUnexpectedSuccess <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    addUnexpectedSuccess(self)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    warnings.warn(<span class="string">&quot;TestResult has no addUnexpectedSuccess method, reporting as failures&quot;</span>,</span><br><span class="line">                                  RuntimeWarning)</span><br><span class="line">                    result.addFailure(self, sys.exc_info())</span><br><span class="line">            <span class="keyword">except</span> SkipTest <span class="keyword">as</span> e:</span><br><span class="line">                self._addSkip(result, <span class="built_in">str</span>(e))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                result.addError(self, sys.exc_info())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                success = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.tearDown()</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                result.addError(self, sys.exc_info())</span><br><span class="line">                success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        cleanUpSuccess = self.doCleanups()</span><br><span class="line">        success = success <span class="keyword">and</span> cleanUpSuccess</span><br><span class="line">        <span class="keyword">if</span> success:</span><br><span class="line">            result.addSuccess(self)</span><br><span class="line">    <span class="comment">#此部分是用例执行完成之后的收尾工作</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        result.stopTest(self)</span><br><span class="line">        <span class="keyword">if</span> orig_result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            stopTestRun = <span class="built_in">getattr</span>(result, <span class="string">&#x27;stopTestRun&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> stopTestRun <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                stopTestRun()</span><br></pre></td></tr></table></figure>

<p><strong>run方法的第一个参数是result</strong></p>
<p>下面详细说明一下run方法里面得逻辑：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">orig_result = result</span><br><span class="line"><span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            result = self.defaultTestResult()   </span><br><span class="line">            startTestRun = <span class="built_in">getattr</span>(result, <span class="string">&#x27;startTestRun&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> startTestRun <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                startTestRun()</span><br><span class="line"></span><br><span class="line">self._resultForDoCleanups = result</span><br><span class="line">result.startTest(self)</span><br></pre></td></tr></table></figure>

<p>这一部分代码是用来实例化一个TestResult类，如果run方法没有传入result参数，则用self.defaultTestResult方法返回一个TestResult类的实例，并且如果TestResult如果有startTestRun方法就执行startTestRun方法。后面两句中的第一句是将result赋值TestCase实例_resultForDoCleanups属性，这个会在后面再说，第二句是执行result的startTest方法（可以看一下TestResult的startTest方法）。</p>
<p>继续往下看代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">testMethod = <span class="built_in">getattr</span>(self, self._testMethodName)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getattr</span>(self.__class__, <span class="string">&quot;__unittest_skip__&quot;</span>, <span class="literal">False</span>) <span class="keyword">or</span></span><br><span class="line">    <span class="built_in">getattr</span>(testMethod, <span class="string">&quot;__unittest_skip__&quot;</span>, <span class="literal">False</span>)):</span><br><span class="line">    <span class="comment"># If the class or method was skipped.</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        skip_why = (<span class="built_in">getattr</span>(self.__class__, <span class="string">&#x27;__unittest_skip_why__&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">or</span> <span class="built_in">getattr</span>(testMethod, <span class="string">&#x27;__unittest_skip_why__&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        self._addSkip(result, skip_why)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        result.stopTest(self)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>第一句代码：testMethod = getattr(self, self._testMethodName)，这句主要获取TestCase类里面的方法，而self._testMethodName就是我们编写测试类里面的的方法（以test开头的方法）。比如上面例子中的testAddUser方法<br>后面部分代码是判断当前我们写的TestCase类是否有unittest_skip，或者我们写的TestCase类的方法（以test开头）是否有unittest_skip方法，如果有则获取类的unittest_skip_why属性或者方法的unittest_skip_why属性。并在result中添加skip的原因。之后执行result的stopTest方法，并直接返回不继续执行下去（==包括setUp和teardown都不会执行==）。那么我们如何去实现这skip的逻辑呢，举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、TestCase带有__unittest_skip__属性：</span><br><span class="line"><span class="meta">@unittest.skip(<span class="params"><span class="string">&#x27;class skip&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnitTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test01</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test01&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test02</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test02&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、方法带有__unittest_skip__属性</span><br><span class="line"><span class="meta">@unittest.skip(<span class="params"><span class="string">&#x27;class skip&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnitTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&#x27;skip&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test01</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test01&#x27;</span>)</span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&#x27;skip&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test02</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test02&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<p>而<strong>unittest_skip</strong>、<strong>unittest_skip_why</strong>这两个属性是如何给类或方法带上的呢，那让我们来看一下skip方法。先贴代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skip</span>(<span class="params">reason</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Unconditionally skip a test.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">test_item</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(test_item, (<span class="built_in">type</span>, types.ClassType)):</span><br><span class="line"><span class="meta">            @functools.wraps(<span class="params">test_item</span>)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">skip_wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">                <span class="keyword">raise</span> SkipTest(reason)</span><br><span class="line">            test_item = skip_wrapper</span><br><span class="line"></span><br><span class="line">        test_item.__unittest_skip__ = <span class="literal">True</span></span><br><span class="line">        test_item.__unittest_skip_why__ = reason</span><br><span class="line">        <span class="keyword">return</span> test_item</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<p>从代码中可以看出skip方法会给test_item（也就是类名或者方法名）增加两个属性<strong>unittest_skip</strong>，<strong>unittest_skip_why</strong>并分别赋值为True和reason。</p>
<p>我们继续上面的run方法剩下部分的代码分析：如果没有skip装饰类或方法，则执行下面的逻辑：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    success = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.setUp()</span><br><span class="line">    <span class="keyword">except</span> SkipTest <span class="keyword">as</span> e:</span><br><span class="line">        self._addSkip(result, <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result.addError(self, sys.exc_info())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            testMethod()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span> self.failureException:</span><br><span class="line">            result.addFailure(self, sys.exc_info())</span><br><span class="line">        <span class="keyword">except</span> _ExpectedFailure <span class="keyword">as</span> e:</span><br><span class="line">            addExpectedFailure = <span class="built_in">getattr</span>(result, <span class="string">&#x27;addExpectedFailure&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> addExpectedFailure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                addExpectedFailure(self, e.exc_info)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                warnings.warn(<span class="string">&quot;TestResult has no addExpectedFailure method, reporting as passes&quot;</span>,</span><br><span class="line">                              RuntimeWarning)</span><br><span class="line">                result.addSuccess(self)</span><br><span class="line">        <span class="keyword">except</span> _UnexpectedSuccess:</span><br><span class="line">            addUnexpectedSuccess = <span class="built_in">getattr</span>(result, <span class="string">&#x27;addUnexpectedSuccess&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> addUnexpectedSuccess <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                addUnexpectedSuccess(self)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                warnings.warn(<span class="string">&quot;TestResult has no addUnexpectedSuccess method, reporting as failures&quot;</span>,</span><br><span class="line">                              RuntimeWarning)</span><br><span class="line">                result.addFailure(self, sys.exc_info())</span><br><span class="line">        <span class="keyword">except</span> SkipTest <span class="keyword">as</span> e:</span><br><span class="line">            self._addSkip(result, <span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            result.addError(self, sys.exc_info())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            success = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.tearDown()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            result.addError(self, sys.exc_info())</span><br><span class="line">            success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    cleanUpSuccess = self.doCleanups()</span><br><span class="line">    success = success <span class="keyword">and</span> cleanUpSuccess</span><br><span class="line">    <span class="keyword">if</span> success:</span><br><span class="line">        result.addSuccess(self)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    result.stopTest(self)</span><br><span class="line">    <span class="keyword">if</span> orig_result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        stopTestRun = <span class="built_in">getattr</span>(result, <span class="string">&#x27;stopTestRun&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stopTestRun <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            stopTestRun()</span><br></pre></td></tr></table></figure>

<p>我们分解开来分析，<strong>第一部分</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    success = <span class="literal">False</span></span><br><span class="line">    self.setUp()</span><br><span class="line">    <span class="keyword">except</span> SkipTest <span class="keyword">as</span> e:</span><br><span class="line">        self._addSkip(result, <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result.addError(self, sys.exc_info())</span><br></pre></td></tr></table></figure>

<p>在用例执行之前给是否成功的标识赋值为false，success=False <br>接着执行setUp方法，如果是在setUp中skipTest异常抛出，则在result中添加异常信息。如何实现这个SkipTest异常呢，我们可以在setUp方法中增加一句代码：raise unittest.SkipTest(‘setup skip test’)，如果是在setUp中遇到KeyboardInterrupt异常(Ctrl+c),则会直接抛出异常，如果是除了这两个异常之外的其他异常，则在result中添加error信息。</p>
<p><strong>第二部分：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        testMethod()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span> self.failureException:</span><br><span class="line">        result.addFailure(self, sys.exc_info())</span><br><span class="line">    <span class="keyword">except</span> _ExpectedFailure <span class="keyword">as</span> e:</span><br><span class="line">        addExpectedFailure = <span class="built_in">getattr</span>(result, <span class="string">&#x27;addExpectedFailure&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> addExpectedFailure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            addExpectedFailure(self, e.exc_info)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            warnings.warn(<span class="string">&quot;TestResult has no addExpectedFailure method, reporting as passes&quot;</span>,</span><br><span class="line">                          RuntimeWarning)</span><br><span class="line">            result.addSuccess(self)</span><br><span class="line">    <span class="keyword">except</span> _UnexpectedSuccess:</span><br><span class="line">        addUnexpectedSuccess = <span class="built_in">getattr</span>(result, <span class="string">&#x27;addUnexpectedSuccess&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> addUnexpectedSuccess <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            addUnexpectedSuccess(self)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            warnings.warn(<span class="string">&quot;TestResult has no addUnexpectedSuccess method, reporting as failures&quot;</span>,</span><br><span class="line">                          RuntimeWarning)</span><br><span class="line">            result.addFailure(self, sys.exc_info())</span><br><span class="line">    <span class="keyword">except</span> SkipTest <span class="keyword">as</span> e:</span><br><span class="line">        self._addSkip(result, <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result.addError(self, sys.exc_info())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        success = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.tearDown()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result.addError(self, sys.exc_info())</span><br><span class="line">        success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">cleanUpSuccess = self.doCleanups()</span><br><span class="line">success = success <span class="keyword">and</span> cleanUpSuccess</span><br><span class="line"><span class="keyword">if</span> success:</span><br><span class="line">    result.addSuccess(self)</span><br></pre></td></tr></table></figure>

<p>如果是setup部分没有报错或异常，则执行我们的testMethod方法（即我们写的具体的用例方法，以test开头），接下来的代码都是处理异常，else部分是如果没有异常则把success标识置为true，表示用例执行通过，然后执行tearDown部分的代码，如果tearDown部分遇到异常了，success标识又置为false。</p>
<p><strong>第三部分：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    result.stopTest(self)</span><br><span class="line">    <span class="keyword">if</span> orig_result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        stopTestRun = <span class="built_in">getattr</span>(result, <span class="string">&#x27;stopTestRun&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stopTestRun <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            stopTestRun()</span><br></pre></td></tr></table></figure>

<p>执行result的stopTest和stopTestRun方法（如果有）<br>至此，run方法分析完成了。</p>
<p>上面我们介绍了run方法，那又是什么时候会调用run方法呢，再看TestCase的类里面方法，发现有一个<strong>call</strong>魔术方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwds</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.run(*args, **kwds)</span><br></pre></td></tr></table></figure>

<p>会去调我们的run方法（如果不太明白call方法是如何使用的，请百度一下）,这就让我们知道肯定有一个地方调用了类似这样一个方法(以上面的例子为例)：TestCase(‘testAddUser’)(result)，这就是我的下一篇分析unittest之TestSuite类说明要讲的内容了</p>
<p>我们根据上面的分析可以来举一个列子来试验一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testAddUser</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;add a user&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testDelUser</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;delete a user&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = unittest.TextTestResult(sys.stdout,<span class="string">&#x27;test result&#x27;</span>,<span class="number">1</span>) <span class="comment">#初始化TextTestResult类实例</span></span><br><span class="line">    testcase = UserCase(<span class="string">&#x27;testAddUser&#x27;</span>)  <span class="comment">#初始化UserCase类实例</span></span><br><span class="line">    testcase(result) <span class="comment">#跟testcase.run(result)的结果是一样的,我们只需要传入一个result对象即可</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\PythonWorkSpace&gt;python test.py</span><br><span class="line">add a user</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">E:\PythonWorkSpace&gt;</span><br></pre></td></tr></table></figure>

<p>可以运行成功，说明跟我们的分析一直，我们可以直接通过TestCase的run方法运行我们的用例，或者用过它的<strong>call</strong>魔术方法也是可以的，即上面例子中的testcase(result)就是通过此魔术方法去调用的run方法。</p>
<h3 id="TestFixure"><a href="#TestFixure" class="headerlink" title="TestFixure"></a>TestFixure</h3><p>我们可以把TestFixture看作夹心饼干外层的两片饼干，这两片饼干就是setUp/tearDown，中间的奶油就是测试用例。除此之外，unittest还提供了更大范围的Fixture，如测试类、测试模块的Fixture。</p>
<p><strong>用例级别 setUp/tearDown</strong></p>
<ul>
<li>setUp：测试用例开始前执行（以一条测试用例为单位）</li>
<li>tearDown：测试用例结束时执行（以一条测试用例为单位）</li>
</ul>
<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试用例开始前执行(以一条测试用例为单位)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test case start&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试用例结束时执行(以一条测试用例为单位)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test case end&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>类级别 setUpClass/tearDownClass</strong></p>
<ul>
<li>setUpClass：测试用例类开始前执行</li>
<li>tearDownClass：测试用例类结束时执行</li>
</ul>
<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试用例类开始前执行</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test class start&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试用例类结束时执行</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test class end&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>@classmethod 是一个函数修饰符，它表示接下来的是一个类方法，而对于平常我们见到的则叫做实例方法。类方法的第一个参数cls，而实例方法的第一个参数为self，表示该类的一个实例。</p>
<p>@classmethod 不需要self参数，但第一个参数需要表示自身类的cls参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="comment"># random Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fromBirthYear</span>(<span class="params">cls, name, birthYear</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(name, date.today().year - birthYear)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&quot;&#x27;s age is: &quot;</span> + <span class="built_in">str</span>(self.age))</span><br><span class="line"></span><br><span class="line">person = Person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">person.display()</span><br><span class="line"></span><br><span class="line">person1 = Person.fromBirthYear(<span class="string">&#x27;John&#x27;</span>,  <span class="number">1985</span>)</span><br><span class="line">person1.display()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Adam<span class="string">&#x27;s age is: 19</span></span><br><span class="line"><span class="string">John&#x27;</span>s age <span class="keyword">is</span>: <span class="number">31</span></span><br></pre></td></tr></table></figure>

<p>在这里，我们有两个类实例创建者，一个构造函数和一个<code>fromBirthYear</code>方法。</p>
<p>构造函数接受普通参数 名称 和 年龄. 同时，<code>fromBirthYear</code>需要班级, 名称 和 出生年, 通过用当前年份减去当前年龄来计算当前年龄并返回类实例。</p>
<p>fromBirthYear 方法将 Person 类（不是 Person 对象）作为第一个参数 类并通过调用返回构造函数<code>cls(name, date.today().year - birthYear)</code>，相当于<code>Person(name, date.today().year - birthYear)</code></p>
<p>在方法之前，我们看到<code>@classmethod</code>. 这称为用于转换为类方法的<a href="https://www.programiz.com/python-programming/decorator">装饰器</a>。<code>fromBirthYear``classmethod()</code></p>
<p><strong>模块级别 setUpModule/tearDownModule</strong></p>
<ul>
<li>setUpModule：整个模块开始前执行</li>
<li>tearDownModule：整个模块结束时执行</li>
</ul>
<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整个模块开始前执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUpModule</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test module start&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 整个模块结束时执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDownModule</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test module end&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个模块开始前执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUpModule</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模块级别开始 test module start&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 整个模块结束时执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDownModule</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模块级别结束 test module end&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 测试用例类开始前执行</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类级别开始 test class start&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 测试用例类结束时执行</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类级别结束 test claass end&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 测试用例开始前执行（以一条测试用例为单位）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例级别开始 test case start&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 测试用例结束时执行（以一条测试用例为单位）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用例级别结束 test case end&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case_001</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例1&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case_002</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例2&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块级别开始 test module start类级别开始 test class start用例级别开始 test case start测试用例1用例级别结束 test case end.用例级别开始 test case start测试用例2用例级别结束 test case end.类级别结束 test claass end模块级别结束 test module end----------------------------------------------------------------------Ran 2 tests in 0.000sOK</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>1、setUpModule/tearDownModule：在整个模块的开始与结束时被执行。</li>
<li>2、setUpClass/tearDownClass ：在测试类的开始与结束时被执行。</li>
<li>3、setUp/tearDown ： 在测试用例的开始与结束被执行。</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>4、setUpClass/tearDownClass 为类方法，需要通过@classmethod 进行装饰，另外方法的参数为cls，cls和self没有本质上的区别，都只表示方法的第一个参数。</li>
<li>5、使用场景，比如WEB自动化，浏览器初始化工作，可以使用。接口自动化需要登录的接口，然后拿到token等等令牌可以使用。</li>
<li>6、六个条件都是非必要条件，如果没有可以使用pass 占位符即可。</li>
</ul>
<h3 id="TestRunner执行测试"><a href="#TestRunner执行测试" class="headerlink" title="TestRunner执行测试"></a>TestRunner执行测试</h3><p>不知道如何翻译这个单词才好，我就叫它文本类测试用例运行器吧，大概就这个意思。</p>
<p>通过前两篇对TestCase和TestSuite类的详解，我们都知道他们都有一个自己的run方法，其实我们可以直接调用他们各自的run方法就可以执行我们的测试用例或测试集了，我们只需要初始化一个TestResult类或者其子类的实例传入到第一个参数即可，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sysimport unittestclass UserCase(unittest.TestCase):    <span class="function"><span class="keyword">def</span> <span class="title">testAddUser</span>(<span class="params">self</span>):</span>        <span class="built_in">print</span>(<span class="string">&quot;add a user&quot;</span>)    <span class="function"><span class="keyword">def</span> <span class="title">testDelUser</span>(<span class="params">self</span>):</span>        <span class="built_in">print</span>(<span class="string">&quot;delete a user&quot;</span>)<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    result = unittest.TextTestResult(sys.stdout,<span class="string">&#x27;test result&#x27;</span>,<span class="number">1</span>)    testcase = UserCase(<span class="string">&#x27;testAddUser&#x27;</span>)    testcase.run(result)    <span class="comment">#我们只需要传入一个result对象即可</span></span><br></pre></td></tr></table></figure>

<p>那何必还需要一个TextTestRunner类呢，个人觉得主要是为了控制测试结果的输出，为什么这么说呢，大家可以自己动手实践一下，对比一下直接使用TestCase的run方法运行后的结果和通过TextTestRunner的run方法运行的结果输出有什么不同。扩展HTMLTestRunner大神，其扩展的主要也就是TestRunner部分（当然还有扩展TestResult）使其结果输出为HTML的报告，所以想要自定义的控制测试结果（即result）的输出，可以从扩展TestRunner这里入手。</p>
<p>我们先来看一下我们自己写代码时用TextTestRunner是怎么去执行用例的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittestclass UserCase(unittest.TestCase):    <span class="function"><span class="keyword">def</span> <span class="title">testAddUser</span>(<span class="params">self</span>):</span>        <span class="built_in">print</span>(<span class="string">&quot;add a user&quot;</span>)    <span class="function"><span class="keyword">def</span> <span class="title">testDelUser</span>(<span class="params">self</span>):</span>        <span class="built_in">print</span>(<span class="string">&quot;delete a user&quot;</span>)<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    runner = unittest.TextTestRunner()    suite = unittest.TestSuite(<span class="built_in">map</span>(UserCase,[<span class="string">&#x27;testAddUser&#x27;</span>,<span class="string">&#x27;testDelUser&#x27;</span>]))    case = UserCase(<span class="string">&#x27;testAddUser&#x27;</span>)    runner.run(suite)    runner.run(case)</span><br></pre></td></tr></table></figure>

<p>从代码里面可以看到我们是通过TextTestRunner类实例的run方法去执行的用例或用例集。下面我们来分析一下run方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, test</span>):</span>    <span class="string">&quot;Run the given test case or test suite.&quot;</span>    result = self._makeResult()    registerResult(result)    result.failfast = self.failfast    result.buffer = self.buffer    startTime = time.time()    startTestRun = <span class="built_in">getattr</span>(result, <span class="string">&#x27;startTestRun&#x27;</span>, <span class="literal">None</span>)    <span class="keyword">if</span> startTestRun <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:        startTestRun()    <span class="keyword">try</span>:        test(result)    <span class="keyword">finally</span>:        stopTestRun = <span class="built_in">getattr</span>(result, <span class="string">&#x27;stopTestRun&#x27;</span>, <span class="literal">None</span>)        <span class="keyword">if</span> stopTestRun <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:            stopTestRun()    stopTime = time.time()    timeTaken = stopTime - startTime    result.printErrors()    <span class="keyword">if</span> <span class="built_in">hasattr</span>(result, <span class="string">&#x27;separator2&#x27;</span>):        self.stream.writeln(result.separator2)    run = result.testsRun    self.stream.writeln(<span class="string">&quot;Ran %d test%s in %.3fs&quot;</span> %                        (run, run != <span class="number">1</span> <span class="keyword">and</span> <span class="string">&quot;s&quot;</span> <span class="keyword">or</span> <span class="string">&quot;&quot;</span>, timeTaken))    self.stream.writeln()    expectedFails = unexpectedSuccesses = skipped = <span class="number">0</span>    <span class="keyword">try</span>:        results = <span class="built_in">map</span>(<span class="built_in">len</span>, (result.expectedFailures,                            result.unexpectedSuccesses,                            result.skipped))    <span class="keyword">except</span> AttributeError:        <span class="keyword">pass</span>    <span class="keyword">else</span>:        expectedFails, unexpectedSuccesses, skipped = results    infos = []    <span class="keyword">if</span> <span class="keyword">not</span> result.wasSuccessful():        self.stream.write(<span class="string">&quot;FAILED&quot;</span>)        failed, errored = <span class="built_in">map</span>(<span class="built_in">len</span>, (result.failures, result.errors))        <span class="keyword">if</span> failed:            infos.append(<span class="string">&quot;failures=%d&quot;</span> % failed)        <span class="keyword">if</span> errored:            infos.append(<span class="string">&quot;errors=%d&quot;</span> % errored)    <span class="keyword">else</span>:        self.stream.write(<span class="string">&quot;OK&quot;</span>)    <span class="keyword">if</span> skipped:        infos.append(<span class="string">&quot;skipped=%d&quot;</span> % skipped)    <span class="keyword">if</span> expectedFails:        infos.append(<span class="string">&quot;expected failures=%d&quot;</span> % expectedFails)    <span class="keyword">if</span> unexpectedSuccesses:        infos.append(<span class="string">&quot;unexpected successes=%d&quot;</span> % unexpectedSuccesses)    <span class="keyword">if</span> infos:        self.stream.writeln(<span class="string">&quot; (%s)&quot;</span> % (<span class="string">&quot;, &quot;</span>.join(infos),))    <span class="keyword">else</span>:        self.stream.write(<span class="string">&quot;\n&quot;</span>)    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>其实这么长一段的代码，最重要的一行代码是：test(result)，其中test是我们传入的TestCase类的实例或TestSuite类的实例，所以这句代码最终调用的就是TestCase类的run方法或TestSuite类的run方法，而这两个run方法就在我前两篇文章分析的内容里面，忘记的朋友可以回到前面再去阅读一番。</p>
<p>对于其他部分的代码，分析起来就太多了，基本都是处理result的内容（即测试结果数据的处理），这里也暂时不做详细的分析了</p>
<h3 id="TestReport测试报告"><a href="#TestReport测试报告" class="headerlink" title="TestReport测试报告"></a>TestReport测试报告</h3><p>可点击下载<a href="../download/pdf/HTMLTestRunner.py">HTMLTestRunner.py</a></p>
<blockquote>
<p>参考 <a href="https://blog.csdn.net/chenmozhe22/article/details/96902079?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">Python测试框架Pytest—–Fixture函数详解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>《葬》观后感</title>
    <url>/2021/12/12/%E3%80%8A%E8%91%AC%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>《葬》观后感</p>
<blockquote>
<p>本片讲述了一个农村老太太在70岁大寿的时候，想让自己多年不见的儿子和小孙子回家，结果通知了两个儿子都没人回来，老太太就联合自己的女儿来了一场假死闹剧，结果两个儿子回家，一个着急走，一个急着分家产，这让老人伤透了心，而小孙子很孝顺却意外导致了老人的死亡。小孙子在奶奶死后也喜欢上了戏曲，但是小峰的妈妈却极力反对，看到戏曲的没落和家庭矛盾愈演愈烈，小孙子的情感和愿望也在不断被压制…….</p>
</blockquote>
<p>在B站偶然刷到了这部节选影片，可以看出来导演想要表达的东西有很多，通过大量对比的手法呈现给观众，可惜只有30分钟的影片无法承载这么大的内容，导致了影片讲述内容出现了杂而多的情况。什么都想讲，但又好像什么都没有讲，这也造成了影片中心思想没有突出的展示。</p>
<span id="more"></span>

<p>影片刚开始是家庭的破碎，妻子坐在屋内，丈夫将手中的离婚协议书撕碎，小峰穿过两人。这里可以看出，家庭出现了问题，一家三口都是独立的个体。妻子想要离婚，结束这段痛苦的过程，小峰没有支持谁，也没有反对，而是默然走过，像是许可了一切。丈夫从后面可以知道，他还有另外一个家庭，这也是妻子想要离婚的根本原因。但是为什么要撕碎离婚协议书呢？难道是为了面子吗？因为在后面可以看出他逃出农村后事业有成，可能是不想被人抓住把柄。</p>
<p>接着就是他们奔丧路上的桥段。小峰带上耳机没有听父亲放的戏曲，代表了他不喜欢戏曲文化，也体现了他对亲情的冷漠。小峰妈妈给丈夫喂香蕉，是否可以看出她其实不想离婚，还想维持这个家庭，离婚协议书也是无奈之举，不过丈夫并没有吃。这与之前撕碎离婚协议书形成了对比，与人物矛盾。小峰与家庭的矛盾，妻子与丈夫的矛盾。这里影片还没有说小峰与家庭的矛盾是什么，这也算是一条暗线。</p>
<p>回到农村后，从帮弟弟看车可以看出哥哥的虚荣心，很好的体现了小农村人民的市侩。当然这样的对比也在后面弟弟出钱准备丧事，哥哥想赚丧葬费有所体现。</p>
<p>当兄妹三人商讨丧葬事宜的时候，弟弟想的是尽快下葬，哥哥想的是丧葬要隆重，姐姐想的是不要通知村里人，先商讨清楚丧葬事情。这里可以看出他们兄妹三人的家庭观念也是各行其道，在家庭中每个人也是一个独立的个体，与小峰的小家庭呈现了映照。</p>
<p>弟弟想要尽快下葬，从之前看到母亲灵体哭丧而被工作电话打断可以看出，他对这个农村家庭其实是没有多少留念的，可以说他的下跪是给家人们看的，也可以说他是给这个社会看的，给他自己看的，想要维持这份表面上的礼，就像他撕碎了离婚协议书一样。影片中弟弟哭丧与电话中的欢喜的彩铃是导演做的众多戏剧冲突的一个，荒诞却又那么的现实。</p>
<p>哥哥想要举办隆重的葬礼，是为了能多捞丧葬费，这个不难看出。从开头的虚荣心，到之后的串通桑队，再到分房，以及奶奶口中的话也有体现。</p>
<p>不过姐姐这个人物个人认为没有表现得很到位，不知道是不是影片时长的原因。从开头与她娘设计让兄弟二人回家，到后来给她妈宽心多想想自己的好孙子。都体现出她想推动这个家的团结，或者说想要完成妈妈的心愿。当他们三人在屋外商讨丧葬事宜的时候，不通知乡里乡亲，也不下葬就表明了这次死亡有问题，当然至亲之人的去世，她脸上没有什么悲伤的情绪也可以说明此问题。</p>
<p>小峰对着奶奶的遗体认真的磕头，那种单纯与他的爸爸叔叔形成了对比。之后小峰找到了儿时青梅，双方的腼腆，话语间能说的只有儿时的回忆展现了她们之间已经山海相隔。</p>
<p>那句“你喜欢他吗？”</p>
<p>圆圆回答的却是</p>
<p>“他在镇上修车一个月不少赚呢！”</p>
<p>以及“22岁才刚大学毕业，还要找工作”</p>
<p>道出了农村的婚姻观念，与小峰向往的婚姻自由。回到农村的小峰熟悉的也只有儿时的记忆，从问路，到聊过去，再到在奶奶灵堂前说想回到小时候，一切已是物是人非。</p>
<p>影片的高潮在于小峰“误将”棺材盖盖而憋死了奶奶，其实当他为奶奶擦泪的时候已经就明白了奶奶假死，而奶奶假戏真做也说明了真心求死的心。不过这点其实我不能有所共鸣，很多人其实不太能理解，就算亲人真的想求死，但我们真的能下得去手吗，何况是这个世界上对自己最好的人？</p>
<p>当超现实中奶奶为小峰再唱一曲，与小峰最后的一抹微笑，像是体现两人的解脱。</p>
<p>农村的艳舞桥段，兄妹三人灵堂后打牌的桥段，小峰最后对葬礼上戏曲的痴迷，也诠释了他的单纯的心。说姐姐这个角色没有体现好是因为，后面出现了灵堂打牌，没有把弟妹当一家人。似乎她也不是很在乎，与之前为妈设计有冲突。如果往黑暗的一面想，她或许也是想分一份家产。</p>
<p>最让我震撼的是小峰最后在黄昏唱着《小苍娃》，戏曲声音哀婉动人。但圆圆却在坟前跳着现代舞曲，能看出来他们中有一个人不是真的在。也许圆圆是假的，代表了小峰怀念的圆圆，他走上了戏曲的道路，但没必要放着现代舞曲。或许小峰是假的，或者说他已经不在了，但圆圆也没必要在坟前跳舞吧。</p>
<p>小峰向往的自由与理想，在家人面前格格不入，与《月亮与六便士》有异曲同工之处。追求理想的过程中需要放弃一些重要的东西。我妈在看完这部短片后，也和小峰妈妈一样说不该学戏曲。</p>
<p>人生的理想到底该由社会决定，还是由我们自己呢？我会努力最求后者。</p>
<p>尽管30分钟的影片确实因为想要表达的内容太多而导致内容杂碎了，但也不失这是一部很好的影片，期待这部电影长片以及导演的其他作品。</p>
<p><img src="1.png"></p>
<p><small>2021.12.12 国家图书馆</small></p>
</br>

<p>导演剧情解析</p>
<blockquote>
<p>本片通过一场看似荒诞的农村闹剧映射出农村和城市在文化思想、家庭教育与家庭矛盾处理等等问题上的巨大差异，从而引发对目前社会结构的溯源与反思。影片用黑色幽默的方式讲述老人假死后，所有人为了自己的利益而慢慢裸露的人心。影片主人公小孙子从小是奶奶带大的，他的青春懵懂和纯真、对于农村淳朴的向往、对儿时玩伴的情窦初开、奶奶的思念以及在奶奶死后慢慢开始热爱的戏曲，都随着这场葬礼给埋葬了。压抑的家庭氛围下，每个人都在伪装自己，在看似光鲜亮丽的背后都是伤痕累累。小孙子的生活是沉重的，他一直活在家庭的“面子”里，他渴望自由想率性而活，结果生活让他疲惫不堪，埋葬的不只是乡愁还有人心。</p>
</blockquote>
</br>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="https://www.bilibili.com/video/BV1Lg411N7YV"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>

]]></content>
      <categories>
        <category>佳片分享</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>七月</title>
    <url>/2021/10/13/%E4%B8%83%E6%9C%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>　　七月流火，九月授衣。一之日觱发，二之日栗烈。无衣无褐，何以卒岁。三之日于耜，四之日举趾。同我妇子，馌彼南亩，田畯至喜。</p>
<p>　　七月流火，九月授衣。春日载阳，有鸣仓庚。女执懿筐，遵彼微行，爰求柔桑。春日迟迟，采蘩祁祁。女心伤悲，殆及公子同归。</p>
<p>　　七月流火，八月萑苇。蚕月条桑，取彼斧斨，以伐远扬，猗彼女桑。七月鸣鵙，八月载绩。载玄载黄，我朱孔阳，为公子裳。</p>
<span id="more"></span>

<p>　　四月秀葽，五月鸣蜩。八月其获，十月陨萚。一之日于貉，取彼狐狸，为公子裘。二之日其同，载缵武功，言私其豵，献豜于公。</p>
<p>　　五月斯螽动股，六月莎鸡振羽，七月在野，八月在宇，九月在户，十月蟋蟀入我床下。穹窒熏鼠，塞向墐户。嗟我妇子，曰为改岁，入此室处。</p>
<p>　　六月食郁及薁，七月亨葵及菽，八月剥枣，十月获稻，为此春酒，以介眉寿。七月食瓜，八月断壶，九月叔苴，采荼薪樗，食我农夫。</p>
<p>　　九月筑场圃，十月纳禾稼。黍稷重穋，禾麻菽麦。嗟我农夫，我稼既同，上入执宫功。昼尔于茅，宵尔索綯。亟其乘屋，其始播百谷。</p>
<p>　　二之日凿冰冲冲，三之日纳于凌阴。四之日其蚤，献羔祭韭。九月肃霜，十月涤场。朋酒斯飨，曰杀羔羊。跻彼公堂，称彼兕觥，万寿无疆。</p>
<hr>
<p><strong>豳风</strong>1<strong>·七月</strong></p>
<p>七月流火2，九月授衣3。一之日觱发4，二之日栗烈5。无衣无褐6，何以卒岁7。三之日于耜8，四之日举趾9。同我妇子10，馌彼南亩11，田畯至喜12。</p>
<blockquote>
<ol>
<li>豳（bīn）风：《诗经》十五国风之一，共七篇。豳：古邑名，在今陕西旬邑、彬县一带。</li>
<li>七月流火：火：或称大火，星名，即心宿。流：流动。每年夏历五月，黄昏时候，这星当正南方，也就是正中和最高的位置。过了六月就偏西向下了，这就叫做“流”。</li>
<li>授衣：将裁制冬衣的工作交给女工。九月丝麻等事结束，所以在这时开始做冬衣。</li>
<li>一之日：十月以后第一个月的日子。为豳历纪日法。觱（bì）发：大风触物声。</li>
<li>栗烈：或作“凛冽”，形容气寒。</li>
<li>褐：粗布衣。</li>
<li>卒岁：终岁。</li>
<li>于耜（sì）：修理耒耜（耕田起土之具）。于：犹“为”。</li>
<li>举趾：举脚而耕。趾：足。</li>
<li>妇子：妻子和小孩。</li>
<li>馌（yè）：馈送食物。亩：指田身。田耕成若干垄，高处为亩，低处为畎。田垄东西向的叫做“东亩”，南北向的叫做“南亩”。</li>
<li>田畯（jùn）：农官名，又称农正或田大夫。</li>
</ol>
</blockquote>
<p>七月流火，九月授衣。春日载阳13，有鸣仓庚14。女执懿筐15，遵彼微行16，爰求柔桑17。春日迟迟18，采蘩祁祁19。女心伤悲，殆及公子同归20。</p>
<blockquote>
<ol start="13">
<li>春日：指二月。载：始。阳：温暖。</li>
<li>仓庚：鸟名，就是黄莺。</li>
<li>懿（yì）：深。</li>
<li>微行：小径，小路。</li>
<li>爰（yuán）：语词，犹“曰”。柔桑：初生的桑叶。</li>
<li>迟迟：天长的意思。</li>
<li>蘩（fán）：菊科植物，即白蒿。古人用于祭祀，女子在嫁前有“教成之祭”。一说用蘩“沃”蚕子，则蚕易出，所以养蚕者需要它。其法未详。祁祁：众多（指采蘩者）。</li>
<li>殆及公子同归：是说怕被公子强迫带回家去。一说指怕被女公子带去陪嫁。公子，指国君之子。</li>
</ol>
</blockquote>
<p>七月流火，八月萑苇21。蚕月条桑22，取彼斧斨23，以伐远扬24，猗彼女桑25。七月鸣鵙26，八月载绩。载玄载黄27，我朱孔阳28，为公子裳。</p>
<blockquote>
<ol start="21">
<li>萑（huán）苇：芦苇。八月萑苇长成，收割下来，可以做箔。</li>
<li>蚕月：指夏历三月。条桑：修剪桑树。</li>
<li>斨（qiāng）：方孔的斧头。</li>
<li>远扬：指长得太长而高扬的枝条。</li>
<li>猗（yǐ）：《说文》《广雅》作“掎”（jǐ），牵引。“掎桑”是用手拉着桑枝来采叶。南朝乐府诗《采桑度》云：“系条采春桑，采叶何纷纷”，似先用绳系桑然后拉着绳子采。女桑：小桑。</li>
<li>鵙（jú）：鸟名，即伯劳。</li>
<li>玄：黑而赤的颜色。玄、黄指丝织品与麻织品的染色。</li>
<li>朱：赤色。阳：鲜明。</li>
</ol>
</blockquote>
<p>四月秀葽29，五月鸣蜩30。八月其获，十月陨萚31。一之日于貉32，取彼狐狸，为公子裘。二之日其同33，载缵武功34，言私其豵35，献豜于公36。</p>
<blockquote>
<ol start="29">
<li>秀葽（yāo）：言远志结实。葽：植物名，今名远志。</li>
<li>蜩（tiáo）：蝉。</li>
<li>陨萚（tuò）：落叶。</li>
<li>于貉：《郑笺》：“于貉，往博貉以自为裘也。”貉（hé）：哺乳动物。外貌像狐狸，昼伏夜出。 </li>
<li>同：聚合，言狩猎之前聚合众人。</li>
<li>缵（zuǎn）：继续。武功：指田猎。</li>
<li>私其豵（zōng） [9] ：言小兽归猎者私有。豵：一岁小猪，这里用来代表比较小的兽。</li>
<li>豜（jiān）：三岁的猪，代表大兽。大兽献给公家。</li>
</ol>
</blockquote>
<p>五月斯螽动股37，六月莎鸡振羽38，七月在野，八月在宇，九月在户，十月蟋蟀入我床下。穹窒熏鼠39，塞向墐户40。嗟我妇子，曰为改岁41，入此室处。</p>
<blockquote>
<ol start="37">
<li>斯螽（zhōng）：虫名，蝗类，即蚱蜢、蚂蚱。动股：言斯螽发出鸣声。旧说斯螽以两股相切发声。</li>
<li>莎鸡：虫名，今名纺织娘。振羽：言鼓翅发声。</li>
<li>穹窒（zhì）：言将室内满塞的角落搬空，搬空了才便于熏鼠。穹：穷尽，清除；一说空隙。窒：堵塞。</li>
<li>向：朝北的窗户。墐（jìn）：用泥涂抹。贫家门扇用柴竹编成，涂泥使它不通风。</li>
<li>曰：《汉书》引作“聿”，语词。改岁：旧年将尽，新年快到。</li>
</ol>
</blockquote>
<p>六月食郁及薁42，七月亨葵及菽43，八月剥枣44，十月获稻，为此春酒45，以介眉寿46。七月食瓜，八月断壶47，九月叔苴48，采荼薪樗49，食我农夫。</p>
<blockquote>
<ol start="42">
<li>郁：植物名，唐棣之类。树高五六尺，果实像李子，赤色。薁（yù）：植物名，果实大如桂圆。一说为野葡萄。</li>
<li>菽（shū）：豆的总名。</li>
<li>剥（pū）：通“扑”，打，击。</li>
<li>春酒：冬天酿酒经春始成，叫做“春酒”。枣和稻都是酿酒的原料。</li>
<li>介：祈求。眉寿：长寿，人老眉间有豪毛，叫秀眉，所以长寿称眉寿。</li>
<li>壶：葫芦。</li>
<li>叔：拾。苴（jū）：秋麻之籽，可以吃。</li>
<li>荼（tú）：菜名，即苦菜。 [11] 薪樗（chū）：言采樗木为薪。樗：木名，臭椿。</li>
</ol>
</blockquote>
<p>九月筑场圃50，十月纳禾稼51。黍稷重穋52，禾麻菽麦53。嗟我农夫，我稼既同，上入执宫功54。昼尔于茅，宵尔索绹55。亟其乘屋56，其始播百谷。</p>
<blockquote>
<ol start="50">
<li>场：打谷的场地。圃：菜园。春夏做菜园的地方秋冬就做成场地，所以场圃连成一词。</li>
<li>纳：收进谷仓。稼：古读如“故”。禾稼：谷类通称。</li>
<li>重（tóng） [12] ：即“穜”，是先种后熟的谷。穋（lù）：即“稑”（lù），稑是后种先熟的谷。</li>
<li>禾：此处专指一种谷，即今之小米。</li>
<li>宫功：指建筑宫室，或指室内的事。功：事。</li>
<li>索绹（táo）：打绳子。索：动词，指制绳。绹：绳索。</li>
<li>亟：急。乘屋：盖屋。茅和绳都是盖屋需用的东西。</li>
</ol>
</blockquote>
<p>二之日凿冰冲冲57，三之日纳于凌阴58。四之日其蚤59，献羔祭韭60。九月肃霜61，十月涤场62。朋酒斯飨63，曰杀羔羊。跻彼公堂64，称彼兕觥65，万寿无疆66。</p>
<blockquote>
<ol start="57">
<li>冲冲：凿冰之声。</li>
<li>凌：指聚集的水。阴：指藏冰之处。</li>
<li>蚤：取。一说通“早”，古代的一种祭祖仪式。</li>
<li>献羔祭韭：用羔羊和韭菜祭祖。《礼记·月令》说仲春献羔开冰，四之日正是仲春。</li>
<li>肃霜：犹“肃爽”，深秋清凉的样子。</li>
<li>涤场：清扫场地。一说即“涤荡”，草木摇落无余。</li>
<li>朋酒：两樽酒。</li>
<li>跻（jī）：登。公堂：或指公共场所，不一定是国君的朝堂。</li>
<li>称：举起。兕（sì）觥（gōng）：角爵。古代用兽角做的酒器。</li>
<li>万：大。无疆：无穷。</li>
</ol>
</blockquote>
<hr>
<center>
七月

<p>先秦-诗经</p>
<ul>
<li>七月流火，九月授衣。</br><br><strong>七月大火向西落，九月妇女缝寒衣。</strong></br><br>一之日觱发，二之日栗烈。<br><br><strong>十一月北风劲吹，十二月寒气袭人。</strong></br><br>无衣无褐，何以卒岁。</br><br><strong>没有好衣没粗衣，怎么度过这年底？</strong></br><br>三之日于耜，四之日举趾。</br><br><strong>正月开始修锄犁，二月下地去耕种。</strong></br><br>同我妇子，馌彼南亩。</br><br><strong>带着妻儿一同去，把饭送到向阳的土地上去。</strong></br><br>田畯至喜。</br><br><strong>田官十分高兴。</strong></br><br>七月流火，九月授衣。</br><br><strong>七月大火向西落，九月妇女缝寒衣。</strong></br><br>春日载阳，有鸣仓庚。</br><br><strong>春天阳光暖融融，黄鹂婉转唱着歌。</strong></br><br>女执懿筐，遵彼微行，爰求柔桑。</br><br><strong>姑娘提着深竹筐，一路沿着小道走，伸手采摘嫩桑叶。</strong></br><br>春日迟迟，采蘩祁祁。</br><br><strong>春来日子渐渐长，人来人往采白蒿。</strong></br><br>女心伤悲，殆及公子同归。</br><br><strong>姑娘心中好伤悲，害怕要随贵人嫁他乡。</strong></br><br>七月流火，八月萑苇。</br><br><strong>七月大火向西落，八月要把芦苇割。</strong></br><br>蚕月条桑，取彼斧斨，以伐远扬，猗彼女桑。</br><br><strong>三月修剪桑树枝，取来锋利的斧头，砍掉高高长枝条，攀着细枝摘嫩桑。</strong></br><br>七月鸣鵙，八月载绩。</br><br><strong>七月伯劳声声叫，八月开始把麻织。</strong></br><br>载玄载黄，我朱孔阳，为公子裳。</br><br><strong>染丝有黑又有黄，我的红色更鲜亮，献给贵人做衣裳。</strong></br><br>四月秀葽，五月鸣蜩。</br><br><strong>四月远志结了籽，五月知了阵阵叫。</strong></br><br>八月其获，十月陨箨。</br><br><strong>八月田间收获忙，十月树上叶子落。</strong></br><br>一之日于貉，取彼狐狸，为公子裘。</br><br><strong>十一月上山猎貉，猎取狐狸皮毛好，送给贵人做皮袄。</strong></br><br>二之日其同，载缵武功，言私其豵，献豜于公。</br><br><strong>十二月猎人会合，继续操练打猎功，打到小猪归自己，猎到大猪献王公。</strong></br><br>五月斯螽动股，六月莎鸡振羽。</br><br><strong>五月蚱蜢弹腿叫，六月纺织娘振翅。</strong></br><br>七月在野，八月在宇。</br><br><strong>七月蟋蟀在田野，八月来到屋檐下。</strong></br><br>九月在户，十月蟋蟀入我床下。</br><br><strong>九月蟋蟀进门口，十月钻进我床下。</strong></br><br>穹窒熏鼠，塞向墐户。</br><br><strong>堵塞鼠洞熏老鼠，封好北窗糊门缝。</strong></br><br>嗟我妇子，曰为改岁，入此室处。</br><br><strong>叹我妻儿好可怜，岁末将过新年到，迁入这屋把身安。</strong></br><br>六月食郁及薁，七月亨葵及菽。</br><br><strong>六月食李和葡萄，七月煮葵又煮豆。</strong></br><br>八月剥枣，十月获稻。</br><br><strong>八月开始打红枣，十月下田收稻谷。</strong></br><br>为此春酒，以介眉寿。</br><br><strong>酿成春酒美又香，为了主人求长寿。</strong></br><br>七月食瓜，八月断壶，九月叔苴，采荼薪樗，食我农夫。</br><br><strong>七月里面可吃瓜，八月到来摘葫芦，九月拾起秋麻子，采摘苦菜又砍柴，养活农夫把心安。</strong></br><br>九月筑场圃，十月纳禾稼。</br><br><strong>九月修筑打谷场，十月庄稼收进仓。</strong></br><br>黍稷重穋，禾麻菽麦。</br><br><strong>黍稷早稻和晚稻，粟麻豆麦全入仓。</strong></br><br>嗟我农夫，我稼既同，上入执宫功。</br><br><strong>叹我农夫真辛苦，庄稼刚好收拾完，又为官家筑宫室。</strong></br><br>昼尔于茅，宵尔索綯。</br><br><strong>白天要去割茅草，夜里赶着搓绳索。</strong></br><br>亟其乘屋，其始播百谷。</br><br><strong>赶紧上房修好屋，开春还得种百谷。</strong></br><br>二之日凿冰冲冲，三之日纳于凌阴。</br><br><strong>十二月凿冰冲冲，正月搬进冰窖中。</strong></br><br>四之日其蚤，献羔祭韭。</br><br><strong>二月开初祭祖先，献上韭菜和羊羔。</strong></br><br>九月肃霜，十月涤场。</br><br><strong>九月寒来始降霜，十月清扫打谷场。</strong></br><br>朋酒斯飨，曰杀羔羊。</br><br><strong>两槽美酒敬宾客，宰杀羊羔大家尝。</strong></br><br>跻彼公堂，称彼兕觥，万寿无疆。</br><br><strong>登上主人的庙堂，举杯共同敬主人，齐声高呼寿无疆。</strong></br></li>
</ul>
</center>

<hr>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="https://www.bilibili.com/video/BV1uv411G7s8"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>三体：死神永生</title>
    <url>/2021/11/06/%E4%B8%89%E4%BD%93-%E6%AD%BB%E7%A5%9E%E6%B0%B8%E7%94%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>他们都说程心很圣母，但想想她也是被人推上去的。</p>
<p>在最开始不过是一个PIA（星防御理事会战略情报局）的管理层。维德提出送大脑，程心确实是想到了云天明，毕竟是熟悉的人，所以能想到。</p>
<span id="more"></span>

<p>至于云天明对程心的暗恋，不论多感人，不过是感动自己，感动观众而已。被喜欢的人不会因“爱”而感动，这里的爱是爱情的爱，而不是一个人对自己好的情感的爱。</p>
<p>其实，我们都知道我们被云天明感动的，不过也是一个人对另一个人好，而另外一个人完全不当回事。换做现实生活中的自己又何尝不是！对一个不爱你的人来说，你所做的一切什么都不是。你做出了很大的牺牲，仅仅是感动了她一下而已，觉得有愧于你，但那也不是想和你在一起。</p>
<p>对于云天明来说，他不需要这个。对于那些喜欢别人而不被他人所爱的人来说，也不需要这种感动。</p>
<p>之后，在竞选了执剑人的时候，确实是人们选择了圣母的程心。因为人们看到了她的善良，人们需要这种温柔的美。因为罗辑是那个”暴君“，人们害怕他，和平的年代人们总会这样。想想确实很可笑，但书中人人类，是我们每一个人的缩影。像是无法摆脱的枷锁，像是一条无形的锁链，到那个时候人们就是会做出这样的事。</p>
<p>不过有一点，程心确实被冲昏了头。就是当所有人都觉得程心可以的时候，程心自己也把这个问题想的太过简单了。她在联合国抱着婴儿说自己要竞选执剑人的那一刻，真的是不能忘记，或许将成为是一个经典。</p>
<p>在她刚刚成为执剑人的那一刻，三体就发起了进攻，她丢掉了遥控器，她按不下去。这其实也是很多人觉得她圣母的时候。但我们并不是程心，我们没有站在程心所站的位置，也没有经历过程心所经历的一切。这也并不是给程心开脱什么，毕竟当她看到被入侵的那一刻，她没有履行自己的职责就不是一个好的执剑人了。但试想一下自己，是否又能在那一刻按下遥控器让所有地球人，三体人全部陪葬呢？</p>
<p>要知道，当你按下去的那一刻，可能三体会出于报复，对地球进行毁灭性的打击，或者惨无人道的杀戮，又或者地球人自己对程心的谴责等等。毕竟黑暗森林的打击没有那么快么。虽然说三体入侵后对人类的侵占也是很没有人道的，最后竟然让人们互相蚕食。</p>
<p>想象一下吧，你在单位、学校、家庭等各种场合的畏首畏尾真的可以承担这个大任吗？程心也不过是和我们一样的人。</p>
<p>不过可能程心对云天明的一直都是一种依靠，而非爱情吧。因为从送星星到三个故事，她的感动都不是那种我想和你在一起，而是一种很温暖的依靠的感觉。这一点也能在最后去他们的那颗星星上可以体现，她渴望见到他，那就是喜欢他吗？并不是，因为看到关一帆的时候，她也有那种依靠感，毕竟当时以为全人类都没有了嘛。</p>
<p>不过最后云天明和AA在一起了，也是什么伦理剧哈哈哈。公开暗恋我的人，竟然跟我最好的闺蜜在一起了。也算是挺好吧，书中的剧情永远没有现实生活中离谱。</p>
<p>云天明能放下程心，开始自己的生活就已经很不错了。</p>
<p>最后程心留下5公斤的生态球，书中为一个开放结局，到底有没有重启不得而知。这样感觉程心也是一个被动型人格的人，容易受到他人的观念所左右。</p>
<p>说了好的情感话题，其实第三部，死神永生真的很好看，上演了全人类的猜忌、生存大戏。真的是大为震撼，不过还是感觉大刘在这方面刻画的比较少，可能编剧不让过？不过他自己没怎么写过这样的内容吧。</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>一月小记</title>
    <url>/2022/01/25/%E4%B8%80%E6%9C%88%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今年1月真的是全新的开始。不得不说，如果你心情烦闷了，不如一个人去野外走走。如果你感到孤独了，不如叫个朋友陪你旅行。</p>
<p>这不1月1日新年初始，我就去了凤凰岭。毕竟新年爬山，步步高升嘛！</p>
<span id="more"></span>

<p><img src="1.jpeg" alt="凤凰岭"></p>
<p>之后8号，我在咸鱼认识了一位朋友。本以为交易完毕，再无交集，却发生了一些小“意外”，感觉这份友谊会因为这次“意外”走的更加长远。</p>
<p>刚开始见到他的时候，感觉挺帅气的，还是红发，还想着不会是“社会少年”吧？哈哈哈，尴尬</p>
<p>毕竟，让我白等了一个半小时，还以为是寻我开心。</p>
<p>（ps：他的手机铃声好像是《三天三夜》，还打不通，当时坐在汉堡王的我简直精神肉体双重折磨。）</p>
<p>他看起来比较毛躁，这点仅是对他自己而言。从刚开始认识他，把电脑放在不平的桌子上，挪动的时候还不小心碰了一下。到和他一起去看北京中轴线，当我们走在狭长的过道时，我提醒过他书包会剐蹭到墙壁，不过他好像并不以为然。感觉他有在意，又有点在旁人面前不好在意，又有那么点不在意的样子。</p>
<p>不过这样一个毛毛躁躁的人，对待他人却挺心细的。从退货的理由和礼物，到我拍照时会刻意走在我后面，再到吃辣子鸡时给我特意倒水而非倒酒，可以看出对待他人是一个很细心的家伙，会观察对方的言行。</p>
<p>（pps：不过喝酒这一点我要吐槽，就不能不那么在意谁的杯子比谁低嘛？让我有种拘束感，我又不是长辈。）</p>
<p>在那次交易完毕之后，我就和朋友去了朝阳公园滑冰。这我不得不夸赞下我自己的运动天赋（这文章应该没人看吧），我本来以为会摔倒无数次，结果下地就会滑了，而且滑的挺有样子，这里我要感谢下小时候滑旱冰摔跤而没放弃的自己。</p>
<p>之后的16号，我和他去了中轴线。因为15号突发奇想想看看即将开冬奥的鸟巢，所以大晚上去了奥体中心。正如他所说奥林匹克塔远远望去神圣而又给人安宁。那天晚上它散发着幽暗的紫光，与周围的建筑格格不入，看上去更像是外星文明。如果说周围的建筑是这个时代的产物，那么奥林匹克塔就是我想象中《三体》的巨树。</p>
<p><img src="2.jpeg"></p>
<p>我发现我现在有点神经病，因为做决定总是突然之间的，并未经过大脑，或仅是短暂停留。</p>
<p>其实，我还在担心我这么直接邀请他去中轴线，会不会人家不好意思拒绝而耽误了他的冬奥志愿者。那我不就成了“千古罪人”，还好疫情并不严重，而我也像章北海一样内心怀有坚定的信念。</p>
<p>走在南长街，当夕阳洒在地上，望着飞鸟，看着河面，感受微风抚摸你的脸颊。将身体的每一个部分都交给它，将自己化作这古城的一部分，感受岁月的流逝，感受千古的历史。那一刻好像时间静止，而你已是永恒。</p>
<p>最开始把他当成学生，觉得凡事都多该为他想想，毕竟是祖国的未来嘛。现在看来，我真是个神经病，正常朋友对待就好了。在这次旅程中，我渐渐忘了他学生的身份，把他当成了朋友，同事或是同学，毕竟也没比我小多少。</p>
<p>那天的月亮又圆又亮，灯火阑珊间，看着男男女女们走在石桥上，好像是一对对相会的爱人。</p>
<p>那晚我们走在烟袋斜街，望着城墙，望着月亮，平静如水的是心。</p>
<p>20号北京下雪了而且连续下了3天，真是上天眷顾。这不马不停蹄的去了故宫，这雪景我是可不能错过的。</p>
<p><img src="3.jpeg" alt="故宫雪景1"></p>
<br>

<p><img src="4.jpeg" alt="故宫雪景2"></p>
<p>景是好景，但人实在是太多了，那样就少了独特的孤独感。</p>
<p>于是……我又来到了香山。山里的雪景一定也是很好看的吧！</p>
<p>（一天都没吃饭了，还能再爬个香山…我终于找的我长不胖的原因了。）</p>
<p>不过正如我所说，美景难寻。</p>
<p><img src="5.jpeg" alt="香山美景"></p>
<br>

<p><img src="6.jpeg" alt="香山美景"></p>
<p>在我们的聊天中，我得知他是一名重度抑郁患者。当时我想到了在我为数不多的朋友中，也有一位轻度抑郁患者。他们好像饱受失眠，焦虑，学业等各种社会压力的影响。</p>
<p>但我并不能看的出来，觉得他们和别人也没有什么不同。除了因失眠带来的困扰能让我感同身受，我并不懂得如何帮助他们，或许这和他们的原生家庭有关，还是不区别对待他们就好啦。</p>
<p>总之能在新年初始，便能遇到一位闪闪发光的朋友，真的是无比幸运。</p>
<p>那么祝大家晚安啦，好梦~~~</p>
<br>


    <div id="aplayer-NqrXNbhs" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1422246732" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>三体：黑暗森林</title>
    <url>/2021/06/17/%E4%B8%89%E4%BD%93%EF%BC%9A%E9%BB%91%E6%9A%97%E6%A3%AE%E6%9E%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-TfdxEBlK" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1431292823" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br/>

<p>一年前因为《我的三体章北海传》对三体热爱的一发不可收拾，买了全套书籍，却只看完了第一部《三体：地球往事》。前几天，因为同学再看三体，受他的影响我看完了《三体：黑暗森林》。</p>
<p>其实看完这两部对我来说没有什么太大的感受，因为我已经被剧透过无数遍——看过b站，我的三体动画，看过几遍三体解说。对我来说，再去看书无非就是添加细节，让世界观更加丰富。在阅读的过程中确实被大刘所描绘的世界震撼，即便是看过那么多遍剧情的前提下。</p>
<p>大刘详细的描述了面壁计划的其他三位面壁者，以及章北海在逃往太空的全过程。这是看《我的三体罗辑传》和《我的三体章北海传》所没有的。小说对人物的刻画更加鲜明生动，这也是我为什么和还会去看小说的原因。</p>
<p>不过确实是没有什么想说的，最初的感情已经在看动画的时候，已经完全流露。就像我在《献给阿尔吉侬的花束》那篇文章所说的，不会再写相关的东西了。</p>
<p>如果喜欢的话，可以去看看b站的那两部动画，还有大刘的《三体》全集。</p>
<p>可能之后会剪一个章北海的视频，放在b站以作留恋吧。谁让我最喜欢他呢，不过看完书之后，对罗辑的喜爱还偏多一些。可能刻画章北海还是少了，而且第三部也没有他了。</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么有些朋友，走着走着就散了</title>
    <url>/2021/11/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%9B%E6%9C%8B%E5%8F%8B%EF%BC%8C%E8%B5%B0%E7%9D%80%E8%B5%B0%E7%9D%80%E5%B0%B1%E6%95%A3%E4%BA%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>01</strong></p>
<p>可能这样说有些无奈，但<strong>很多友情确实是阶段性的，时间和空间是扼杀友情最大的两个“杀手”。</strong></p>
<p>曾经，时间和空间的撮合，让我们共享了一段结伴的愉快旅程，<strong>到了分岔路口的时候，你说要去海里看鲸，我说要去林间看鹿，于是就此分道扬镳。</strong></p>
<p>但我们并不是一夕之间陌生的，刚开始，我们还保持着联系，你给我看看鲸的照片，我和你说说鹿的样貌。但<strong>在不再参与彼此的生活之后，话题的开启渐渐变得困难，从前的默契渐渐不再。</strong></p>
<span id="more"></span>
<p>很多次，浮于表面的对话、不再及时的回复、戛然而止的聊天，让彼此都分明感到这种联系成了一种打扰。<strong>成年人有一种精细的敏感和贴心的自觉，一旦感受到对方的退意和冷淡，自己便也很少再主动了，毕竟，大家都忙。</strong></p>
<p>所以你看，其实什么也没发生，<strong>没有具体的波澜，没有大吵一架，甚至没有结束语，但我们就是不再联系了</strong>，然后，我们不仅消失在了彼此的生活里，也模糊在了彼此的记忆中。</p>
<p>在时间的冲刷和距离的阻隔下，我们和那个人的联系就这样默默地、悄悄地、势不可挡地斩断了。</p>
<p><strong>“被推着走，跟着生活流，来年陌生的，是昨日最亲的某某。”</strong>大概，这就是“初闻不识曲中意，再闻已是曲中人”。</p>
<p><strong>02</strong></p>
<p>虽然有些直接，但还是要承认，<strong>好友间关系变淡的原因之一，是社会资源、地位、见识差距变大，你的苦闷他无法理解，他的彷徨对你而言，又可能是某种变相的炫耀。</strong></p>
<p>两个人无话可说，只能叙旧，直到过去被反复咀嚼，淡而无味，又碍于情面，怕被指责势利，还要勉强维持点赞的情分。</p>
<p><strong>当然，有很多超越阶级的友谊，但两者的见识和思辨力，一定是对等的。</strong>许多年少时的朋友，只能被拿来怀念；许多因为恩情而结缘的人，也只适合报恩。<strong>朋友是需要交换观点的人，而不仅仅是交换感情。</strong></p>
<p>我越来越觉得，<strong>要从同路者中寻找朋友，而不是硬拽着朋友一道上路。到了分岔口，温柔道别就好，过年时发一句“新年吉祥”，也好过两个人口不对心地把酒话桑麻。</strong>（作者：倪一宁）</p>
<p><strong>03</strong></p>
<p><strong>在各奔前程的过程中，旧友不断流失，但在新的环境里，又未能建立起可以弥补这种流失的关系。</strong>我觉得，是这两者的合力，共同酿成了“失友”的感受。</p>
<p>很多人都有这样的体会吧：<strong>毕业工作后，认识新朋友这件事好像变得越来越困难了，交际圈也很难在工作外有所拓展。</strong>同事可以一起吃饭一起聊天一起玩，但真要成为特别好的知心朋友，似乎不容易。</p>
<p>这很正常，<strong>毕竟大家是因为工作而聚在一起的，而不是为了交朋友</strong>，况且，当友谊掺杂了公事，又会变得更复杂，顾虑也会更多。</p>
<p>但这些都不是最重要的，真正的问题好像是：<strong>我们越来越不愿意花精力去交朋友了。</strong>因为工作太累了，有时间就想自己待着多休息，不想在社交上花费力气；因为从零开始了解一个人太麻烦了，已经没有年少时的心气和热情了；因为自己的事情太多了，交朋友已经不是生活的重点了……</p>
<p><strong>旧的不断流失，新的未有补给</strong>，于是，朋友好像真的越来越少了。</p>
<p><strong>04</strong></p>
<p>失去一个朋友，除了因为生活轨迹的差异，也许还有一个内在的原因，那就是：<strong>对方不再是你认可的那个人了。</strong></p>
<p><strong>能成为朋友，一定有互相欣赏、互相影响、互相促进、互相依靠、互相带来能量和快乐这些因素</strong>，如果有一天，因为各种原因，我们已经无法从对方身上感受和汲取这些<strong>情绪价值</strong>，甚至对方的一些想法和做法是我们无法认可的，渐行渐远也许就在所难免了。</p>
<p>人生的际遇不断变化，行走其中的人也在不断变化。<strong>怀念过去，并不意味着要停在过去。</strong></p>
<p><strong>05</strong></p>
<p>有心理学家说，<strong>18-25岁是所谓的“成年初期”，这个年龄段主要“解决亲密与孤独的冲突”，我们需要朋友带来的亲密关系，以克服内心的孤独、迷茫和不确定感，冲开人生的一道道关卡。</strong>这一时期的交友因素，最重要的是<strong>“接近性”</strong>。</p>
<p>然后，随着年龄的增长，方向的差异，际遇的变化，<strong>曾经的“接近性”受到破坏，很多曾经的朋友疏于甚至失去联系。</strong></p>
<p>但是，随着时间推移，成年人的友情其实也在变化。</p>
<p>我们不再是曾经意气高喊“要做一辈子好朋友”的热血少年，我们不再是连上厕所都要约着一起的亲密同伴，我们更清楚自己想要什么，可以独立做出决定。在这个阶段，<strong>“相似性”</strong>成为更重要的因素，在一些专家看来，<strong>成年中期的友情，不再需要时刻相伴，关系被定义为：知道他在那里。</strong></p>
<p>是啊，<strong>真正可贵和难得的情谊，不会轻易被时空打败。</strong>哪怕人生的际遇疏离化了一些关系，哪怕彼此的联系不如往日频繁，哪怕已经许久未见，哪怕不能第一时间知晓你的近况，<strong>但在我需要你的时候，我知道你就在那里。</strong></p>
<p>也许，<strong>我们并没有“失去朋友”，我们只是换了一种方式去维系友情，更成熟地面对人生。</strong></p>
<p><strong>“大丈夫各乘风波，未始有极，哀乐且不足累上士之心，况小别乎？”</strong></p>
<p>别离是人生常态，身边的人也确实来来往往更迭不断，但<strong>总有一些人，已经陪伴了我们很久，还将陪伴我们更久。</strong></p>
<p><img src="1.jpeg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>九歌·云中君</title>
    <url>/2021/01/12/%E4%B9%9D%E6%AD%8C%C2%B7%E4%BA%91%E4%B8%AD%E5%90%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-teBsQEEh" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="000mstDJ3FFlra" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<center>

<p>浴兰汤兮沐芳，华采衣兮若英。</br><br>灵连蜷兮既留，烂昭昭兮未央。</br><br>蹇将憺兮寿宫，与日月兮齐光。</br><br>龙驾兮帝服，聊翱游兮周章。</br><br>灵皇皇兮既降，猋远举兮云中。</br><br>览冀州兮有余，横四海兮焉穷。</br><br>思夫君兮太息，极劳心兮忡忡。 </br></p>
</center>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>九歌·山鬼</title>
    <url>/2021/01/27/%E4%B9%9D%E6%AD%8C%E5%B1%B1%E9%AC%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-uvekVXeN" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="28496172" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<center>
若有人兮山之阿，被薜荔兮带女萝。</br>
既含睇兮又宜笑，子慕予兮善窈窕。</br>
乘赤豹兮从文狸，辛夷车兮结桂旗。</br>
被石兰兮带杜衡，折芳馨兮遗所思。</br>
余处幽篁兮终不见天，路险难兮独后来。</br>
<span id="more"></span>
表独立兮山之上，云容容兮而在下。</br>
杳冥冥兮羌昼晦，东风飘兮神灵雨。</br>
留灵修兮憺忘归，岁既晏兮孰华予？</br>
采三秀兮于山间，石磊磊兮葛蔓蔓。</br>
怨公子兮怅忘归，君思我兮不得闲。</br>
山中人兮芳杜若，饮石泉兮荫松柏，</br>
君思我兮然疑作。</br>
雷填填兮雨冥冥，猨啾啾兮狖夜鸣。</br>
风飒飒兮木萧萧，思公子兮徒离忧。</br>
</center>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>使用alias来自定义shell</title>
    <url>/2019/10/23/%E4%BD%BF%E7%94%A8alias%E6%9D%A5%E8%87%AA%E5%AE%9A%E4%B9%89shell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="alias命令格式"><a href="#alias命令格式" class="headerlink" title="alias命令格式"></a>alias命令格式</h4><ul>
<li>alias命令可以为命令别名，可以在bash窗口直接输入命令进行别名</li>
<li>取消命令别名格式为：unalias lm</li>
<li>直接输入 alias 命令会列出当前系统中所有已经定义的命令别名。</li>
</ul>
<h4 id="永久保存alias命令"><a href="#永久保存alias命令" class="headerlink" title="永久保存alias命令"></a>永久保存alias命令</h4><ol>
<li><p>在家目录下创建.aliases文件，输入想要使用的命令，例如：</p>
<blockquote>
<p>alias h=’history’</p>
</blockquote>
</li>
<li><p>如果装了zsh就打开**<font color ="pink">.zshrc</font>** ,默认的话打开**<font color="pink">.bashrc</font>**，在文件尾部输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -f ~/.aliases ]; then</span><br><span class="line">	. ~/.aliases</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>退出后，**<font color ="pink">source  ~/.zshrc</font>** 或者 <strong><font color ="pink">source ~/.bashrc</font></strong> 来使创建的文件生效(source后有空格，重启终端效果一样)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>你的下一个输入法何必是搜狗，拥抱fcitx5</title>
    <url>/2020/12/28/%E4%BD%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5%E6%B3%95%E4%BD%95%E5%BF%85%E6%98%AF%E6%90%9C%E7%8B%97%EF%BC%8C%E6%8B%A5%E6%8A%B1fcitx5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="fcitx5的安装"><a href="#fcitx5的安装" class="headerlink" title="fcitx5的安装"></a>fcitx5的安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-git fcitx5-chinese-addons fcitx5-chewing fcitx5-pinyin-zhwiki fcitx5-pinyin-moegirl fcitx5-config-qt fcitx5-gtk-git fcitx5-qt4-git fcitx5-qt5-git fcitx5-material-color</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li><p><a href="https://archlinux.org/packages/?name=fcitx5-chinese-addons">fcitx5-chinese-addons</a> 包含了大量中文输入方式：拼音、双拼、五笔拼音、自然码、仓颉、冰蟾全息、二笔等</p>
</li>
<li><p><a href="https://archlinux.org/packages/?name=fcitx5-chewing">fcitx5-chewing</a> 对注音输入法 <a href="https://archlinux.org/packages/?name=libchewing">libchewing</a> 的包装</p>
</li>
<li><p><a href="https://archlinux.org/packages/?name=fcitx5-qt">fcitx5-qt</a>：对 Qt5 程序的支持</p>
</li>
<li><p><a href="https://archlinux.org/packages/?name=fcitx5-gtk">fcitx5-gtk</a>：对 GTK 程序的支持</p>
</li>
<li><p><a href="https://aur.archlinux.org/packages/fcitx5-qt4-git/">fcitx5-qt4-git</a>AUR：对 Qt4 程序的支持</p>
</li>
<li><p><a href="https://archlinux.org/packages/?name=fcitx5">fcitx5</a> 的配置文件位于 <code>~/.local/share/fcitx5</code>，尽管您可以使用文本编辑器编辑配置文件，但是使用 GUI 配置显然更方便。安装 <a href="https://archlinux.org/packages/?name=fcitx5-configtool">fcitx5-configtool</a> 软件包。</p>
</li>
<li><p><a href="https://aur.archlinux.org/packages/fcitx5-pinyin-zhwiki/">fcitx5-pinyin-zhwiki</a>AUR：felixonmars 根据中文维基百科创建的词库。适用于 <strong>拼音输入法</strong></p>
</li>
<li><p><code>fcitx5-pinyin-moegirl</code>（在 ArchLinux CN 源中）：<a href="https://github.com/outloudvi/fcitx5-pinyin-moegirl">outloudvi</a>根据萌娘百科创建的词库。适用于 <strong>拼音输入法</strong></p>
</li>
<li><p><a href="https://archlinux.org/packages/?name=fcitx5-material-color">fcitx5-material-color</a>：提供了类似微软拼音的外观，其仓库位于：<a href="https://github.com/hosxy/Fcitx5-Material-Color">GitHub:Fcitx5-Material-Color</a>，而且官方文档里提供了更加美观的单行模式的设置方式。</p>
</li>
</ul>
<p>kde 桌面可安装这个配置工具，非kde不用安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kcm-fcitx5-git</span><br></pre></td></tr></table></figure>



<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol>
<li>vim ~/.pam_environment</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>vim  ~/.xporfile</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export QT_IM_MODULE=fcitx5</span><br></pre></td></tr></table></figure>



<h2 id="使用美丽的单行模式-inline-preedit"><a href="#使用美丽的单行模式-inline-preedit" class="headerlink" title="使用美丽的单行模式(inline_preedit)"></a>使用美丽的单行模式(inline_preedit)</h2><p><strong>编辑时请退出fcitx5,否则文件会覆盖</strong></p>
<p>对于fcitx5自带pinyin 请修改 <code>~/.config/fcitx5/conf/pinyin.conf</code></p>
<p>对于fcitx5-rime，请新建/修改 <code>~/.config/fcitx5/conf/rime.conf</code></p>
<p>加入/修改以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可用时在应用程序中显示预编辑文本</span></span><br><span class="line">PreeditInApplication=True</span><br></pre></td></tr></table></figure>

<p>kde用户可直接在 系统设置-区域设置-输入法-（选择你的输入法）设置-在程序中显示预编辑文本</p>
<h2 id="Fcitx5-无法输入中文"><a href="#Fcitx5-无法输入中文" class="headerlink" title="Fcitx5 无法输入中文"></a>Fcitx5 无法输入中文</h2><p>该问题在国内版 wps-office-cnAUR 11.1.0.9604-1 版本更新后部分用户出现，于 wps-office-cnAUR 11.1.0.9615-1 版本修复，但是部分用户仍然需要修改环境变量（例如 .xprofile 文件）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export QT_IM_MODULE=fcitx5</span><br></pre></td></tr></table></figure>



<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><p>Fcitx5-Material-Color <a href="https://github.com/hosxy/Fcitx5-Material-Color">https://github.com/hosxy/Fcitx5-Material-Color</a></p>
</li>
<li><p>在Manjaro上优雅地使用Fcitx5 <a href="https://www.wannaexpresso.com/">DotIN13</a> <a href="https://www.wannaexpresso.com/2020/03/26/fcitx5/">https://www.wannaexpresso.com/2020/03/26/fcitx5/</a></p>
</li>
<li><p>wiki.archlinux Fcitx5 <a href="https://wiki.archlinux.org/index.php/Fcitx5">https://wiki.archlinux.org/index.php/Fcitx5</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>fcitx5</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>写在七夕后——关于爱情的一些感受</title>
    <url>/2022/08/04/%E5%86%99%E5%9C%A8%E4%B8%83%E5%A4%95%E5%90%8E%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E7%88%B1%E6%83%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-fZuRgzIF" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1330348068" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br/>

<center>
南有乔木，不可休思；汉有游女，不可求思。<br>
汉之广矣，不可泳思；江之永矣，不可方思。<br>
翘翘错薪，言刈其楚；之子于归，言秣其马。<br>
汉之广矣，不可泳思；江之永矣，不可方思。<br>
翘翘错薪，言刈其蒌；之子于归，言秣其驹。<br>
汉之广矣，不可泳思；江之永矣，不可方思。
</center>

<span id="more"></span>

<br>

<p>下面的话送给自己时刻惊醒，转自罗翔老师的话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“哎呦，他回我微信晚了一点，是不是不喜欢我了呀。”</span><br><span class="line">“哎呦，我对领导没有称您，称了个你，他会不会瞧不起我呀。”</span><br><span class="line">每天这种小心思呀，每天都在猜啊。所以呢，这就很痛苦的。</span><br><span class="line">你的胸襟啊，要开阔一点。</span><br><span class="line">说白了你在别人心目中没有那么重要。</span><br><span class="line">或者说呢，你也不要在乎别人把你当做什么。</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大家找对象的时候，一定要看他接人待物。一定要看他对弱者，有没有同理心。要看他对弱者，有没有发自内心的那种尊重。</span><br><span class="line">因为你想一想，如果他见到弱者，见到一些社会地位不如他的人。就那种趾高气昂，就是那种瞧不起，总有一天他也会瞧不起你的。</span><br><span class="line">当你有利用价值的时候，他瞧得起。当你没有利用价值的时候，麻烦他还不一脚把你踹了，然后再找下一个。</span><br><span class="line">所以，这就是为什么人一定最重要的——是要找一个发自内心的去尊重自己的人，这种尊重是需要选择的，这种尊重是需要训练的。</span><br></pre></td></tr></table></figure>



<hr>
<p>这里转载知乎一篇文章，用于以后再遇到以为是爱情的时候，一定要看看之前的经验与教训。 <a href="https://www.zhihu.com/question/281088793/answer/866631807">https://www.zhihu.com/question/281088793/answer/866631807</a></p>
<p>渣男吧</p>
<p>就是标榜着自己有情伤，很受伤，忘不了前任，满足不了现任，惦记着别人的一群人。对于他们来说，爱不是治愈心灵、相互陪伴、获得成长的要素，而是成了证明自己、填补空虚、消遣时间的手段。小姑娘心目中向往的爱情早就被妖魔化了。</p>
<p>为什么会喜欢渣男？</p>
<p>因为你的圣母心。</p>
<p>因为你得不到。</p>
<p>因为你在这段关系里更想要。</p>
<p>渣男们惯用的套路就是撩完就走，从不给你实质性的发展，让你欲罢不能。偶像剧的套路他们敢用，肉麻的情话他们敢说，一两句甜言蜜语，一两个关怀倍至的动作……</p>
<p>清醒以后想想，他啥也没给过你，你却一直错觉他给了你整个世界。</p>
<p>每个人都觉得自己在渣男那里特殊特别独一无二。</p>
<p>而他们最让人讨厌，也最让人欲罢不能的，无非就是给了你很多期待。</p>
<p>当一个人对另一个人有了期待，就有了爱情。</p>
<p>所以总会有女孩深陷其中，又不甘心，想要通过各种方式反败为胜，让渣男爱上自己，然后梦想着虐死他，玩死他。</p>
<p>方法就是：嘴甜，心狠，以其人之道 还治其人之身。</p>
<p>具体来说：</p>
<p>第一步、调整心态</p>
<p>放弃自己的执念。</p>
<p>不要幻想好结果，不要期待回应，扼杀所有happy ending 的可能性。</p>
<p>他只是个可有可无的配菜而已……</p>
<p>默念这句话三百遍。</p>
<p>好的心态其实已经赢了大半。</p>
<p>第二步、认真规划自己的生活</p>
<p>找到自己超爱的一件事，音乐、书法、读书、跑步、打球、背单词、跳舞……什么都好。</p>
<p>姑娘你可别告诉我你没啥兴趣，就爱谈恋爱，千万别。</p>
<p>要自己能沉住气去做这件事，并且能够做到投入以及逐渐缓和情绪。</p>
<p>这个习惯会在大部分时候帮到你。</p>
<p>当你做好以上两点了，就可以开始第三步了。</p>
<p>第三步、没事儿就撩撩他</p>
<p>尺度可大可小，可柔可刚，当你调整好心态的时候，就看自己的心情了。</p>
<p>记笔记：对男人来说，崇拜比爱更受用。</p>
<p>适时懂他理解他，你是他的红颜也是他的迷妹。</p>
<p>聊着聊着就去洗澡或者干脆消失也不是不可以。</p>
<p>不用事事有回应，每天有晚安。</p>
<p>电话可以不接。信息可以不回。</p>
<p>记笔记：不要患得患失，不要得失心太重，要有姜太公钓鱼 的心态。</p>
<p>另：不要沉迷于网聊。要克制。</p>
<p>至于要不要约会，当然要啊。</p>
<p>如此聊上一段时间，渣男会约你的，但是注意频率。五次去两次，十次去三次，对于切记不要去他想去的地方，而是由你主导。</p>
<p>约会的时候，偶尔的身体接触，继续发自内心的崇拜，让他跟你在一起开心又美好。</p>
<p>相信我，当你啥也不图，只求他死的时候，你们的约会一定会特别美好的，</p>
<p>此时。</p>
<p>划重点：保持清醒，任何时候心态不能崩，不要陷入温柔乡，不要陷入自己的幻想，你是来虐他的，玩玩而已的事情不要把自己玩进去了。</p>
<p>然后重复第一步，第二步，第三步。</p>
<p>嗯……</p>
<p>最爽的部分应该就是，渣男不渣，浪子回头，鱼塘放生，浴火重生之际，你亲口告诉他的那句：我们还是当朋友吧！</p>
<p>没有第四步。没有happy ending 。</p>
<p>就算他浪子回头，也不值得你心软。</p>
<p>这就是一场你死我活的战斗。</p>
<p>背后的逻辑就是：他爱的是啥也不图的你，可是谈恋爱这种事不可能啥也不图吧？短期做做样子还行，长期过日子毕竟不优惠。</p>
<p>所以啊！虐完就撤，效果更好哦！</p>
<p>然鹅，能花费精力做这件事的人，多半不能真正地狠下心来去虐他玩他。因为还在乎嘛……不在乎你也不会看，也不会想。</p>
<p>道理很简单，如果你真的清醒了，会发现在他们身上哪怕多花一秒钟都是浪费，世界这么美好，为什么不去关注下更有意义的事情呢？</p>
<p>珍爱生命远离渣男</p>
<p>话烂理不烂，费这个劲挽回一条吃屎的狗，不太划算啊姑娘。</p>
<p>有这个精力虐他，我早就找到更好的男朋友了，下一个永远更好，哈哈哈哈哈哈</p>
<hr>
<p>转载的文章到此结束</p>
<p>下面是给那些值得爱的人，但却不喜欢你的人（表白失败）看的。</p>
<p><code>喜欢是相互的，每个人都有选择爱或不爱的权利，我们不能因为自己的自私而剥夺了，自己喜欢的人不喜欢你的权利。</code></p>
<p>希望我在之后能</p>
<p>也是一篇知乎网友朋友写个她的文章节选 <a href="https://www.zhihu.com/question/308871102/answer/726470702">https://www.zhihu.com/question/308871102/answer/726470702</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我一直都觉得你是一个勇敢，很大胆地表达自己的观点，自己情感的人。所以这次你也很勇敢的表达了自己对有好感的异性的感情，虽然最后没有得到一个比较好的结果，但是我觉得也没有必要急于否定自己，或者是否定这段时间的付出，又或者是否定对方。不要否定自己，因为你很优秀，他没有珍惜是他的损失，他以后不定能遇到比你更好的人，而你一定可以遇到比他更好的男生。不要否定你的付出，因为你努力通过行动去表达了自己对他的感情，算是一种对自己感情负责任的表现，因为如果你没有付出，只是口头表达，最后被拒绝了，你可能还会后悔是不是自己表现得不够，没有让对方感受到。不要否定自己他，因为他是你虚幻了很多年的异性，否定他就等于否定了自己的品味，他拒绝你其实也可以说是负责任的一种表现吧，如果没有那种感觉，但是为了不辜负你而答应在一起的话，更加让人难过。希望你以后回想起这段经历，不是觉得自己啥伙食怎么不好，而......</span><br></pre></td></tr></table></figure>

<hr>
<p>下面是梁永安老师的话，前提是双向奔赴才值得用一生去爱吧。</p>
<p>很多人在年轻的时候，不甘于用一生爱一个人，总觉得爱一个人亏。</p>
<p>其实是不成熟的体现。</p>
<p>俄罗斯作家，普希金在《叶普盖尼·奥涅金》中描写过这样一位经典女性——达吉雅娜。</p>
<p>她在一个外省，看到莫斯科来的，一位英俊青年。她觉得完全是一个阳光普照的存在。</p>
<p>所以她情不自禁的就给他写了一封情书，表达自己的爱慕。</p>
<p>作为一生中的第一次，弥足珍贵。</p>
<!--more-->

<p>但是奥涅金拿到的时候呢，觉得自己未来还有很多很多，特别美好的打开。</p>
<p>他不愿意把自己锁在这里，所以奥涅金后来很客气地拒绝了她。</p>
<p>后来奥涅金经历了后面那么多各种各样的阴晴风雨，相遇了各种各样的人。他才知道他当年遇到的达吉雅娜，是多么的珍贵。</p>
<p>所以说<strong>人一辈子可以经历很多很多，但是爱情有时候只给你一次机会，这次失去了，你就全部都失去了。</strong></p>
<p>米兰·昆德拉的小说《不能承受的生命之轻》中出有一种人的爱情，就像一个旅行家，像个收藏家，他喜欢各种不同的类别，喜欢各种各样的差异。</p>
<p>所以所有的女性对他来说，好像都是要去自己去体尝的。</p>
<p>实际上这样的一种感觉，或者这样一种<strong>追求新鲜感，有时候只有快乐，它不包含幸福的定义。</strong></p>
<p>我们今天的一个青年生活里面，就这种选择太多，有时候会使我们的心态，发生很大的变化。</p>
<p>说到底，我们活的是肤浅的。</p>
<p>这种新鲜感，它的特点都是在一个生活的表面。</p>
<p>我以前我记得，我们中国人，开始出国国际旅行。当时的旅行项目里面，十天带你转遍欧洲八九个城市。</p>
<p>它就追求的是，我来过了。但是真正你来过没有呢？其实不见得。</p>
<p>在这个世界上，你表面上你有很多，其实啥也没拥有。</p>
<p>很多人他觉得，好像一个人可以爱很多很多人。其实我觉得一个人一辈子，爱一个人，你都爱不过来。</p>
<p>因为对方的生活，对方的生命，每个人都是一个无穷地成长。</p>
<p>今天很多人所谓的爱情，没有建立起生命关系。</p>
<p>只建立起消费关系，对方让我愉悦就完事了，新鲜劲没了，然后又得再换，他就丧失了爱的能力。</p>
<p>他只能一辈子追逐那个新鲜感，所以搞得最后疲惫不堪。</p>
<p>从我来说，<strong>新鲜感不是和很多人经历第一次，而是和同一个人经历很多第一次。</strong></p>
<p>这就是说，真爱就是唯一的那一个。</p>
<p>爱一个人就像爱一棵桃树一样，从一个种子，然后一直生长下来，最后开花结果。年年月月，经历了那么多风风雨雨，阴阴晴晴。</p>
<p>我们的生命说到底，每个人生命自身也是一棵树一样。</p>
<p>这就是伴陪，两个人互相之间的，生命之间的关系，就建立起来了。</p>
<p><strong>生命之树长青是需要相守的，需要很深的专注。</strong></p>
<p>什么叫亏？</p>
<p>你就在一个浅体验里面，浅生活里面，不断地去滑动。你一生就是一个蹩脚的溜冰者，整个都在表层。</p>
<p>从来没有和一个人真正体会幸福。</p>
<p>留下的全是，浮光掠影，这个才叫真正的亏。</p>
<p>你遇到真爱，就不会觉得，和这个人在一起很亏。</p>
<p>所以我们说到底怎么去判断，能不能和一个人相守一生？</p>
<p>最主要的是要看到这个人，对你是否具有唯一性。</p>
<p>我们现在很多恋爱里面，说对方哪点好也说不出来，不好能说出一堆来，但是就是喜欢他。</p>
<p>按照你原来的脑子里面的，所设定的爱人来说，一点都不合格。</p>
<p>但是你偏偏就是爱上他，偏偏就是跟他在一起。</p>
<p>所以这就是我们说爱情里面，具有的一个很真实的，发自生命深处的，这样一种感情。</p>
<p>所以我们说前面那种说爱一个人是不是亏了，他就是在比较。</p>
<p>他就好像是一个衡量，一个很理性的，可以量化的。</p>
<p>其实真正的爱它不是这样的。</p>
<p>两个人他相遇的时候，我觉得有一个基本的东西——就是两个人很自然，很轻松。</p>
<p>爱情本身它有个特点，就说它无言的部分，没有说出来的东西互相能体会。</p>
<p>所以，轻松就轻松在这里，天然的。互相看到心里就非常的舒展，非常的明亮。</p>
<p><strong>在一个值得爱的人身上，你可以感受到生活的无限。</strong></p>
<p>因为好的爱情就是这样，它的细节，它的生活里面油盐柴米，它生活里面的分分秒秒，它都有温度。</p>
<p>它都把一个生活和世界联系起来了，所以这个时候你绝对不是说，好像只是在狭小的，一个获得里边。</p>
<p>而是你是在一个不断地，跟这个世界交互，互相之间，互相拥有的这么一个关系，这么一种生命感。</p>
<p>所以在这个过程里边，我们要珍惜。</p>
<hr>
<p>最近几个月遇到了一个渣男同事，好在今天终于算是清醒过来。</p>
<p>满嘴都是谎言，什么情伤、什么忘不了前任、什么不敢谈恋爱。然而现实却是撩着4个人。</p>
<p>每个人身上都好好的品质和方面，比如他的少年感，放荡不羁，自信与自卑相随。</p>
<p>但改变不了养鱼的事实。</p>
<p>最后祝愿他能止步于公司的那个小姐姐吧。</p>
<p>如果真的喜欢你，又怎会一直吊着你，又怎会有时候对你爱答不理，又怎会满嘴谎言。</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="https://www.bilibili.com/video/BV1vV411j7i3?spm_id_from=333.999.header_right.fav_list.click&vd_source=7edae3cd790e850cc7836ab5c5d9ac4b"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>函数装饰器</title>
    <url>/2021/06/03/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>函数可以当作一个变量</li>
<li>函数的参数也可以是函数</li>
<li>函数是可以嵌套的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数可以当作一个变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">f2(f())</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数的参数也可以是函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">username=<span class="string">&#x27;mengxun&#x27;</span>,passwd=<span class="string">&#x27;123456&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> username==<span class="string">&#x27;mengxun&#x27;</span> <span class="keyword">and</span> passwd==<span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;sadfeg1234&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;帐号登录错误&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span>(<span class="params">token</span>):</span></span><br><span class="line">    <span class="keyword">if</span> token==<span class="string">&#x27;sadfeg1234&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;欢迎访问个人主页&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;请登录系统&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(profile(login()))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数是可以嵌套的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f4</span>():</span></span><br><span class="line">        <span class="comment"># print(&#x27;hello&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> f4()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f3())</span><br></pre></td></tr></table></figure>


<p>封闭：已实现的功能代码尽可能的不要做修改</p>
<p>开放：对现有的功能代码可扩展</p>
<p>需求：在调用f1 or f2函数的时候，先打印 星际穿越，再打印 火星救援</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星际穿越&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@getInfo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f5</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;火星救援&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f6</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;降临&quot;</span>)</span><br><span class="line"></span><br><span class="line">f5()</span><br></pre></td></tr></table></figure>


<p>步骤:</p>
<ul>
<li>当我们执行getInfo函数的时候，把被装饰的函数f1当作参数来传递</li>
<li>getInfo函数的返回值会重新赋值</li>
<li>一旦结合了装饰器后，调用f1的函数其实执行的是inner函数的内部，原来的函数f1被覆盖</li>
<li>被装饰的函数f1重新赋值给装饰器的内层函数inner</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数装饰器登录案例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login1</span>(<span class="params">username=<span class="string">&#x27;mengxun&#x27;</span>,passwd=<span class="string">&#x27;123456&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> username==<span class="string">&#x27;mengxun&#x27;</span> <span class="keyword">and</span> passwd==<span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;asd123d&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;帐号错误&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile1</span>(<span class="params">token</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;个人主页&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token==<span class="string">&#x27;asd123d&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;你的主页信息&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;请登录，谢谢！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login2</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">token</span>):</span></span><br><span class="line">        <span class="keyword">if</span> token==<span class="string">&#x27;asd123d&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> func(token)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请登录，谢谢！&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@login2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile2</span>(<span class="params">token</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你的主页信息&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(profile2(<span class="string">&#x27;asd123d&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(args,kwargs)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>刀锋</title>
    <url>/2021/12/26/%E5%88%80%E9%94%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>“活着到底是为了什么，人生究竟有没有意义，还是只能可悲地任凭命运摆布？”</p>
</blockquote>
<p>《刀锋》这本书读下来，没有什么感受，甚至微信读书上都没写什么。</p>
<p>拉里在战友为他掩护而战死后，感受到了生命的无常，开始追寻生活的本源。为此不惜与自己的未婚妻伊莎贝尔分手，他每天都泡在图书馆10个小时左右，之后又在矿区，德国、法国、印度、中国等地，寻找答案。</p>
<span id="more"></span>

<p>在印度象神大师的点化后重回美国，抛手所有财产，过上了开出租车闲云野鹤的生活。</p>
<p>我觉得《刀锋》这本书，是想要读者和拉里一样找寻生命的本质。</p>
<p>你想过上怎样的生活，而为这样的生活应该怎样去做。</p>
<p>就像书中结尾所说：</p>
<blockquote>
<p>书中与我有关的人物无不如愿以偿：艾略特称为社交名流；伊莎贝尔凭着巨额财产，活跃于上流文化圈；格雷有了轻松赚钱的稳定工作，每日朝九晚六；苏珊·鲁维耶的生活无虞；苏菲求得一死；拉里获得幸福之道。</p>
</blockquote>
<p>或者人活着应该追求本性、本心吧，不要被社会、被人所裹挟。</p>
<p>下面分享一些好的句子</p>
<blockquote>
<p>剃刀边缘无比锋利，欲通过者无比艰辛；</p>
<p>事故智者常言，救赎之道难行。                                            ——《迦托 · 奥义书》</p>
</blockquote>
<blockquote>
<p>无论男女，不仅仅是代表自己，更反映出生的地域、是在城市亦或是农村学会走路、儿时常玩的游戏、从老一辈听来的传说、习惯的饮食、就读的学校、热衷的运动、阅读的诗篇与信仰的神祇，等等。凡此种种，均造就了一个人的样貌，光凭道听途说不可能通盘了解，比得亲身经历，进而融入自我生命。</p>
</blockquote>
<blockquote>
<p>他为人爽朗，笑口常开，但明眼人都不难发现，他这般友善聒噪的外表仅是面具，好掩饰精明的生意人形象。</p>
</blockquote>
<blockquote>
<p>成年人鲜少会想到，年轻人对我们的评价既无情却又中肯。</p>
</blockquote>
<blockquote>
<p>我并不怕犯错，搞不好会在其中一条冤枉路上，找到人生的目标。</p>
</blockquote>
<blockquote>
<p>“如果他真的爱你，就改为了你找份工作。”</p>
</blockquote>
<blockquote>
<p>有个男的这么献殷勤，任何女孩都会受宠若惊。一旦她发现身边的闺蜜们都巴不得嫁给他，我问你，谁能忍着不捷足先登呢？这就好像你去参加一场派对，虽然事前就知道会很无聊，点心又只有柠檬汁和饼干，但终究还是会前往，只因为没受邀请的好友都非常眼红。</p>
</blockquote>
<blockquote>
<p>可能不实用，也可能很实用，但是非常有趣。你真的很难想象，读懂《奥德赛》的原文又多么令人兴奋，仿佛只要踮起脚尖，伸出手来，就能碰到天上的星星。</p>
</blockquote>
<blockquote>
<p>同样有涂了睫毛膏的睫毛、画得鲜红的嘴唇、抹了胭脂的面颊、辛苦锻炼过的苗条身材、清晰立体的五官，以及如饥似渴的彷徨眼神，让人无法不察觉到，他们人生的唯一目的，就是尽力挽救逐渐消逝的风采。</p>
</blockquote>
<blockquote>
<p>人生如果不想随波逐流，就等于是场豪赌，失败的人不胜枚举，成功的人寥寥无几。</p>
</blockquote>
<blockquote>
<p>一般人在热恋时，常会编造各种借口，来说服自己凡事跟着感觉走。我猜想，这也许就是不幸的婚姻为何那么多的原因。就好像你明知道某人是骗子，但因为交情深厚，所以偏要把所有事情托付给他，只因不愿相信骗子会重视利益到牺牲友情，认为即使他对人再不老实，也绝不会辜负自己。</p>
</blockquote>
<blockquote>
<p>他说万物不是创造出来的，因为无只生无，并不生有，万物本身就是永恒的表征。这点还可以接受，但是他接着又说，善和恶都是神性的直接表征。</p>
</blockquote>
<blockquote>
<p>我和格雷一直都很幸福。他是个不可多得的丈夫。大萧条来临前，我们生活得开开心心的。我们喜欢交同样的朋友，也喜欢从事同样的活动，而且他对我非常体贴，有人这么对自己死心塌地，是很棒的事情。婚后到现在，他对我的爱从来没变过，而且觉得我是世上最完美的女人。他平时的温柔和细心，外人真的无法想象。他对我大方到不可思议，只要是好东西都会买给我。我们结婚这么多年，他从来没凶过我半句。我只能说自己真是太幸运了。</p>
</blockquote>
<blockquote>
<p>大城市里总会有许多自给自足的圈子，彼此不相往来，自成一个个小世界，仿佛是一座座孤岛，隔着无法横渡的海峡，成员互相依赖，过着自己的日子。</p>
</blockquote>
<blockquote>
<p><strong>“嗯，部分心理学家认为，意识是伴随着脑部活动出现的，但是不会反过来影响脑部活动。这就好比树木在水中的倒影，非得有树木才会存在，但是丝毫影响不了树木。有人说，爱情不一定要有激情，在我看来是胡说八道。所谓没有激情的爱情，根本就不是爱情，而是属于喜欢、体贴、共同的兴趣或是习惯。习惯尤其如此。两个人可以因为习惯而保持性关系，就像到了饭点肚子会饿一样。当然，性欲不一定要有爱情。性欲跟激情不同，而是自然而然的性本能，无异于人类其他本能。所以，只要有了天时地利，丈夫难免会出轨，太太却容易小题大做，实在是很傻。”</strong></p>
<p><strong>“难道只有男人会这样吗？”</strong></p>
<p><strong>我露出微笑。</strong></p>
<p><strong>“你真要问的话，我会说这样的现象不分男女。唯一不同之处是，对男人来说，露水姻缘可以不带情感；但对女人来说，还是会牵扯到情感。”</strong></p>
<p><strong>“那也得看是什么女人。”</strong></p>
<p><strong>我没搭腔，继续说下去。</strong></p>
<p><strong>“爱情如果跟激情分开，就不算是真的爱情，而是别的情感。燃起激情的火苗不是满足，而是阻碍。你想想，济慈告诉希腊古瓮上的情郎别难过，是什么意思呢？‘汝将永远爱恋，伊将永远娇美！’为什么呢？因为得不到呀。无论他再怎么疯狂追求，都追不到心爱的人，因为小两口困在大理石之中，成就了这件无情的艺术品。你和拉里对彼此的爱，就好比保罗与法兰契斯卡，或是罗密欧与朱丽叶，既单纯又自然。幸好，你们不是以悲剧收场。你嫁给了有钱人，拉里云游四海、探索世界，其中并没有激情的成分。”</strong></p>
<p><strong>“你怎么知道的？”</strong></p>
<p><strong>“激情是不计代价的。哲学家帕斯卡说过，感情自有离职参不透的理由。如果我的理解没错，这是指当感情受激情所控制，就会发明看似可信的理由，来证明可以为爱牺牲一切，置个人冗余于度外，忍受羞辱也甘愿。激情拥有毁灭的力量，摧毁了神话中的情侣，包括安东里与克里奥佩特拉、崔斯坦与伊索德、帕内尔与欧希亚。为了这股力量，激情就会凋零。届时才会出现怅然若失的感觉，发现虚掷了大半人生，饱受嫉妒伴随的痛苦，吞下种种责难辱骂，献出所有浓情爱意，掏空了灵魂的一切，岂料对方不过是个废物、笨蛋，或是自己编织梦想的借口，价值还不如一条口香糖。”</strong></p>
</blockquote>
<blockquote>
<p>我凭直觉认为，爱上他是很蠢的事，女人很可怜，常常一坠入情网，就变得不可爱了，所以我打定主意不能陷阱去。</p>
</blockquote>
<blockquote>
<p>我想对她来说，丈夫和孩子的死就等于是世界末日。她不顾自己的死活，甘愿沉沦于酗酒和滥交，只为了报复生命的残酷。她曾经有天堂般美好的生活，一夕破灭后，受不了平凡无趣的世界，绝望之余只好坠入地狱。我可以想象，她觉得既然再也喝不到天堂的琼浆玉露，倒不如让自己镇日与屎尿为伍。</p>
</blockquote>
<blockquote>
<p>吾不与人争，胜败均不值。<br>钟情大自然，次之为艺术。<br>生命之火暖双手，他日余烬消逝，吾可安然离去。</p>
</blockquote>
<blockquote>
<p><strong>自我牺牲的情感足以压倒一切，就连欲望和饥饿都相形见绌，这是对自我人格的最大肯定，就算因此走向灭亡也在所不惜。无论为什么牺牲，都无关紧要，值不值得也非重点。这就好比美酒，只是更令人陶醉；也好比爱情，只是更让人心碎；更好比罪恶，只是更加使人着迷。一个人牺牲自己的瞬间，比上帝还要伟大，因为上帝既是全知全能，怎么可能牺牲自己？顶多只能牺牲唯一的儿子。</strong></p>
</blockquote>
<blockquote>
<p>宝贝儿，走，去看那玫瑰<br>清晨才刚刚展开花蕊<br>裙般的花瓣沐浴着阳光，<br>恰好将夜色褪去<br>又绛染裙褶缕缕，如花般颜色的，正是您的面庞。<br>啊！只是一小会儿，<br>您看那花，宝贝儿，<br>她那凋零的美丽翩翩迟迟！<br>哦，自然竟也如恶妇般残忍，<br>仅仅朝夕之瞬，<br>这花便稍纵即逝！<br>宝贝儿，若是您信我的话，<br>就趁着青涩韶华<br>趁着如花灿烂的年岁<br>去采摘，采摘您青春的花朵：<br>因为时光会将您的美貌包裹，<br>一如他黯淡了这凋谢的玫瑰。</p>
</blockquote>
<blockquote>
<p>天空是一片深邃的蓝，闪烁着无数星斗，亮得惊人。我似乎打起了瞌睡，但感官仍旧清醒。忽然间，耳边传来一阵仓促又愤怒的声音，我的神智瞬间清醒起来。这是死亡的呼啸，世上没别的声音更教人敬畏。我走到床边，借着灯塔的光摸着艾略特的脉搏，他已经死了。我打开床头灯看着他，他的下巴张着，双眼睁开。我在帮他合上双眼前，先凝视了他一会儿，情绪涌上心头，几滴眼泪就这么滑落双颊。这位老友为人亲切和善，一生却是如此傻气、无用又微不足道，我想到这里就悲从中来。他出席过无数宴会，和许多王公贵族、爵士名流来往，如今都毫无意义，这些人早把他给忘了。</p>
</blockquote>
<blockquote>
<p>说也奇怪，许多人都饱受恐惧的煎熬。我不是指害怕身处密闭空间，或者害怕站在高处，而是害怕死亡，更惨的是害怕人生。他们多半看起来非常健康，生活富足且无所牵挂，却被恐惧折磨。我有时会觉得，这是最让人困扰的情绪，我一度自问，这是否植根于深沉的动物本能，自从远古先祖首次感受到生命的颤动后，就代代遗传了下来。</p>
</blockquote>
<blockquote>
<p>凡是对我有深远影响的人，几乎都是碰巧遇到的，但回想起来，却好像是命中注定，仿佛全是在我需要他们时出现的。</p>
</blockquote>
<blockquote>
<p>她的性情开朗、温和又热情，把性爱当成身体的本能，无异于吃喝拉撒睡，自己既能享受快感，也乐意给人快感。她就像个小动物，但是非常讨人喜欢，既漂亮又温驯。</p>
</blockquote>
<blockquote>
<p>女人哪！我原本总以为，男人若要靠女人卖身来养他，至少得身材壮硕且魅力十足，随时准备跟人动刀动枪；而如此矮小猥琐的家伙，外表看来顶多是个律师助理，竟有能耐在人满为患的小白脸圈子占有一席之地。</p>
</blockquote>
<blockquote>
<p>印度许多贤者后来也认知到人类的软弱，承认也可以运用爱和工作获得救赎，但是他们从没否认过，唯有知识才是最崇高又艰难的途径，因为知识仰赖人类最宝贵的能力，也就是理性。</p>
</blockquote>
<blockquote>
<p>我这辈子的奇特经验很多了：我曾多次走过鬼门关，多次陷入风流韵事，曾骑马沿着马可·波罗当年的道路穿越中亚抵达中国，曾在圣彼得堡一间客厅中，边喝着俄罗斯茶，边听着一名身穿黑外套条纹裤、说话轻声细语的小矮子，说他暗杀某公爵的过程，曾坐在西敏寺大厅中，聆听恬静温柔的海顿钢琴三重奏，外头则是炸弹轰隆隆的爆炸声。但是，种种遭遇都不及眼前的景象：我在一家装潢华美的餐馆中，坐在红丝绒椅子上，听着拉里谈论神和永恒，谈论何谓梵，以及无穷无尽的轮回。</p>
</blockquote>
<blockquote>
<p>女人最满意的职业还是婚姻</p>
</blockquote>
<blockquote>
<p>拉里已如他所愿，淹没于喧嚣激荡的人海，其中有众多矛盾与利益纠葛，有人迷失于失序的世界，有人坚信善良，有人外表笃定，有人内心彷徨，有人慈悲为怀，有人不知变通，有人轻信他人，有人防卫心重，有人恶劣，也有人慷慨，凡此种种构成了美国众生相。</p>
</blockquote>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>动物农场</title>
    <url>/2022/02/06/%E5%8A%A8%E7%89%A9%E5%86%9C%E5%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>读完动物农场，不知道我自己在这个社会又是一个什么样的角色呢？</p>
<p>是驴子，是猫，还是拳击手呢？</p>
<p>又或许都不是，毕竟我们是社会主义社会，但作为一位职工来说呢？</p>
<span id="more"></span>

<blockquote>
<p>转自 百度百科</p>
</blockquote>
<p>《动物庄园》作为一部寓言小说，作者所真切感受到的是，所谓的平等、自由实在是有限的、相对的、短暂的，世上没有乌托邦式的理想主义时代。一群动物带着对理想的憧憬，力图打破旧秩序，本应冲出牢笼，但又跳入了另一个陷阱，他们依然被欺骗，被奴役，被统治，不平等是不变的结局。唯一的区别在于人类农场是人类管理动物，动物农场是动物管理动物，仅此而已。《动物庄园》里最令人恐惧的还是那句话，那被篡改的只剩下一条的戒律：所有动物一律平等，但有些动物比其他动物更加平等。当“平等”也有高低贵贱之分时，所谓的平等不过是一句自欺的谎言，所谓的自由也就成为了彻头彻后的笑话，微贱的平民唯有在困境中沉默挣扎。 </p>
<p>小说中关于动物们性格中的贪婪、自私、懦弱、虚荣和愚蠢的描写，明显可以解释为人性中的黑暗面，然而，民众中的主体还是驯服的和不知反抗的，沉默隐忍似乎成为了他们唯一的生存之道，其中最具代表性的是拳击手和本杰明。</p>
<p>奥威尔用一个寓言告诉人们：一个革命后的政权，如果没有民主监督，没有法治，必定异化，必定走向他的反面。革命总是以反专制开始，就像老少校启蒙动物们时所说的：“万恶之源完全在于人类的专制统治”，但专制并不会出革命被打破，甚至相反，革命往往会建立起更强的专制。《动物农场》这个故事的深刻之处，在于他揭示了动物农场革命的悲剧，被压迫各奋起革命后，由于缺乏对民主和法制的深刻认识，又没有建立起完善的权力制约制度，最终迎来了个人独裁，生活又倒退回了革命前甚至更差。 </p>
<p>寓言也是一种叙述方式，一种绝对普遍的表达方式和观察世界的模式。寓言不受时间和地域条件的限制，不同时代，不同民族不同文化中的读者在面对寓言作品时都极易产生共鸣。文学作品的意义从来就不是单一固化的，优秀的小说应有更深远普遍的意义。奥威尔借助寓言的叙述方式，通过简单易懂的故事体现人类的普遍理解力。《动物农场》出版于二战刚刚结束的1945年，两极格局初露端倪因而它反映了奥威尔对两大阵营的相同不满。小说的意义绝不仅仅限于影射斯大林时期的政治极权，而应将其置于更为广阔的社会政治背景中来理解。因而小说有更为复杂深远的喻指——反对一切形式的极权主义，追求民主与公正。</p>
<p><strong>现实影射</strong></p>
<p>小说的情节看上去像童书一样简单，但却包孕着“一部压缩版的‘联共布党史’，老少校的梦是动物造反的起因。造反之梦即共产主义之梦，《英格兰生灵》即《国际歌》，动物造反是指1917的十月革命。牛棚战役是讲动物农场打败人类的武装干涉，大致相当于苏联的内战时期。农场中的两支力量一一雪球和拿破仑间的斗争暗讽苏共党内的激烈争论。列宁去世后，斯大林掀起反托派的运动，开始迫害、驱逐托洛茨基及托派分子。雪球被逐之后，拿破仑继续造风车，尖嗓篡改“七戒”，即苏联推行国家工业化和集体化的时期。第七章讲动物农场的刑讯逼供、血腥屠杀暗指苏联的大清洗时期。小说中的“风车之役”喻指苏联卫国战争，虽然最终战胜德国，但象征着工业化的宏伟“风车”却轰然倒塌。在此期间，动物农场的主人们和人类农场主之间的关系错综复杂，勾心斗角，这一段故事大致影射了二战期间，英法、德国、苏联之间相互倾轧，都想靠移祸他国保全自己的政治现实。小说的最后一章写的是拿破仑与皮尔京顿的和解。全书的最后一幕：猪穿着人的衣服，像人一样站立起来。拿破仑为首的“猪”与皮尔京顿为首的“人”欢聚在一处，他们举起酒杯，觥筹交错间达成全面和解。皮尔京顿和拿破仑的影子重合在一起，原来猪和人从来就没有什么不同，他们的目标完全一致，都是为了对付下等动物。窗外的其他动物目瞪口呆再也分不清谁是动物谁是人。这里猪“异化”为人，暗讽二战之后苏联走上极权之路，与英、美一同瓜分世界。</p>
<p>世界依旧没有发生改变，与小说开头老少校的时代一样，极权统治仍在继续甚至愈演愈烈。奥威尔安排这样的结局，正是照应了当时的政治现实。对于这种极权统治，奥威尔并没试图去寻找解决问题的办法没有宣扬任何政治性的主张而是单纯地用文学的形式将这种极权的怪圈展现给读者，将文学的艺术性与政治性揉于一处。小说中没有丝毫的政治宣传，却比宣传更加有力，使读者易于接受并对此加以抵制。这也是他的政治寓言小说在文学之外的重大贡献。</p>
<p><strong>荒诞手法</strong></p>
<p>《动物庄园》采用荒诞的手法进行讽刺揭露，整个故事十分荒诞可笑，一群动物竟然具有人的智慧，将农庄的主人赶走，建立起了自己的庄园。这样荒诞不经的事情在现实中根本就不可能发生，而公猪拿破仑的杂乱统治，反映了现实社会的混乱无章。里面的驴本杰明有点黑色幽默主人公的精神，它虽然很精明，能够看透农庄中的种种卑劣行为，可是他一直保持沉默，一副事不关己的样子。其实他自己也明白，即使他采取行动也改变不了什么。荒诞的情节、荒诞的角色设置，使《动物庄园》充满荒诞色彩。 </p>
<p><strong>反差</strong></p>
<p>奥威尔采用事物前后强烈的反差，揭露事情的本质变化，达到嘲讽的目的。在《动物庄园》中，革命刚刚胜利，动物们制定了“七诫”：1.凡是两条腿走路的都是敌人；2.凡是四条腿走路或者有翅膀的都是朋友；3.任何动物不得穿衣服；4.任何动物不得睡在床上；5.任何动物不得饮酒；6.任何动物不得杀害别的动物；7.所有动物一律平等。可是到了后来，这七条戒律变得面目全非。“农场里其他动物学会A字，再也没有学会第二个字母的了。另外一点是，像羊、鸡、鸭这些愚笨的动物，甚至连七条戒律也记不住。雪球煞费脑筋地思索了一番，最后宣布说，七条戒律的含义实际上可以概括为一句：“‘四条腿好，两条腿坏’。他说这句话包含了动物主义的基本道理。谁能彻底把握这句话，谁就保险不受人的影响。”由此可知，七诫的内容是好的，可是在大多数动物当中，他们根本就记不住七诫是什么内容，更别说去理解七诫的真正含义。从而为后来七诫的不断异化提供了条件。通过前后鲜明的对比，可以看到革命在公猪拿破仑的统治下发生了本质的变化，由先前老上校提出的民主构想变成了极权统治。</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>呼兰河传</title>
    <url>/2022/07/20/%E5%91%BC%E5%85%B0%E6%B2%B3%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>摘抄自矛盾</p>
</blockquote>
<p><code>   呼兰河这小城里边，以前住着我的祖父，现在埋着我的祖父。      我生的时候，祖父已经六十多岁了，我长到四五岁，祖父就快七十了，我还没有长到二十岁，祖父就七八十岁了。祖父一过了八十，祖父就死了。      从前那后花园的主人，而今不见了。老主人死了，小主人逃荒去了。      那园里的蝴蝶，蚂蚱，蜻蜓，也许还是年年仍旧，也许现在完全荒凉了。      小黄瓜，大倭瓜，也许还是年年地种着，也许现在根本没有了。      那早晨的露珠是不是还落在花盆架上。那午间的太阳是不是还照着那大向日葵，那黄昏时候的红霞是不是还会一会工夫会变出来一匹马来，一会工夫会变出来一匹狗来，那么变着。      这一些不能想像了。      听说有二伯死了。      老厨子就是活着年纪也不小了。      东邻西舍也都不知怎样了。      至于那磨坊里的磨官，至今究竟如何，则完全不晓得了。      以上我所写的并没有什么优美的故事，只因他们充满我幼年的记忆，忘却不了，难以忘却，就记在这里了。</code></p>
<span id="more"></span>

<p>本书通过一位解事情颇早的单纯小女孩向我们展现了，民国初年，在东北的呼兰河县百姓一年又一年的简单生活。</p>
<p>一年之中，他们很有规律的过生活；一年之中，必定有跳大神，唱秧歌，放河灯，野台戏子，四月十八日娘娘庙大会……这些热闹隆重的节日，而这些节日也和他们的日常生活一样多么单调而呆板。</p>
<p>呼兰河这小城的生活科又不是没有音响和色彩的。</p>
<p>大街小巷，每一茅舍内，每一篱笆后边，充满了唠叨，争吵，苦笑，乃至梦呓。一年四季，依着那些走马灯似的挨次到来的隆重热闹的节日，在灰黯的日常生活的背景前，呈现了粗线条的大红大绿的带有原始性的色彩。</p>
<p>呼兰河的人民当然多是良善的。</p>
<p>他们照着几千年传下来的习惯而思索，而活着；他们有时也许显得麻木，但实在他们也颇敏感而琐细，芝麻大的事他们也会议论或者争吵三天三夜而不休。他们有时也许显得愚昧而蛮横，但实在他们并没没有害人或自害的意思，他们是按照他们认为做合理的方法，“该怎么办就怎么办”。</p>
<p>他们对于老胡家的小团圆媳妇的不幸遭遇，当然很同情，我们怜惜她，我们为她叫委屈，同时我们也憎恨——但憎恨的对象不是小团圆媳妇的婆婆，我们只觉得这婆婆也可怜，她同样是“照着几千年传下来的习惯而思索，而活着”的一个牺牲者。她的“立场”，她的叫人觉得可恨而又可怜的地方，在她“心安理得地花了五十吊”请那骗子——云游道人给小团圆媳妇治病的时候，就由她自己申说得明明白白：</p>
<p>她来到我家，我没给她气受，那家的团圆媳妇不受气，一天打八顿，骂三场，可是我也打过她，那是我给她一个下马威，我只打了她一个多月，虽然说我打得狠了一点，可是不狠那能够规矩出一个好人来。我也是不愿意狠打她的，打的连喊带叫的，我是为她着想，不打得狠一点，她是不能够中用的。……</p>
<p>这老胡家的婆婆为什么坚信她的小团圆媳妇必得狠狠地“管教”呢？小团圆媳妇有些什么地方叫她老人家看着不顺眼呢？因为那小团圆媳妇第一天来到老胡家就由街坊公论判定她是“太大方了”，“一点也不知道羞，头一天来到了婆家，吃饭就吃三碗”，而且“十四岁就长得那么高”也是不合规律，——因为街坊公论说：这小团圆媳妇不像个小团圆媳妇，所以更使她婆婆坚信非严加管教不可，而且更因为“只想给她一个下马威”的时候，这“太大方”的小团圆媳妇居然不服管教——带哭连喊，说要回“家”去，——所以不得不狠狠地打了她一个月。</p>
<p>街坊们当然也都是和那小团圆媳妇无怨无仇，都是为了她好，——要她像一个小团圆媳妇。所以当这小团圆媳妇被“管教”成病的时候，不但她的婆婆肯舍大把的钱为她治病（跳神，各种偏方），而重街坊也热心地给她出主意。</p>
<p>而结果呢？结果是把一个“黑忽忽的，笑呵呵的”名为十四岁其实不过十二，可实在长得比普通十四岁的女孩子又高大又结实的小团圆媳妇给活生生“送回老家去”！</p>
<p>呼兰河小城的生活是充满了各种各样的声响和色彩的，可有时刻板单调。</p>
<p>呼兰河小城的生活是寂寞的。</p>
<p>萧红的童年生活就是在这种的寂寞环境中过去的。这在她心灵上留的烙印有那么深，自然不言而喻。</p>
<p>无意识地违背了“几千年传下来的习惯而思索，而生活”的老胡家的小团圆媳妇终于死了，有意识地反抗着几千年传下来的习惯而思索，而生活的萧红则以含泪的微笑回忆这寂寞的小城，怀着寂寞的心情，在悲壮的斗争的大时代。</p>
<p>也许有人会觉得《呼兰河传》不是一部小说。 </p>
<p>他们也许会这样说：没有贯串全书的线索，故事和人物都是零零碎碎，都是片段的，不是整个的有机体。 </p>
<p>也许又有人觉得《呼兰河传》好像是自传，却又不完全像自传。 </p>
<p>但是我却觉得正因其不完全像自传，所以更好，更有意义。 </p>
<p>而且我们不也可以说：要点不在《呼兰河传》不像是一部严格意义的小说，而在它于这“不像”之外，还有些别的东西——一些比“像”一部小说更为“诱人”些的东西：它是一篇叙事诗，一幅多彩的风土画，一串凄婉的歌谣。 </p>
<p>有讽刺，也有幽默。开始读时有轻松之感，然而愈读下去心头就会一点一点沉重起来。可是，仍然有美，即使这美有点病态，也仍然不能不使你眩惑。 </p>
<p>也许你要说《呼兰河传》没有一个人物是积极性的。都是些甘愿做传统思想的奴隶而又自怨自艾的可怜虫，而作者对于他们的态度也不是单纯的。她不留情地鞭笞他们，可是她又同情他们：她给我们看，这些屈服于传统的人多么愚蠢而顽固——有的甚至于残忍，然而他们的本质是良善的，他们不欺诈，不虚伪，他们也不好吃懒做，他们极容易满足。有二伯，老厨子，老胡家的一家子，漏粉的那一群，都是这样的人物。他们都像最下等的植物似的，只要极少的水份，土壤，阳光——甚至没有阳光，就能够生存了，磨官冯歪嘴子是他们中间生命力最强的一个——强的使人不禁想赞美他。然而在冯歪嘴子身上也找不出什么特别的东西。除了生命力特别顽强，而这是原始性的顽强。 </p>
<p>如果让我们在《呼兰河传》找作者思想的弱点，那么，问题恐怕不在于作者所写的人物都缺乏积极性，而在于作者写这些人物的梦魇似的生活时给人们以这样一个印象：除了因为愚昧保守而自食其果，这些人物的生活原也悠然自得其乐，在这里，我们看不见封建的剥削和压迫，也看不见日本帝国主义那种血腥的侵略。而这两重的铁枷，在呼兰河人民生活的比重上，该也不会轻于他们自身的愚昧保守罢？ </p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>在VirtualBox中创建共享文件夹</title>
    <url>/2021/01/19/%E5%9C%A8VirtualBox%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol>
<li><p>打开VirtualBox管理器，点击设置</p>
</li>
<li><p>点击“共享文件夹”选项右侧的加号。</p>
</li>
<li><p>填入你想要共享的文件路径</p>
</li>
<li><p>共享路径选好后，会自动将文件夹名称作为共享文件夹名称，勾上“固定分配”，这样这个路径可以永久使用。</p>
</li>
<li><p>现在进入虚拟机，打开Terminal，输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /pcshare</span><br><span class="line"></span><br><span class="line">sudo chmod 777 /pcshare</span><br><span class="line"></span><br><span class="line">sudo mount -t vboxsf uBuntuSharePath /pcshare</span><br></pre></td></tr></table></figure>

<p><strong>注意uBuntuSharePath就是之前步骤所创建的PC机上的共享文件夹名称。</strong></p>
</li>
<li><p>之后每次启动虚拟机，都需要先在Terminal中输入命令“sudo mount -t vboxsf uBuntuSharePath /pcshare”。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>因为一句诗而迷上苏轼</title>
    <url>/2022/01/08/%E5%9B%A0%E4%B8%BA%E4%B8%80%E5%8F%A5%E8%AF%97%E8%80%8C%E8%BF%B7%E4%B8%8A%E8%8B%8F%E8%BD%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><center>
  临 江 仙 <br>
  夜 归 临 皋 <br><br>
  夜饮东坡醒复醉，归来仿佛三更。家童鼻息已雷鸣。敲门都不应，倚杖听江声。<br>
  长恨自身非我有，何时忘却营营。夜阑风静縠纹平。<b>小舟从此逝，江海寄余生。</b><br>



<span id="more"></span>

<p><br><br></p>
<center>定 风 波<br>
  <small>三月七日，沙湖道中遇雨，雨具先去，通行皆狼狈，余独不觉。已而遂晴，故作此。</small><br><br>
  莫听穿林打叶声，何妨吟啸且徐行，<b>竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生</b><br>
    料峭春风吹酒醒，微冷，山头斜照却相迎，<b>回首向来萧瑟处，归去，也无风雨也无晴。</b><br>

<p><br><br></p>
<center>
  和 子 由 渑 池 怀 旧<br><br>
    <b>人生到处知何处，应似飞鸿踏雪泥。</b><br>
  泥上偶有留指爪，飞鸿那复计东西。<br>
  老僧已死成新塔，坏壁无由见旧题。<br>
  往日崎岖还记否，路长人困蹇驴嘶。<br>
</center>

<p><br><br></p>
<center>
  望 江 南<br>
  超 然 台 作<br><br>
  春未老，风细柳斜斜。试上超然台上看，半壕春水一城花，烟雨暗千家。<br>
  寒食后，酒醒却咨成嗟。<b>休对故人思故国，且降新火试新茶，诗酒趁年华。</b><br>
</center>



<p><br><br></p>
<center>
  临 江 仙<br>
  送 钱 穆 父<br><br>
  一别都门三改火，天涯踏尽红尘。依然一笑作春温。无波真古井，有节是秋筠。<br>
  惆怅孤帆连夜发，送行淡月微云。尊前不用翠眉颦。<b>人生如逆旅，我亦是行人。</b><br>
</center>

<p><br><br></p>
<center>
水 调 歌 头<br>
<small>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</small><br><br>
明月几时有，把酒问青天。<b>不知天上宫阙，今夕是何年。</b>我欲乘风归去，唯恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间。<br>
转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆。人有悲欢离合，月有阴晴圆缺，此事古难全。<b>但愿人长久，千里共婵娟。</b><br>
</center>



<p><br><br></p>
<center>
卜 算 子<br>
黄州定慧院寓居作<br><br>
缺月挂疏桐，漏断人初静。谁见幽人独往来，缥缈孤鸿影。<br>
惊起却回头，有恨无人省。<b>拣尽寒枝不肯栖，寂寞沙洲冷。</b><br>
</center>

<p><br><br></p>
<center>
题 西 林 壁<br><br>
横看成岭侧成峰，远近高低各不同。<br>
<b>不识庐山真面目，只缘身在此山中。</b><br>
</center>



<center>
 饮湖上初晴后雨二首（其二）<br><br>
水光潋滟晴方好，山色空蒙雨亦奇。<br>
<b>欲把西湖比西子，淡妆浓抹总相宜。</b><br>
</center>

<p><br><br></p>
<center>
念 奴 娇<br>
赤壁怀古<br><br>
大江东去，浪淘尽、千古风流人物。故垒西边，人道是、三国周郎赤壁。乱石穿空，惊涛拍岸，卷起千堆雪。江山如画，一时多少豪杰！<br>
遥想公瑾当年，小乔初嫁了，雄姿英发。羽扇纶巾，谈笑间、樯橹灰飞烟灭。<b>故国神游，多情应笑我、早生华发。人生如梦，一樽还酹江月。</b><br>
</center>



<p><br><br></p>
<center>
江 城 子<br>
乙卯正月二十日夜记梦<br><br>
十年生死两茫茫。不思量，自难忘。千里孤坟，无处话凄凉。<b>纵使相逢应不识，尘满面，鬓如霜。</b><br>
夜来幽梦忽还乡，小轩窗，正梳妆。<b>相顾无言，惟有泪千行。</b>料得年年肠断处：明月夜，短松冈。<br>
</center>

<p><br><br></p>
<center>
浣 溪 沙<br>
<small>元丰七年十二月二十四日，从泗州刘倩叔游南山。</small><br><br>
细雨斜风作小寒，淡烟疏柳媚晴滩。入淮清洛渐漫漫。<br>
<b>雪沫乳花浮午盏，蓼茸蒿笋试春盘。人间有味是清欢。</b><br>
</center>

<p><br><br></p>
<center>
和董传留别<br><br>
<b>粗缯大布裹生涯，腹有诗书气自华。</b><br>
厌伴老儒烹瓠叶，强随举子踏槐花。<br>
囊空不办寻春马，眼乱行看择婿车。<br>
得意犹堪夸世俗，诏黄新湿字如鸦。<br>
</center>

<p><br><br></p>
<center>
蝶 恋 花<br><br>
花褪残红青杏小，燕子飞时，绿水人家绕。枝上柳绵吹又少，<b>天涯何处无芳草！</b><br>
墙里秋千墙外道，墙外行人，墙里佳人笑。笑渐不闻声渐悄，<b>多情却被无情恼。</b><br>
</center>

<p><br><br></p>
<center>
定 风 波<br>
<small>王定国歌儿曰柔奴，姓宇文氏，眉目娟丽，善应对，家世住京师。定国南迁归，余问柔：“广南风土应是不好？”柔对曰：“此心安处，便是吾乡。”因为缀词云。</small><br><br>
常羡人间琢玉郎，天应乞与点酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。</b><br>
<b>万里归来颜愈少，微笑，笑时犹带岭梅香。试问岭南应不好，却道，此心安处是吾乡。</b><br>
</center>



<p><br><br></p>
<center>
水 调 歌 头<br>
黄州快哉亭赠张偓佺<br><br>
落日绣帘卷，亭下水连空。知君为我新作，窗户湿青红。长记平山堂上，欹枕江南烟雨，杳杳没孤鸿。认得醉翁语：“山色有无中。”<br>
一千顷，都镜净，倒碧峰。忽然浪起，掀舞一叶白头翁。堪笑兰台公子，未解庄生天籁，刚道有雌雄。<b>一点浩然气，千里快哉风。</b>
</center>




]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>好好活下去！</title>
    <url>/2022/02/13/%E5%A5%BD%E5%A5%BD%E6%B4%BB%E4%B8%8B%E5%8E%BB%EF%BC%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-GnyCqtmx" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1856336348" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<p>情感真的是太复杂的东西了，唯一能做的就是好好活下去了吧。</p>
<p>所有的行程都排在了春天以后，等待着一个期许。</p>
<p>我想待在家中，却不想因为风雪而被困住。</p>
<span id="more"></span>

<p><img src="2.jpg"></p>
<p><small>北京游乐园，这是我第一次看见摩天轮。</small></p>
<br>

<p><img src="3.jpg"></p>
<p><small>北京游乐园其实早已废弃10年，坐落在城中心显得格外诡异，北京市政府最近才将其改建为龙潭中湖公园。唯独这个摩天轮完好保存下来，成为一个地标性的建筑物。</small></p>
<br>

<p><img src="5.jpg"></p>
<p><small>飞鸟、渡轮、湖水、围栏、剧院</small></p>
<br>

<p><img src="7.jpg"></p>
<p><small>很美的一张照片，来自于一位up主，拍摄于黑龙江，气温为-20°C。</small></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的shell脚本</title>
    <url>/2022/07/31/%E5%A5%BD%E7%94%A8%E7%9A%84shell%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="批量修改文件名"><a href="#批量修改文件名" class="headerlink" title="批量修改文件名"></a>批量修改文件名</h3><p>原始文件名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file_1_finished.jpg  file_2_finished.jpg  file_3_finished.jpg</span><br></pre></td></tr></table></figure>

<p><strong>批量修改文件名</strong></p>
<p>将所有文件名的 <code>_finished</code> 去掉</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for file in `ls *.jpg`</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">    # echo $file|sed &#x27;s/_finished//g&#x27;</span><br><span class="line"></span><br><span class="line">    mv $file `echo $file|sed &#x27;s/_finished//g&#x27;`</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>修改后的文件名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file_1.jpg  file_2.jpg  file_3.jpg</span><br></pre></td></tr></table></figure>

<p><strong>批量添加文件名</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls|awk -F &quot;.&quot; &#x27;&#123;print &quot;mv&quot;,$0,$1&quot;_finished.&quot;$2&#125;&#x27;|bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;mv&quot;</span> 拼成了mv修改命令</span></span><br><span class="line">mv file_1.jpg file_1_finished.jpg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |bash 由bash执行命令</span></span><br></pre></td></tr></table></figure>

<p><strong>rename方法</strong> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改前的文件名称：file_1_finished.jpg  file_2_finished.jpg  file_3_finished.jpg</span></span><br><span class="line"></span><br><span class="line">rename &quot;_finished&quot; &quot;&quot; *.jpg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改后的文件名称：file_1.jpg  file_2.jpg  file_3.jpg</span></span><br></pre></td></tr></table></figure>



<h3 id="删除find后的文件名"><a href="#删除find后的文件名" class="headerlink" title="删除find后的文件名"></a>删除find后的文件名</h3><p><code>find ./ -name filename -exec rm -rf &#123;&#125; \;</code></p>
<p>(1) “./“ 表示从当前目录开始递归查找</p>
<p>(2) “ -name ‘*.exe’ “根据名称来查找，要查找所有以.exe结尾的文件夹或者文件</p>
<p>(3) “ -type f “查找的类型为文件</p>
<p>(4) “-print” 输出查找的文件目录名</p>
<p>(5) 最主要的是是-exec了，-exec选项后边跟着一个所要执行的命令，表示将find出来的文件或目录执行该命令。<br>exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{}，一个空格和一个，最后是一个分号.</p>
<h3 id="为每个文件夹下的文件生成list绝对路径"><a href="#为每个文件夹下的文件生成list绝对路径" class="headerlink" title="为每个文件夹下的文件生成list绝对路径"></a>为每个文件夹下的文件生成list绝对路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) [yujing@capricorn 8k16bitLeft]$ ls</span><br><span class="line">办公室  虫  厨房  纯音乐  地铁  歌曲人声  公交车  核酸  火车  街道  雷雨声  马路边  鸟  人声  食堂  手机铃声  洗衣机  装修</span><br><span class="line"></span><br><span class="line">(base) [yujing@capricorn 8k16bitLeft]$ list=<span class="string">&quot;.list&quot;</span></span><br><span class="line"></span><br><span class="line">(base) [yujing@capricorn 8k16bitLeft]$ <span class="keyword">for</span> file <span class="keyword">in</span> `ls`; <span class="keyword">do</span> ls `<span class="built_in">pwd</span>`/<span class="variable">$file</span>/* &gt; ../$file<span class="variable">$list</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">(base) [yujing@capricorn voice]$ ls</span><br><span class="line">8k16bitLeft  虫.list    纯音乐.list  歌曲人声.list  核酸.list  街道.list    马路边.list  人声.list  手机铃声.list  装修.list</span><br><span class="line">办公室.list  厨房.list  地铁.list    公交车.list    火车.list  雷雨声.list  鸟.list      食堂.list  洗衣机.list</span><br></pre></td></tr></table></figure>



<h3 id="检测磁盘IO"><a href="#检测磁盘IO" class="headerlink" title="检测磁盘IO"></a>检测磁盘IO</h3><p><code>iostat命令</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost unimrcp]<span class="comment"># iostat</span></span><br><span class="line">Linux 3.10.0-1062.4.1.el7.x86_64 (localhost.localdomain) 	07/21/2022 	_x86_64_	(24 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           4.63    0.00    0.84    0.61    0.00   93.91</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">sdb              30.54       558.87       219.60 4631847649 1820013606</span><br><span class="line">sdc               0.00         0.00         0.00       4372          0</span><br><span class="line">sda              18.88       105.91       843.55  877787772 6991263568</span><br><span class="line">dm-0             31.27       558.82       219.44 4631447628 1818731803</span><br><span class="line">dm-1              0.05         0.04         0.15     366288    1279052</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>监控IO日志，每1秒执行一次，3次后停止监控</p>
<p><code>iostat -d 1 3</code></p>
<p>每一秒检测一次sdb盘的io，将日志存放在io.log</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125; ;<span class="keyword">do</span> `iostat | grep <span class="string">&quot;sdb&quot;</span> &gt;&gt; io.log`;sleep 1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>



<h3 id="截取日志中间几行到几行"><a href="#截取日志中间几行到几行" class="headerlink" title="截取日志中间几行到几行"></a>截取日志中间几行到几行</h3><p>从第3000行开始，显示1000行，即显示3000~3999行</p>
<p><code>cat 文件名 | tail -n +3000 | head -n 1000</code></p>
<p><strong>通过sed查看，推荐</strong></p>
<p><code>sed -n &#39;10,20p&#39; 文件名</code></p>
<p>查看该文件10-20行</p>
<blockquote>
<p><a href="http://c.biancheng.net/linux/sed.html">sed命令妙用</a></p>
</blockquote>
<h3 id="只显示文件最后一行或只显示第一行"><a href="#只显示文件最后一行或只显示第一行" class="headerlink" title="只显示文件最后一行或只显示第一行"></a>只显示文件最后一行或只显示第一行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示第一行</span></span><br><span class="line">sed -n <span class="string">&#x27;1p&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 显示最后一行</span></span><br><span class="line">sed -n <span class="string">&#x27;$p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure>



<h3 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我自己写的脚本，还请海涵</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">获取当前时间</span></span><br><span class="line">date1=`date &quot;+%Y%m%d%H%M%S&quot;`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">========================配置==============================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mrcp原始日志</span></span><br><span class="line">path_m=&quot;/usr/local/unimrcp/log/unimrcpserver-00.log&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vcg原始日志</span></span><br><span class="line">path_v=&quot;/log/qy/qy.log&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果存放路径</span></span><br><span class="line">result=&quot;/usr/local/unimrcp/result/&quot;$date1&#x27;/&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">========================配置==============================</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建日期路径</span></span><br><span class="line">mkdir -p $result</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------io-------------------------------</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    # 检测umc进程，如果进程消失，停止所有监控</span><br><span class="line">    UMC_PID=`ps -ef | grep -v grep |grep &quot;./umc&quot; | awk &#x27;&#123;print $2;exit&#125;&#x27;`</span><br><span class="line">    if [ -n &quot;$UMC_PID&quot; ]; then</span><br><span class="line">        printf &quot;`date &quot;+%Y-%m-%d %H:%M:%S&quot;`\t&quot; &gt;&gt; $result&quot;io.log&quot;</span><br><span class="line">        iostat |grep sdb | awk &#x27;&#123;print $1 &quot;\t\t\t&quot; $4 &quot;\t\t\t&quot; $5&#125;&#x27;&gt;&gt; $result&quot;io.log&quot;</span><br><span class="line">        sleep 1</span><br><span class="line">    else</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">处理IO日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat $result<span class="variable">$date1</span><span class="string">&quot;_io.log&quot;</span> | grep sdb | awk <span class="string">&#x27;&#123;print $1 &quot;\t\t\t&quot; $4 &quot;\t\t\t&quot; $5&#125;&#x27;</span> &gt; <span class="variable">$result</span><span class="string">&quot;ioDone.log&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印IO日志路径</span></span><br><span class="line">echo &quot;io监控完毕，日志存放路径：&quot;$result&quot;io.log&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------提取日志--------------------------</span></span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;path_v&#125;&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;开始提取vcg日志&quot;</span><br><span class="line"></span><br><span class="line">    #获取vcg对应的行号</span><br><span class="line">    nu_start=`grep -n &quot;request=http:&quot; $path_v | sed -n &#x27;$p&#x27; | awk -F &#x27;:&#x27; &#x27;&#123;print $1;exit&#125;&#x27;`</span><br><span class="line">    echo &quot;VCG开始行号：$nu_start&quot;</span><br><span class="line"></span><br><span class="line">    #获取最后的行号</span><br><span class="line">    nu_end=`cat $path_v |wc -l`</span><br><span class="line">    echo &quot;VCG结束行号：$nu_end&quot;</span><br><span class="line"></span><br><span class="line">    #截取日志</span><br><span class="line">    sed -n &quot;$&#123;nu_start&#125;,$&#123;nu_end&#125;p&quot; $path_v &gt; $result&quot;vcg.log&quot;</span><br><span class="line"></span><br><span class="line">    #提取结果</span><br><span class="line">    echo &quot;vcg提取结果存放路径：&quot;$result&quot;vcg.log&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;path_m&#125;&quot; ]</span><br><span class="line">then</span><br><span class="line"></span><br><span class="line">    echo &quot;开始提取mrcp日志&quot;</span><br><span class="line">    #获取mrcp日志对应的行号</span><br><span class="line">    nu_start=`grep -n &quot;VCG success&quot; $path_m | sed -n &#x27;$p&#x27; | awk -F &#x27;:&#x27; &#x27;NR==1&#123;print $1&#125;&#x27;`</span><br><span class="line">    echo &quot;MRCP开始行号：$nu_start&quot;</span><br><span class="line"></span><br><span class="line">    #获取最后的行号</span><br><span class="line">    nu_end=`cat $path_m|wc -l`</span><br><span class="line">    echo &quot;MRCP结束行号：$nu_end&quot;</span><br><span class="line"></span><br><span class="line">    #截取日志</span><br><span class="line">    sed -n &quot;$&#123;nu_start&#125;,$&#123;nu_end&#125;p&quot; $path_m &gt; $result&quot;mrcp.log&quot;</span><br><span class="line"></span><br><span class="line">    #提取关键日志信息</span><br><span class="line">    grep -E &quot;VCG success|vcg ret&quot; $result&quot;mrcp.log&quot; | awk &#x27;&#123;print $2&#125;&#x27;|sed &#x27;s/\(.*\)\(:\)/\1\./&#x27; &gt; $result&quot;result_mrcp.log&quot;</span><br><span class="line"></span><br><span class="line">    #提取结果</span><br><span class="line">    echo &quot;mrcp提取结果存放路径：&quot;$result&quot;result_mrcp.log&quot;</span><br><span class="line">    cat $result&quot;result_mrcp.log&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>



<h3 id="使用dd命令快速生成大文件或者小文件的方法"><a href="#使用dd命令快速生成大文件或者小文件的方法" class="headerlink" title="使用dd命令快速生成大文件或者小文件的方法"></a>使用dd命令快速生成大文件或者小文件的方法</h3><ol>
<li>dd命令可以轻易实现创建指定大小的文件，如</li>
</ol>
<p><code>dd if=/dev/zero of=test bs=1M count=1000</code></p>
<p>在当前目录下会生成一个1000M的test文件，文件内容为全0（因从/dev/zero中读取，/dev/zero为0源），但是这样为实际写入硬盘，文件产生速度取决于硬盘读写速度，如果欲产生超大文件，速度很慢。在某种场景下，我们只想让文件系统认为存在一个超大文件在此，但是并不实际写入硬盘则可以</p>
<p><code>dd if=/dev/zero of=test bs=1M count=0 seek=100000</code></p>
<p>此时创建的文件在文件系统中的显示大小为100000MB，但是并不实际占用block，因此创建速度与内存速度相当，seek的作用是跳过输出文件中指定大小的部分，这就达到了创建大文件，但是并不实际写入的目的。当然，因为不实际写入硬盘，所以你在容量只有10G的硬盘上创建100G的此类文件都是可以的。</p>
<ol start="2">
<li>随机生成1百万个1K的文件</li>
</ol>
<p><code>seq 1000000 | xargs -i dd if=/dev/zero of=&#123;&#125;.dat bs=1024 count=1 </code></p>
<p>dd命令功能很强大具体可以参考 <a href="http://www.cnblogs.com/licheng/archive/2008/03/21/1116492.html">http://www.cnblogs.com/licheng/archive/2008/03/21/1116492.html</a></p>
<p>转载自： <a href="http://blog.csdn.net/cywosp/article/details/9674757">http://blog.csdn.net/cywosp/article/details/9674757</a></p>
<h3 id="查看当前路径下的进程"><a href="#查看当前路径下的进程" class="headerlink" title="查看当前路径下的进程"></a>查看当前路径下的进程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep `pwd`</span><br></pre></td></tr></table></figure>



<h3 id="根据进程号查看当前程序路径"><a href="#根据进程号查看当前程序路径" class="headerlink" title="根据进程号查看当前程序路径"></a>根据进程号查看当前程序路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwdx 18337</span><br></pre></td></tr></table></figure>



<h3 id="为每个文件单独打包"><a href="#为每个文件单独打包" class="headerlink" title="为每个文件单独打包"></a>为每个文件单独打包</h3><p><a href="https://www.runoob.com/linux/linux-comm-xargs.html">xargs</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每个文件都单独打包</span></span><br><span class="line">ls |xargs -i tar zcvf &#123;&#125;.tar.gz &#123;&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar解压文件夹下的所有tar.gz文件</span></span><br><span class="line">ls *.tar.gz | xargs -n1 -I &#123;&#125; tar xzvf &#123;&#125; -C ..</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>ls *.tar.gz</code>         列出所有的压缩包</p>
</li>
<li><p><code>xargs -n1</code>        一次只使用一个argument</p>
</li>
<li><p><code>-I &#123;&#125;</code>                 用符号{}代表上面的argument</p>
</li>
<li><p><code>tar xzvf &#123;&#125;</code>        解压缩每一个压缩包</p>
</li>
<li><p><code>-C ..</code>                输出路径，这里是父路径</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>如果你也曾迷茫</title>
    <url>/2022/01/18/%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B9%9F%E6%9B%BE%E8%BF%B7%E8%8C%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-BWEXaZkO" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="355798" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>

<blockquote>
<p>转自：央视新闻夜读</p>
</blockquote>
<blockquote>
<p>在《夜读》读者的留言里，有许多这样的<strong>“灵魂发问”</strong>：</p>
<p><strong>马上18了</strong>，大家都说这是最好的年龄，但<strong>我为什么觉得这么迷茫？</strong></p>
<p><strong>还有几个月就要毕业了，却完全不知道自己要做什么</strong>，好迷茫，怎么办？</p>
<p><strong>北漂的第十年，最近突然开始迷茫</strong>，我的坚持真的有意义吗？</p>
<p>已经<strong>28岁了，却好像仍然没有在社会上找到自己的位置</strong>，怎么会这样？</p>
<p>过了年就30了，<strong>立没立不知道，迷茫倒是真的……</strong></p>
<p>你大概也察觉出关键词了吧：<strong>迷茫。</strong></p>
<p>谁的青春不迷茫？但迷茫这种状态，并不是青春的专属，无论你在人生的哪个阶段，都难免有被它笼罩的时刻，所以，学会走出迷茫，也许是一个人一生的功课。</p>
<p>《夜读》奉上几个走出迷茫的小建议，可能算不上什么“解药”，但若能给你些许慰藉，便是值得。</p>
</blockquote>
<span id="more"></span>

<br>

<h4 id="01-不要为没有到来的坏事担忧"><a href="#01-不要为没有到来的坏事担忧" class="headerlink" title="01 不要为没有到来的坏事担忧"></a>01 <strong>不要为没有到来的坏事担忧</strong></h4><p><strong>很多时候，人是被自己想象出来的困难打败的</strong>：“会不会有很多障碍？”“这个根本不可能实现啊！”“要是失败了怎么办？”……</p>
<p><strong>擅自放大困难，提前对结果作悲观的设想，几乎是一种对自己的“恐吓”，会制造出另一种焦虑，让人陷入“干脆放弃好了”的漩涡</strong>，结果就是你在行动之前就望而却步了，而问题本身依然悬而未解。</p>
<p>想得太多，就容易丧失行动力。<strong>如果非得等到一切完美就绪才开始，那我们可能永远也无法开始。</strong></p>
<p>迷茫不定的时候，与其一个劲担心这担心那，不如直接去做吧，<strong>做着做着可能就有答案了。</strong>也许的确会有困难，也许并不能保证一定有“最好的结果”，但至少在向目标靠近。而且，请相信，只要努力了，结果真的没有想象的那么坏。</p>
<br>

<h4 id="02-读书吧，书里有你要的答案"><a href="#02-读书吧，书里有你要的答案" class="headerlink" title="02 读书吧，书里有你要的答案"></a>02 <strong>读书吧，书里有你要的答案</strong></h4><p>有人说：<strong>如果想在迷茫期和低谷期提升自己，又毫无头绪不知道该怎么做，去做这两件事一定不会错——读书和锻炼身体。</strong></p>
<p>身体健康了，意志力才不会消沉；<strong>而读书，则是一个通过阅读不断理解自己、理解世界的过程。</strong>全世界最伟大的智者们，用他们毕生的智慧不断触发你的思考，让你获得沉静下来的力量和面对困境的勇气。<strong>哪怕不能立马帮你解决眼下的难题，也会一点点安慰你、滋养你、改变你、塑造你，带给你内心的笃定和思想的丰厚，这种笃定，助你驱赶迷茫；这种丰厚，帮你对抗平庸。</strong></p>
<p><strong>“心之何如，有似万丈迷津，遥亘千里，其中并无舟子可渡人，除了自渡，他人爱莫能助。”</strong>人生如蹚江过海，多数时候只能自渡，那些迷茫不知何往的时刻，<strong>书可作扁舟，渡你过江海。</strong></p>
<br>

<h4 id="03-直面问题，不回避不逃避"><a href="#03-直面问题，不回避不逃避" class="headerlink" title="03 直面问题，不回避不逃避"></a>03 <strong>直面问题，不回避不逃避</strong></h4><p>不知道大家有没有听过这句话：<strong>“我经常有那种感觉，如果这个事情来了，你却没有勇敢地去解决掉，它一定会再来。生活真是这样，它会一次次地让你去做这个功课，直到你学会为止。”</strong></p>
<p>某种程度上，每个人都害怕承受痛苦，遇到问题时都会想逃避。<strong>有人通过拖延来逃避</strong>，仿佛拖着拖着事情就可以解决；<strong>有人通过无视来逃避</strong>，好像只要不去看不去想，它们就不存在；<strong>有人通过转移来逃避</strong>，比如用无止尽的娱乐麻痹自己。可<strong>逃避从来都不是什么轻松的事，不仅无助于问题的解决，反而会让迷茫的情绪不断放大和蔓延，造成更大的混沌。</strong></p>
<p>M·斯科特·派克在《少有人走的路》里说：“<strong>回避问题和逃避痛苦的倾向，是人类心理疾病的根源</strong>……勇于承担责任，敢于面对困难，才能够使心灵变得健康。”</p>
<p>痛苦和困难本身也许没有价值，但你直面它们的积极态度，你敢于承受它们的勇气，一定有。<strong>越迷茫，越不能躲起来，直面问题、承担责任、忠于事实、保持平衡****，会有意想不到的收获。</strong></p>
<br>

<h4 id="04-越迷茫，越要做具体的事"><a href="#04-越迷茫，越要做具体的事" class="headerlink" title="04 越迷茫，越要做具体的事"></a>04 <strong>越迷茫，越要做具体的事</strong></h4><p>你觉得，迷茫的反义词是什么？</p>
<p>有些人可能会说是坚定，但还有另一种说法：<strong>迷茫的反义词是具体。</strong></p>
<p>比如，很多人大学毕业的时候都会十分迷茫，不知道自己未来该做什么，但如果把这个问题具体化，一步步细化成：我要找一份工作。一份什么样的工作？可能钱不是很多但能让我快速成长的工作，最好是大一点的平台。那哪些工作比较符合这个要求，你要为此做什么准备？……</p>
<p><strong>这样一步步具体下来，会比较容易找到方法和路径。</strong></p>
<p>迷茫是一种空泛的、说不清楚的、没有着力点的情绪，所以才让人焦虑，但<strong>当你抓到那个把手，从某件具体的事做起，开启你的创造之旅时，焦虑就会一点点退去。</strong></p>
<p>作家松浦弥太郎也有类似的建议，他对那些对未来感到不安的人说：<strong>“按照顺序，一件一件地用心去处理好眼前发生的问题，这才是你该做的事。只要这么做，你心中的不安便不会再任意膨胀，只因你采取了具体的行动。”</strong></p>
<br>

<h4 id="05-放空一会儿，再上路"><a href="#05-放空一会儿，再上路" class="headerlink" title="05 放空一会儿，再上路"></a>05 <strong>放空一会儿，再上路</strong></h4><p>要在迷茫时找回状态，并不是一日之功，不必把自己逼得太紧，也不要急着一步到位，试着接受目前的状态，暂时放空一下吧。<strong>我们都在努力成为自己想成为的人，但在这条路上学会放松，同样必要。</strong></p>
<p>不知道该做什么的时候，你可以睡觉发呆，可以观山看海，可以看花怎么开叶如何黄，可以去游乐场和孩童同乐，可以看一场喜剧电影，可以笑笑跑跑跳跳……总之，<strong>你可以停下来喘口气，在生活的缝隙里，找到爱、温暖，以及快乐的能力。</strong></p>
<p>当心情平静下来，精神得到放松，<strong>你可能会对这个世界有更清晰的看法，那些“无法解决”的问题，也可能有了新的转机。</strong></p>
<p>更重要的是，暂停后的你，已经备足力气，可以再次上路，<strong>“去认识自己，去探索世界，去慢慢发现自己真正擅长的事情，然后在这个方向上，成为那个真正可以发光的人。”</strong></p>
<p><strong>迷茫总会过去，因为你永远比它强大。</strong></p>
<br>

<h4 id="06-我目前的状态"><a href="#06-我目前的状态" class="headerlink" title="06 我目前的状态"></a>06 <strong>我目前的状态</strong></h4><p>最近自己总是静不下心来，书读不下去，也不想学习，回家就想着睡觉。</p>
<p>不知道为什么老是想到处乱跑，还想着那晚的城墙、那晚的月亮、那晚的人。</p>
<p>我不过是渴望着微光的萤火虫而已。</p>
<p>或许应该去图书馆静心了。</p>
<p><img src="1.JPG"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>孽子</title>
    <url>/2021/09/20/%E5%AD%BD%E5%AD%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-jbWOpFvu" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1496743563" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br>

<p>那些青春鸟们，他们因为环境因素各有各的苦难，没办法像其他人那样拥有一个美好的少年时光。但是他们从没有放弃对生活的希望，小玉、阿青、吴敏、老鼠他们又迈向了新的生活啊！</p>
<p>生活总是会变得更好的，不是吗！</p>
<p>让我们一起跑吧！</p>
<span id="more"></span>

<p><img src="2.jpg" alt="美好的一天"></p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>存在的艺术</title>
    <url>/2021/11/03/%E5%AD%98%E5%9C%A8%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>请读原著，作者的思想仅能通过原著获得。还没有读这本书，先占个坑，目前正在读他的另一本《爱的艺术》</p>
</blockquote>
<p>传统精神分析的另一危险，</p>
<p>在于这样一个事实。</p>
<p>即病人往往只是生成想做出改变。</p>
<p>如果他患有恼人的症状，</p>
<p>如失眠、阳痿、恐惧当权者、</p>
<p>与异性关系不愉快</p>
<p>或只是感觉萎靡不振，</p>
<p>他当然希望能摆脱这些。</p>
<p>谁不想呢？</p>
<span id="more"></span>

</br>



<p>但他不愿意经历</p>
<p>在成长和孤独中必须要经历的痛苦。</p>
<p>他是如何面对该困境呢？</p>
<p>他期望着只需遵循“基本规则”</p>
<p>不费考虑，</p>
<p>想到什么就说什么</p>
<p>以为这样就可以被治愈，</p>
<p>无疼痛，也无需努力 </p>
</br>



<p>总之，他认为通过谈话就可以被“救赎”。</p>
<p>但世上没有这样的事情。</p>
<p>如果不曾经历痛苦或不愿意经历，</p>
<p>没有人能够成长，</p>
<p>也没有人能追求到</p>
<p>任何值得追求到的东西。</p>
</br>



<hr>
<p>如果他仍是一个人，</p>
<p>而非一件物品时，</p>
<p>这个人就会有孤独感、无力感，</p>
<p>与现今社会有隔离感。</p>
</br>



<p>正因为清醒，</p>
<p>他才不禁感到痛苦，</p>
<p>尽管他可以体验喜悦和明晰的瞬间，</p>
<p>而这些是他“正常”的同代人体会不到的。</p>
</br>



<p>得神经症也不令人意外，</p>
<p>因为这个健全的人</p>
<p>生活在一个疯狂的社会，</p>
<p>而不是以前那种一个病态的人</p>
<p>试图让自己适应一个病态的社会</p>
<p>所引发的神经症。</p>
</br>



<p>在对他对自己做进一步分析的过程中，</p>
<p>也就是说，在更加独立更加自主的过程中，</p>
<p>他的神经质症状会自愈。</p>
<p>说到底，各种神经症的发生都意味着</p>
<p>一个人没能解开存在之谜。</p>
<hr>
<p>每天早晨应该进行至少三十分钟的自我分析，</p>
<p>如果可能的话，</p>
<p>尽量在相同的时间和地点，</p>
<p>并应尽量避免外界的干扰。</p>
</br>



<p>在不得不等待，</p>
<p>或“无事可做”，</p>
<p>或在地铁里、飞机上时，</p>
<p>都可以进行，</p>
<p>而不是马上去阅读一本杂志，</p>
<p>和别人聊天或者做白日梦。</p>
<p>BGM</p>
<p>Olafur Arnalds - Agust</p>
<p>Robert Haigh - Clear Water</p>
<p>Martin Ermen - Gymnpedie Nr.1</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>如何保证测试的覆盖率</title>
    <url>/2021/02/01/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B5%8B%E8%AF%95%E7%9A%84%E8%A6%86%E7%9B%96%E7%8E%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">简单的办法就是：系统测试完毕后，如果一个bug都没有，则代表覆盖率<span class="number">100</span><span class="comment">%。</span></span><br><span class="line"></span><br><span class="line">测试用例覆盖率很难达到<span class="number">100</span><span class="comment">%，越复杂的功能越难保证，只能说尽量提高测试覆盖率。</span></span><br><span class="line">通过以下手段可以提高覆盖率：</span><br><span class="line"><span class="number">1</span>、编写测试用例前，检查相关需求需求、设计文档是否有问题（功能描述不清，设计逻辑缺陷），如有问题找相关设计或者开发问清楚。</span><br><span class="line"><span class="number">2</span>、然后整理成需要覆盖的功能列表或者思维导图，功能列表包含新增和修改功能点，性能需求也要列出来（因为要整理对应的性能测试用例），同时还需要对既有功能进行一个梳理，检查是否会与其他功能有交互，整理出影响点。</span><br><span class="line"><span class="number">3</span>、把功能列表发给组员，并找时间进行会议评审，主要对功能等进行查漏补缺。</span><br><span class="line"><span class="number">4</span>、最后才行进测试用例编写，注意编写规范。</span><br><span class="line"><span class="number">5</span>、编写完毕后，把测试用例发给组员，开会进行评审，主要对检查点、用例规范进行查漏补缺。</span><br><span class="line"><span class="number">6</span>、执行测试用例过程中，发现用例不完善或者错误，需对测试用例进行及时的修改与调优</span><br><span class="line"><span class="number">7</span>、测试完毕后对漏测的bug进行测试用例补充。</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>一、首先测试需求分析要全面。</p>
<p>　　测试需求分析分两步：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、测试需求的获取</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需求的来源：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显式需求：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）原始需求说明书</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（2）产品规格书</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（3）软件需求文档</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（4）有无继承性文档</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（5）经验库</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（6）通用的协议规范</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;隐式需求：用户的主观感受，市场的主流观点，专业人士的评价分析</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2，需求的分析 ，产生测试需求文档</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将不同的需求来源划分成一个个需求点，针对每一点进行测试分析：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1）界定测试范围</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2）利用各种测试设计的方法产生测试点</p>
<p>　　　　　在测试方法方面，可做如下注意：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其一，分析出口入口。从入口分析，将可能出现的环境，条件，操作等内容分类组合，然后根据各位测试达人的方法进行整合，逐一验证。从出口分析，将可能出现的结果进行统计，根据结果的不同追根溯源，再找到不同的操作以及条件等内容，统计成文档，逐一验证。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其二，多种测试手法的学习和使用。大家可能更多的关心测试方法，但是具体操作的手法也是需要注意的。毕竟测试方法比较容易找到，各位达人都很熟悉。如果将每个人不同的测试手法总结出来并在自己的测试实施中加以使用，可能会收到意想不到的成果。</p>
<p>　　　　在测试流程方面，可作如下注意：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其一，初期要做好需求分析。将需求逐渐细化到小功能点，针对每个功能点进行测试设计。对于完成的测试设计文档，经过项目相关人员的检查评审，做成所需要的初稿。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其二，在测试过程中，根据需求变更和具体测试执行过程中遇到的问题完善测试设计文档。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其三，测试执行结束后，对于出现的问题进行总结。其中包含自己本身发现的问题，也可能会有客户提出的问题。将总结出来的结果融合到测试设计当中去，进一步完善测试设计文档。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于一次测试，是不可能有覆盖度全面的测试的。需要多次去总结积累，才会使测试越来越全面。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在测试流思维方面，可作如下注意：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其一，测试全面不等于全面测试。不同阶段对于软件测试有不同的要求，比如在0.8版本以前，对于不重要的画面问题或是细小的功能问题就不需要关心。但是在验收阶段，这些内容可能更需要注意。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其二，学无止境，只有不断的去学习不断的去思考，才能使自己测试的能力更强，测试对象的全面性也更完整。<br></p>
<p>二、 当测试需求分析完成，并且形成文档后，要进行测试需求评审，保证需求的准确性以及完整性。<br></p>
<p>三、 测试需求完成以后，可以根据测试需求设计测试用例。</p>
<p>要保证测试用例能够全面覆盖测试需求，要包含所有的情况。</p>
<p>测试用例设计上划分为单功能测试用例和测试场景设计，单功能测试覆盖的需求中的功能点，测试场景覆盖需求中的业务逻辑。</p>
<p>在设计测试用例的时候，可以使用多种测试用例设计方法。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;●首先进行等价类划分，包括输入条件和输出条件的等价类划分，合理设置有效等价类和无效等价类,这是减少工作量和提高测试效率最有效的方法。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;● 必须使用边界值分析，经验表明，这种方法设计出的用例能发现很多程序错误。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;● 可以使用错误推测法追加一些测试用例，这需要依靠您的智慧和经验。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;● 对照程序逻辑检查已设计出的测试用例的逻辑覆盖度，如果没有达到覆盖标准应当再补充足够的测试用例。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;● 如果程序的功能说明中含有输入条件的组合情况，一开始就可选因果图和判定表驱动法。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;●对于参数配置类的软件，要用正交试验法选择较少的组合方式达到最佳效果。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;● 对于业务流清晰的系统，可以利用场景法贯穿整个测试方案过程，在案例中综合使用各种测试方法。</p>
<p>当测试用例设计完成后，要组织测试用例的评审，这样可以吸取别人的意见，减少遗漏，补全测试用例。<br></p>
<p>四、 测试用例编写完成后，就是测试执行，</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;● 测试用例执行100%覆盖。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;●在测试执行过程中，要继续对测试用例补充完善，确保提高测试覆盖率。<br></p>
<p>五、 在整个测试过程中，需求都是不可能不变的，所以要及时的更新测试需求、测试用例。<br></p>
<p>六、 要将测试需求、测试用例以及发现的bug关联起来，便于管理和跟踪，同时也便于查看覆盖率。</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试基本理论</tag>
      </tags>
  </entry>
  <entry>
    <title>安装oh-my-zsh主题</title>
    <url>/2019/10/29/%E5%AE%89%E8%A3%85oh-my-zsh%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h4><blockquote>
<p>sudo pacman -S zsh</p>
</blockquote>
<h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><blockquote>
<p>sh -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</a></p>
</blockquote>
<h4 id="powerlevel10k主题"><a href="#powerlevel10k主题" class="headerlink" title="powerlevel10k主题"></a>powerlevel10k主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k</span><br><span class="line">echo &#x27;source ~/powerlevel10k/powerlevel10k.zsh-theme&#x27; &gt;&gt;! ~/.zshrc</span><br></pre></td></tr></table></figure>

<span id="more"></span>





<h4 id="powerlevel10k配置以及zplug及其插件的安装"><a href="#powerlevel10k配置以及zplug及其插件的安装" class="headerlink" title="powerlevel10k配置以及zplug及其插件的安装"></a>powerlevel10k配置以及zplug及其插件的安装</h4><p>将下方代码写入~/.zshrc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir vcs pyenv)</span><br><span class="line">POWERLEVEL9K_MODE=&#x27;nerdfont-complete&#x27;</span><br><span class="line">POWERLEVEL9K_PROMPT_ON_NEWLINE=true</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span><br><span class="line">POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR=&#x27;&#x27;</span><br><span class="line">POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR=&#x27;&#x27;</span><br><span class="line">POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR=&#x27;&#x27;</span><br><span class="line">POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR=&#x27;&#x27;</span><br><span class="line">POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=&quot;%F&#123;blue&#125;\u256D\u2500%F&#123;white&#125;&quot;</span><br><span class="line">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;%F&#123;blue&#125;\u2570\uf460%F&#123;white&#125; &quot;</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator dir dir_writable_joined)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command_execution_time</span><br><span class="line">                                    vcs background_jobs_joined time_joined)</span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=&quot;yellow&quot;</span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=&quot;yellow&quot;</span><br><span class="line">POWERLEVEL9K_DIR_HOME_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_DIR_HOME_FOREGROUND=&quot;blue&quot;</span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND=&quot;blue&quot;</span><br><span class="line">POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND=&quot;red&quot;</span><br><span class="line">POWERLEVEL9K_DIR_DEFAULT_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_DIR_DEFAULT_FOREGROUND=&quot;white&quot;</span><br><span class="line">POWERLEVEL9K_ROOT_INDICATOR_BACKGROUND=&quot;red&quot;</span><br><span class="line">POWERLEVEL9K_ROOT_INDICATOR_FOREGROUND=&quot;white&quot;</span><br><span class="line">POWERLEVEL9K_STATUS_OK_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_STATUS_OK_FOREGROUND=&quot;green&quot;</span><br><span class="line">POWERLEVEL9K_STATUS_ERROR_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_STATUS_ERROR_FOREGROUND=&quot;red&quot;</span><br><span class="line">POWERLEVEL9K_TIME_BACKGROUND=&quot;clear&quot;</span><br><span class="line">POWERLEVEL9K_TIME_FOREGROUND=&quot;cyan&quot;</span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND=&#x27;clear&#x27;</span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=&#x27;magenta&#x27;</span><br><span class="line">POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND=&#x27;clear&#x27;</span><br><span class="line">POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=&#x27;green&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zplug configruation</span></span><br><span class="line">if [[ ! -d &quot;$&#123;ZPLUG_HOME&#125;&quot; ]]; then</span><br><span class="line">  if [[ ! -d ~/.zplug ]]; then</span><br><span class="line">    git clone https://github.com/zplug/zplug ~/.zplug</span><br><span class="line">    # If we can&#x27;t get zplug, it&#x27;ll be a very sobering shell experience. To at</span><br><span class="line">    # least complete the sourcing of this file, we&#x27;ll define an always-false</span><br><span class="line">    # returning zplug function.</span><br><span class="line">    if [[ $? != 0 ]]; then</span><br><span class="line">      function zplug() &#123;</span><br><span class="line">        return 1</span><br><span class="line">      &#125;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  export ZPLUG_HOME=~/.zplug</span><br><span class="line">fi</span><br><span class="line">if [[ -d &quot;$&#123;ZPLUG_HOME&#125;&quot; ]]; then</span><br><span class="line">  source &quot;$&#123;ZPLUG_HOME&#125;/init.zsh&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">zplug &#x27;plugins/git&#x27;, from:oh-my-zsh, if:&#x27;which git&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> zplug <span class="string">&#x27;romkatv/powerlevel10k&#x27;</span>, use:powerlevel10k.zsh-theme</span></span><br><span class="line">zplug &quot;plugins/vi-mode&quot;, from:oh-my-zsh</span><br><span class="line">zplug &#x27;zsh-users/zsh-autosuggestions&#x27;</span><br><span class="line">zplug &#x27;zsh-users/zsh-completions&#x27;, defer:2</span><br><span class="line">zplug &#x27;zsh-users/zsh-history-substring-search&#x27;</span><br><span class="line">zplug &#x27;zsh-users/zsh-syntax-highlighting&#x27;, defer:2</span><br><span class="line"></span><br><span class="line">if ! zplug check; then</span><br><span class="line">  zplug install</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">zplug load</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zsh-autosuggestions 自动补全快捷键修改</span></span><br><span class="line">bindkey &#x27;,&#x27; autosuggest-accept</span><br></pre></td></tr></table></figure>





<h4 id="autojump安装"><a href="#autojump安装" class="headerlink" title="autojump安装"></a>autojump安装</h4><p><a href="https://github.com/wting/autojump">https://github.com/wting/autojump</a></p>
<h4 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h4><p>在manjaro中，只需将终端字体设置成Hack Nerd Font就行(设置中显示所有字体即可找到)</p>
<p>其他请参照<a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>实验10 编写子程序</title>
    <url>/2021/06/26/%E5%AE%9E%E9%AA%8C10-%E7%BC%96%E5%86%99%E5%AD%90%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="call-指令，组织数据和组织代码的方式，给我们的启发"><a href="#call-指令，组织数据和组织代码的方式，给我们的启发" class="headerlink" title="call 指令，组织数据和组织代码的方式，给我们的启发"></a>call 指令，组织数据和组织代码的方式，给我们的启发</h3><table>
<thead>
<tr>
<th>设置参数</th>
<th>组织代码</th>
<th>输入</th>
</tr>
</thead>
<tbody><tr>
<td>程序处理</td>
<td>组织代码</td>
<td>程序处理</td>
</tr>
<tr>
<td>程序的返回值</td>
<td>组织数据</td>
<td>输出</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="编写子程序"><a href="#编写子程序" class="headerlink" title="编写子程序"></a>编写子程序</h3><p>在这次实验中，我们要别写3个子程序，通过它们来认识几个常见的问题和掌握解决这些问题的方法。</p>
<h4 id="1-显示子字符串"><a href="#1-显示子字符串" class="headerlink" title="1.显示子字符串"></a>1.显示子字符串</h4><p><strong>问题</strong></p>
<p>显示字符串是现实工作中经常用到的功能，应该编写一个通用的子程序来实现这个功能。我们应该提供灵活的调用接口，使调用者可以决定显示的位置（行、列）、内容和颜色。</p>
<p><strong>子程序描述</strong></p>
<p>名称：show_str</p>
<p>功能：在指定的位置，用指定的颜色，显示一个用0结束的字符串</p>
<p>参数：(dh)=行号(取值范围0～24)，(dl)=列号(取值范围0～79)</p>
<p>​              (cl)=颜色，ds:si 指向字符串的首地址</p>
<p>返回：无</p>
<p>应用举例：在屏幕的8行3列，用绿色显示 data 段中的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;Welcome to masm!&#x27;,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov dh,8</span><br><span class="line">            mov dl,3</span><br><span class="line">            mov cl,2</span><br><span class="line">            mov ax,data</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov si,0</span><br><span class="line">            call show_str</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">show_str:   .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>式例中，想要把所有功能都归结到一个子程序中，很不好。这样功能不明确，而且看着混乱，不易维护。</p>
<p>参考答案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">;名称：show_str</span><br><span class="line"></span><br><span class="line">;功能：在指定的位置，用指定的颜色，显示一个用0结束的字符串</span><br><span class="line"></span><br><span class="line">;参数：(dh)=行号(取值范围0～24)，(dl)=列号(取值范围0～79),(cl)=颜色，ds:si 指向字符串的首地址</span><br><span class="line"></span><br><span class="line">;返回：无</span><br><span class="line"></span><br><span class="line">;应用举例：在屏幕的8行3列，用绿色显示 data 段中的字符串[201~)]</span><br><span class="line"></span><br><span class="line">assume cs:code,ss:stack,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;Welcome to masm!&#x27;,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            mov di,0</span><br><span class="line">            mov si,0</span><br><span class="line">            mov ax,0</span><br><span class="line"></span><br><span class="line">            call init_reg</span><br><span class="line"></span><br><span class="line">            call get_col</span><br><span class="line">            add di,ax               ;拿到列的返回值</span><br><span class="line">            call get_row</span><br><span class="line">            add di,ax               ;拿到行的返回值</span><br><span class="line"></span><br><span class="line">            mov cl,2</span><br><span class="line">            call show_reg</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">;====================================</span><br><span class="line">show_reg:   push di										</span><br><span class="line">            push si</span><br><span class="line">            push cx</span><br><span class="line">            push dx</span><br><span class="line">            push es</span><br><span class="line"></span><br><span class="line">            mov cx,0</span><br><span class="line">            mov dl,2</span><br><span class="line"></span><br><span class="line">show_str:   mov cx,ds:[si]          ;如果cx不为0继续循环</span><br><span class="line">            jcxz show_Ret</span><br><span class="line">            mov es:[di],cx          ;偶数显示字节</span><br><span class="line">            mov es:[di+1],dl        ;奇数显示颜色,2为绿色</span><br><span class="line">            add di,2</span><br><span class="line">            inc si</span><br><span class="line">            loop show_str </span><br><span class="line"></span><br><span class="line">show_Ret:   pop es</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop si</span><br><span class="line">            pop di</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;====================================</span><br><span class="line">get_col:    mov dh,8</span><br><span class="line">            mov al,160              ;一行160个字节，乘以8就是8行</span><br><span class="line">            mul dh</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;====================================</span><br><span class="line">get_row:    mov dl,3</span><br><span class="line">            mov al,2                ;屏幕一个字符占两个字节</span><br><span class="line">            mul dl</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;====================================初始化寄存器</span><br><span class="line">init_reg:   mov bx,data</span><br><span class="line">            mov ds,bx</span><br><span class="line"></span><br><span class="line">            mov bx,0B800H</span><br><span class="line">            mov es,bx</span><br><span class="line">            ret </span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="2-解决除法溢出的问题"><a href="#2-解决除法溢出的问题" class="headerlink" title="2.解决除法溢出的问题"></a>2.解决除法溢出的问题</h4><p>实验10.2 编程，解决除法溢出问题</p>
<p>名称：long_div（书上原名 divdw）</p>
<p>功能：进行不会产生溢出的除法运算，被除数 dword 型，除数为 word 型，结果为 dword 型</p>
<p>参数：ax = dword 型数据的 低 16 位</p>
<p>​             dx = dword 型数据的 高16 位</p>
<p>​             cx = 除数</p>
<p>返回：dx = 结果的高 16 位，ax = 结果的低16位</p>
<p>​             cx = 余数</p>
<p>应用举例：计算 1000000/10 (F4240H / 0AH) = 186A0H</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4240h</span><br><span class="line">mov dx,000fh</span><br><span class="line">mov cx,10</span><br><span class="line"></span><br><span class="line">call long_div</span><br></pre></td></tr></table></figure>

<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">公式：X/N = int(H/N)*<span class="number">65536</span> + [<span class="built_in">rem</span>(H/N)*<span class="number">65536</span>+L]/N</span><br><span class="line"></span><br><span class="line">提示公式：			  dx   ax	</span><br><span class="line">X：被除数，范围：	[<span class="number">0</span>,FFFF FFFFH]</span><br><span class="line"><span class="function">N: 除数，范围：[0,<span class="title">FFFFH</span>]</span></span><br><span class="line"><span class="function"><span class="title">H</span>:	<span class="title">X</span>的高16位</span></span><br><span class="line"><span class="function"><span class="title">L</span>：<span class="title">X</span>的低16位</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">int</span>():		描述性运算符，取商			比如 <span class="title">int</span>(38/10) = 3</span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="comment"><span class="function">rem():		描述性运算符，取余数		比如 rem(38/10) = 8</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:code,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    dd 1000000</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:          mov ax,stack</span><br><span class="line">                mov ss,ax</span><br><span class="line">                mov sp,128</span><br><span class="line"></span><br><span class="line">            ;   mov ax,4240h</span><br><span class="line">            ;   mov dx,0fh</span><br><span class="line"></span><br><span class="line">                mov bx,data</span><br><span class="line">                mov ds,bx</span><br><span class="line"></span><br><span class="line">                mov bx,0</span><br><span class="line"></span><br><span class="line">                mov ax,ds:[bx+0]        ;参数 除数低16位    L</span><br><span class="line">                mov dx,ds:[bx+2]        ;参数 除数高16位    M</span><br><span class="line"></span><br><span class="line">                mov cx,10</span><br><span class="line"></span><br><span class="line">                push ax </span><br><span class="line">                mov bp,sp</span><br><span class="line"></span><br><span class="line">                call long_div</span><br><span class="line"></span><br><span class="line">;公式：X/N = int(H/N)*65536 + [rem(H/N)*65536+L]/N</span><br><span class="line"></span><br><span class="line">                mov ax,4c00h</span><br><span class="line">                int 21h</span><br><span class="line"></span><br><span class="line">;============================================</span><br><span class="line">long_div:       mov ax,dx</span><br><span class="line">                mov dx,0</span><br><span class="line">                div cx                  ;ax = int(H/N) =&gt; dx    dx = rem(H/N)*65536</span><br><span class="line"></span><br><span class="line">                push ax</span><br><span class="line"></span><br><span class="line">                mov ax,ss:[bp+0]        ;L </span><br><span class="line"></span><br><span class="line">                div cx                  ;ax = [rem(H/N)*65536+L]/N 的商     dx = 余数</span><br><span class="line"></span><br><span class="line">                mov cx,dx</span><br><span class="line"></span><br><span class="line">                pop dx</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h4 id="3-数值显示"><a href="#3-数值显示" class="headerlink" title="3.数值显示"></a>3.数值显示</h4><p><strong>问题</strong><br>编程，将data段中的数据以十进制的形式显示出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data segment</span><br><span class="line">    dw 123,12666,1,8,3,38</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure>

<p><strong>子程序描述</strong><br>名称：dtoc<br>功能：将 word 型数据转变为表示十进制的字符串，字符串以0为结尾符<br>参数：(ax)=word型数据，ds:si指向字符串的首地址<br>返回：无</p>
<p>应用举例：编程，将数据 12666 以十进制的形式在屏幕的 8行3列，用绿色显示出来。<br>在显示时我们调用本次实验中的第一个子程序show_str</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db 10 dup (0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,12666</span><br><span class="line">            mov bx,data</span><br><span class="line">            mob ds,bx</span><br><span class="line">            mov si,0</span><br><span class="line">            call dtoc</span><br><span class="line"></span><br><span class="line">            mov dh,8</span><br><span class="line">            mov dl,3</span><br><span class="line">            mob cl,2</span><br><span class="line">            call show_str</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            </span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line"></span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>参考答案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    dw 1230,12666,1,8,3,38</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">string segment</span><br><span class="line">    db 10 dup(&#x27;0&#x27;),0</span><br><span class="line">string ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:          mov ax,stack</span><br><span class="line">                mov ss,ax</span><br><span class="line">                mov sp,128</span><br><span class="line"></span><br><span class="line">                call init_reg</span><br><span class="line">                call init_number</span><br><span class="line"></span><br><span class="line">                mov ax,4c00h</span><br><span class="line">                int 21h</span><br><span class="line"></span><br><span class="line">;&#x27;00000 00000&#x27;,0</span><br><span class="line">;=================================</span><br><span class="line">init_number:    mov bx,0</span><br><span class="line">                mov si,9                ;es:[si]，将得到的ASCII先放到个位</span><br><span class="line"></span><br><span class="line">                mov di,160*10 + 30*2</span><br><span class="line">                mov cx,6</span><br><span class="line"></span><br><span class="line">show_number:    call show_word</span><br><span class="line">                add di,160</span><br><span class="line">                add bx,2</span><br><span class="line">                loop show_number</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">show_word:      push ax</span><br><span class="line">                push bx</span><br><span class="line">                push cx</span><br><span class="line">                push dx</span><br><span class="line">                push es</span><br><span class="line">                push ds</span><br><span class="line">                push di</span><br><span class="line">                push si</span><br><span class="line"></span><br><span class="line">                mov ax,ds:[bx]          ;ax 和 dx 寄存器的值去参与运算</span><br><span class="line">                mov dx,0</span><br><span class="line"></span><br><span class="line">                call short_div </span><br><span class="line">                call init_reg_show_string</span><br><span class="line"></span><br><span class="line">                call show_string</span><br><span class="line"></span><br><span class="line">                pop si</span><br><span class="line">                pop di</span><br><span class="line">                pop ds</span><br><span class="line">                pop es</span><br><span class="line">                pop dx</span><br><span class="line">                pop cx</span><br><span class="line">                pop bx</span><br><span class="line">                pop ax</span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">show_string:    push cx</span><br><span class="line">                push ds</span><br><span class="line">                push es</span><br><span class="line">                push si</span><br><span class="line">                push di</span><br><span class="line"></span><br><span class="line">                mov cx,0</span><br><span class="line">                </span><br><span class="line">showString:     mov cx,0</span><br><span class="line">                mov cl,ds:[si]</span><br><span class="line">                jcxz showStringRet</span><br><span class="line">                mov es:[di],cl</span><br><span class="line">                add di,2</span><br><span class="line">                inc si</span><br><span class="line">                jmp showString</span><br><span class="line"></span><br><span class="line">showStringRet:  pop di</span><br><span class="line">                pop si</span><br><span class="line">                pop es</span><br><span class="line">                pop ds</span><br><span class="line">                pop cx</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line">;=================================</span><br><span class="line">init_reg_show_string:</span><br><span class="line">                mov bx,string</span><br><span class="line">                mov ds,bx</span><br><span class="line"></span><br><span class="line">                mov bx,0B800H</span><br><span class="line">                mov es,bx</span><br><span class="line">                ret</span><br><span class="line">;=================================</span><br><span class="line">short_div:      mov cx,10</span><br><span class="line">                div cx</span><br><span class="line">                add dl,30H</span><br><span class="line">                mov es:[si],dl</span><br><span class="line">                mov cx,ax</span><br><span class="line">                jcxz shortDivRet</span><br><span class="line">                dec si                  ;从个位变到十位，到百位</span><br><span class="line">                mov dx,0</span><br><span class="line">                jmp short_div</span><br><span class="line"></span><br><span class="line">shortDivRet:    ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">init_reg:       mov bx,data</span><br><span class="line">                mov ds,bx</span><br><span class="line"></span><br><span class="line">                mov bx,string</span><br><span class="line">                mov es,bx</span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验12 编写0号中断的处理程序</title>
    <url>/2021/07/17/%E5%AE%9E%E9%AA%8C12-%E7%BC%96%E5%86%990%E5%8F%B7%E4%B8%AD%E6%96%AD%E7%9A%84%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>编写0号中断处理程序，使得在除法溢出发生时，在屏幕中间显示字符串“divide error”,然后返回dos</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:			mov	ax,cs</span><br><span class="line">				mov ds,ax</span><br><span class="line">				mov si,offset do0		;设置ds:si指向源地址</span><br><span class="line">				mov ax,0</span><br><span class="line">				mov es,ax</span><br><span class="line">				mov di,200h				;设置es:di指向目的地址</span><br><span class="line">				;设置cx为传输长度</span><br><span class="line">				mov cx,offset do0end-offset do0</span><br><span class="line">				cld						;设置传输方向为正</span><br><span class="line">				rep movsb</span><br><span class="line">				</span><br><span class="line">			;	设置中断向量</span><br><span class="line">			</span><br><span class="line">				mov ax,0</span><br><span class="line">				mov es,ax</span><br><span class="line">				mov word ptr es:[0*4],200h</span><br><span class="line">				mov word ptr es:[0*4+2],0</span><br><span class="line">				</span><br><span class="line">do0:			jmp short do0start</span><br><span class="line">				db &quot;divide error!&quot;</span><br><span class="line">				</span><br><span class="line">do0start:		mov ax,cs</span><br><span class="line">				mov ds,ax</span><br><span class="line">				mov si,202h				;设置ds:si字符串</span><br><span class="line">				</span><br><span class="line">				mov ax,0b800h</span><br><span class="line">				mov es,ax</span><br><span class="line">				mov di,12*160 + 36*2</span><br><span class="line">				</span><br><span class="line">				mov cx,13</span><br><span class="line">			s:	mov al,[si]</span><br><span class="line">				mov es:[di],al</span><br><span class="line">				inc si</span><br><span class="line">				add di,2</span><br><span class="line">				loop s</span><br><span class="line">				</span><br><span class="line">				mov ax,4c00h</span><br><span class="line">				int 21h</span><br><span class="line">				</span><br><span class="line">    	do0end: nop</span><br><span class="line">			</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line">				</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db  &#x27;divide error&#x27;,0        ;会被覆盖掉 CPU需要立刻处理的程序</span><br><span class="line">                                ;0:200 0:3FF</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db  128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:          mov ax,stack</span><br><span class="line">                mov ss,ax</span><br><span class="line">                mov sp,128</span><br><span class="line"></span><br><span class="line">                call cpy_new_int0 </span><br><span class="line">                call set_new_int0</span><br><span class="line">                </span><br><span class="line">                mov ax,0</span><br><span class="line">                mov dx,1</span><br><span class="line">                mov bx,1</span><br><span class="line">                div bx</span><br><span class="line"></span><br><span class="line">                mov ax,4c00h</span><br><span class="line">                int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;===================================</span><br><span class="line">set_new_int0:   mov bx,0</span><br><span class="line">                mov es,bx</span><br><span class="line"></span><br><span class="line">                mov word ptr es:[0*4],7e00h</span><br><span class="line">                mov word ptr es:[0*4+2],0</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">;===================================</span><br><span class="line">new_int0:       jmp newint0</span><br><span class="line"></span><br><span class="line">string:         db  &#x27;divide error&#x27;,0</span><br><span class="line"></span><br><span class="line">newint0:        mov bx,0800h</span><br><span class="line">                mov es,bx</span><br><span class="line"></span><br><span class="line">                mov bx,0</span><br><span class="line">                mov ds,bx</span><br><span class="line"></span><br><span class="line">                mov di,160*10 + 30*2</span><br><span class="line">                mov si,7e03h</span><br><span class="line"></span><br><span class="line">                mov dl,ds:[si]</span><br><span class="line">                cmp dl,0</span><br><span class="line">                je showStringRet</span><br><span class="line">                mov es:[di],dl</span><br><span class="line">                add di,2</span><br><span class="line">                inc si</span><br><span class="line">                jmp showString</span><br><span class="line"></span><br><span class="line">                mov ax,4c00h</span><br><span class="line">                int 21h</span><br><span class="line"></span><br><span class="line">new_int0_end:   nop</span><br><span class="line"></span><br><span class="line">;===================================</span><br><span class="line">cpy_new_int0:   mov bx,cs</span><br><span class="line">                mov ds,bx</span><br><span class="line">                mov si,offset new_int0</span><br><span class="line"></span><br><span class="line">                mov bx,0</span><br><span class="line">                mov es,bx</span><br><span class="line">                mov di,7e00h</span><br><span class="line"></span><br><span class="line">                mov cx,offset new_int0_end - new_int0</span><br><span class="line">                cld</span><br><span class="line">                rep movsb</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验11 编写子程序</title>
    <url>/2021/06/28/%E5%AE%9E%E9%AA%8C11-%E7%BC%96%E5%86%99%E5%AD%90%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>debug 模式下标志位的显示</strong></p>
<table>
<thead>
<tr>
<th>标志</th>
<th>真值为1</th>
<th>假值为0</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>OF</td>
<td>OV</td>
<td>NV</td>
<td>OV = overflow（溢出）</td>
<td>NV = not overflow</td>
</tr>
<tr>
<td>SF</td>
<td>NG</td>
<td>PL</td>
<td>NG = negative（负数）</td>
<td>PL = Positve</td>
</tr>
<tr>
<td>ZF</td>
<td>ZR</td>
<td>NZ</td>
<td>ZR=Zero</td>
<td>NZ = not Zero</td>
</tr>
<tr>
<td>PF</td>
<td>PE</td>
<td>PO</td>
<td>PE = EVEN（偶数）</td>
<td>PO  = ODD</td>
</tr>
<tr>
<td>CF</td>
<td>CV</td>
<td>NC</td>
<td>CY = Carry Yes（进位）</td>
<td>NC = not Carry</td>
</tr>
<tr>
<td>DF</td>
<td>DN</td>
<td>UP</td>
<td>Down（向下）</td>
<td>Up（向上）</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>编写一个子程序，将包含任意字符，以0结尾的字符串的小写字母转变为大写字母</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;编写一个子程序，将包含任意字符，以0结尾的字符串的小写字母转变为大写字母</span><br><span class="line"></span><br><span class="line">;名称：letterc</span><br><span class="line">;功能：将以0结尾的字符串中的小写字母转变为大写字母</span><br><span class="line">;参数：ds:si指向字符串首地址</span><br><span class="line"></span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line"></span><br><span class="line">    db &quot;Beginner&#x27;s All-purpose Symbolic Instruction Code.&quot;,0</span><br><span class="line"></span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">begin:      mov ax,datasg</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov di,0</span><br><span class="line">            mov cx,0</span><br><span class="line">            call letterc</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">;思路：遍历字符串，如果小于ASCII表中的值，就and转变为大写字母。通过jcxz判断0结束循环</span><br><span class="line">;ASCII表中小写字母的值大于大写字母的值,其中a为61H</span><br><span class="line"></span><br><span class="line">letterc:    mov cx,ds:[di]</span><br><span class="line">            jcxz ok</span><br><span class="line">            cmp byte ptr ds:[di],61H</span><br><span class="line">            jnb change</span><br><span class="line">            inc di</span><br><span class="line">            jmp short letterc</span><br><span class="line">         </span><br><span class="line">change:     and byte ptr ds:[di],11011111b</span><br><span class="line">            inc di</span><br><span class="line">            jmp short letterc</span><br><span class="line"></span><br><span class="line">ok:         ret</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end begin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这次我们将两个字符串显示在屏幕中间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">;编写一个子程序，将包含任意字符，以0结尾的字符串的小写字母转变为大写字母，并将其显示在屏幕中间</span><br><span class="line"></span><br><span class="line">;名称：letterc</span><br><span class="line">;功能：将以0结尾的字符串中的小写字母转变为大写字母</span><br><span class="line">;参数：ds:si指向字符串首地址</span><br><span class="line"></span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line"></span><br><span class="line">    db &quot;Beginner&#x27;s All-purpose Symbolic Instruction Code.&quot;,0</span><br><span class="line"></span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line"></span><br><span class="line">    db 128 dup (0)</span><br><span class="line"></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">begin:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            call init_reg</span><br><span class="line">            call init_show</span><br><span class="line">            call init_let</span><br><span class="line">            mov si,160*11 + 20*2</span><br><span class="line">            call init_show</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">;思路：遍历字符串，如果小于ASCII表中的值，就and转变为大写字母。通过jcxz判断0结束循环</span><br><span class="line">;ASCII表中小写字母的值大于大写字母的值,其中a为61H</span><br><span class="line"></span><br><span class="line">init_let:   push di</span><br><span class="line">            push ds</span><br><span class="line">            push cx</span><br><span class="line"></span><br><span class="line">letterc:    mov cx,ds:[di]</span><br><span class="line">            jcxz ok</span><br><span class="line">            cmp byte ptr ds:[di],61H</span><br><span class="line">            jnb change</span><br><span class="line">            inc di</span><br><span class="line">            jmp short letterc</span><br><span class="line">         </span><br><span class="line">change:     and byte ptr ds:[di],11011111b</span><br><span class="line">            inc di</span><br><span class="line">            jmp short letterc</span><br><span class="line"></span><br><span class="line">ok:         pop cx</span><br><span class="line">            pop ds</span><br><span class="line">            pop di</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;===========================================</span><br><span class="line">;将字符串显示在屏幕中间</span><br><span class="line">init_show:  push si</span><br><span class="line">            push di</span><br><span class="line">            push dx</span><br><span class="line">            push es</span><br><span class="line">            push ds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_str:   mov dl,ds:[di]</span><br><span class="line">            cmp dl,0</span><br><span class="line">            je show_Ret</span><br><span class="line">            mov es:[si],dl</span><br><span class="line">            add si,2</span><br><span class="line">            inc di</span><br><span class="line">            jmp show_str</span><br><span class="line"></span><br><span class="line">show_Ret:   pop ds</span><br><span class="line">            pop es</span><br><span class="line">            pop dx</span><br><span class="line">            pop di</span><br><span class="line">            pop si</span><br><span class="line">            ret</span><br><span class="line">;===========================================</span><br><span class="line"></span><br><span class="line">init_reg:   mov ax,datasg</span><br><span class="line">            mov ds,ax</span><br><span class="line"></span><br><span class="line">            mov bx,0B800H</span><br><span class="line">            mov es,bx</span><br><span class="line"></span><br><span class="line">            mov di,0</span><br><span class="line">            mov si,160*10 + 20*2</span><br><span class="line">            mov cx,0</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end begin</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验13 编写、应用中断例程</title>
    <url>/2021/07/20/%E5%AE%9E%E9%AA%8C13-%E7%BC%96%E5%86%99%E3%80%81%E5%BA%94%E7%94%A8%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>编写、安装中断7ch的中断例程<br>功能：求word型数据的平方<br>参数：(ax)=要计算的数据<br>返回值：dx、ax中存放结果的高16位和低16位<br>应用举例：求2*3456^2</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:		mov ax,3456</span><br><span class="line">			int 7ch			;调用中断7ch的中断例程，计算ax中的数据的平方</span><br><span class="line">			add ax,ax</span><br><span class="line">			adc dx,dx		;dx:ax存放结果，将结果乘以2</span><br><span class="line">			mov ax,4c00h</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>1)实现求平方的功能的程序<br>2)安装程序，将其安装在0:200处<br>3)设置中断向量表，将程序的入口地址保存在7ch表项中，使其成为中断7ch的中断例程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:		mov ax,cs</span><br><span class="line">			mov ds,ax</span><br><span class="line">			mov si,offset sqr			;设置ds:si指向源地址</span><br><span class="line">			mov ax,0</span><br><span class="line">			mov es,ax</span><br><span class="line">			mov di,200h					;设置es:di指向目的地址</span><br><span class="line">			mov cx,offset sqrend - offset sqr</span><br><span class="line">			cld</span><br><span class="line">			rep movsb</span><br><span class="line">			</span><br><span class="line">			mov ax,0</span><br><span class="line">			mov es,ax</span><br><span class="line">			mov word ptr es:[7ch*4],200h</span><br><span class="line">			mov word ptr es:[7ch*4+2],0</span><br><span class="line">			</span><br><span class="line">			mov ax,4c00h</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">	sqr:	mul ax</span><br><span class="line">			iret</span><br><span class="line">			</span><br><span class="line">	sqrend:	nop</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<p>编写、安装中断7ch的中断例程</p>
<p>功能：将一个全是字母，以0结尾的字符串，转化为大写<br>参数：ds:si指向字符串的首地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">	db &#x27;conversation&#x27;,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:		mov ax,data</span><br><span class="line">			mov ds,ax</span><br><span class="line">			mov si,0</span><br><span class="line">			int 7ch</span><br><span class="line">			</span><br><span class="line">			mov ax,4c00h</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>实现小写转换为大写的功能<br>安装程序，将其安装在0:200处<br>设置中断向量表，将程序入口地址保存在7ch表项中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">	db &#x27;conversation&#x27;,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:		mov ax,cs</span><br><span class="line">			mov ds,ax</span><br><span class="line">			mov si,offset capital</span><br><span class="line">			mov ax,0</span><br><span class="line">			mov es,ax</span><br><span class="line">			mov di,200h</span><br><span class="line">			mov cx,offset capitalend - offset capital</span><br><span class="line">			cld</span><br><span class="line">			rep movsb</span><br><span class="line">			</span><br><span class="line">			mov ax,0</span><br><span class="line">			mov es,ax</span><br><span class="line">			mov word ptr es:[7ch*4],200h</span><br><span class="line">			mov word ptr es:[7ch*4+2],0</span><br><span class="line">			mov ax,4c00h</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">capital:	jmp short change</span><br><span class="line">			db &#x27;conversation&#x27;,0</span><br><span class="line">			push cx</span><br><span class="line">			push si</span><br><span class="line">			</span><br><span class="line">change:		mov cl,ds:[si]</span><br><span class="line">			mov ch,0</span><br><span class="line">			jcxz ok</span><br><span class="line">			and byte ptr ds:[si],11011111b</span><br><span class="line">			inc si</span><br><span class="line">			jmp change</span><br><span class="line"></span><br><span class="line">ok:			pop si</span><br><span class="line">			pop cx</span><br><span class="line">			iret</span><br><span class="line"></span><br><span class="line">capitalend:	nop</span><br><span class="line">			</span><br><span class="line">			mov ax,4c00h</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>用7ch中断例程完成 loop指令的功能</p>
<p>loop s的执行需要两个信息，循环次数和到s的位移，所以,7ch中断例程需要完成loop指令的功能，也需要这两个信息作参数</p>
<p>我们需要cx存放循环次数，用bx存放位移</p>
<p>应用举例：在屏幕中间显示80个’!’</p>
<p>程序框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,0b800h</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov di,160*2</span><br><span class="line"></span><br><span class="line">            mov bx,offset s - offset se     ;设置从标号se到标号s的转移位移</span><br><span class="line">            mov cx,80</span><br><span class="line"></span><br><span class="line">        s:  mov byte ptr es:[di],&#x27;!&#x27;</span><br><span class="line">            add di,2</span><br><span class="line">            int 7ch</span><br><span class="line"></span><br><span class="line">        se: nop</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start		</span><br></pre></td></tr></table></figure>

<p>分析，为了模拟loop指令,7ch中断例程应具备下面的功能</p>
<ol>
<li>dec cx</li>
<li>如果cx不为0,跳转到s处，否则向下执行</li>
</ol>
<p>7ch 中断例程如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lp:     push bp</span><br><span class="line">        mov bp,sp</span><br><span class="line">        dec cx</span><br><span class="line">        jcxz ipret</span><br><span class="line">        add [bp+2],bx</span><br><span class="line"></span><br><span class="line">ipret:  pop bp</span><br><span class="line">        iret</span><br></pre></td></tr></table></figure>

<p>用7ch中断例程完成jmp near ptr s指令的功能，用bx向中断例程传送转移位移</p>
<p>应用举例：在屏幕的第12行，显示data段中以0结尾的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;conversation&#x27;,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,data</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov si,0</span><br><span class="line"></span><br><span class="line">            mov ax,0b800h</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov di,12*160</span><br><span class="line"></span><br><span class="line">s:          cmp byte ptr [si],0</span><br><span class="line">            je ok                           ;如果是0跳出循环</span><br><span class="line">            mov al,ds:[si]</span><br><span class="line">            mov es:[di],al</span><br><span class="line">            inc si</span><br><span class="line">            add di,2</span><br><span class="line">            mov bx,offset s - offset ok     ;设置从标号ok到标号s的转移位移</span><br><span class="line">            int 7ch                         ;转移到标号s处</span><br><span class="line"></span><br><span class="line">ok:         mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>7ch中断例程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jnp:        push bp</span><br><span class="line">            mov bp,sp</span><br><span class="line">            add [bp+2],bx</span><br><span class="line">            pop bp</span><br><span class="line">            iret</span><br></pre></td></tr></table></figure>


<p>int 10h 中断例程得设置光标位置功能</p>
<p>mov ah,2        ;设置光标<br>mov bh,0        ;第0页<br>mov dh,5        ;dh中放行号<br>mov dl,12        ;dl中放行号<br>int 10</p>
<p>ah=2表示调用第10h号中断例程得2号子程序，功能为设置光标位置<br>bh=0设置光标到0页<br>dh=5设置光标到第5行<br>dl=12设置光标到第12列</p>
<p>int 10h 中断例程在光标位置显示字符功能</p>
<p>mov ah,9        ;光标位置显示字符<br>mov al,’a’        ;字符<br>mov bl,7        ;颜色属性<br>mov bh,0        ;第0页<br>mov cx,3        ;字符重复个数<br>int 10h</p>
<p>ah=9表示调用第10h号中断例程第2号子程序，功能为设置光标位置显示字符<br>可以提供显示字符、颜色属性、页号、字符重复个数作为参数<br>bl中颜色属性得格式如下：<br>7        6    5    4        3        2    1    0<br>BL        R    G    B        I        R    G    B<br>闪烁         背景              高亮          前景    </p>
<p>编程：在屏幕的5行12列显示3个红底高亮闪烁绿色的’a‘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:		mov ah,2		;设置光标</span><br><span class="line">			mov	bh,0		;第0页</span><br><span class="line">			mov dh,5		;设置光标第5行</span><br><span class="line">			mov dl,12		;设置光标第12列</span><br><span class="line">			int 10h</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			mov ah,9		;在光标位置显示字符</span><br><span class="line">			mov al,&#x27;a&#x27;		;字符</span><br><span class="line">			mov bl,11001010b;颜色属性</span><br><span class="line">			mov bh,0		;第0页</span><br><span class="line">			mov cx,3		;字符重复3个</span><br><span class="line">			int 10h</span><br><span class="line">			</span><br><span class="line">			mov ax,4c00h</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>int 21h 中断例程的4ch号功能，即程序返回功能</p>
<p>mov ah,4ch        ;程序返回<br>mov al,0        ;返回值<br>int 21h</p>
<p>ah=4ch 表示调用第21h号中断例程的4ch号子程序，功能为程序返回，可以提供返回值作为参数<br>我们前面使用这个功能的时候经常写作：</p>
<p>mov ax,4c00h<br>int 21h</p>
<p>我们看一下 int 21h中断例程在光标位置显示字符串的功能</p>
<p>ds:dx 指向字符串        ;要显示的字符串需用”$“作为结束符<br>mov ah,9                ;功能号9，表示在光标位置显示字符串<br>int 21h</p>
<p>ah=9表示调用第21h号中断例程的9号子程序，功能为在光标位置显示字符串，可以提供要显示字符串的地址作为参数</p>
<p>编程：在屏幕的5行12列显示字符串”Welcome to masm！“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">	db &#x27;Welcome to masm!&#x27;,&#x27;$&#x27;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">start:		mov al,2		;设置光标位置</span><br><span class="line">			mov bh,0		;第0页</span><br><span class="line">			mov dh,5		;第5行</span><br><span class="line">			mov dl,12		;第12列</span><br><span class="line">			int 10h</span><br><span class="line">			</span><br><span class="line">			mov ah,9		;在光标显示字符</span><br><span class="line">			mov bl,11001010b;颜色属性</span><br><span class="line">			mov bh,0		;第0页</span><br><span class="line">			mov cx,16		;字符重复16个</span><br><span class="line">			int 10h</span><br><span class="line">			</span><br><span class="line">			mov ax,data		;设置光标显示字符</span><br><span class="line">			mov ds,ax		</span><br><span class="line">			mov dx,0		;ds:dx 指向字符串的首地址data:0</span><br><span class="line">			mov ah,9		</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">			mov ax,4c00h</span><br><span class="line">			int 21h</span><br><span class="line">			</span><br><span class="line">code ends</span><br><span class="line">end start			</span><br></pre></td></tr></table></figure>

<p>实验1：</p>
<p>编写、安装 int 7ch 中断程序，功能为显示一个用0结束的字符串，中断程序安装在0:7E00</p>
<p>参数：dh = 行号<br>      dl = 列号<br>      cl = 颜色<br>      ds:si 指向字符串首地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;welcome to masm!&#x27;,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            call int7ch             ;安装程序</span><br><span class="line">            call set_int7ch         ;登记在中断项链表中</span><br><span class="line"></span><br><span class="line">            call init_reg           ;初始化显示字符串</span><br><span class="line">            call show_masm          ;显示字符串</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">;初始化显示字符串</span><br><span class="line">;===============================</span><br><span class="line">init_reg:   mov bx,data</span><br><span class="line">            mov ds,bx</span><br><span class="line"></span><br><span class="line">            mov bx,0B800H</span><br><span class="line">            mov es,bx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;显示在哪里</span><br><span class="line">;===============================</span><br><span class="line">show_masm:  mov si,0</span><br><span class="line">            mov dh,15               ;行号</span><br><span class="line">            mov dl,20               ;列号</span><br><span class="line">            mov cl,2                ;颜色</span><br><span class="line"></span><br><span class="line">            int 7ch</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line">            </span><br><span class="line">;===============================</span><br><span class="line">new_int7ch: call get_row</span><br><span class="line">            call get_col</span><br><span class="line">            call show_string</span><br><span class="line"></span><br><span class="line">            iret</span><br><span class="line"></span><br><span class="line">new_int7ch_end: nop</span><br><span class="line"></span><br><span class="line">;显示字符串</span><br><span class="line">;===============================</span><br><span class="line">show_string:push dx</span><br><span class="line">            push ds</span><br><span class="line">            push es</span><br><span class="line">            push si</span><br><span class="line">            push di</span><br><span class="line"></span><br><span class="line">			mov dh,cl</span><br><span class="line"></span><br><span class="line">showSting:  mov dl,ds:[si]</span><br><span class="line">            cmp dl,0</span><br><span class="line">            je showStringRet</span><br><span class="line">            mov es:[di],dx</span><br><span class="line">            add di,2</span><br><span class="line">            inc si</span><br><span class="line">            jmp showString</span><br><span class="line"></span><br><span class="line">showStringRet:</span><br><span class="line">            pop di</span><br><span class="line">            pop si</span><br><span class="line">            pop es</span><br><span class="line">            pop ds</span><br><span class="line">            pop dx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;设置显示的行</span><br><span class="line">;===============================</span><br><span class="line">get_row:    mov al,160</span><br><span class="line">            mul dh</span><br><span class="line"></span><br><span class="line">            mov di,ax</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;设置显示的列</span><br><span class="line">;===============================</span><br><span class="line">get_col:    mov al,2</span><br><span class="line">            mul dl</span><br><span class="line"></span><br><span class="line">            mov di,ax</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;登记中断向量表</span><br><span class="line">;===============================</span><br><span class="line">set_int7ch: mov bx,0</span><br><span class="line">            mov es,bx</span><br><span class="line">            </span><br><span class="line">            cli</span><br><span class="line">            mov word ptr es:[7ch*4],7E00H</span><br><span class="line">            mov word ptr es:[7ch*4+2],0</span><br><span class="line">            sti</span><br><span class="line">            </span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;安装程序</span><br><span class="line">;===============================</span><br><span class="line">int7ch:     mov bx,cs</span><br><span class="line">            mov ds,bx</span><br><span class="line">            mov si,offset new_int7ch</span><br><span class="line"></span><br><span class="line">            mov bx,0</span><br><span class="line">            mov es,bx</span><br><span class="line">            mov di,7E00H</span><br><span class="line"></span><br><span class="line">            mov cx,offset new_int7ch - offset new_int7ch_end</span><br><span class="line">            cld</span><br><span class="line">            rep movsb</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<p>实验2：编写并安装 int 7ch 中断例程，功能为完成loop指令的例程</p>
<p>参数：cx = 循环次数    bx = 位移</p>
<p>在屏幕中间显示80个!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:  mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,128</span><br><span class="line">        </span><br><span class="line">        call int7ch</span><br><span class="line">        call set_int7ch</span><br><span class="line"></span><br><span class="line">        call init_reg</span><br><span class="line">        call show_char</span><br><span class="line"></span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">show_char:      mov cx,80 </span><br><span class="line"></span><br><span class="line">                mov di,160*12</span><br><span class="line"></span><br><span class="line">                mov bx,offset showChar - offset showCharRet</span><br><span class="line"></span><br><span class="line">showChar:       mov byte ptr es:[di],&#x27;!&#x27;</span><br><span class="line">                add di,2</span><br><span class="line">                int 7ch                     ;loop cx = cx - 1</span><br><span class="line"></span><br><span class="line">showCharRet:    ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">init_reg:       mov bx,0B800H</span><br><span class="line">                mov es,bx</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">set_int7ch:     mov bx,0</span><br><span class="line">                mov es,bx</span><br><span class="line"></span><br><span class="line">                cli</span><br><span class="line">                mov word ptr es:[7ch*4],7E00H</span><br><span class="line">                mov word ptr es:[7ch*4+2],0</span><br><span class="line">                sti</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">new_int7ch:     push bp                     ;bp ip cs pushf</span><br><span class="line">                mov bp,sp</span><br><span class="line">                dec cx</span><br><span class="line">                jcxz new_int7ch_end</span><br><span class="line">                add ss:[bp+2],bx</span><br><span class="line"></span><br><span class="line">int7chRet:      pop bp</span><br><span class="line">                iret</span><br><span class="line"></span><br><span class="line">new_int7ch_end: nop</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">int7ch:         mov bx,cs</span><br><span class="line">                mov ds,bx</span><br><span class="line">                mov si,offset new_int7ch</span><br><span class="line"></span><br><span class="line">                mov bx,0</span><br><span class="line">                mov es,bx</span><br><span class="line">                mov di,7E00H</span><br><span class="line"></span><br><span class="line">                mov cx,offset new_int7ch_end - offset new_int7ch</span><br><span class="line">                cld</span><br><span class="line">                rep movsb</span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end startassume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:  mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,128</span><br><span class="line">        </span><br><span class="line">        call int7ch</span><br><span class="line">        call set_int7ch</span><br><span class="line"></span><br><span class="line">        call init_reg</span><br><span class="line">        call show_char</span><br><span class="line"></span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">show_char:      mov cx,80 </span><br><span class="line"></span><br><span class="line">                mov di,160*12</span><br><span class="line"></span><br><span class="line">                mov bx,offset showCharRet - offset showChar</span><br><span class="line"></span><br><span class="line">showChar:       mov byte ptr es:[di],&#x27;!&#x27;</span><br><span class="line">                add di,2</span><br><span class="line">                int 7ch                     ;loop cx = cx - 1</span><br><span class="line"></span><br><span class="line">showCharRet:    ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">init_reg:       mov bx,0B800H</span><br><span class="line">                mov es,bx</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">set_int7ch:     mov bx,0</span><br><span class="line">                mov es,bx</span><br><span class="line"></span><br><span class="line">                cli</span><br><span class="line">                mov word ptr es:[7ch*4],7E00H</span><br><span class="line">                mov word ptr es:[7ch*4+2],0</span><br><span class="line">                sti</span><br><span class="line"></span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">new_int7ch:     push bp                     ;bp ip cs pushf</span><br><span class="line">                mov bp,sp</span><br><span class="line">                dec cx</span><br><span class="line">                jcxz new_int7ch_end</span><br><span class="line">                add ss:[bp+2],bx</span><br><span class="line"></span><br><span class="line">new_int7ch_end: pop bp</span><br><span class="line">                iret</span><br><span class="line"></span><br><span class="line">;=================================</span><br><span class="line">int7ch:         mov bx,cs</span><br><span class="line">                mov ds,bx</span><br><span class="line">                mov si,offset new_int7ch</span><br><span class="line"></span><br><span class="line">                mov bx,0</span><br><span class="line">                mov es,bx</span><br><span class="line">                mov di,7E00H</span><br><span class="line"></span><br><span class="line">                mov cx,offset new_int7ch_end - offset new_int7ch</span><br><span class="line">                cld</span><br><span class="line">                rep movsb</span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">ends start</span><br></pre></td></tr></table></figure>

<p>实验3 下面的程序，分别在屏幕的第2、4、6、8行显示4句英文诗，补全程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    s1: db  &#x27;Good,better,best,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s2: db  &#x27;Never let it rest,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s3: db  &#x27;Till good is better,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s4: db  &#x27;And better,best.&#x27;,&#x27;$&#x27;</span><br><span class="line">    s:  dw  offset s1,offset s2,offset s3,offset s4</span><br><span class="line">    row:db 2,4,6,8</span><br><span class="line"></span><br><span class="line">start:      mov ax,cs</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov bx,offset s</span><br><span class="line">            mov si,offset row</span><br><span class="line">            mov cx,4</span><br><span class="line"></span><br><span class="line">ok:         mov bh,0</span><br><span class="line">            mov dh,_____</span><br><span class="line">            mov dl,0</span><br><span class="line">            mov ah,2</span><br><span class="line">            int 10h</span><br><span class="line"></span><br><span class="line">            mov dx,____</span><br><span class="line">            mov ah,9</span><br><span class="line">            int 21h</span><br><span class="line">            __________</span><br><span class="line">            __________</span><br><span class="line">            loop ok</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>补全后的程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    s1: db  &#x27;Good,better,best,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s2: db  &#x27;Never let it rest,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s3: db  &#x27;Till good is better,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s4: db  &#x27;And better,best.&#x27;,&#x27;$&#x27;</span><br><span class="line"></span><br><span class="line">    s:  dw  offset s1,  ;bx+0</span><br><span class="line">            offset s2,  ;bx+2</span><br><span class="line">            offset s3,  ;bx+4</span><br><span class="line">            offset s4   ;bx+6</span><br><span class="line"></span><br><span class="line">    row:db 2,4,6,8</span><br><span class="line"></span><br><span class="line">start:      mov ax,cs               </span><br><span class="line">            mov ds,ax               ;将ds指向cs段</span><br><span class="line">            mov bx,offset s         ;bx=s标号地址</span><br><span class="line">            mov si,offset row       ;si=row标号地址</span><br><span class="line">            mov cx,4                ;计数器设置为4,有4行字符串</span><br><span class="line"></span><br><span class="line">ok:         mov bh,0                ;第0页</span><br><span class="line">;           mov dh,____             </span><br><span class="line">            mov dh,ds:[si]          ;行号</span><br><span class="line">            mov dl,0                ;列号</span><br><span class="line">            mov ah,2                ;调用10h号中断程序第2号子程序,设置光标位置</span><br><span class="line">            int 10h</span><br><span class="line"></span><br><span class="line">;           mov dx,____             </span><br><span class="line">            mov dx,ds:[bx]          ;dx=ds:[bx]，每个字符首地址</span><br><span class="line">            mov ah,9                ;dos系统21h例程9号子程序</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">            inc si                  ;si按字节定义，每次增量为1</span><br><span class="line">            add bx,2                </span><br><span class="line">;           __________              </span><br><span class="line">;           __________</span><br><span class="line">            loop ok</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验14 访问CMOS RAM</title>
    <url>/2021/08/02/%E5%AE%9E%E9%AA%8C14-%E8%AE%BF%E9%97%AECMOS-RAM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>编程，用加法和移位指令计算ax=ax<em>10<br>提示，ax</em>10=ax<em>2+ax</em>8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov al,00000001b</span><br><span class="line"></span><br><span class="line">mov bx,ax</span><br><span class="line">shl ax,1</span><br><span class="line">mov cl,3</span><br><span class="line">shl bx,cx</span><br><span class="line">add ax,bx</span><br></pre></td></tr></table></figure>

<p>CMOS RAM中，存放着当前的时间：年、月、日、时、分、秒。这6个信息的长度都为1个字节，存放单元为：<br>秒：0 分：2 时：4 日：7 月：8 年：9，这些数据以BCD码的方式存放</p>
<span id="more"></span>

<p>编程，在屏幕中间显示当前的月份</p>
<p>分析，这个程序主要做以下两部分工作<br>1.从CMOS RAM的8号单元读出当前月份的BCD码,应首先向地址端口70h写入要访问的单元的地址<br>mov al,8<br>out 70h,al<br>然后从数据端口71h中取得指定单元的数据<br>in al,71h</p>
<p>2.将BCD码表示的月份以十进制的形式显示到屏幕上<br>BCD码值 = 十进制数码值，则BCD码值+30h=十进制对应的ASCII码</p>
<p>从CMOS RAM的8号单元读出的一个字节中，包含了用两个BCD码表示的两位十进制数<br>高4位BCD码表示十位，低4位BCD码表示个位。</p>
<p>比如 00010100b表示 14</p>
<p>我们需要进行两步工作<br>将CMOS RAM的8号单元中读出一个字节，分为两个表示BCD码值的数据</p>
<p>mov ah,al   ;al中为从CMOS RAM的8号单元中读出数据<br>mov cl,4<br>shr ah,cl   ;ah中为月份的十位数码值<br>and al,00001111b ;al中为月份的个数数码值</p>
<p>显示ah+30h 和 al+30h 对应的ASCII码字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:  mov al,8</span><br><span class="line">        out 70h,al</span><br><span class="line">        in al,71h</span><br><span class="line">        </span><br><span class="line">        mov ah,al</span><br><span class="line">        mov cl,4</span><br><span class="line">        shr ah,cl</span><br><span class="line">        and al,00001111b</span><br><span class="line">        </span><br><span class="line">        add ah,30h</span><br><span class="line">        add al,30h</span><br><span class="line">        </span><br><span class="line">        mov bx,0b800h</span><br><span class="line">        mov es,bx</span><br><span class="line">        mov byte ptr es:[160*12+40*2],ah  ;显示月份的十位数码</span><br><span class="line">        mov byte ptr es:[160*12+40*2+2],al  ;显示月份的个位数码</span><br><span class="line">        </span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line">   </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>编程，以“年/月/日 时:分:秒”的格式，显示当前的日期、时间</p>
<p>注意：CMOS RAM 中存储着系统的配置信息，除了保存时间信息的单元外，不要向其他单元写入内容，否则将引起一些系统错误</p>
<p>在CMOS RAM中，存放着当前的时间：年、月、日、时、分、秒。这6个信息的长度为1个字节，存放单元为：</p>
<p>秒：0      分：2       时：4       日：7       月：8       年：9<br>0000 0000   0000 0010  0000 0100   0000 0111   0000 1000   0001 0000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db 9,8,7,4,2,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">time_style  db  &#x27;YY/MM/DD HH:MM:SS&#x27;,0</span><br><span class="line"></span><br><span class="line">time_CMOS   db  9,8,7,4,2,0</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            call init_reg</span><br><span class="line">            call show_clock</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h   </span><br><span class="line">            </span><br><span class="line">;=============================================</span><br><span class="line">show_clock: call showTimeStyle</span><br><span class="line"></span><br><span class="line">showTime:   mov si,offset time_CMOS</span><br><span class="line">            mov di,160*10+30*2</span><br><span class="line">            mov cx,6</span><br><span class="line"></span><br><span class="line">showDate:   mov al,ds:[si]</span><br><span class="line">            out 70h,al</span><br><span class="line">            in al,71h</span><br><span class="line"></span><br><span class="line">            mov ah,al</span><br><span class="line"></span><br><span class="line">            shr ah,1</span><br><span class="line">            shr ah,1</span><br><span class="line">            shr ah,1</span><br><span class="line">            shr ah,1</span><br><span class="line"></span><br><span class="line">            and al,00001111b</span><br><span class="line"></span><br><span class="line">            add ah,30h</span><br><span class="line">            add al,30h</span><br><span class="line"></span><br><span class="line">            mov es:[di],ah</span><br><span class="line">            mov es:[di+2],al</span><br><span class="line"></span><br><span class="line">            inc si</span><br><span class="line">            add di,6            ;di+6跳到YY/MM/DD HH:MM:SS中M位置</span><br><span class="line">            loop showDate</span><br><span class="line"></span><br><span class="line">            jmp showTime        ;无限循环</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;=============================================</span><br><span class="line">show_string:push dx</span><br><span class="line">            push ds</span><br><span class="line">            push es</span><br><span class="line">            push si</span><br><span class="line">            push di</span><br><span class="line"></span><br><span class="line">string:     mov dl,ds:[si]</span><br><span class="line">            cmp dl,0</span><br><span class="line">            je showStringRet</span><br><span class="line">            mov es:[di],dl</span><br><span class="line">            add di,2</span><br><span class="line">            inc si</span><br><span class="line">            loop string</span><br><span class="line"></span><br><span class="line">showStringRet:</span><br><span class="line">            pop di</span><br><span class="line">            pop si</span><br><span class="line">            pop es</span><br><span class="line">            pop ds</span><br><span class="line">            pop dx</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;=============================================</span><br><span class="line">init_reg:   mov bx,0B800H</span><br><span class="line">            mov es,bx</span><br><span class="line"></span><br><span class="line">            mov bx,cs</span><br><span class="line">            mov ds,bx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;=============================================</span><br><span class="line">showTimeStyle:</span><br><span class="line">            mov si,offset time_style</span><br><span class="line">            mov di,160*10+30*2</span><br><span class="line"></span><br><span class="line">            call show_string</span><br><span class="line">            ret</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验15 安装新的int9中断例程</title>
    <url>/2021/08/04/%E5%AE%9E%E9%AA%8C15-%E5%AE%89%E8%A3%85%E6%96%B0%E7%9A%84int9%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>外中断不可屏蔽中断，中断类型码为2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pushf</span><br><span class="line">IF = 0  TF = 0</span><br><span class="line">push cs</span><br><span class="line">push ip</span><br><span class="line">ip = 2*4 cs = 2*4+2</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>外中断可屏蔽中断，和内中断一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;1.获取中断类型码</span><br><span class="line">;2.pushf</span><br><span class="line">;3.IF = 0 TF = 0</span><br><span class="line">push cs</span><br><span class="line">push ip</span><br><span class="line">IP = n*4    cs = n*4+2</span><br></pre></td></tr></table></figure>

<p>编程：在屏幕中间依次显示”a-z”,并可以让人看清，在显示过程中，按下esc键后，改变显示颜色,依次显示”a-z”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:  mov ax,0b800h</span><br><span class="line">   mov es,ax</span><br><span class="line">   mov ah,&#x27;a&#x27;</span><br><span class="line">   </span><br><span class="line">  s: mov es:[160*12+40*2],ah</span><br><span class="line">   inc ah</span><br><span class="line">   cmp ah,&#x27;z&#x27;</span><br><span class="line">   jna s</span><br><span class="line">   mov ax,4c00h</span><br><span class="line">   int 21h</span><br><span class="line">   </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>每显示一个字母后，延时一段时间，让人看清，再显示下一个字母<br>我们可以让cpu执行一段时间的空循环，cpu执行的速度非常块，所以循环次数一定要到<br>用两个16位寄存器存放32位的循环次数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      mov dx,10h</span><br><span class="line">      mov ax,0</span><br><span class="line">s:    sub ax,1</span><br><span class="line">      sbb dx,0  ;带借位减法</span><br><span class="line">      cmp ax,0</span><br><span class="line">      jne s</span><br><span class="line">      cmp dx,0</span><br><span class="line">      jne s</span><br></pre></td></tr></table></figure>
<p>上面的程序，循环1000000h次，我们可以将循环延时的程序写作一个子程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">stack segment</span><br><span class="line"> db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line">            </span><br><span class="line">            mov ax,0b800h</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov ah,&#x27;a&#x27;</span><br><span class="line">   s:       mov es:[160*12+40*2],ah</span><br><span class="line">            call delay</span><br><span class="line">            inc ah</span><br><span class="line">            cmp ah,&#x27;z&#x27;</span><br><span class="line">            jna s</span><br><span class="line">            </span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line">    </span><br><span class="line">  delay:    push ax</span><br><span class="line">            push dx</span><br><span class="line">            mov dx,1000h  ;循环100000000h</span><br><span class="line">            mov ax,0</span><br><span class="line">    s1:     sub ax,1</span><br><span class="line">            sbb dx,0</span><br><span class="line">            cmp ax,0</span><br><span class="line">            jne s1</span><br><span class="line">            cmp dx,0</span><br><span class="line">            jne s1</span><br><span class="line">            pop dx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">            </span><br><span class="line">        code ends</span><br><span class="line"></span><br><span class="line">        end start</span><br></pre></td></tr></table></figure>

<p>键盘输入的处理过程:<br>1.键盘产生扫描码<br>2.扫描码送入60h端口<br>3.引发9号中断<br>4.cpuz执行int9中断例程处理键盘输入</p>
<p>键盘输入到达60h端口后，就会引发9好中断，cpu则转去执行int 9中断例程</p>
<p>1.从60h端口读出键盘输入<br>2.调用bios的int 9中断例程，处理其他硬件细节<br>3.判断是否为Esc的扫描码，如果是，改变显示的颜色后返回；如果不是则直接返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    dw 0,0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            mov ax,data</span><br><span class="line">            mov ds,ax</span><br><span class="line"></span><br><span class="line">            mov ax,0</span><br><span class="line">            mov es,ax</span><br><span class="line"></span><br><span class="line">            ;将原来的int 9中断例程的入口地址保存在ds:0、ds:2单元中</span><br><span class="line">            push es:[9*4]</span><br><span class="line">            pop ds:[0]</span><br><span class="line">            push es:[9*4+2]</span><br><span class="line">            pop ds:[2]      </span><br><span class="line"></span><br><span class="line">            ;在中断向量表中设置新的int 9中断例程的入口地址</span><br><span class="line">            mov word ptr es:[9*4],offset int9</span><br><span class="line">            mov es:[9*4+2],cs</span><br><span class="line"></span><br><span class="line">            mov ax,0b800h</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov ah,&#x27;a&#x27;</span><br><span class="line">s:          mov es:[160*12+40*2],ah</span><br><span class="line">            call delay</span><br><span class="line">            inc ah</span><br><span class="line">            cmp ah,&#x27;z&#x27;</span><br><span class="line">            jna s</span><br><span class="line"></span><br><span class="line">            mov ax,0</span><br><span class="line">            mov es,ax</span><br><span class="line"></span><br><span class="line">            ;将中断向量表中int 9中断例程的入口恢复为原来的地址</span><br><span class="line">            push ds:[0] pop es:[9*4]</span><br><span class="line">            push ds:[2]</span><br><span class="line">            pop es:[9*4+2]</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">delay:      push ax</span><br><span class="line">            push dx</span><br><span class="line"></span><br><span class="line">            mov dx,10h</span><br><span class="line">            mov ax,0</span><br><span class="line"></span><br><span class="line">s1:         sub ax,1</span><br><span class="line">            sbb dx,0</span><br><span class="line">            cmp ax,0</span><br><span class="line">            jne s1</span><br><span class="line">            cmp dx,0</span><br><span class="line">            jne s1</span><br><span class="line">            </span><br><span class="line">            pop dx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;=======================================</span><br><span class="line">int9:       push ax</span><br><span class="line">            push bx</span><br><span class="line">            push es</span><br><span class="line"></span><br><span class="line">            int al,60h</span><br><span class="line"></span><br><span class="line">            pushf</span><br><span class="line">            pushf</span><br><span class="line">            pop bx</span><br><span class="line">            and bh,11111100b</span><br><span class="line">            push bx</span><br><span class="line">            popf</span><br><span class="line">            </span><br><span class="line">            ;对int指令进行模拟，调用原来的int9中断例程</span><br><span class="line">            call dword ptr ds:[0]</span><br><span class="line"></span><br><span class="line">            cmp al,1</span><br><span class="line">            jne int9ret</span><br><span class="line"></span><br><span class="line">            mov ax,0b800h</span><br><span class="line">            mov es,ax</span><br><span class="line"></span><br><span class="line">            ;将属性加1,改变颜色</span><br><span class="line">            inc byte ptr es:[160*12+40*2+1]</span><br><span class="line"></span><br><span class="line">int9ret:    pop es</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            iret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>实验15 安装新的int9中断例程</p>
<p>安装一个新的 int9 中断例程，功能：在DOS下，按下”A”键后，除非不再松开，如果松开，就显示满屏幕的”A”，其他的按键照常处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            call cpy_new_int9</span><br><span class="line">            call sav_old_int9</span><br><span class="line">            call set_new_int9</span><br><span class="line"></span><br><span class="line">testA:      mov ax,1000H</span><br><span class="line">            jmp testA</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">;====================================</span><br><span class="line">new_int9:   push ax</span><br><span class="line"></span><br><span class="line">            in al,60h</span><br><span class="line">            pushf</span><br><span class="line">            call dword ptr cs:[200h]</span><br><span class="line"></span><br><span class="line">            cmp al,9Eh</span><br><span class="line">            jne int9Ret</span><br><span class="line">            call set_screen_letter</span><br><span class="line"></span><br><span class="line">int9Ret:    pop ax</span><br><span class="line">            iret</span><br><span class="line"></span><br><span class="line">;=======================================</span><br><span class="line">set_screen_letter:</span><br><span class="line">            push bx</span><br><span class="line">            push cx</span><br><span class="line">            push dx</span><br><span class="line">            push es</span><br><span class="line"></span><br><span class="line">            mov bx,0b800h</span><br><span class="line">            mov es,bx</span><br><span class="line">            mov bx,0</span><br><span class="line">            mov dl,&#x27;A&#x27;</span><br><span class="line">            mov cx,2000</span><br><span class="line"></span><br><span class="line">setScreenLetter:</span><br><span class="line">            mov es:[bx],dl</span><br><span class="line">            add bx,2</span><br><span class="line">            loop setScreenLetter</span><br><span class="line"></span><br><span class="line">            pop es</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">new_int9_end:</span><br><span class="line">            nop</span><br><span class="line"></span><br><span class="line">;====================================</span><br><span class="line">set_new_int9:</span><br><span class="line">            mov bx,0</span><br><span class="line">            mov es,bx</span><br><span class="line"></span><br><span class="line">            cli</span><br><span class="line">            mov word ptr es:[9*4],7E00H</span><br><span class="line">            mov word ptr es:[9*4+2],0</span><br><span class="line">            sti</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line">            </span><br><span class="line">;====================================</span><br><span class="line">sav_old_int9:</span><br><span class="line">            mov bx,0</span><br><span class="line">            mov es,bx</span><br><span class="line"></span><br><span class="line">            cli</span><br><span class="line">            push es:[9*4]</span><br><span class="line">            pop es:[200h]</span><br><span class="line">            push es:[9*4+2]</span><br><span class="line">            pop es:[202h]</span><br><span class="line">            sti</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;====================================</span><br><span class="line">cpy_new_int9:</span><br><span class="line">            mov bx,cs</span><br><span class="line">            mov ds,bx</span><br><span class="line">            mov si,offset new_int9</span><br><span class="line"></span><br><span class="line">            mov bx,0</span><br><span class="line">            mov es,bx</span><br><span class="line">            mov di,7E00H</span><br><span class="line"></span><br><span class="line">            mov cx,offset new_int9_end - offset new_int9</span><br><span class="line">            cld</span><br><span class="line">            rep movsb</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;====================================</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验16 编写包含多个功能子程序的中断例程</title>
    <url>/2021/08/25/%E5%AE%9E%E9%AA%8C16-%E7%BC%96%E5%86%99%E5%8C%85%E5%90%AB%E5%A4%9A%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%AD%90%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>编写子程序，以十六进制的形式在屏幕中间显示给定的字节型数据</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">array    db  88h,0FFh,0Fh,0CCh,3Fh</span><br><span class="line"></span><br><span class="line">number   db  &#x27;0123456789ABCDEF&#x27;</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            call init_reg</span><br><span class="line"></span><br><span class="line">            call show_byte</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">;====================================================</span><br><span class="line">show_byte:  mov si,offset array             </span><br><span class="line">            mov di,160*10+40*2</span><br><span class="line">            mov cx,5</span><br><span class="line"></span><br><span class="line">showByte:   mov al,ds:[si]</span><br><span class="line">            call show_hex</span><br><span class="line">            inc si</span><br><span class="line">            loop showByte</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;====================================================</span><br><span class="line">show_hex:   jmp showHex</span><br><span class="line"></span><br><span class="line">showHex:    mov ah,al</span><br><span class="line">            and al,00001111B</span><br><span class="line">            shr ah,1</span><br><span class="line">            shr ah,1</span><br><span class="line">            shr ah,1</span><br><span class="line">            shr ah,1</span><br><span class="line"></span><br><span class="line">            mov bx,0</span><br><span class="line">            mov bl,al</span><br><span class="line"></span><br><span class="line">            mov al,ds:number[bx]</span><br><span class="line"></span><br><span class="line">            mov bl,ah</span><br><span class="line">            mov ah,ds:number[bx]</span><br><span class="line"></span><br><span class="line">            mov es:[di],ah</span><br><span class="line">            mov es:[di+2],al</span><br><span class="line"></span><br><span class="line">            add di,6</span><br><span class="line"></span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">;====================================================</span><br><span class="line">init_reg:   mov bx,0B800H</span><br><span class="line">            mov es,bx</span><br><span class="line"></span><br><span class="line">            mov bx,data</span><br><span class="line">            mov ds,bx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验17 编写包含多个功能子程序的中断例程</title>
    <url>/2021/09/02/%E5%AE%9E%E9%AA%8C17-%E7%BC%96%E5%86%99%E5%8C%85%E5%90%AB%E5%A4%9A%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%AD%90%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.编程，接收用户的键盘输入，输入”r”，将屏幕上的字符设置为红色；输入”g”，将屏幕上的字符设置为绿色；输入”b”，将屏幕上的字符设置为蓝色</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ah,0</span><br><span class="line">            int 16h</span><br><span class="line"></span><br><span class="line">            mov ah,1</span><br><span class="line">            cmp al,&#x27;r&#x27;</span><br><span class="line">            je red</span><br><span class="line">            </span><br><span class="line">            cmp al,&#x27;g&#x27;</span><br><span class="line">            je green</span><br><span class="line"></span><br><span class="line">            cmp al,&#x27;b&#x27;</span><br><span class="line">            je blue</span><br><span class="line">            jmp short sret</span><br><span class="line"></span><br><span class="line">red:        shl ah,1</span><br><span class="line">            </span><br><span class="line">green:      shl ah,1</span><br><span class="line"></span><br><span class="line">blue:       mov bx,0b800h</span><br><span class="line">            mov es,bx</span><br><span class="line">            mov bx,1</span><br><span class="line">            mov cx,2000</span><br><span class="line"></span><br><span class="line">s:          and byte ptr es:[bx],11111000b</span><br><span class="line">            or es:[bx],ah</span><br><span class="line">            add bx,2</span><br><span class="line">            loop s</span><br><span class="line"></span><br><span class="line">sret:       mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>编写一个接收字符串输入的子程序，实现下面3个基本功能。因为在输入的过程中需要显示，子程序的参数如下<br>(dh)、(dl)字符串在屏幕上显示行、列位置<br>ds:si指向字符串的存储空间，字符串以0为结尾符</p>
<p>最基本的字符串输入程序，需具备下面的功能<br>1.在输入的同时需要显示这个字符串<br>2.一般在输入回车符后，字符串输入结束<br>3.能够删除已经输入的字符</p>
<p>我们可以简单的确定程序的处理过程<br>1.调用int 16h读取键盘输入<br>2.如果是字符，进入字符栈，显示字符栈中的所有字符；继续执行步骤1<br>3.如果是退格键，从字符栈中弹出一个字符，显示字符栈中的所有字符，继续执行步骤1<br>4.如果是Enter键，向字符栈中压入0，返回</p>
<p>子程序：字符栈的入栈、出栈和显示<br>参数说明：(ah)=功能号，0表示入栈，1表示出栈，2表示显示<br>ds:si 指向字符栈空间<br>对于0号功能：(al)=入栈字符<br>对于1号功能：(al)=返回的字符<br>对于2号功能：(dh)、(dl)=字符串在屏幕上显示的行、列位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">charstack:		jmp short charstack</span><br><span class="line"></span><br><span class="line">table			dw	charpush,charpop,charshow</span><br><span class="line">top				dw	0								;栈顶</span><br><span class="line"></span><br><span class="line">charstart:		push bx</span><br><span class="line">				push dx</span><br><span class="line">				push di</span><br><span class="line">				push es</span><br><span class="line">				</span><br><span class="line">				cmp ah,2</span><br><span class="line">				ja sret</span><br><span class="line">				mov bl,ah</span><br><span class="line">				mov bh,0</span><br><span class="line">				add bx,bx</span><br><span class="line">				jmp word ptr table[bx]</span><br><span class="line">				</span><br><span class="line">charpush:		mov bx,top</span><br><span class="line">				mov [si][bx],al</span><br><span class="line">				inc top</span><br><span class="line">				jmp sret</span><br><span class="line">				</span><br><span class="line">charpop:		cmp top,0</span><br><span class="line">				je sret</span><br><span class="line">				dec top</span><br><span class="line">				mov bx,top</span><br><span class="line">				mov al,[si][bx]</span><br><span class="line">				jmp sret</span><br><span class="line">				</span><br><span class="line">sharshow:		mov bx,0b800h</span><br><span class="line">				mov es,bx</span><br><span class="line">				mov al,160</span><br><span class="line">				mov ah,0</span><br><span class="line">				mul dh</span><br><span class="line">				mov di,ax</span><br><span class="line">				add dl,dl</span><br><span class="line">				mov dh,0</span><br><span class="line">				add di,dx</span><br><span class="line">				</span><br><span class="line">				mov bx,0</span><br><span class="line">				</span><br><span class="line">charshows:		cmp bx,top</span><br><span class="line">				jne noempty</span><br><span class="line">				mov byte ptr es:[di],&#x27; &#x27;</span><br><span class="line">				jmp sret</span><br><span class="line">				</span><br><span class="line">noempty:		mov al,[si][bx]</span><br><span class="line">				mov es:[di],al</span><br><span class="line">				mov byte ptr es:[di+2],&#x27; &#x27;</span><br><span class="line">				inc bx</span><br><span class="line">				add di,2</span><br><span class="line">				jmp charshows</span><br><span class="line">				</span><br><span class="line">sret:			pop es</span><br><span class="line">				pop di</span><br><span class="line">				pop dx</span><br><span class="line">				pop bx</span><br><span class="line">				ret</span><br><span class="line">				</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验4 [bx]和loop的使用</title>
    <url>/2021/05/11/%E5%AE%9E%E9%AA%8C4-bx-%E5%92%8Cloop%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>实验4 [bx] 和 loop 的使用</p>
<h4 id="1-编程，向内存-0-200-0-23F-依次传送数据-0-63-3FH"><a href="#1-编程，向内存-0-200-0-23F-依次传送数据-0-63-3FH" class="headerlink" title="1. 编程，向内存 0:200 ~ 0:23F 依次传送数据 0~63(3FH)"></a>1. 编程，向内存 0:200 ~ 0:23F 依次传送数据 0~63(3FH)</h4><h4 id="2-编程，向内存-0-200-0-23F-依次传送数据-0-63-3FH-，程序中只能使用9条指令，9条指令中包括-“mov-ax-4c00h”-和-“int-21h”"><a href="#2-编程，向内存-0-200-0-23F-依次传送数据-0-63-3FH-，程序中只能使用9条指令，9条指令中包括-“mov-ax-4c00h”-和-“int-21h”" class="headerlink" title="2. 编程，向内存 0:200 ~ 0:23F 依次传送数据 0~63(3FH)，程序中只能使用9条指令，9条指令中包括 “mov ax,4c00h” 和 “int 21h”"></a>2. 编程，向内存 0:200 ~ 0:23F 依次传送数据 0~63(3FH)，程序中只能使用9条指令，9条指令中包括 “mov ax,4c00h” 和 “int 21h”</h4><span id="more"></span>

<p>1和2题一起写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">	mov ax,0</span><br><span class="line">	mov ds,ax</span><br><span class="line">	mov cx,40h</span><br><span class="line">	mov bx,200h</span><br><span class="line">	s:mov [bx],bx</span><br><span class="line">	inc bx</span><br><span class="line">	loop s</span><br><span class="line">	</span><br><span class="line">	mov ax,4c00h</span><br><span class="line">	int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="3-下面的程序的功能是将-“mov-ax-4c00h”-之前的指令复制到内存-0-200-处，补全程序。上机调试，跟踪运行结果。"><a href="#3-下面的程序的功能是将-“mov-ax-4c00h”-之前的指令复制到内存-0-200-处，补全程序。上机调试，跟踪运行结果。" class="headerlink" title="3. 下面的程序的功能是将 “mov ax,4c00h” 之前的指令复制到内存 0:200 处，补全程序。上机调试，跟踪运行结果。"></a>3. 下面的程序的功能是将 “mov ax,4c00h” 之前的指令复制到内存 0:200 处，补全程序。上机调试，跟踪运行结果。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">	mov ax,________  cs</span><br><span class="line">	mov ds,ax</span><br><span class="line">	mov ax,0020h</span><br><span class="line">	mov es,ax</span><br><span class="line">	mov bx,0</span><br><span class="line">	mov cx,________  17h</span><br><span class="line">	s:mov al,[bx]</span><br><span class="line">    mov es:[bx],al</span><br><span class="line">    inc bx</span><br><span class="line">    loop s</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ul>
<li>复制的是什么？从哪里到哪里？</li>
<li>复制的是什么？有多少个字节？你如何知道要复制的字节的数量？</li>
</ul>
<p>cx寄存器在循环语句中，常作为计数器使用，loop循环语句把cx寄存器中的值作为判断是否循环的依据。</p>
<p>CX寄存器在debug调试一个可执行程序时，CX的初始值为该程序的字节尺寸大小。</p>
<p>*<em>3.<strong><strong>下面程序的功能是将mov ax,4c00H</strong></strong>之前的指令复制到内存0:200</em>*<strong>处，补全程序，上机调试，跟踪运行结果：</strong></p>
<p>程序分析：</p>
<p>【1】使用debug调试一个EXE文件时候，使用r命令查看寄存器状态，其中cx寄存器的值（初始值）就是该程序代码的大小（按照字节数）。我们可以通过运行debug程序来调试生成的EXE文件，前提你先将CX寄存器赋个值。</p>
<p>​    侧面验证CX寄存器的另一个作用。</p>
<p>【2】cs段寄存器中存储的是指向程序代码段的段地址。此实验是将程序的代码（按字节）复制，故将cs寄存器中的指向代码的段地址赋值给ax，再通过ax寄存器赋值给ds段寄存器。（为什么不能支持从段寄存器cs直接赋值给段寄存器ds呢？回忆下，在8086CPU中，ds、ss、cs、es四个段寄存器存放的都是段地址，在CPU和我们来看。其他的寄存器一般存放的都是数据。</p>
<p>​    这4个段寄存器支持从其他寄存器中赋值，但不允许立即数直接赋值给段寄存器。）</p>
<p>【3】[bx]作为偏移地址为bx的内存单元，它支持的段地址默认是存储在ds段寄存器中的。    本例中ds：[bx]指向的是存储代码段的内存单元（源内存段）。由于ds被占用了，故被写入的内存单元的段地址就没有存储的段寄存器了，es寄存器上场了，es存储了地址为0020H的段地址（目标内存段），那么同样使用[bx]偏移地址的话，必须明确的指出它的前缀，故es：[bx]就指向了内存是0200H的内存单元地址段。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验5 编写、调试具体多个段的程序</title>
    <url>/2021/05/15/%E5%AE%9E%E9%AA%8C5-%E7%BC%96%E5%86%99%E3%80%81%E8%B0%83%E8%AF%95%E5%85%B7%E4%BD%93%E5%A4%9A%E4%B8%AA%E6%AE%B5%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>实验5 编写、调试具体多个段的程序</p>
<h2 id="1-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"><a href="#1-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。" class="headerlink" title="1.将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"></a>1.将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。</h2><span id="more"></span>

<p>汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"> </span><br><span class="line">data segment</span><br><span class="line">        dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line">data ends</span><br><span class="line"> </span><br><span class="line">stack segment</span><br><span class="line">        dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line"> </span><br><span class="line">code segment</span><br><span class="line">start:  mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,16</span><br><span class="line"> </span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line"> </span><br><span class="line">        push ds:[0]</span><br><span class="line">        push ds:[2]</span><br><span class="line">        pop ds:[2]</span><br><span class="line">        pop ds:[0]</span><br><span class="line"> </span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ul>
<li>CPU执行程序，程序返回前，data段中的数据____。</li>
<li>CPU执行程序，程序返回前，CS=____，SS=<strong><strong>，DS=</strong></strong> 。</li>
<li>设程序加载后，CODE段的段地址为X，则DATA段的段地址为____ ，STACK段的段地址为____ 。</li>
</ul>
<p>程序分析：由于是初次接触，我们逐步讲解</p>
<p><strong>此程序考察的是内存中数据段和栈段的定义。</strong></p>
<p>程序共定义了3个段（<strong>依次是数据段、栈段、代码段，注意前后的顺序</strong>）</p>
<ul>
<li>一个数据段，data段。首先明确，在程序运行开始（标号start处），这个数据段就已经被定义好了，并且分配了内存空间，并赋值了。</li>
<li>一个栈段，stack。同理这个数据段在没有被人工定义为栈结构时，也被定义好了。并且分配了内存空间，并赋值了</li>
<li>一个代码段</li>
</ul>
<p>此程序编译并连接后，使用 debug 调试（<font color="#CB4335">这里需要注意，一下的段地址可能由于系统不同而存在差异，主要是理解概念</font>）</p>
<p><img src="1.png"></p>
<p>程序分析：我们什么也没有执行，此时我们在 data 段定义的数据在哪？</p>
<p>在 ds:0100H 处（原来我们讲过，程序最开始时 ds:00~ds:100H 是留给程序与操作系统通讯使用的 psp 内存段，参考书中 p92），也就是我们在 ds:100H、075A:100H（因为 ds 是 075A，所以075A:100H）或 0759:00 处可以看见这些定义的数据。见下图</p>
<p><code>-d ds:100</code></p>
<p><img src="2.png"></p>
<blockquote>
<p>mov ax,stack</p>
<p>mov ss,ax</p>
<p>mov sp,16</p>
</blockquote>
<p>直到这3个指令执行完毕，此时stack数据段被人工指定为了栈结构，（ss）=offset stack，也就是说此时ss段寄存器变量才赋值为stack段的段地址。sp指针指向了栈顶。</p>
<p><img src="3.png"></p>
<p>我们在上图中，看到 ss=0769，执行完这3个指令后，我们发现 ss=076B，我们用 d 命令查询：</p>
<p><img src="4.png"></p>
<p>我们定义的数据在内存中的位置在程序装载后，位置是固定的，也就是说数据段的物理地址一直是固定的，只不过我们表述这个数据段时，采用了不同的段地址和偏移地址。</p>
<p>我们将 ss 指向了 stack 段内存，也就是说，stack 这个内存段从现在开始被人工的当做了栈空间使用。在这16个字节空间里，原来都是00；为什么现在有其他数据了？这个我们先别管。它是一些其他的有用信息。</p>
<blockquote>
<p>mov ax,data</p>
<p>mov ds,ax</p>
</blockquote>
<p>直到上面2个指令执行完毕，ds 段寄存器的值才是 offset data，也就是说此时ds指向了data段，ds:[0] 和 data:[0] 是等价的。</p>
<p>此时的段地址存储在ds中；也是默认的段地址寄存器；内存单元表示直接使用 [idata] 寻址就行，也可以使用 ds:[idata]。[0]代表第一个内存单元地址；[2]代表第三个内存单元地址。</p>
<p>同理：我们执行这二个指令后，将ds指向了data段。</p>
<blockquote>
<p>push ds:[0]</p>
</blockquote>
<p>指令含义：将 data 段中从第一个内存单元地址开始，按照字单元（2个字节），压栈到ss栈（或stack栈中）；通俗的讲，就是将 23 01 这二个字节按字为单元压栈。此时sp变量有变化，原来sp=0010H（16），压栈后：(sp)=(sp) - 2 = 16 - 2 = 000EH。</p>
<p><img src="5.png"></p>
<p>也就是说栈顶改变了。（这个变化，你可以使用debug中的t命令一步一步的执行后查看）。此时我们查看下栈中有变化吗？</p>
<p><code>-d ss:0 f</code></p>
<p><img src="6.png"></p>
<p>我们发现栈中确实存储了 01 23 这2个数据，而且明确了栈空间结构是从高地址向低地址发展的。至于栈中其他数据，我们不必理会。</p>
<blockquote>
<p>push ds:[2]</p>
</blockquote>
<p>指令含义：同理，将data段中从第三个内存单元地址开始，按照字单元（2个字节），压栈到ss栈（或stack栈中）；通俗的讲，就是将56 04这二个字节按字为单元压栈。此时sp变量有变化，原来sp=000EH（14）；压栈后（sp）=（sp）-2=14-2=000CH。也就是说栈顶改变了SP=000C。</p>
<p><img src="7.png"></p>
<p><code>-d ss:0 f</code></p>
<p><img src="8.png"></p>
<blockquote>
<p>pop ds:[2]</p>
</blockquote>
<p>指令含义：将栈中数据按字弹出，写入到段地址是ds（它的值是offset data或在我们的系统中是DS=0B65），偏移地址是[2]的内存单元中。如果默认段地址是ds，此指令直接可以写成：pop [2]</p>
<p>指令执行后：sp值有变化，因为是弹出一个字，故（sp）=（sp）+2 =000CH+2=000EH。也就是说栈顶指针sp指向有变化了。</p>
<p><img src="9.png"></p>
<p>这里注意栈空间中存储栈帧的顺序，也是在以后使用栈结构时候需要注意的原则：先进后出；后进先出。我们查看下data段数据变化</p>
<p><img src="10.png"></p>
<p>其实在内存第3、4字节中是pop弹栈回写的数据。实际是没有变化，但是经过了pop的回写的。</p>
<blockquote>
<p>pop ds:[0]</p>
</blockquote>
<p>  指令含义：同理如上面，不多说了。</p>
<p><strong>参考答案</strong></p>
<ul>
<li><p>CPU执行程序，程序返回前，data段中的数据____。</p>
<p><em>不变</em></p>
</li>
<li><p>CPU执行程序，程序返回前，CS=，SS=，DS=____ 。</p>
<p>CS=076C、SS=076B、DS=076A</p>
</li>
<li><p>设程序加载后，CODE段的段地址为X，则DATA段的段地址为____ ，STACK段的段地址为____ 。</p>
<p>data段的段地址为 X-2，stack段的段地址为 X-1</p>
</li>
</ul>
<h2 id="2-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题"><a href="#2-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题" class="headerlink" title="2.将下面的程序编译连接，用Debug加载、跟踪，然后回答问题"></a>2.将下面的程序编译连接，用Debug加载、跟踪，然后回答问题</h2><p>汇编程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"> </span><br><span class="line">data segment</span><br><span class="line">    dw 0123h,0456h</span><br><span class="line">data ends</span><br><span class="line"> </span><br><span class="line">stack segment</span><br><span class="line">    dw 0,0</span><br><span class="line">stack ends</span><br><span class="line"> </span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,stack      </span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,16         </span><br><span class="line"> </span><br><span class="line">    mov ax,data       </span><br><span class="line">    mov ds,ax</span><br><span class="line"> </span><br><span class="line">    push ds:[0]</span><br><span class="line">    push ds:[2]</span><br><span class="line">    pop ds:[2]</span><br><span class="line">    pop ds:[0]</span><br><span class="line"> </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ul>
<li>CPU执行程序，程序返回前，data段中的数据____。</li>
<li>CPU执行程序，程序返回前，CS=____，SS=<strong><strong>，DS=</strong></strong> 。</li>
<li>设程序加载后，CODE段的段地址为X，则DATA段的段地址为____ ，STACK段的段地址为____ 。</li>
<li>对于如下定义的段：<pre><code>name segment
    ......
name ends
</code></pre>
  如果段中数据位 N 个字节，程序加载后，该段实际占据空间为____ </li>
</ul>
<p><strong>程序分析：</strong>（不再详细分析了）</p>
<p><strong>首先明确：</strong>虽然我们在 data段 和 stack段 中只定义初始化了4个字节的内存，但在汇编中，直接给你分配了16个字节的空间，不足的按00补全。</p>
<p><strong>结论：</strong>数据段和栈段在程序加载后实际占据的空间都是以16个字节为单位的。如果不足，以0补全填充。</p>
<p> 在debug中查看：-d ds:100 （ 不知道为什么 ds:100 的 往上看前面解释）</p>
<p><img src="11.png"></p>
<p>g 1d 执行到 cs:1d 位置，程序中就是 mov ax, 4C00h</p>
<p><img src="12.png"></p>
<p><strong>参考答案</strong></p>
<ul>
<li><p>CPU执行程序，程序返回前，data段中的数据____。</p>
<p><em>不变</em></p>
</li>
<li><p>CPU执行程序，程序返回前，CS=____，SS=<strong><strong>，DS=</strong></strong> 。</p>
<p>CS=076C、SS=076B、DS=076A</p>
</li>
<li><p>设程序加载后，CODE段的段地址为X，则DATA段的段地址为____ ，STACK段的段地址为____ 。</p>
<p>data段的段地址为 X-2，stack段的段地址为 X-1</p>
</li>
<li><p>对于如下定义的段：</p>
<pre><code>name segment
    ......
name ends
</code></pre>
<p>  如果段中数据位 N 个字节，程序加载后，该段实际占据空间为（N/16的取整数+1）<em>16个字节，如果 N小于16，那么实际占用16个字节（理解这个小问题）；如果N大于16，那么实际占用（N/16的取整数+1）</em>16个字节。其实都是这个公式。</p>
</li>
</ul>
<h2 id="3-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"><a href="#3-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。" class="headerlink" title="3.将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"></a>3.将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。</h2><p>汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"> </span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,stack      </span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,16         </span><br><span class="line"> </span><br><span class="line">    mov ax,data       </span><br><span class="line">    mov ds,ax</span><br><span class="line"> </span><br><span class="line">    push ds:[0]</span><br><span class="line">    push ds:[2]</span><br><span class="line">    pop ds:[2]</span><br><span class="line">    pop ds:[0]</span><br><span class="line"> </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line"> </span><br><span class="line">data segment</span><br><span class="line">    dw 0123h,0456h</span><br><span class="line">data ends</span><br><span class="line"> </span><br><span class="line">stack segment</span><br><span class="line">    dw 0,0</span><br><span class="line">stack ends</span><br><span class="line"> </span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ul>
<li>CPU执行程序，程序返回前，data段中的数据____。</li>
<li>CPU执行程序，程序返回前，CS=____，SS=<strong><strong>，DS=</strong></strong> 。</li>
<li>设程序加载后，CODE段的段地址为X，则DATA段的段地址为____ ，STACK段的段地址为____ 。</li>
</ul>
<p>程序分析：<font color="#CB4335">这次只不过是将 data 和 stack 段放到了 code 段后面了。那么就要注意他们段地址的变化了。</font></p>
<p>程序返回前查看（程序执行结束前）</p>
<p><img src="13.png"></p>
<p><strong>总结：</strong>在汇编源代码中，我们定义的 code 是程序执行的代码（它存储在一个我们人为规定的段code中，在程序装载时，分配空间，并将机器码写入到这段内存中）；其他的数据段（无论是逻辑上的stack段，data段等）与代码段都相邻。只不过是装载、分配内存前后的问题</p>
<p><strong>参考答案</strong></p>
<ul>
<li><p>CPU执行程序，程序返回前，data段中的数据____。</p>
<p><em>执行程序后，data段有16个字节空间，前两个字数据不变，其余为00补全了</em></p>
</li>
<li><p>CPU执行程序，程序返回前，CS=____，SS=<strong><strong>，DS=</strong></strong> 。</p>
<p><em>CS=076A，SS=076E，DS=076D</em></p>
</li>
<li><p>设程序加载后，CODE段的段地址为X，则DATA段的段地址为____ ，STACK段的段地址为____ 。</p>
<p><em>data 段地址为 X+3，stack段地址为 X+4</em></p>
</li>
</ul>
<p><strong>（为什么是这样？怎么计算的？看cx，</strong><font color="#CB4335">程序加载时，我们发现cx=0044，含义：此程序所有机器码占用的空间是44H=68字节（cx 指示 程序机器码占用空间的大小）</font>，<strong>data 和 stack 由于定义的都是小于16个字节，一律按照16个字节分配空间，其余补00；剩余的36个字节就是code段真正的可执行的机器码。由于code段不足48个字节（3*16），故程序加载时也补0了）</strong></p>
<p>我们可以使用debug看看：-d cs:0</p>
<p><img src="14.png"></p>
<h2 id="4-如果将-1-、-2-、-3-题中的最后一条伪指令“end-start”改为“end”-也就是说不指明程序的入口-，则那个程序仍然可以正确执行？请说明原因。"><a href="#4-如果将-1-、-2-、-3-题中的最后一条伪指令“end-start”改为“end”-也就是说不指明程序的入口-，则那个程序仍然可以正确执行？请说明原因。" class="headerlink" title="4. 如果将(1)、(2)、(3)题中的最后一条伪指令“end start”改为“end”(也就是说不指明程序的入口)，则那个程序仍然可以正确执行？请说明原因。"></a>4. 如果将(1)、(2)、(3)题中的最后一条伪指令“end start”改为“end”(也就是说不指明程序的入口)，则那个程序仍然可以正确执行？请说明原因。</h2><p><strong>答案：</strong>如果不指名程序的（code段的）入口，并且使用 end 替换 end start，都能正常运行。但只有（3）题中程序可以正确的执行（因为只有它是在内存中可执行代码在最前面）。</p>
<p><strong>讲解：</strong>因为如果不指名入口，程序会从加载进内存的第一个单元起开始执行，前二个题中，定义的是数据，但CPU还是将数据当做指令代码执行了。只不过程序执行时逻辑上是错误了。但真的能执行的。</p>
<p>如果指明了程序的入口，CPU会直接从入口处开始执行真正的机器码，直到遇到中断指令返回。此种方式能够确保程序逻辑上的正确。因此有必要为程序来指明入口。</p>
<p>网上许多答案都是不太明确！</p>
<h2 id="5-编写-code-段中的代码，将-a段-和-b段-数据依次相加，结果存入c段"><a href="#5-编写-code-段中的代码，将-a段-和-b段-数据依次相加，结果存入c段" class="headerlink" title="5.编写 code 段中的代码，将 a段 和 b段 数据依次相加，结果存入c段"></a>5.<strong>编写 code</strong> 段中的代码，将 a段 和 b段 数据依次相加，结果存入c段</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">a segment</span><br><span class="line">    db 1,2,3,4,5,6,7,8</span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b segment</span><br><span class="line">    db 1,2,3,4,5,6,7,8</span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">c segment</span><br><span class="line">    db 0,0,0,0,0,0,0,0</span><br><span class="line">c ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    ?</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>书上解题思路：使用 段 es 首先指向 a 段 ，ds 指向 c 段，a 段 和 c 段相加保存在 c 段，然后 es 再 指向 b ，b 段再 和 c 段相加保存在 c 段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">a segment</span><br><span class="line">    db 1,2,3,4,5,6,7,8</span><br><span class="line">a ends</span><br><span class="line"> </span><br><span class="line">b segment</span><br><span class="line">    db 1,2,3,4,5,6,7,8</span><br><span class="line">b ends</span><br><span class="line"> </span><br><span class="line">c segment</span><br><span class="line">    db 0,0,0,0,0,0,0,0</span><br><span class="line">c ends</span><br><span class="line"> </span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,a</span><br><span class="line">    mov es,ax</span><br><span class="line">    </span><br><span class="line">    mov ax,c</span><br><span class="line">    mov ds,ax</span><br><span class="line">    </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,8</span><br><span class="line">s1:</span><br><span class="line">    mov ax,es:[bx]</span><br><span class="line">    add[bx],ax</span><br><span class="line">    add bx,2</span><br><span class="line">    loop s1</span><br><span class="line">    mov ax,b </span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ds,ax </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,8</span><br><span class="line">s2:</span><br><span class="line">    mov ax,es:[bx]</span><br><span class="line">    add[bx],ax</span><br><span class="line">    add bx,2</span><br><span class="line">    loop s2</span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p><strong>程序分析：</strong></p>
<p>​    （1）这个题目一下子搞出3个数据段了。呵呵，貌似我们段寄存器不够用了。cs（代码段），ss（栈段），这二个千万别碰！那只有ds和es了。思路：将a和b段我们用一个段地址表示，存储在ds中；c段我们存储在es中。？这种方式好吗？不太好。</p>
<p>​    （2）上面已经体会了，当一个数据段不足16个字节时，按16个字节分配内存空间，其余的补0。我们发现a、b段都是定义了8个字节的数值。并且是相邻的（肯定是的），那么a段的地址我们使用[bx+idata]表示，b段我们也使用[bx+idata]表示。这种方式没有把a段和b段分开。</p>
<p>​    （3）最终决定：将es指向c段，ds分开分别的指向a段和b段，这样我们在一个循环内完成所有的工作了；程序中使用了栈保存了ds的值；</p>
<p>汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"> </span><br><span class="line">a segment</span><br><span class="line">    db 1,2,3,4,5,6,7,8</span><br><span class="line">a ends</span><br><span class="line"> </span><br><span class="line">b segment</span><br><span class="line">    db 1,2,3,4,5,6,7,8</span><br><span class="line">b ends</span><br><span class="line"> </span><br><span class="line">cz segment</span><br><span class="line">    db 0,0,0,0,0,0,0,0</span><br><span class="line">cz ends</span><br><span class="line"> </span><br><span class="line">code segment</span><br><span class="line"> </span><br><span class="line">start:</span><br><span class="line"> </span><br><span class="line">    mov ax,a</span><br><span class="line">    mov ds,ax            ;ds指向a段</span><br><span class="line"> </span><br><span class="line">    mov ax,b</span><br><span class="line">    mov es,ax            ;es指向b段</span><br><span class="line"> </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,8             ;计算8次，故计数器为8</span><br><span class="line"> </span><br><span class="line">s:</span><br><span class="line">    mov dl, [bx]         ;将ds:[bx]内存单元按字节送入dl，此循环用到ax</span><br><span class="line">    add dl, es:[bx]      ;将ds:[bx]与es:[bx]内存单元值相加</span><br><span class="line">    push ds              ;保护ds值，因为下面用到ds了</span><br><span class="line">    mov ax, cz          ;我的编译器不认C这个段的标号，故改成了CZ</span><br><span class="line">    mov ds, ax          ;将ds指向cz段</span><br><span class="line">    mov [bx], dl        ;将dl（a和b相对应内存单元内容之和）写入cz中</span><br><span class="line">    pop ds               ;将ds恢复</span><br><span class="line">    inc bx              ;bx递增</span><br><span class="line">    loop s</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"> </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p><strong>结果分析：</strong></p>
<p>​    （1）ds段寄存器在程序中可以存储不同的内存段的段地址，并不是唯一存储一个段地址，es也是如此。</p>
<p>​    （2）合理利用系统自动创建的栈空间，利用栈空间来保存暂存的数据。注意压栈和弹栈的顺序，确保操作的是一个数据对象。</p>
<p>​    （3）在遇到多个数据段的情况下，这种方式可以利用一个段寄存器来对多个内存段寻址。</p>
<p>​    （4）在实际工程中，在程序中保存的数据，都是程序的一些必须的初始化的数据，其他的数据都应保存在磁盘文件中，需要时才读入内存中。此例中的a、b、cz段都是其他的数据，在这里就是演示。</p>
<h2 id="6-编写code段中代码，用push指令将a段中前8个字型数据逆转到存储b段中。"><a href="#6-编写code段中代码，用push指令将a段中前8个字型数据逆转到存储b段中。" class="headerlink" title="6.编写code段中代码，用push指令将a段中前8个字型数据逆转到存储b段中。"></a>6.编写code段中代码，用push指令将a段中前8个字型数据逆转到存储b段中。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">a segment</span><br><span class="line">    dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffh</span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b segment</span><br><span class="line">    dw 0,0,0,0,0,0,0,0</span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    ?</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<p><strong>程序分析：</strong></p>
<p>​    （1）理解掌握栈的原理，先进后出，从高地址向低地址发展。也就是说先压栈的数据，在栈底，最后被pop出。</p>
<p>​    （2）对于数据段，我们定义2个，ds指向a段，ss指向b。ss指向了b段，也就意味着b段是人工创建的一个栈结构了。</p>
<p>​    （3）对于push和pop指令：操作的是一个栈帧或栈单元，它的操作数是一个字，在8086CPU中是一个字，2个字节，这个在a、b段定义时我们应该发现，它们都是定义的字。如果定义的是db字节呢？呵呵。一样的。</p>
<p>汇编代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"> </span><br><span class="line">a segment</span><br><span class="line">    dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffh</span><br><span class="line">a ends</span><br><span class="line"> </span><br><span class="line">b segment</span><br><span class="line">    dw 0,0,0,0,0,0,0,0</span><br><span class="line">b ends</span><br><span class="line"> </span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,a</span><br><span class="line">    mov ds,ax        ;ds指向a段</span><br><span class="line"> </span><br><span class="line">    mov ax,b</span><br><span class="line">    mov ss,ax        ;ss指向了b段</span><br><span class="line">    mov sp,16        ;初始化栈顶，ss：sp指向了栈顶，意味着b段是个栈结构了。</span><br><span class="line"> </span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,8         ;循环读取a段8次，因为是前8个字</span><br><span class="line">s:</span><br><span class="line">    push ds:[bx] ;直接将a段中的字单元内存压栈即可。这样在栈中的存储结构就是逆序的</span><br><span class="line">    add bx,2</span><br><span class="line">    loop s</span><br><span class="line">    </span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<p><code>-d ds:0</code></p>
<p><img src="15.png"></p>
<blockquote>
<p>参考：<a href="http://blog.sina.com.cn/s/blog_171daf8e00102xclx.html">http://blog.sina.com.cn/s/blog_171daf8e00102xclx.html</a></p>
<p>汇编语言实验答案 (王爽)：<a href="https://wenku.baidu.com/view/a1cd7c6c1fb91a37f111f18583d049649b660ede.html">https://wenku.baidu.com/view/a1cd7c6c1fb91a37f111f18583d049649b660ede.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验6 寻址方式在结构化数据访问中的应用</title>
    <url>/2021/06/09/%E5%AE%9E%E9%AA%8C6-%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F%E5%9C%A8%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>实验6 </p>
<p>编程，将 datasg 段中每个单词的头一个字母变成大写字母</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg, ds:datasg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">	db &#x27;1. file				&#x27;</span><br><span class="line">	db &#x27;2. edit				&#x27;</span><br><span class="line">	db &#x27;3. search		    &#x27;</span><br><span class="line">	db &#x27;4. view				&#x27;</span><br><span class="line">	db &#x27;5. options		    &#x27;</span><br><span class="line">	db &#x27;6. help				&#x27;</span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">	start:</span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>分析：</p>
<p>datasg 中的数据的存储结构</p>
<p>我们可以看到，在 datasg 中定义了6个字符串，每个长度为16个字节（注意，为了直观，每个字符串后面都加上了空格符，以使它们的长度刚好为16个字节）。因为它们是连续存放的，可以将这6个字符串看成一个6行16列的二维数组。按要求，需要修改每个单词的第一个字母，即二维数组的每一行的第4列（相对于行首的偏移地址为3）</p>
<p><img src="1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg, ds:datasg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">	db &#x27;1. file				&#x27;</span><br><span class="line">	db &#x27;2. edit				&#x27;</span><br><span class="line">	db &#x27;3. search		    &#x27;</span><br><span class="line">	db &#x27;4. view				&#x27;</span><br><span class="line">	db &#x27;5. options		    &#x27;</span><br><span class="line">	db &#x27;6. help				&#x27;</span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">start: mov ax,datasg</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,6</span><br><span class="line">					 </span><br><span class="line">s0: mov al,[bx+3]</span><br><span class="line">    and al,11011111b</span><br><span class="line">    mov [bx+3],al</span><br><span class="line">    add bx,16</span><br><span class="line">    loop s0</span><br><span class="line">					 </span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<p><strong>编程，将 datasg 段中每个单词改为大写字母</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,ds:datasg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">	db &#x27;ibm				&#x27;</span><br><span class="line">	db &#x27;dec				&#x27;</span><br><span class="line">	db &#x27;dos				&#x27;</span><br><span class="line">	db &#x27;vax				&#x27;</span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">start:</span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>datasg 中的数据的存储结构如图</p>
<p><img src="2.png"></p>
<p>我们需要进行 4X3次的二重循环，用变量R定位，变量C定位列。外层循环按行来进行，内层按列来进行。首先用R定位第1行，然后循环修改R行的前3列；然后再用R定位到下一行，再次循环修改R行的前3列……，如此重复直到所有的数据修改完毕，处理的过程大致如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	R=第一行的地址：</span><br><span class="line">	mov cx,4</span><br><span class="line"></span><br><span class="line">s0: C=第一列的地址</span><br><span class="line">	mov cx,3</span><br><span class="line"></span><br><span class="line">s: 改变R行，c列的字母为大写</span><br><span class="line">	C=下一列的地址：</span><br><span class="line">	loop s</span><br><span class="line">	R=下一行的地址</span><br><span class="line">	loop s0</span><br></pre></td></tr></table></figure>

<p>我们用 bx 来作变量，定位每行的岂是地址，用 si 定位要修改的列，用 [bx+si] 的方式来对目标单元进行寻址，程序如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	mov ax,datasg</span><br><span class="line">	mov ds,ax</span><br><span class="line">	mov bx,0</span><br><span class="line">	mov cx,4</span><br><span class="line"></span><br><span class="line">s0: mov si,0</span><br><span class="line">    mov cx,3</span><br><span class="line">		</span><br><span class="line">s:	mov al,[bx+si]</span><br><span class="line">    and al,11011111b</span><br><span class="line">    mov [bx+si],al</span><br><span class="line">    inc si</span><br><span class="line">    </span><br><span class="line">    loop s</span><br><span class="line">    </span><br><span class="line">    add bx,16</span><br><span class="line">    loop s0</span><br></pre></td></tr></table></figure>

<p>仔细阅读上面的程序，看看有什么问题？</p>
<p>思考后看分析</p>
<p><strong>分析</strong></p>
<p>问题在于cx的使用，我们进行二重循环，却只用了一个循环计数器，造成在进行内循环的时候，覆盖了外层循环的循环计数值。多用一个计数器又不可能，因为loop指令默认cx为循环计数器。怎么办呢？</p>
<p>我们应该在每次开始内层循环的时候，将外层循环的cx中的数值保存起来，在执行外层循环的loop指令前，再恢复外层循环的cx数值。可以用寄存器dx来临时保存cx中的数值，改进程序如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    mov ax,datasg</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,4</span><br><span class="line">    mov dx,cx</span><br><span class="line"></span><br><span class="line">s0: mov dx,cx</span><br><span class="line">    mov si,0</span><br><span class="line">    mov cx,3</span><br><span class="line"></span><br><span class="line">s:  mov al,[bx+si]</span><br><span class="line">    add al,11011111b</span><br><span class="line">    mov [bx+si],al</span><br><span class="line">    inc si</span><br><span class="line">    loop s</span><br><span class="line"></span><br><span class="line">    add bx,16</span><br><span class="line">    mov cx,dx</span><br><span class="line">    loop s0</span><br></pre></td></tr></table></figure>

<p>上面的程序用dx来暂时存放cx中的值，如果在内循环中，dx寄存器也被使用，该怎么办？我们似乎可以使用别的寄存器，但是CPU中的寄存器数量毕竟是有限的，如8086CPU只有14个寄存器。在上面的程序中，si、cx、ax、bx，显然不能用来暂存cx中的值，因为这些寄存器在循环中也要使用；cs、ip、ds也不能用，因为cs:ip时刻指向当前指令，ds指向datasg段；可用的就只有：dx、di、es、ss、sp、bp等6个寄存器了。可是如果循环中的程序比较复杂，这些寄存器也都被使用的话，那么该如何？</p>
<p>我们在这里讨论的问题是，程序中经常需要进行数据的暂存，怎么样做才更合理。这些数据可能是寄存器中的，也可能是内存中的。我们可以用寄存器暂存它们，但是这不是一个一般化的解决方案，因为寄存器的数量是有限的，每个程序中可使用的寄存器都不一样。我们希望寻找一个通用的方案，来解决这种编程中经常出现的问题。</p>
<p>显然，我们不能选择寄存器，那么可以使用的就是内存了。可以考虑将需要暂存数据放到内存单元中，需要使用的时候，再从内存单元中恢复。这样我们就需要开辟一段内存空间。再次改进的程序如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:datasg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line"></span><br><span class="line">    db &#x27;ibm         &#x27;</span><br><span class="line">    db &#x27;dec         &#x27;</span><br><span class="line">    db &#x27;dos         &#x27;</span><br><span class="line">    db &#x27;vax         &#x27;</span><br><span class="line">    dw 0                				;定义一个字，用来暂存cx</span><br><span class="line"></span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">    start:  mov ax,datasg</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov bx,0</span><br><span class="line">            mov cx,4</span><br><span class="line"></span><br><span class="line">    s0:     mov ds:[40H],cx             ;将外层循环的cx值保存在datasg:40H单元中</span><br><span class="line">            mov si,0</span><br><span class="line">            mov cx,3			        ;cx设置为内层循环次数</span><br><span class="line"></span><br><span class="line">    s:      mov al,[bx+si]</span><br><span class="line">            and al,11011111b</span><br><span class="line">            mov [bx+si],al</span><br><span class="line">            inc si</span><br><span class="line">            loop s</span><br><span class="line"></span><br><span class="line">            add bx,16</span><br><span class="line">            mov cx,ds:[40H]				;用datasg:40H单元中的值恢复cx</span><br><span class="line">            loop s0						;外层循环的loop指令将cx中的计数值减1</span><br><span class="line"></span><br><span class="line">            mov ax,4c00H</span><br><span class="line">            int 21H</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>上面的程序中，用内存单元来保存数据，可是上面的做法却有些麻烦，因为如果需要保存多个数据的时候，你必须要记住数据放到哪个单元中，这样程序很容易乱。</p>
<p>我们使用内存来暂存数据，这一点是确定了的，但是值得推敲的是，我们用怎样的结构来保存这些数据，而使得我们的程序更加清晰。<strong>一般来说，在需要存放数据的时候，我们都应该使用栈。</strong>回忆一下，栈空间在内存中，采用相关的指令，如 push、pop 等，可对其进行特殊的操作。下面，再次改进我们的程序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:datasg</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">    db &#x27;ibm         &#x27;</span><br><span class="line">    db &#x27;dec         &#x27;</span><br><span class="line">    db &#x27;dos         &#x27;</span><br><span class="line">    db &#x27;vax         &#x27;</span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">stacksg segment                 ;定义一个段，用来做栈段，容量为16个字节</span><br><span class="line">    dw 0,0,0,0,0,0,0,0</span><br><span class="line">stacksg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">    start:  mov ax,stacksg</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,16</span><br><span class="line">            mov ax,datasg</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov bx,0</span><br><span class="line">            mov cx,4</span><br><span class="line"></span><br><span class="line">    s0:     push cx             ;将外层循环的cx值压栈</span><br><span class="line">            mov si,0</span><br><span class="line">            mov cx,3            ;cx设置为内层循环的次数</span><br><span class="line"></span><br><span class="line">    s:      mov al,[bx+si]</span><br><span class="line">            and al,11011111b</span><br><span class="line">            mov [bx+si],al</span><br><span class="line">            inc si</span><br><span class="line">            loop s</span><br><span class="line"></span><br><span class="line">            add bx,16</span><br><span class="line">            pop cx              ;从栈顶弹出原cx的值，恢复cx</span><br><span class="line">            loop s0             ;外层循环的loop指令将cx中的计数值减1</span><br><span class="line"></span><br><span class="line">            mov ax,4c00H</span><br><span class="line">            int 21H</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<p><strong>编程，将 datasg 段中每个单词的前4个字母改为大写字母</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,ss:stacksg,ds:datasg</span><br><span class="line"></span><br><span class="line">stacksg segment</span><br><span class="line">	dw 0,0,0,0,0,0,0,0</span><br><span class="line">stacksg ends</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line">	db &#x27;1. display				&#x27;</span><br><span class="line">	db &#x27;2. brows				&#x27;</span><br><span class="line">	db &#x27;3. replace				&#x27;</span><br><span class="line">	db &#x27;4. modify				&#x27;</span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">	start:</span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>datasg 中的数据的存储结构</p>
<p><img src="3.png"></p>
<p>在datasg中定义了4个字符串，每个长度为16个字节（注意，为了是使我们在Debug中可以直观地查看，每个字符串的后面都加上了空格，以使它们的长度刚好为16个字节）。因为它们是连续存放的，我们可以将这4个字符串看成一个4行16列的二维数组，按照要求，我们需要修改每个单词的前4个字母，即二维数组的每一行的3～6列</p>
<p>我们需要进行4x4次的二重循环，用变量R定位行，常量3定位每行要修改的起始列，变量C定位相对于起始列的要修改的列。外层循环按行来进行，内层按列来进行。我们首先用R定位第1行，循环修改R行的3+C（0&lt;=C&lt;=3）列；然后再用R定位到下一行，再次修改R行的3+C（0&lt;=C&lt;=3）列……，如此重复直到所有的数据修改完毕。处理过程大致如下。</p>
<p>​                R=第一行的地址：</p>
<p>​                mov cx,4</p>
<p>s0:        C=第一个要修改的列相对起始列的地址</p>
<p>​                mov cx,4</p>
<p>s:            改变R行，3+C列的字母为大写</p>
<p>​                C=下一个要修改的列相对于起始列的地址</p>
<p>​                loop s</p>
<p>​                R=下一行的地址</p>
<p>​                loop s0</p>
<p>我们用 bx 作为变量，定位每行的起始地址，用 si 定位要修改的列，用[bx+3+si]的方式来对目标单元进行寻址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,ss:stacksg,ds:datasg</span><br><span class="line"></span><br><span class="line">stacksg segment</span><br><span class="line"></span><br><span class="line">   dw 0,0,0,0,0,0,0,0</span><br><span class="line"></span><br><span class="line">stacksg ends</span><br><span class="line"></span><br><span class="line">datasg segment</span><br><span class="line"></span><br><span class="line">   db &#x27;1. display      &#x27;</span><br><span class="line">   db &#x27;2. brows        &#x27;</span><br><span class="line">   db &#x27;3. replace      &#x27;</span><br><span class="line">   db &#x27;4. modify       &#x27;</span><br><span class="line"></span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">start:  mov ax,stacksg</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,16</span><br><span class="line">        mov ax,datasg</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov cx,4</span><br><span class="line"></span><br><span class="line">    s:  push cx</span><br><span class="line">        mov di,3</span><br><span class="line">        mov cx,4</span><br><span class="line"></span><br><span class="line">    s0: mov al,[bx+di]</span><br><span class="line">        and al,11011111b</span><br><span class="line">        mov [bx+di],al</span><br><span class="line">        inc di</span><br><span class="line">        loop s0</span><br><span class="line"></span><br><span class="line">        pop cx</span><br><span class="line">        add bx,16</span><br><span class="line">        loop s</span><br><span class="line"></span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>代码的执行过程可参考 <a href="http://mengxun.club/2021/05/15/%E5%AE%9E%E9%AA%8C5-%E7%BC%96%E5%86%99%E3%80%81%E8%B0%83%E8%AF%95%E5%85%B7%E4%BD%93%E5%A4%9A%E4%B8%AA%E6%AE%B5%E7%9A%84%E7%A8%8B%E5%BA%8F/">实验5</a></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验8 分析一个奇怪的程序</title>
    <url>/2021/06/22/%E5%AE%9E%E9%AA%8C8-%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>实验8 分析一个奇怪的程序</p>
<p>分析下面的程序，在运行前思考：这个程序可以正确返回吗？</p>
<p>运行后在思考：为什么是这个结果？</p>
<p>通过这个程序加深对相关内容的理解</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">        mov ax,4c00h            ;占3个字节</span><br><span class="line">        int 21h                 ;占2个字节</span><br><span class="line"></span><br><span class="line">start:  mov ax,0                ;占3个字节</span><br><span class="line">    s:  nop                     ;EB CPU执行到nop指令什么都不做，占用一个字节</span><br><span class="line">        nop                     ;F6 当s处复制立了s2的指令后也要执行跳转，而IP位于s4处</span><br><span class="line"></span><br><span class="line">        ;将s2复制到s处</span><br><span class="line">    s4: mov di,offset s         ;di=0008,得到s的偏移地址。 标号处的地址 + jmp指令后的第一个字节的地址 向前转移</span><br><span class="line">        mov si,offset s2        ;si=0020</span><br><span class="line">        mov ax,cs:[si]          ;ax=076A:0020=F6EB</span><br><span class="line">        mov cs:[di],ax          ;076A:0008=076A:0020</span><br><span class="line"></span><br><span class="line">    s0: jmp short s             ;接着跳转到s的偏移地址</span><br><span class="line"></span><br><span class="line">    s1: mov ax,0                ;ax=0</span><br><span class="line">        int 21h</span><br><span class="line">        mov ax,0                ;ax=0</span><br><span class="line"></span><br><span class="line">    s2: jmp short s1            ;跳转指令 短转移 -128～127 EBxx(xx代替位移的范围)</span><br><span class="line">    s3: nop                     ;当CS:IP指向jmp内存单元读取指令后，读取的指令进入指令缓存器，IP+2     OFFSET s3 + F6(-10)</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验9 根据材料编程</title>
    <url>/2021/06/23/%E5%AE%9E%E9%AA%8C9-%E6%A0%B9%E6%8D%AE%E6%9D%90%E6%96%99%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>实验9 根据材料编程</p>
<p>编程：在屏幕中间分别显示绿色、绿底红色、白底蓝色的字符串 ‘welcome to masm!’。</p>
<p>编程所需的知识通过阅读、分析下面的材料获得。</p>
<p>80*25彩色字符模式显示缓冲区的结构:</p>
<span id="more"></span>

<p>内存地址空间中，B8000H~BFFFFH共32KB的空间，为80*25彩色字符模式的显示缓冲区。向这个地址空间写入数据，写入的内容将立即出现在显示器上。</p>
<p>在80*25彩色字符模式下，显示器可以显示25行，每行80个字符，每个字符可以有256中属性(背景色、前景色、闪烁、高亮等组合信息).</p>
<p>这样，一个字符在显示缓冲区中就要占两个字节，分别存放字符的ASCLL码和属性。80*25模式下，一屏的内容在显示缓冲区共占4000个字节。</p>
<p>显示缓冲区分为8页，每页4KB，显示器可以显示任意一页的内容。一般情况下，显示第0页的内容。也就是说通常情况下，B8000H~B8F9FH中的4000个字节的内容将出现在显示器上。</p>
<p>在一页显示缓冲区中：</p>
<p>偏移000~09F对应显示器上的第1行(80个字符占160个字节)；</p>
<p>偏移0A0~13F对应显示器上的第2行;</p>
<p>偏移140~1DF对应显示器上的第3行；</p>
<p>以此类推，可知偏移F00~F9F对应显示器上的第25行。</p>
<p>在一行中，一个字符占两个字节的存储空间(一个字)，低位字节存储字符的ASCLL码，高位字节存储字符的属性。一行共有80个字符，占160个字节。</p>
<p>即在一行中:</p>
<p>00~01单元对应显示器上的第1列；</p>
<p>02~03单元对应显示器上的第2列；</p>
<p>04～05单元对应显示器上的第3列；</p>
<p>依此类推，可知，9E~9F单元对应显示器上的第80列。</p>
<p>例如:在显示器的0行0列显示黑底绿色的字符串’ABCDEF’</p>
<p>(‘A’的ASCLL码值为41H，02H表示黑底绿色)</p>
<p>显示缓冲区里的内容为:</p>
<p><img src="1.png" alt="img"></p>
<p>可以看出，在显示缓冲区中，偶地址存放字符，奇地址存放字符的颜色属性。</p>
<p>一个在屏幕上显示的字符，具有前景(字符色)和背景(底色)两种颜色，字符还可以以高亮度和闪烁的方式显示。前景色、背景色、闪烁、高亮等信息被记录在属性字节中。</p>
<p>属性字节的格式:</p>
<p><img src="2.png" alt="img"></p>
<p>可以按位设置属性字节，从而配出各种不同的前景色和背景色。</p>
<p>比如:</p>
<p>红底绿字，属性字节为:01000010B;</p>
<p>红底闪烁绿字，属性字节为:11000010B;</p>
<p>红底高亮绿字，属性字节为:01001010B;</p>
<p>黑底白字，属性字节为:00000111B;</p>
<p>白底蓝字，属性字节为:01110001B。</p>
<p>例如:在显示器的0行0列显示红底高亮闪烁绿色的字符串’ABCDEF’</p>
<p>（红底高亮闪烁绿色，属性字节为:11001010B, CAH）</p>
<p>显示缓冲区里的内容为:</p>
<p><img src="3.png" alt="img"></p>
<p>注意：闪烁的效果必须在全屏DOS方式下才能看到。</p>
<p>一行可以放80个字符，也就是160个字节（一个字符两个字节，一个存放ASCII码，一个存放属性）。一页可以显示25行，一页也就有160*25=4000个字节</p>
<p>那么第一行的最后一个字节为158[9EH]（第一个字节从零开始）</p>
<p>则第二行最后一个字符的地址为158+160[13EH]</p>
<p>首先我们先处理一行数据，将 ‘welcome to masm!’ 显示为绿色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">        ;0123456789ABCDEF</span><br><span class="line">    db  &#x27;welcome to masm!&#x27;      ;ds:[si]</span><br><span class="line"></span><br><span class="line">    db  00000010B              ;0000 0000  绿色</span><br><span class="line">    db  00100100B              ; rgb  rgb  绿底红色</span><br><span class="line">    db  01110001B              ;           白底蓝色</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db  128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line"></span><br><span class="line">    ;编程：在屏幕中间分别显示 绿色、绿底红色、白底蓝色的字符串 &#x27;welcome to masm!&#x27;</span><br><span class="line">    ;数据的组织</span><br><span class="line">    ;数据的处理  一个字符在屏幕上占用2个字节，低地址放字符的ASCII码，高地址放字符的属性</span><br><span class="line"></span><br><span class="line">    start:  mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            mov bx,data</span><br><span class="line">            mov ds,bx</span><br><span class="line"></span><br><span class="line">            mov bx,0B800H               ;彩色字符显示缓冲区</span><br><span class="line">            mov es,bx</span><br><span class="line"></span><br><span class="line">            mov si,0</span><br><span class="line">            mov di,160*10 + 30*2        ;偶数地址</span><br><span class="line">            mov bx,16</span><br><span class="line">            mov dx,0</span><br><span class="line"></span><br><span class="line">            mov cx,16</span><br><span class="line">            mov dh,ds:[bx]              ;高地址控制字符属性  mov es:[di],dx    es:[di+0],dl    es:[di+1],dh</span><br><span class="line"></span><br><span class="line">    showRow:mov dl,ds:[si]              ;低地址显示字符</span><br><span class="line">            mov es:[di],dx</span><br><span class="line">            inc si</span><br><span class="line">            add di,2</span><br><span class="line">            loop showRow</span><br><span class="line"></span><br><span class="line">            mov ax,4C00H</span><br><span class="line">            int 21H</span><br><span class="line"></span><br><span class="line"> code ends</span><br><span class="line"></span><br><span class="line"> end start</span><br></pre></td></tr></table></figure>



<p>设置外循环，显示其他两行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">        ;0123456789ABCDEF</span><br><span class="line">    db  &#x27;welcome to masm!&#x27;      ;ds:[si]</span><br><span class="line"></span><br><span class="line">    db  00000010B              ;0000 0000  绿色</span><br><span class="line">    db  00100100B              ; rgb  rgb  绿底红色</span><br><span class="line">    db  01110001B              ;           白底蓝色</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db  128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line"></span><br><span class="line">    ;编程：在屏幕中间分别显示 绿色、绿底红色、白底蓝色的字符串 &#x27;welcome to masm!&#x27;</span><br><span class="line">    ;数据的组织</span><br><span class="line">    ;数据的处理  一个字符在屏幕上占用2个字节，低地址放字符的ASCII码，高地址放字符的属性</span><br><span class="line"></span><br><span class="line">    start:  mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            mov bx,data</span><br><span class="line">            mov ds,bx</span><br><span class="line"></span><br><span class="line">            mov bx,0B800H               ;彩色字符显示缓冲区</span><br><span class="line">            mov es,bx</span><br><span class="line"></span><br><span class="line">            mov si,0</span><br><span class="line">            mov di,160*10 + 30*2        ;偶数地址</span><br><span class="line">            mov bx,16</span><br><span class="line">            mov dx,0</span><br><span class="line"></span><br><span class="line">            mov cx,3</span><br><span class="line"></span><br><span class="line">    Masm:   push bx</span><br><span class="line">            push cx</span><br><span class="line">            push si</span><br><span class="line">            push di</span><br><span class="line"></span><br><span class="line">            mov cx,16</span><br><span class="line">            mov dh,ds:[bx]              ;高地址控制字符属性  mov es:[di],dx    es:[di+0],dl    es:[di+1],dh</span><br><span class="line"></span><br><span class="line">    Row:    mov dl,ds:[si]              ;低地址显示字符</span><br><span class="line">            mov es:[di],dx</span><br><span class="line">            inc si</span><br><span class="line">            add di,2</span><br><span class="line">            loop Row</span><br><span class="line"></span><br><span class="line">            pop di</span><br><span class="line">            pop si</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line"></span><br><span class="line">            add di,160                  ;换行</span><br><span class="line">            inc bx</span><br><span class="line">            loop Masm</span><br><span class="line"></span><br><span class="line">            mov ax,4C00H</span><br><span class="line">            int 21H</span><br><span class="line"></span><br><span class="line"> code ends</span><br><span class="line"></span><br><span class="line"> end start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>实验7 寻址方式在结构化数据访问中的应用</title>
    <url>/2021/06/20/%E5%AE%9E%E9%AA%8C7-%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F%E5%9C%A8%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>实验7 寻址方式在结构化数据访问中的应用</p>
<p>Power idea 公司从 1975 年成立一直到 1995 年的基本情况如下。</p>
<table>
<thead>
<tr>
<th>年份</th>
<th>收入（千美元）</th>
<th>雇员（人）</th>
<th>人均收入（千美元）</th>
</tr>
</thead>
<tbody><tr>
<td>1975</td>
<td>16</td>
<td>3</td>
<td>?</td>
</tr>
<tr>
<td>1976</td>
<td>22</td>
<td>7</td>
<td>?</td>
</tr>
<tr>
<td>1977</td>
<td>382</td>
<td>9</td>
<td>?</td>
</tr>
<tr>
<td>1978</td>
<td>1356</td>
<td>13</td>
<td>?</td>
</tr>
<tr>
<td>1979</td>
<td>2390</td>
<td>28</td>
<td>?</td>
</tr>
<tr>
<td>1980</td>
<td>8000</td>
<td>38</td>
<td>?</td>
</tr>
<tr>
<td>…</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1995</td>
<td>5937000</td>
<td>17800</td>
<td>?</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>下面的程序中，已经定义好了这些数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">;实验7 寻址方式在结构化数据访问中的应用</span><br><span class="line"></span><br><span class="line">;编程 将 data 段中的数据按照如下格式写入到 table 段中，并计算21年中的人均收入（取整）</span><br><span class="line">;结果也按照下面的格式保存在 table 段中</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ; 以上是表示21年的21个字符串 year</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ; 以上表示21年公司总收入的21个数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ; 以上是表示21年公司的员工数量</span><br><span class="line">    </span><br><span class="line">    ; 8位除法还是16位除法，div 寄存器还是 div 内存 数据从哪里来，数据移动 比较好。通过栈比较好，还是通过寄存器比较好</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">               ;0123456789ABCDEF</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line"></span><br><span class="line">table ends</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编程，将 data 段中的数据按如下格式写入到 table 段中，并计算 21 年中的人均收入（取整），结果也按照下面的格式保存在 table 段中。</p>
<p><img src="1.png"></p>
<p>提示，可将 data 段中的数据看成是多个数组，而将 table 中的数据看成一个结构型数据的数组，每个结构型数据中包含多个数据项。可用 bx 定位每个结构型数据，用 idata 定位数据项，用 si 定位数组项中的每个元素，对于 table 中的数据的访问可采用**[bx].idata<strong>和</strong>[bx].idata[si]**的寻址方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">;实验7 寻址方式在结构化数据访问中的应用</span><br><span class="line"></span><br><span class="line">;编程 将 data 段中的数据按照如下格式写入到 table 段中，并计算21年中的人均收入（取整）</span><br><span class="line">;结果也按照下面的格式保存在 table 段中</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ; 以上是表示21年的21个字符串 year</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ; 以上表示21年公司总收入的21个数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ; 以上是表示21年公司的员工数量</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">               ;0123456789ABCDEF</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line"></span><br><span class="line">table ends</span><br><span class="line"></span><br><span class="line">stack segment stack</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:      mov ax,stack</span><br><span class="line">            mov ss,ax</span><br><span class="line">            mov sp,128</span><br><span class="line"></span><br><span class="line">            mov ax,data</span><br><span class="line">            mov ds,ax</span><br><span class="line"></span><br><span class="line">            mov ax,table</span><br><span class="line">            mov es,ax</span><br><span class="line"></span><br><span class="line">            mov si,0        ;ds:[si]</span><br><span class="line">            mov di,84       ;ds:[di]</span><br><span class="line">            mov bx,168      ;ds:[bx]</span><br><span class="line">            mov bp,0        ;es:[bp]</span><br><span class="line"></span><br><span class="line">            mov cx,21</span><br><span class="line"></span><br><span class="line">inputTable: push ds:[si]</span><br><span class="line">            pop es:[bp]</span><br><span class="line">            push ds:[si+2]</span><br><span class="line">            pop es:[bp+2]</span><br><span class="line"></span><br><span class="line">            ;之后因为被除数为4个字节，32位。需要AX和DX两个寄存器存放，DX存放高16位，AX存放低16位</span><br><span class="line">            mov ax,ds:[di]</span><br><span class="line">            mov dx,ds:[di+2]</span><br><span class="line">            mov es:[bp+5],ax</span><br><span class="line">            mov es:[bp+7],dx</span><br><span class="line"></span><br><span class="line">            push ds:[bx]</span><br><span class="line">            pop es:[bp+0AH]</span><br><span class="line"></span><br><span class="line">            div word ptr ds:[bx]</span><br><span class="line">            mov es:[bp+0DH],ax</span><br><span class="line"></span><br><span class="line">            add si,4</span><br><span class="line">            add di,4</span><br><span class="line">            add bx,2</span><br><span class="line">            add bp,16</span><br><span class="line">            loop inputTable</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>寒梅落尽把冬了，家燕衔春思归巢</title>
    <url>/2022/02/15/%E5%AF%92%E6%A2%85%E8%90%BD%E5%B0%BD%E6%8A%8A%E5%86%AC%E4%BA%86%EF%BC%8C%E5%AE%B6%E7%87%95%E8%A1%94%E6%98%A5%E6%80%9D%E5%BD%92%E5%B7%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-JGlQKHgU" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="000MbcLT3Rrxqi" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<center>
青玉案·元夕<br><br>
东风夜放花千树。更吹落，星如雨。宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞。<br>
蛾儿雪柳黄金缕。笑语盈盈暗香去。众里寻他千百度。蓦然回首，那人却在，灯火阑珊处。
</center>



<span id="more"></span>

<br>

<p>上元节快乐啊  (*^▽^*)</p>
<p>看了b站的《千灯会》好喜欢宋明两朝的衣服啊，上次去故宫赏雪就有一位男子穿着飞鱼服。英姿飒爽，神气不已，仿佛那便是当朝的官员，而我已处于影视之外。</p>
<p>好想有一天我也能穿上飞鱼服带上隐形眼镜穿过故宫，或是走在清明上河园。</p>
<p>清明节十三陵好像会有表演活动，那时候会有很多古装演员。</p>
<p>3至4月的长城杏花遍野，当你听到韩红唱的《美丽的神话》仿佛回到大秦，见证了一把蒙毅与朝鲜公主的爱情故事。</p>
<p>玉渊潭的樱花🌸、温榆河湿地的河滩、陶然亭公园远处的中央电视塔，从上便可眺望北京的夜景。</p>
<p>还有顺义鲜花港，海淀的百望山。</p>
<p>五月期待可以去云南，环绕着洱海，拍下最美的日落。</p>
<p>于玉龙雪山上，俯瞰人世间。</p>
<p>踏着丽江古都的房梁，乔装成一名侠客。</p>
<p>骑着马慢慢穿过那条千年之久的茶马古道。</p>
<br>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="https://www.bilibili.com/video/BV1TT4y1976y?spm_id_from=333.999.0.0"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>小时候的爱好</title>
    <url>/2022/03/22/%E5%B0%8F%E6%97%B6%E5%80%99%E7%9A%84%E7%88%B1%E5%A5%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>无意中看到了绘画书，突然好想画画啊，也算是圆了小时候没钱买画笔的一个梦想吧。</p>
<p>然后油画全套差不多200左右突然就心疼起自己的钱来…</p>
<p>明明吃饭、出去玩、买别的都挺舍得的😂，是否有一丝当年老妈的感触呢？</p>
<p>也可能我并没有准备好，所以没有下定决心要买吧。</p>
<p>不过我觉得我能按照书上的教程画个八九不离十吧应该。</p>
<span id="more"></span>

<p>从小就挺喜欢画画的，但是没有老师教，也没有钱买材料。之前看到过漫画教程的书籍，没想到让我发现了油画书（世上还有这种东西？）</p>
<p>那么我儿时的水彩梦是不是也能实现呢？</p>
<p>所以会有人送我一套绘画工具吗？（不要脸🤪）</p>
<p><img src="1.png"></p>
<p>初步打算天气缓和起来的时候在画吧。</p>
<p>现在要学习数字电路和操作系统，等之后应该能用树莓派做个什么东西出来吧。（树莓派现在能涨价400%真的挺离谱的，已经是理财产品了）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>九歌·少司命</title>
    <url>/2021/01/15/%E5%B0%91%E5%8F%B8%E5%91%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-AmgXpKQO" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="0012yKiG3FFcHj" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<center>

<p>秋兰兮麋芜，罗生兮堂下。</br><br>绿叶兮素华，芳菲菲兮袭予。</br><br>夫人自有兮美子，荪何㠯兮愁苦？</br><br>秋兰兮青青，绿叶兮紫茎。</br><br>满堂兮美人，忽独与余兮目成。</br></p>
<span id="more"></span>
<p>入不言兮出不辞，乘回风兮载云旗。</br><br>悲莫悲兮生别离，乐莫乐兮新相知。</br><br>荷衣兮蕙带，儵而来兮忽而逝。</br><br>夕宿兮帝郊，君谁须兮云之际？</br><br>与女沐兮咸池，晞女发兮阳之阿。</br><br>望美人兮未来，临风怳兮浩歌。</br><br>孔盖兮翠旍，登九天兮抚彗星。</br><br>竦长剑兮拥幼艾，荪独宜兮为民正。</br></p>
</center>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号思考</title>
    <url>/2019/11/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>之前和老姐聊过，她在公司做微信公众号相关工作，为什么不自己也建一个号，说不定做好了会有一笔不菲的收入。据说一个拥有7、 8 万的微信公众号一个月可以赚1-2万，而且如果不想做了也可以卖掉变现（1个粉丝3块左右）</p>
<p>不过她当时的答案是没有时间。</p>
<span id="more"></span>

<p>我在大一的时候也创建过微信公众号，并且更新过几篇文章，看的人都是身边的同学和朋友。算是“强制”订阅的吧。和他们说过是试运营，不必转发，但那段时间还是还有一两个新人陆续加入。</p>
<p>写了一段时间，我也发现了问题。本来是想写一些技术相关的文章，巩固自己，也能分享身边的人。但创作不易，每篇文章看的人也很少，没有收益，也没有什么动力。本来就想试试，以玩的心态去对待，所以间隔了一两年都没有更新。</p>
<p>前几天老姐老是转发她的微信文章，还让我点广告。</p>
<p>我就知道身为微信编辑的她坐不住了，终于自己也创建了微信公众号。</p>
<p>她说看了我的公众号，长期运营下去应该不错。于是帮我买了500个粉丝，开了流量主。</p>
<p>今天我看了广告的收益为2.98时，还是很兴奋的。因为在三个人点了广告的情况下我能有近3元的收益，使我有了更新下去的动力。</p>
<h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><ol>
<li><p>我发现我以前订阅的那些微信公众号，从自己写文章变成转发别人的文章，套上自己的模板，浏览量竟然还不低。</p>
</li>
<li><p>很多计算机相关的公众号文章内容较为浅显，多以计算机行业的新闻为主，是否因为订阅的人大部分只是对计算机相关的小知识感兴趣，或者图个乐呢？</p>
</li>
<li><p>在没有原创内容的情况下多以转发和广告为主的公众号是否已是颓势。</p>
</li>
<li><p>在短视频火爆的今天，抖音、哔哩哔哩的冲击下，微信公众号是否大势已去。</p>
</li>
<li><p>作为b站重度用户的我，关注up多以才华横溢为主和解说有特点为主。微信公众号的转发是否算是“不劳而获”或者为“水视频”。</p>
<p>留住观众的不应该是个人魅力和文章\视频内容为主吗，过多的转发和广告真的能留住观众吗？</p>
</li>
</ol>
<h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><ol>
<li>微信公众号还是以一周以作品为主，可能会有3-4天的一篇转发。</li>
<li>作品已学习的笔记为主，大概是一本书一本书的更新。</li>
</ol>
<p>计划的内容还是要看收益情况而改变的。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>心灵之旅</title>
    <url>/2021/10/17/%E5%BF%83%E7%81%B5%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-ZmHYojyu" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="469933" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<p>这个周六来了一场香山心灵之旅，随心而走不问方向，不问目的，就是散心。</p>
<span id="more"></span>

<p><img src="1.jpg"></p>
<p>这也导致我跑到了野山中，一个人旅行真的很不错，但我千辛万苦以为爬到山顶的时候，其实是在半山腰，而山腰上进入有马路，还有一群外出游客…</p>
<p>我想我终于知道为什么那么喜欢《荒野大镖客2》了，因为风景真的很美，和我路过的风景很像，可惜手机拍不出来那个效果。</p>
<p>这趟旅程从早上9：30一直走到13：00才算回归本来的路线。</p>
<p><img src="2.jpg"></p>
<p><img src="3.jpg"></p>
<p><img src="4.jpg"></p>
<p><img src="5.jpg"></p>
<p><img src="6.jpg"></p>
<p><img src="7.jpg"></p>
<p><img src="8.jpg"></p>
<p><img src="9.jpg"></p>
<p><img src="10.jpg"></p>
<p><img src="11.jpg"></p>
<p>好在遇到了碧云寺，我认为比香山美多了，可能现在香山还没有红叶吧</p>
<p>碧云寺还有很多罗汉像和佛像我没有拍摄</p>
<p><img src="12.jpg"></p>
<p><img src="13.jpg"></p>
<p><img src="14.jpg"></p>
<p><img src="15.jpg"></p>
<p><img src="16.jpg"></p>
<p><img src="17.jpg"></p>
<p><img src="18.jpg"></p>
<p><img src="19.jpg"></p>
<p>之后便是香山山顶了，不留遗憾还特地给自己求了段姻缘，那时候手冻僵了，字有点丑…</p>
<p><img src="20.jpg"></p>
<p>下午5点回去的时候，正门人好多，而且买卖街好热闹，让我想起了3年前去成都锦里的时候，真是怀念啊。</p>
<p><img src="21.jpg"></p>
<p>有机会，一定要带朋友来爬香山，吃好吃的，再去看看我的祈福牌子</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>悉达多——一首印度的诗</title>
    <url>/2022/08/10/%E6%82%89%E8%BE%BE%E5%A4%9A%E2%80%94%E2%80%94%E4%B8%80%E9%A6%96%E5%8D%B0%E5%BA%A6%E7%9A%84%E8%AF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>转载自：<a href="https://www.zhihu.com/people/findingsea">findingsea</a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近终于看了心仪已久的《悉达多》，先说读后感受：<strong>这很可能会是我今年看过的最好的一本书了</strong>，五星推荐。黑塞对东方哲学的理解相当深刻，尤其最后一场悉达多与乔文达坐而论道，可以说透彻淋漓，很久没看到这么精彩的大段论述。</p>
<p>故事其实不复杂，讲的就是一个古印度贵族青年悉达多，不追求财富地位，一心只想追求心灵的宁静，于是孤身展开了求道之旅。其实跟佛陀的故事很像。黑塞用悉达多的三次觉醒来阐述了他对佛教求道的理解。</p>
<p><em>本文全篇是有点长，如果对书的内容想自己体会的，可以跳过介绍部分，直接翻到最后总结，是我对《悉达多》全书的概括性体会。</em></p>
<span id="more"></span>

<h3 id="第一次觉醒"><a href="#第一次觉醒" class="headerlink" title="第一次觉醒"></a>第一次觉醒</h3><p>悉达多为了获得内心的宁静，决定遁入沙门，进行苦行修为。他的朋友乔文达追随他。然后即便经过多年的苦行，即便悉达多的修为已经超过了那些年老的沙门，他仍然觉得他对自我一无所知，他觉得在沙门这里必然难以获得最终的宁静。这时，世人纷纷传言，乔答摩在菩提树下顿悟得道，成为佛陀。于是，他和乔文达去拜访佛陀。</p>
<p>两人都为佛陀的智慧与安宁所折服，乔文达成为了佛陀的信徒。而悉达多，在于佛陀的一番交谈之后，仍然决定独自求道。</p>
<p>他之所以没有成为佛陀的信徒，因为佛陀的教义可以圆满地解释这个世界，除了一点：他是如何领悟到这些教义的。佛陀并没有从任何教义中学习，所以学习佛陀的教义并不能达到超然的境界，要达到这种境界，只能依靠自己。</p>
<p>在离开的路上，悉达多得到第一次觉醒：之所以我对自我一无所知，之所以悉达多对我来说一直保持陌生与未知，只因为我在逃避自我，我在追求梵天，阿特曼。我欲求摧毁自我、摆脱自我以便在未知的存在最深层发现万有的核心，即阿特曼、生命、上帝或绝对终极之物，而正因为如此，我却一路丢失了自我。</p>
<blockquote>
<p>为什么乔答摩在他觉悟成道的伟大时刻曾跌坐于菩提树之下? 因为他听见了自己内心的声音，这声音命令他在菩提树下寻求安宁，他并未求助于苦修、献祭、沐浴和祈祷、进餐和饮酒、睡眠和梦想，而是听从了自己内心的声音。人只应服从自己内心的声音，拒绝任何外力的驱使，并等待觉醒那一刻的到来；这才是善的和必要的行为，其他的一切毫无意义。</p>
</blockquote>
<p>第一次觉醒之后的悉达多开始认识到目之所见并不是虚幻，那就是实在的。他学会了用孩子一般单纯而无所求的目光去观看，这个世界是如此美好。当一个人能如此单纯，如此觉醒，如此专注于当下，毫无一律地走过这个世界，生命真是意见赏心乐事。</p>
<h3 id="第二次觉醒"><a href="#第二次觉醒" class="headerlink" title="第二次觉醒"></a>第二次觉醒</h3><p>悉达多向迦摩罗（妓女）学习情爱的技巧，向迦摩施瓦弥（富人）学习做生意的技巧。一开始悉达多只是把生意当成游戏，甚至他做的许多事情都只是游戏而已，他以观察世人而自娱，而他的心，他的本性却从未有丝毫投入。他真实的自我飘然于遥远的异乡，无影无踪，与他的现实生活彼此隔绝。然而，他逐渐沉沦于纸醉金迷的生活，他终于在这种生活中难以自拔了。时光荏苒，等他惊醒的时候，已经头生华发，感觉到现在生活的荒诞，他开始深深地厌恶自己，就像一个吃得过饱、喝酒过多的人在痛楚的呕吐之后会觉得好一点，悉达多也渴望通过一次骇人的呕吐来弃绝这毫无意义的生活。</p>
<p>悉达多想要自溺在河中，他想要投向死亡，正当此时，他听到了内心深处的唵字真言，这一瞬间他的灵魂猛然觉醒，他忆起了早已忘却的神圣的一切。在一场无梦而深沉的睡眠之后，悉达多感觉自己获得了新生。他感觉到现在所有无常之物又从身旁溜走，又一次他如婴儿般独立于天地之间，一无所知，一无所有，一无所学。他为自己的逃离感到快乐，同时领会到亲身经历世上的一切是件美事，孩提时代他就知道尘俗的享乐及财富为邪恶之物，长久以来他就知道这一点，但知道刚刚才有所体验，不仅在理智上，而是以眼睛、心灵以及胃口深知其意。</p>
<p>悉达多第二次觉醒，他意识到自己身体的某一部分死去了，那正是他的自我，他渺小、怯懦而傲慢的自我。</p>
<blockquote>
<p>悉达多终于明白为什么作为婆罗门或沙门这么多年与自我的斗争都失败了，因为他的傲慢，因为过多的知识，过多的圣诗，过多的献祭，过多的禁欲和过多的造作和追求阻碍了他，他永远都是最聪明的一员，永远那么博学。他的自我潜入了他祭司的身份，潜入他的理智和傲慢，而他却想通过斋戒和忏悔来摧毁自我。只有进入尘世并沉湎于权利、女人和金钱，只有成为商人、赌徒、酒鬼和富人，才能让他心中的祭司和沙门真正死去。他必须经历那些可怕的岁月，遭受恶心的折磨，彻底认清俗尘生活的空虚和疯狂，直到陷入绝望，只有这样，那个浪人悉达多和富人悉达多，才能真正死去，只有这样，他才能获得新生。</p>
</blockquote>
<h3 id="第三次觉醒"><a href="#第三次觉醒" class="headerlink" title="第三次觉醒"></a>第三次觉醒</h3><p>悉达多又遇到了当年载过他的摆渡老人，瓦稣迪瓦道，悉达多观察河水的寓意，观察瓦稣迪瓦道脸上的宁静，他决定留下来和瓦稣迪瓦道生活在一起。</p>
<blockquote>
<p>一次悉达多问瓦稣迪瓦道：“你是否也从河水学到了这个秘密：即世上并不存在时间的实体?”瓦稣迪瓦脸上漾起了明朗的笑意。 “是的，悉达多，”瓦稣迪瓦道，“是否是这个意思呢? 河水在同一时刻无处不在，遍及源头，河口、瀑布、渡口、水流、海洋以及山脉之间；从另一方面来说，现在只为其自身而存在，并非过去或未来的影子。” “正是如此，”悉达多道，“当我懂得这个道理，我回顾了我的生活。我的生命也是一条河，少年悉达多、成年悉达多和老年悉达多只是由于幻象而有分别，而并非由于现实而有分别。悉达多从前的生活并没有存在于过去，他的死以及终归于梵天也不是发生在将来。过去之心 不可得，未来之心不可得，万法皆如，俱入目前。”</p>
</blockquote>
<p>之后，悉达多重逢迦摩罗，并发现她为他生下了一个儿子。迦摩罗被毒蛇咬死后，悉达多把所有心思都交付在了儿子身上，把儿子留在身边照顾，然而他最终还是失去了他的儿子，因为他的儿子本来就不属于这里。失子之痛，让悉达多开始真正理解和同情俗尘的情感，不再那么聪明，不再那么傲慢，而是更为温和，更富同情。</p>
<blockquote>
<p>心中的创伤仍久久地隐隐作痛。悉达多的船客中有许多是与自己的儿女同行。每见一位有儿女相伴的行客，他都忍不住心中嫉妒；他想：那么多人都拥有这巨大的幸福——为什么我偏偏没有? 甚至那些恶人、盗贼和劫匪都有儿女相伴，连他们都可以爱自己的孩子并为他们的孩子所爱，为什么我却独独没有? 悉达多此时的思维竟如此幼稚，如此缺乏逻辑，他与凡俗的人们竟变得如此相像。 现在他待人的态度与从前不同：不再那么聪明，不再那么傲慢，而是变得更为温和，更为好奇并且更富于同情。 现在，当他送那些庸常的行客们(商人、兵士和女人)渡河时，他觉得那些人不再如从前那样显得陌生。尽管他并不理解或拥有他们的思想与观念，但他却与他们同样有着生命的冲动和欲望。尽管他已达到高度自律的境界并且成功地忍耐着最后的伤痛，而他却感到这些尘俗的人们是自己的平等兄弟。他们的虚荣、欲望以及平凡琐事不再显得荒谬，而是变得可以理解，可以热爱，甚至值得尊敬。</p>
</blockquote>
<p>悉达多继续聆听河水，向河水学习。</p>
<blockquote>
<p>于是悉达多更用心去听。水中他父亲的形象，他自己的形象以及他儿子的形象汇流在一起，迦摩罗的形象也显现并随流而去，乔文达的形象，还有诸多其他人的形象纷纷涌现并消失。所有人的形象都融入不息的河水，河水包容了所有人的追求与渴念，欲望与苦难。于是河水之声也充满了渴求：充满了刺心的痛楚，充满了无厌足的贪欲。河水向自己的目标流去。……他不再去分辨不同的音声——诸如愉悦之声与哀泣之声，童稚之声与雄浑之声；所有思慕者的哀叹，智者的欢笑，愤怒者的叫喊，濒死者的呻吟都融入彼此，互为纠结与交织，以千万种方式缠绕在一起，而所有的音声，所有的目标，所有的渴望，所有的善与恶，悲伤与欢乐，所有这一切共同构成了统一的世界，所有这一切共同交融成万物奔流不息的进程，所有这一切共同谱成了生命永恒的旋律。……当他不再着意分辨悲叹与欢笑，当他的心灵不再执着于任何一种特定的音声并不再任其占据他的自我，当他倾听所有的一切，倾听圆融与统一，正当此时，那宏大的万音交响之歌只包含一个字“唵”(Om)——圆满之音。</p>
</blockquote>
<p>悉达多在河水之声中，有了第三次觉醒，并且得到了最终的救赎，从此他委身于时间与生命之流中，充满慈悲与同情，与万物和谐如一。</p>
<p>全书的最后，有一场悉达多布道时的论述，很长，却异常精彩。多年之后，都已经年迈的乔文达和悉达多再次相遇，乔文达发现他往日朋友的脸上充满了宁静，他显然已经得道了，于是乔文达便询问他该如何求道。</p>
<p>悉达多论述了三点：</p>
<p><strong>智慧不可言传，而需亲身体会</strong></p>
<blockquote>
<p>是的，我曾有过不少观念与知识。有时，在一日之内或一个时辰之内，我会体验到智慧，正如人们从内心感受到生命。我有过许多思想，但我觉得很难对你讲述。然而有一种思想给我以很深的印象。乔文达，即智慧无法言传。智者们试图传授的智慧听起来总是十分愚蠢。……知识可以传授，但智慧不能。人们可以寻见智慧，在生命中体现出智慧，以智慧自强，以智慧来创造奇迹，但人们不可能去传授智慧。我年少时就有过这种疑问，正是我的怀疑驱使我远离教师们。我还有过一种思想，乔文达，你又会认为那是 开玩笑或只是一种愚蠢的念头：就是说，每一真理的反面也同样真实。比如说，只有偏面的真理才能形诸于言辞；事实上，以语言表达或思维的一切都只能是偏面的，只是半个真理而已，它们都缺乏完备、圆融与统一；当佛陀世尊宣讲关于世界的教义，他不得不把世界分为轮回与涅槃，虚幻与真如，痛苦与救赎。人别无选择，对于那些要传授教义的导师们来说尤其如此。而世界自身则遍于我之内外，从不片面。从未有一人或一事纯属轮回或者纯属涅槃，从未有一人完全是圣贤或是罪人。世界之所以表面如此是因为我们有一种幻觉，即认为时间是某种真实之物。时间并无实体，乔文达，我曾反复悟到这一点。而如果时间并非真实，那么仿佛存在于现世与永恒，痛苦与极乐，善与恶之间的分界线也只是一种幻象。</p>
</blockquote>
<p><strong>世界万物皆为圆满，一切皆是必然</strong></p>
<blockquote>
<p>我是罪人，你也是罪人，而罪人有朝一日会成为梵天，有朝一日会证得涅槃，有朝一日会成佛；这‘有朝一日’是某种幻象，那只是一种比较而已，罪人并不是在趋于佛境，他并没有不断演进，尽管我们的感官只能如此感知事物。不，潜在的佛性已然存在于罪人身上，他的未来已然存在。我们必须认识到隐藏于你、我以及所有人中潜在的佛性。乔文达，世界并非不完善，或者正沿着通向完善的漫漫长路缓缓发展。不，世界在每一瞬间都是完美的：所有罪孽都已然领受神恩，所有孩童都是潜在的老人，所有婴儿都已打上死亡的印记，而所有的垂死者——必获永恒的生命。一个人不可能认清另一个人已然修到何等境界。佛存在于劫匪与赌徒身上，而劫匪亦存在于婆罗门身上。 在极深禅定之中，人可以除灭时间并同时经历所有过去、现在与未来，于是一切皆善，一切完美，一切即梵。因此，我认为一切的存在皆为至善——无论是死与生，无论罪孽与虔诚，无论智慧或是蠢行，一切皆是必然，一切只须我的欣然赞同，一切只需我的理解与爱心；因而万物于我皆为圆满，世上无物可侵害于我。</p>
</blockquote>
<p><strong>爱是世上最重要的</strong></p>
<blockquote>
<p>乔文达，我可以去爱一枚石子，一棵树或一片树皮，这些都是“物”。一个人可以去爱世上之物，但一个人不能去爱词句。所以教义于我毫于用处。那些教义没有软硬的感觉，没有颜色，没有尖角，没有气息和味道，它们只是一些词句而已，可能就是这一点阻碍你得到内心的宁静。也许世上词句过多，因为甚至连救赎、德行、轮回与涅槃都只是词句，乔文达。涅槃并非实在之物，世上只存在涅槃的名相。……更坦白地说，我也不是很注重思想，我更注重“物”。例如，这个渡口曾经住着一个人，他是我的前辈与导师。他是一个虔诚的人，多年以来他一直仅仅信奉这条河，他发觉河水之声与他交流，于是他师从于河水，而河水则教导他，培养他。这条河对于他似乎是一位神。多年以来，他并没有明白每阵清风，每朵白云，每只小鸟和每只甲虫都同样神圣，而且与这令人尊崇的河流一样能给人以启迪。但当这位虔诚的人飘然进入林中，他彻悟了一切。没有任何导师与书本，他比你我理解得更多。而这只是因为他信奉了一条河流。……乔文达，我感觉爱是世上最重要的。研究这个世界，解释它或是鄙弃它，对于大思想家或许很重要；但我以为唯一重要的就是去爱这个世界，而不是去鄙弃它。我们不应彼此仇视，而应以爱、赞美与尊重来善待世界，善待我们自身以及一切生命。</p>
</blockquote>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>看完最后这一整段论述，我突然想起《金刚经》里的一段：无我相，无人相，无众生相，无寿者相。万物皆是虚无，又皆是实在，这个世界就是这样摆在面前，它不会因为我们的好恶而变得更好或者更坏，甚至这个世界就没有好坏之说，因为好坏标准都是人定的，而人的观念又都是一时的。所以这世界在每一刻都是圆满的，我们能做的就是感受它，接纳它，进而爱它。</p>
<p>我对佛学仅知皮毛，但是全书有一点我是无比赞同的——<strong>佛不是坐而悟道的</strong>，悉达多要摒弃自我，要感知梵天，就要先体验俗尘荒诞，而后知众生有爱，而后知万物有灵。所谓「得道」，不是读经书习教义，而是对生活（乃至生命）体验的深刻理解。</p>
<p>黑塞对于东方哲学这种超脱的概念，理解深刻，而又自成体系。没有什么救世主，没有什么超度者，佛性，或者说神性，就蕴藏在每一个人身上，这就是这个世界的完美之处。我们只有自我救赎，而唯一能阻碍你得到内心宁静的，也只有你自己。这个世界本身就已经蕴含着神圣了，去发现它，接纳它，理解它，最终爱它。</p>
<p><strong>一切皆是必然，于是一切只须我的欣然赞同；万物皆为圆满，于是世上无物可侵害于我。</strong></p>
<p><br><br></p>
<p>我听便灵魂与肉体的安排，</p>
<p>去经历罪孽，追逐肉欲和财富，</p>
<p>去贪慕虚荣，以陷入最羞耻的绝望，</p>
<p>以学会放弃挣扎，学会热爱世界。</p>
<p>我不再将这个世界与我所期待的，</p>
<p>塑造的圆满世界比照，</p>
<p>而是接受这个世界，</p>
<p>爱它，属于它。</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>愿终有弱水替沧海，在无相思寄巫山</title>
    <url>/2021/01/02/%E6%84%BF%E7%BB%88%E6%9C%89%E5%BC%B1%E6%B0%B4%E6%9B%BF%E6%B2%A7%E6%B5%B7%EF%BC%8C%E5%9C%A8%E6%97%A0%E7%9B%B8%E6%80%9D%E5%AF%84%E5%B7%AB%E5%B1%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="Arthur.webp"><br><br/> </p>
<p>My Dear Arthur</p>
<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You never showed up, and now. After looking at the newspaper I understand why I don’t imaging you will receive this letter, but I nonetheless must send it. </p>
<span id="more"></span>

<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arthur, oh, Arthur. I was just starting to dream the silliest and softest of dreams. I miss you, and I will always miss you. but I cannot live like that and it seems you cannot we any other way. When I am with you, the world makes sense. But when we are apart, I see clearly that your world is not a world from which one can escape.</p>
<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I am so sorry, for everything for everything long ago and for starting up that business again. There is a good man within you, Arthur, but he is wrestling with a giant. And the giant wins, time and again. You’ve broken my heart, again, and I fear I have broken yours. For that, I will never forgive myself but you must let me go now. </p>
<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I enclose a ring you gave me many years ago. When we were both young, not because I don’t like it, but because I care for it far too much, and it reminds me too much of you. I hope, one day you with find same people in love who can use this for it kept me thinking of you all these years. And I hope by returning it to you I can finally be free.</p>
<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Goodbye.</p>
<p>​<p align="right">Mary</p><br/><br/> </p>
<p><img src="Arthur2.jpg"><br/><br/> </p>
<p>我亲爱的亚瑟</p>
<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你至今没有露面，直到我看了报纸后才明白为什么。我不奢望你会受到这封信，但尽管如此，我还是非寄不可。</p>
<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;亚瑟，哦，亚瑟。我刚刚还在做最蠢也最软弱的梦。我想你，而我会一直想你。但我不能再过那样的生活，而你似乎无法改变你的生活方式。我和你在一起的时，整个世界都有了意义。但当我们分开，我清楚地看见你的世界是一个无路可逃的世界。</p>
<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我为所有的事，往昔的一切，也为今昔的种种感到抱歉。亚瑟你心中藏着一个好人，但这个好人一直在和巨人搏斗。而巨人战胜了一次又一次。你再次伤了我的心，而我恐怕也让你心碎了。对此，我永远无法原谅自己，但你现在必须让我走。</p>
<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随信附上多年前你送我的戒指，当时我们都还年轻。不是因为我不喜欢它，而是因为我太在乎它了，它总是让我想起你。愿终有弱水替沧海，在无相思寄巫山。希望将戒指还给你之后，我将能获得自由。</p>
<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再见</p>
<p align="right">玛丽</p>

<p><img src="Arthur1.webp"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>成年人的世界</title>
    <url>/2021/01/31/%E6%88%90%E5%B9%B4%E4%BA%BA%E7%9A%84%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-pCXNlWiX" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="34690692" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<p>我妈这10天不仅要给康师傅家干活，还被负责超市加货的领导安排顶福临门的临时工。</p>
<span id="more"></span>

<p>钱是负责加货的领导拿，分我妈500块。我妈不想做，但是没办法。如果不做，领导不会给康师傅家加货，导致我妈自己的工作没有货卖，还会安排其他超市杂活。</p>
<p>超市是超市领导和科长共同管理的。不是一家公司的事。而且我妈以为就帮人家几天忙，就给录入了福临门家的身份信息,她跟我说这是生存之道。不过这下就很难跟别人说清楚了。</p>
<p>今天我妈早上工作忙，没有看手机，回复堆货信息（此时科长已经得知有人没可能偷懒）。之后和业务说明情况后，就干活去了。而业务不敢说这事，也怕领导。</p>
<p>下班时，科长让我妈明天去公司（开除“偷懒的员工”）。</p>
<p>回到家，我妈一直以为没回复信息，而被开除。直到双方深入沟通后才化解矛盾。</p>
<p>下班前，本来说顶替零时工做到1月底，现在又被加货的领导延长到了2月底去了。</p>
<p>真的是很气人。我妈也很委屈，人家科长以为是员工没请假直接回家了，要开除我妈。</p>
<p>我也希望我妈，把事情挑明，辞职。不过因为录入信息，很难证明，你不是为了钱才这样。</p>
<p>现在的年轻人，为了生存抛弃了很多，那些伟大的梦想，变成了不再强求自己能多做点什么，而是安逸的过完这一生。</p>
<p>或许底层的老一辈们，为了生存，抛弃了所有能抛弃的一切，妈妈的梦想又是什么呢？结婚生子，为生存和工作，再到抱孙子，然后在所有人泪流满面后，闭上双眼。在这一生中，空缺的地方都是为了生存而东北西走，缺少了人的梦想，这一生总要给自己点什么东西吧，而不是为了别人。</p>
<p>加油吧，妈妈！尝试维权，努力说不，或许还能实现儿时的梦想呢，有我支持你。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>愿那些善良的人能被温柔以待</title>
    <url>/2021/01/20/%E6%84%BF%E9%82%A3%E4%BA%9B%E5%96%84%E8%89%AF%E7%9A%84%E4%BA%BA%E8%83%BD%E8%A2%AB%E6%B8%A9%E6%9F%94%E4%BB%A5%E5%BE%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我妈一直都信耶证，而且每周都会有教会讲课。他们坚信世界会迎来大末日，只有上帝能拯救他们这些信徒。因为这个世界已经坏透了！</p>
<span id="more"></span>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我妈下班回家，被人打了一拳，人直接从自行车上摔了下来。幸运的是冬天裹得严实，没有什么大事，只是衣服破了和轻微擦伤。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我妈跟我说这件事情的时候，她说“现在的人都坏透了。我又不认识他，他坐在电动车上不动，我从他身边绕过去，他一伸手把我打倒了。等我起来大骂他，臭流氓，他已经骑电动车跑了。路上就有有一个远处的米色长羽绒服的行人，她看了看我也走了。按理说，怎么样都应该过来看看我，人心冷漠。”</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我听了她的这些话之后，鼓励她陪她去报警。时间地点人物事，说清楚。就算看不清人，凭借时间和地点以及周围没人，也能通过监控了解此人去向。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是她还是给了好姐妹，以及我爸，抱怨了此事。还说，是不是我爸在牌桌上遇到的相好，来报复她的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她的心情我能理解，被人打了心里都难受。而且衣服、车框都破破了，实在是心意难平。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我看来，这件事其实很简单。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 有可能是肇事者和朋友闹着玩等朋友，在马路上停下来等朋友。当我妈路过时，把她当成了他朋友。开玩笑，推了一下，男人和女人的承受力还是不一样的。因为害怕担责跑了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 有可能人家路过打了个哈欠，伸手打了她。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 据我妈猜测的打击报复，或是故意伤害。我觉得还是不太可能的。一没仇人，二没好处。无差别攻击不太可能。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于路人的冷眼旁观，我觉得多一事不如少一事，所以走了。其实，现在的社会就是这样。有问题交给警察，当代的年轻人，很少会去围观。在一件事突发的情况下，不清楚情况下，还是自保为主。我妈认为的那个电视剧的时代已经一去不复返了，跟不上时代的步伐也是每个人多少会面对的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我爸回家之前，她一直不愿意去报警，觉得报警也没有用。最后还是做我爸车去了派出所。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;没想到耶证已经影响她那么深了，每一句都是对整个社会的抱怨。我和她说，你不去报警也是对恶人的默许和纵容，何必说社会的险恶。我知道她比较信上帝说的善，所以这么说的她。我相信世界残酷但也美丽。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我很小的时候，我妈就信基督教了。03年的时候，就已经入了“耶和华见证人”了。家里有很多送的书，本来想阻止她继续学习的。和一些反邪教的人沟通过，也是没什么好的办法。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一颗向善的心，却因为常识以及知识的欠缺，而走向了另外一条道路。愿那些善良的人能被温柔以待吧。</p>
<p><img src="w2.jpeg" alt="温柔以待"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>性能测试</title>
    <url>/2021/05/25/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><h3 id="什么是软件性能"><a href="#什么是软件性能" class="headerlink" title="什么是软件性能"></a>什么是软件性能</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>软件的性能是软件的一种<strong>非功能特性</strong>，它关注的不是软件是否能够完成特定的功能，而是在完成该功能时展示出来的及时性</p>
<span id="more"></span>

<h4 id="性能测试定义"><a href="#性能测试定义" class="headerlink" title="性能测试定义"></a>性能测试定义</h4><p>只通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试</p>
<h3 id="不同群体眼中的性能"><a href="#不同群体眼中的性能" class="headerlink" title="不同群体眼中的性能"></a>不同群体眼中的性能</h3><h4 id="用户眼中的视角"><a href="#用户眼中的视角" class="headerlink" title="用户眼中的视角"></a>用户眼中的视角</h4><p><img src="2021-04-11_17-02.png" alt="2021-04-11_17-02"></p>
<h4 id="开发眼中的性能"><a href="#开发眼中的性能" class="headerlink" title="开发眼中的性能"></a>开发眼中的性能</h4><p><img src="2021-04-11_17-04.png"></p>
<p>数据库设计是否合理？是否出现数据严重倾斜</p>
<p>为不同的商家提供服务，商家有大有小（营业额和客户），就要考虑数据库是否设计的合理了。例如，多租户是如何存放数据，这个数据库存放了一百万数据，那个数据库快存放一亿数据了，数据分配严重不均，就是数据库设计的 不合理了。</p>
<p>包括代码中是否也有性能问题，有没有不合理的内存使用，内存泄漏，代码冗余，程序之间资源竞争</p>
<h4 id="运维视角"><a href="#运维视角" class="headerlink" title="运维视角"></a>运维视角</h4><p><img src="2021-04-11_17-14.png"></p>
<p>系统的扩展性：在软件发布初期，肯能用户较少，服务器可能配置较低。但当软件火爆，用户激增，运维人员是否能马上提升资源。</p>
<h4 id="测试眼中的性能是什么样的？"><a href="#测试眼中的性能是什么样的？" class="headerlink" title="测试眼中的性能是什么样的？"></a>测试眼中的性能是什么样的？</h4><ul>
<li>测试人员通常是做软件质量控制的一个角色，不仅仅是找bug，需要对整个软件的质量负责，性能也属于质量的一部分，因此测试人员眼中的性能应该是全面的，考虑的东西也需要全面。</li>
<li>测试人员需要考虑全面的性能，包括用户、开发、管理员等各个视角的性能</li>
<li>测试人员在做性能测试时除开要关注表面的现象如响应时间，也需要关注本质，比如用户看不到的服务器资料利用率，架构设计是否合理？代码是否合理等方方面面（测试过程中，性能不达标，需要判断是什么原因导致的性能不达标，分析系统的瓶颈是开发的问题，还是运维人员的问题）</li>
</ul>
<h3 id="性能测试的类型"><a href="#性能测试的类型" class="headerlink" title="性能测试的类型"></a>性能测试的类型</h3><ul>
<li><p><strong>基准测试</strong>：在给系统施加较低压力时，查看系统的运行状况并记录相关数做为基础参考</p>
</li>
<li><p><strong>负载测试</strong>：是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值（<strong>最简单的判断：逐渐加压，性能从上升到下降。</strong>），例如某种资源已经达到饱和状态等。</p>
</li>
<li><p><strong>压力测试</strong>：压力测试是评估系统处于或超过预期负载时系统的运行情况，关注点在于系统在峰值负载或超出最大载荷情况下的处理能力。</p>
<p>在负载测试后，继续施压，会出现什么情况，需要测试出来。</p>
</li>
<li><p><strong>稳定性测试</strong>：在给系统加载一定业务压力的情况下，使系统运行一段时间，以此检测系统是否稳定</p>
<p>如果最大的压力为100，我们一般给60的压力做持续时间的稳定性测试。（会不会出现越用越卡，资源不释放的情况）</p>
</li>
<li><p><strong>并发测试</strong>：测试多个用户同时访问同一个应用、同一个模块或者数据记录时是否存在死锁（用户同时申请一片资源）或者其他性能问题，如软件崩溃。（双十一抢购）</p>
</li>
</ul>
<h3 id="性能测试基本概念"><a href="#性能测试基本概念" class="headerlink" title="性能测试基本概念"></a>性能测试基本概念</h3><h4 id="1-响应时间"><a href="#1-响应时间" class="headerlink" title="1. 响应时间"></a>1. 响应时间</h4><p><strong>定义</strong>：从用户发送一个请求到用户接收到服务器返回的相应数据这段时间就是相应时间</p>
<p><strong>关键路径</strong>：下图为一次http请求经过的路径，请求会经过网络发送到web服务器进行处理，如果需要操作DB，再由网络转发到数据库进行处理，然后返回值给web服务器，web服务器最后把结果数据通过网络返回给客户端。</p>
<p><strong>响应时间计算方法</strong></p>
<p>响应时间 = 呈现时间 + 网络传输时间 + 服务器端响应时间 + 应用延时时间</p>
<p><img src="2021-04-11_21-49.png"></p>
<p><strong>响应时间和负载对应关系</strong></p>
<p>例如：一家理发店可同时接待10位客人，每位客人剪发时间为15分钟。如果来了第11位客人，需要等待前10位客人中的一人剪完，这就是响应时间瓶颈。相应时间会突然增加的点，就是我们性能测试所要做的。（找响应时间的临界点）</p>
<p><img src="2021-04-11_21-50.png"></p>
<p>图中拐点说明</p>
<ul>
<li>响应时间突然增加</li>
<li>意味着系统的一种或多种资源利用率达到了极限</li>
<li>通常可以利用拐点来进行性能测试分析与定位</li>
</ul>
<h4 id="2-吞吐量"><a href="#2-吞吐量" class="headerlink" title="2. 吞吐量"></a>2. 吞吐量</h4><p>Loadrunner 叫 TPS，Transactions Per Second（每秒传输的事物处理个数），JMeter 叫 throughput</p>
<p><strong>定义</strong>：单位时间内系统处理的客户端请求的数量</p>
<p><strong>计算单位</strong>：一般使用请求数/秒作为吞吐量的单位，出可以使用页面数/秒表示。另外，从业务角度来说也可以使用访问人数/天 或 页面访问量/天作为单位</p>
<p><strong>计算方法</strong>：<code>Throughput = (number of requests)/(total time)</code></p>
<p><img src="2021-04-11_21-53.png"></p>
<p>图中拐点说明</p>
<ul>
<li>吞吐量逐渐达到饱和</li>
<li>意味着系统的一种或多种资源利用达到了极限</li>
<li>通常可以利用拐点来进行性能测试分析与定位</li>
</ul>
<h4 id="3-并发数"><a href="#3-并发数" class="headerlink" title="3. 并发数"></a>3. 并发数</h4><p><strong>并发用户数</strong>：某一物理时刻同时向系统提交请求的用户数，提交的请求可能是同一个场景或功能，也可能是不同场景或功能。</p>
<p>比如：淘宝双十一，春节抢票，也要模拟这么多用户，进行抢购</p>
<p><strong>在线用户数</strong>：某短时间内访问系统的用户数，这些用户并不一定同时向系统提交请求</p>
<p><strong>系统用户数</strong>：系统注册的总用户数据</p>
<p><strong>三者之间关系</strong>：系统用户数 &gt;= 在线用户数 &gt;= 并发用户数</p>
<h4 id="4-资源利用率"><a href="#4-资源利用率" class="headerlink" title="4. 资源利用率"></a>4. 资源利用率</h4><p><strong>定义</strong>：指的是对不同系统资源的使用程度，通常以占用最大值的百分比来衡量</p>
<p><strong>通常需要关注的服务器资源如下</strong>：</p>
<ul>
<li>CPU：就像人的大脑，主要负责相关事情的判断以及实际处理的机制（不要超过85%）</li>
<li>内存：大脑中的记忆块区，将眼睛，皮肤等收集到的信息记录起来的地方，以供cpu进行判断（不要超过85%）</li>
<li>磁盘IO：大脑中的记忆区块，将重要的数据保存起来（永久保存，关机或断电不会丢失，速度慢），以便将来再次使用这些数据</li>
<li>网络：带宽</li>
</ul>
<p><img src="2021-04-12_20-55.png"></p>
<h4 id="5-其他常用概念"><a href="#5-其他常用概念" class="headerlink" title="5.其他常用概念"></a>5.其他常用概念</h4><p><strong>PV</strong>：访问一个URL，产生一个PV（Page View，页面访问量），每日每个网站的总PV量是形容一个网站规模的重要指标</p>
<p><strong>UV</strong>：作为一个独立用户，访问站点的所有页面均算作一个UV（Unique Visitor，用户访问）</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试基本理论</tag>
      </tags>
  </entry>
  <entry>
    <title>我所害怕和难过的事</title>
    <url>/2022/01/16/%E6%88%91%E6%89%80%E5%AE%B3%E6%80%95%E5%92%8C%E9%9A%BE%E8%BF%87%E7%9A%84%E4%BA%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-QEAkEJTA" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="002IFZ9537O1Du" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<p>梦见90年代花坛边看着爷爷奶奶们唱着那个年代的老歌，你一句我一句，甚是享乐。</p>
<p>旁边的大爷却是暗自神伤，独自落泪，之后大家唱着唱着也都哭了起来。</p>
<p><em>大浪里淘尽所有的往事，可是我会永远，珍藏那张不老的风帆。</em></p>
<p>梦里他们明明是爷爷，奶奶，但我看他们却还是很年轻，没有比我大太多。</p>
<p>或许感慨时光不待，青春再也追不回来了的人并不是他们，而是我自己。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>挂载硬盘只读问题</title>
    <url>/2021/01/19/%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E5%8F%AA%E8%AF%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>sudo fdisk -l 显示挂载设备</p>
</blockquote>
<blockquote>
<p>df -T 显示设备类型，先卸载挂载设备</p>
</blockquote>
<p>在查找资料以及多次尝试之后，终于通过下面的方法可以使用了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载已挂载的设备</span></span><br><span class="line">sudo umount /dev/sda1</span><br><span class="line">sudo mount -t ntfs -w /dev/sda1 /run/media/william</span><br></pre></td></tr></table></figure>

<p>其中：<br><code>-t</code>表示文件系统类型，如ntfs<br><code>-w</code>表示可读可写</p>
<p>踩坑：<br>不知道为什么使用<code>sudo mount -o remount,rw /</code>无效</p>
<p>还可以使用<code>sudo ntfsfix /dev/sda1</code>来修复文件系统</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>换电脑了如何使用hexo</title>
    <url>/2020/12/24/%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道，使用 Github+hexo 搭建一个个人博客确实需要花不少时间的，我们搭好博客后使用的挺好，但是如果我们有一天电脑突然坏了，或者换了系统，那么我们怎么使用 hexo 再发布文章到个人博客呢？</p>
<p>如果我们还是按照之间我们总结的教程再次搭建一个博客，然后修改代码更换 hexo 主题等，各种配置特别繁琐，那么有没有一种方便的方法，直接使用我们之前搭建好的博客的源文件呢？</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="一、安装必要软件"><a href="#一、安装必要软件" class="headerlink" title="一、安装必要软件"></a>一、安装必要软件</h3><p>安装 Git </p>
<p>安装 node JS</p>
<span id="more"></span>

<h3 id="二、源文件拷贝"><a href="#二、源文件拷贝" class="headerlink" title="二、源文件拷贝"></a>二、源文件拷贝</h3><p>将你原来电脑上个人博客目录下必要文件拷到你的新电脑上（比如F:/Blog目录下），注意无需拷全部，只拷如下几个目录：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">_config.yml <span class="keyword">package</span>.json scaffolds<span class="regexp">/ source/</span> themes/</span><br></pre></td></tr></table></figure>

<h3 id="三、安装-hexo"><a href="#三、安装-hexo" class="headerlink" title="三、安装 hexo"></a>三、安装 hexo</h3><p>在 cmd 下输入下面指令安装 hexo：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure>

<h3 id="四、进入-F-Blog-目录（你拷贝到新电脑的目录），输入下面指令安装相关模块"><a href="#四、进入-F-Blog-目录（你拷贝到新电脑的目录），输入下面指令安装相关模块" class="headerlink" title="四、进入 F:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块"></a>四、进入 F:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm installnpm install hexo-deployer-git --save  <span class="regexp">//</span> 文章部署到 git 的模块（下面为选择安装）</span><br><span class="line">npm install hexo-generator-feed --save  <span class="regexp">//</span> 建立 RSS 订阅</span><br><span class="line">npm install hexo-generator-sitemap --save <span class="regexp">//</span> 建立站点地图</span><br></pre></td></tr></table></figure>

<h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><p>这时候使用 <code>hexo s</code> 基本可以看到你新添加的文章了。</p>
<h3 id="六、部署发布文章"><a href="#六、部署发布文章" class="headerlink" title="六、部署发布文章"></a>六、部署发布文章</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="regexp">//</span> 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g       <span class="regexp">//</span> 生成静态网页</span><br><span class="line">hexo d       <span class="regexp">//</span> 开始部署</span><br></pre></td></tr></table></figure>

<h3 id="七、Github-添加-SSH-Keys"><a href="#七、Github-添加-SSH-Keys" class="headerlink" title="七、Github 添加 SSH Keys"></a>七、Github 添加 SSH Keys</h3><p> 首先在本地创建 <code>SSH Keys</code>:</p>
<p>$ ssh-keygen -t rsa -C “user.email”</p>
<p>后面的邮箱即为 github 注册邮箱，也是你登录 Github 的邮箱，之后会要求确认路径和输入密码，一路回车就行。</p>
<p>成功的话会在 <code>~/</code>下生成 <code>.ssh</code>文件夹，进去，打开 <code>id_rsa.pub</code>，复制里面的<code>key</code>即可。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>接口幂等解决方案</title>
    <url>/2021/05/17/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="什么是幂等性？"><a href="#什么是幂等性？" class="headerlink" title="什么是幂等性？"></a>什么是幂等性？</h3><p>多次请求某一个资源对于资源本身应该具有同样等结果,也就是说,其任意多次执行对资源本身所产生等影响的结果均与第一次执行的影响的结果相同。（多次请求的资源都是相同的导致数据库存储脏数据）</p>
<span id="more"></span>

<h3 id="产生幂等性场景"><a href="#产生幂等性场景" class="headerlink" title="产生幂等性场景"></a>产生幂等性场景</h3><ol>
<li>网络波动, 可能会引起重复请求</li>
<li>用户重复操作,用户在操作时候可能会无意触发多次下单交易,甚至没有响应而有意触发多次交易</li>
<li>应用使用了失效或超时重试机制(Nginx重试、RPC重试或业务层重试等)</li>
<li>页面重复刷新</li>
<li>使用浏览器后退按钮重复之前的操作,导致重复提交表单</li>
<li>使用浏览器历史记录重复提交表单</li>
<li>浏览器重复的HTTP请求</li>
<li>定时任务重复执行</li>
<li>用户双击提交按钮</li>
</ol>
<h3 id="幂等在哪一层实现？"><a href="#幂等在哪一层实现？" class="headerlink" title="幂等在哪一层实现？"></a>幂等在哪一层实现？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据访问层</span><br><span class="line">注: 只要数据库交互的那一层都可以实现,</span><br></pre></td></tr></table></figure>

<h3 id="幂等性解决方案"><a href="#幂等性解决方案" class="headerlink" title="幂等性解决方案"></a>幂等性解决方案</h3><blockquote>
<p><strong>1. 按钮只可操作一次</strong></p>
</blockquote>
<p>一般是提交后把按钮置灰或loding状态,消除用户因为重复点击而产生的重复记录,比如添加操作,由于点击两次而产生两条记录</p>
<blockquote>
<p><strong>2. token机制</strong></p>
</blockquote>
<p>功能上允许重复提交,但要保证重复提交不产生副作用,比如点击n次只产生一条记录,具体实现就是进入页面时申请一个token,然后后面所有的请求都带上这个token,后端根据token来避免重复请求。</p>
<blockquote>
<p><strong>3. 使用Post/Redirect/Get模式</strong></p>
</blockquote>
<p>在提交后执行页面重定向,这就是所谓的Post-Redirect—Get(PRG)模式,简单来说就是当用户提交连表单后,跳转到一个重定向的信息页面,这样就避免用户按F5刷新导致的重复提交,而且也不会出现浏览器表单重复提交的警告,也能消除按浏览器前进和后退导致同样重复提交的问题。</p>
<blockquote>
<p><strong>4. 在session存放特殊标志</strong></p>
</blockquote>
<p>在服务端,生成一个唯一的标识符,将它存入session,同时前端获取这个标识符的值将它写入表单的隐藏中,用于用户输入信息后点击一起提交,在服务器端,获取表单中隐藏字段的值,与session中的唯一标识符比较,相等说明是首次提交,就处理本次请求,然后将session中的唯一标识符移除,不相等则表示是重复提交,不再做处理。</p>
<blockquote>
<p><strong>5. 使用唯一索引防止新增脏数据</strong></p>
</blockquote>
<p>利用数据库唯一索引机制,当数据重复时,插入数据库会抛出异常,保证不会出现脏数据。</p>
<blockquote>
<p><strong>6. Token + Redis</strong></p>
</blockquote>
<p><strong>以订单为例:</strong></p>
<p>第一阶段:在进入到提交订单页面之前,需要订单系统根据用户信息向后端发起一个申请Token的请求,后端将Token保存到Redis缓存中,为第二阶段操作使用。</p>
<p>第二阶段: 订单系统拿着申请到的token发起提交订单请求,后端会检查Redis中是否存在该Token, 如果存在, 表示第一次发起订单提交请求,开始逻辑处理,处理完逻辑后删除Redis中的Token 当有重复请求的时候,检查缓存中Token是否存在。不存在表示非法请求。</p>
<blockquote>
<p><strong>7. 状态机</strong></p>
</blockquote>
<p>针对更新操作,比如业务上需要修改订单状态,例如订单状态有待支付、支付中、支付成功、支付失败、订单超时关闭等,在设计的时候最好只支持状态的单向改变(不可逆),也就是在更新的时候where条件里可以加上status = {状态},多次调用的话实际上也只会执行一次。</p>
<blockquote>
<p><strong>8. 乐观锁</strong></p>
</blockquote>
<p>如果更新已有数据,可以进行加锁更新,也可以设计表结构时使用乐观锁,通过version来做乐观锁,这样既能保证执行效率,又能保证幂等, 乐观锁的version版本在更新业务数据要自增<br><code>update table set version = version + 1 where id = #&#123;id&#125; and version = #&#123;version&#125;</code><br><strong>示例:</strong> 当有重复请求的时候,第一个请求会获取当前商品的version版本号,得到的version为1,紧接着由于第一个请求还没更新商品的version,第二个请求获取的version依然也是1, 这时候第一个请求操作更新的时候带上version并作为条件并且自增更新,这时候商品的version就会变成2,当第二个请求去操作更新的时候明显version不一致导致更新失败。</p>
<blockquote>
<p><strong>9. 防重表</strong></p>
</blockquote>
<p>以支付为例: 使用唯一主键去做防重表的唯一索引,比如使用订单号作为防重表的唯一索引,每一次请求都根据订单号向防重表中插入一条数据,插入成功说明可以处理后面的业务,当处理完业务逻辑之后删除防重表中的订单号数据,后续如果有重复请求,则会因为防重表唯一索引原因导致插入失败,直接返回操作失败,直到第一次请求返回结果,可以看出防重表作用就是加锁的功能。<br><code>注: 最好结合状态机幂等先判断一下</code></p>
<blockquote>
<p><strong>10. select + insert or update or delete</strong></p>
</blockquote>
<p>该方案就是操作之前先查询一下,符合要求再插入,该方案在没有并发的系统中可以解决幂等问题，在单JVM有并发的时候可以用JVM加锁来保证幂等性,在分布式环境它是无法保证幂等性,可以使用分布式来保证。</p>
<blockquote>
<p><strong>11. 分布式锁</strong></p>
</blockquote>
<p>在进入方法时,先去获取锁,假如获取到锁,就继续后面的流程,假如没有获取到锁就等待锁释放后直到获取锁,当执行完方法时则进行释放锁。</p>
<p>该解决方案可以用来解决分布式系统幂等性。</p>
<p>常用的分布式锁实现采用的方案是 Redis 和 Zookeeper等工具,使用分布式锁类似于防重表,将防重并发放到缓存中,较为高效,思路相同,同一时间只能完成一次支付请求。</p>
<p><code>注: 获取锁最好设置个超时时间,防止意外没有释放到锁</code></p>
<blockquote>
<p><strong>12. 缓冲队列</strong></p>
</blockquote>
<p>将请求都快速地接收下来后放入缓冲队列中,后续使用异步任务处理队列中的数据,过滤掉重复的请求,该解决方案优点是同步处理改成异步处理、高吞吐量,缺点则是不能及时地返回请求结果,需要后续轮询得处理结果。</p>
<blockquote>
<p><strong>13. 全局唯一号</strong></p>
</blockquote>
<p>比如通过source来源 + 唯一序列号传入给后端，后端来判断请求是否重复,在并发时只能处理一个请求,其他相同并发请求要么返回请求重复,要么等待 前面请求执行完成后再执行。</p>
<blockquote>
<p>转载自：<a href="https://zhuanlan.zhihu.com/p/116873088">陈死狗</a></p>
</blockquote>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>接口测试</tag>
      </tags>
  </entry>
  <entry>
    <title>敏捷开发</title>
    <url>/2021/05/19/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="什么是敏捷开发"><a href="#什么是敏捷开发" class="headerlink" title="什么是敏捷开发"></a>什么是敏捷开发</h3><p>敏捷开发（Agile Development）是一种以人为核心、迭代、循序渐进的开发方法。</p>
<p>它采用迭代时开发，开发方式的主要驱动核心是人。指导我们用规定的环节一步一步完成项目的开发</p>
<span id="more"></span>

<h3 id="敏捷测试常见术语"><a href="#敏捷测试常见术语" class="headerlink" title="敏捷测试常见术语"></a>敏捷测试常见术语</h3><ul>
<li><p>Scrum：敏捷研发的框架</p>
</li>
<li><p>Sprint：原意为冲刺，Scrum中的Sprint无对应中文翻译，指一个迭代</p>
</li>
<li><p>Scrum Master：敏捷专家，敏捷研发总负责人</p>
<p>敏捷专家以各种方式服务于产品负责人<strong>（让大家按照敏捷的方式去研发，引导项目成为敏捷开发模式）</strong></p>
<p>以各种方式服务于Scrum团队</p>
<p><strong>保证项目按照敏捷的方式去开展，中间环节落实不到位，要各种方式调动大家积极</strong></p>
</li>
<li><p>Product Owner：产品负责人简称PO</p>
<p>产品负责人负责最大化产品以及开发团队工作的价值。实现这一点的方式会随着组织、Scrum团队以及单个团队成员的不同而不同（如果需求烂，没有好的想法。即便高质量完成任务，没有新思想和新功能，也会被淘汰。产品很重要）</p>
</li>
<li><p>Scrum Team：敏捷研发团队</p>
<p>开发团队包含了专业人员，负责在每个Sprint的结尾交付潜在可发布的“完成”产品增量。只有开发团队的成员才能创造增量。</p>
<p>开发团体由组织构建并授权，来组织和管理他们的工作。所产生的协同工作能最大化，开发团队的整体效率和效力。</p>
<p><strong>要求：每一个迭代都能交付，可以量化的、可以给客户去展示的交付件。短平快的方式去交付</strong></p>
</li>
<li><p>Product Backlog：产品待办列表，指需求清单</p>
</li>
<li><p>Sprint Backlog：Sprint待办列表，指Sprint任务清单</p>
</li>
<li><p>Daily Scrum Meeting：每日站会</p>
</li>
<li><p>Sprint Review Meeting：Sprint评审会议</p>
</li>
<li><p>User Story：用户故事，指一条需求</p>
</li>
</ul>
<h3 id="Scrum详细解释"><a href="#Scrum详细解释" class="headerlink" title="Scrum详细解释"></a>Scrum详细解释</h3><p>Scrum是一个用于开发和维持复杂产品的框架（6个月及以上的项目），是一个增量、迭代的开发过程。在这个框架中，整个开发过程由若干个短的迭代周期组成，一个短的迭代周期称为一个Sprint，每个Sprint的建议长度为2到4周。在Scrum中，使用产品Backlog来管理产品的需求，产品Backlog是一个按照商业价值排序的需求列表，列表条目的体现形式通常为用户story。Scrum团队总是先开发对客户具有较高价值的需求。在Sprint中，Scrum团队从产品Backlog中挑选最高优先级的需求进行开发。挑选的需求在Sprint计划会议上经过讨论、分析和估算（最长的迭代6周，不能再拆分）得到相应的任务列表，我们称它为Sprint Backlog。在每个迭代结束时，Scrum团队将递交潜在可交付的产品增量。Scrum起源于软件开发项目，但它适用于任何复杂的或是创新性的项目。</p>
<h3 id="敏捷软件开发宣言"><a href="#敏捷软件开发宣言" class="headerlink" title="敏捷软件开发宣言"></a><a href="http://agilemanifesto.org/">敏捷软件开发宣言</a></h3><ul>
<li>个体和互动高于流程和工具（Individuals and interactions over processes and tools）</li>
<li>工作的软件高于详尽的文档（Working software over comprehensive documentation）</li>
<li>客户合作高于合同谈判（Customer collaboration over contract negotiation）</li>
<li>响应变化高于遵循计划（Responding to change over following a plan）</li>
</ul>
<h3 id="敏捷开发全局流程"><a href="#敏捷开发全局流程" class="headerlink" title="敏捷开发全局流程"></a>敏捷开发全局流程</h3><p><img src="%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A8%E5%B1%80%E6%B5%81%E7%A8%8B.png" alt="敏捷开发全局流程"></p>
<ol>
<li><p>客户、市场、高层为软件开发提供创意（前瞻性想法）、缺陷（用户反馈不好用、有缺陷的地方）、新功能（直播带货）</p>
</li>
<li><p>产品负责人（Product Owner）汇总成产品功能列表，然后召开迭代拆分会（参会人员至少测试组长起步），讨论出迭代任务</p>
</li>
<li><p>开始正常迭代。</p>
<p>迭代1：测试做迭代任务的需求评审、测试计划、编写测试用例、执行用例、提交bug、回归测试、发布上线。</p>
<p>迭代2：</p>
<p>迭代3：</p>
<p>…</p>
<p>每一天都会开站立会议，最终交付用户可使用的软件</p>
</li>
<li><p>贯穿迭代的评审会、反思会（每次迭代后，都会开）</p>
</li>
<li><p>敏捷专家：辐射全局、观察每一个环节是否按照正常的方式去运作、开展。（框架的监督者）</p>
</li>
</ol>
<h3 id="Scrum的常见活动"><a href="#Scrum的常见活动" class="headerlink" title="Scrum的常见活动"></a>Scrum的常见活动</h3><ul>
<li><p>产品待办事项列表梳理</p>
<p>产品待办事项通常会很大，也很宽泛，而且想法会变来变去、优先级也会变化，所以产品待办事项梳理是一个贯穿整个Scrum项目始终的活动。该活动包含但不限于以下内容：</p>
<ol>
<li>保持产品待办事项列表有序（列出待办优先级）</li>
<li>把看起来不再重要的事项移除或者降级（及时更新维护，不重要的移除或降级）</li>
<li>增加或提升涌现出来的或变得更重要的事项（重要的事项提高优先级）</li>
<li>将事项分解成更小的事项（大的事项分解成若干个小的事项）</li>
<li>将事项并归为更大的事项（小事项合并成大的事项）</li>
<li>对事项进行估算（对事项时间进行估算）</li>
</ol>
</li>
<li><p>产品待办事项列表梳理的一个最大的好处，是为即将到来的几个Sprint做准备。为此，梳理时会特别关注那些即将被实现的事项。</p>
</li>
</ul>
<h3 id="迭代计划（拆分）会议"><a href="#迭代计划（拆分）会议" class="headerlink" title="迭代计划（拆分）会议"></a>迭代计划（拆分）会议</h3><p>基于列好的产品需求，进行迭代的拆分</p>
<p>[参考文章末尾图]</p>
<ol>
<li>会给出2-3个迭代的相对明确的任务，3个迭代后的项目变动会大很多。</li>
<li>依赖于需求清单（优先级、客户需求大、估时），拼凑到一个项目里。</li>
<li>征求开发经理、测试组长的意见</li>
</ol>
<h3 id="Scrum-看板"><a href="#Scrum-看板" class="headerlink" title="Scrum 看板"></a>Scrum 看板</h3><table>
<thead>
<tr>
<th>待办</th>
<th>处理中</th>
<th>完成</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>开发、测试人员都可以写</p>
<p>​    <strong>通过看板清晰看到个人、团队工作的进度。</strong></p>
<h3 id="每日站会"><a href="#每日站会" class="headerlink" title="每日站会"></a>每日站会</h3><ul>
<li>每日站立会议是敏捷流程Scrum中的很重要的一个制度之一。</li>
<li>功能<ul>
<li>快速同步，让项目组内部的员工互相了解彼此的进展，从而了解项目的整体进展</li>
<li>给每个人一种精神压力，信守承诺。这是一种面对面的精神压力，直面项目进展。</li>
<li>培养团队的文化，让每个人意识到，我不是一个人在战斗，我们是一个团队</li>
</ul>
</li>
<li>站立会议的目的<ul>
<li>让所有人了解其他人在做什么，当前项目计划进展如何</li>
<li>帮助大家解决哪些阻碍、做事情的问题，以及共享承诺。这些都非常有利于提高团队合作精神。</li>
</ul>
</li>
</ul>
<p>开会人员：负责相同模块的产品经理、开发、测试</p>
<p>开会人数：10人以内</p>
<p>开会时间：10分钟左右</p>
<p>会议内容：1.昨天做了什么。2.今天打算做什么。3.昨天工作遇到的没解决的问题。或者遇到什么问题解决了，可以给大家参考。</p>
<h3 id="Scrum迭代回顾会议"><a href="#Scrum迭代回顾会议" class="headerlink" title="Scrum迭代回顾会议"></a>Scrum迭代回顾会议</h3><p>在每个Sprint结束后，Scrum团队会聚在一起开Sprint回顾会议</p>
<ul>
<li><p>目的：回顾以下团队在流程、人际关系以及工具方面做的如何</p>
</li>
<li><p>团队识别出哪些做的好的，哪些做的不好的。并找出潜在的改进事项，为将来的改进制定计划。</p>
</li>
<li><p>所有的Scrum会议都是限定时长的，Sprint回顾会议的推荐时长是Sprint中的每一周对应一个小时</p>
<p>（一个Sprint包含2个星期，则Sprint回顾会议时长为2小时）</p>
</li>
<li><p>Scrum团队总是在Scrum的框架内，改进他们自己的流程。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(Scrum) --&gt;B(产品需求1.0版本 Product Backlog)</span><br><span class="line">    B --&gt;C[基于需求的优先级召开,会议指定迭代计划]</span><br><span class="line">    C --&gt;P[迭代1 Sprint1]</span><br><span class="line">    P --&gt;D[迭代的生命周期]</span><br><span class="line">    P --&gt;Q[迭代的整体规划]</span><br><span class="line">    Q --&gt;R(需求1)</span><br><span class="line">    Q --&gt;S(需求2)</span><br><span class="line">    Q --&gt;T(需求3)</span><br><span class="line">    Q --&gt;U(迭代回归测试)</span><br><span class="line">    D --&gt;H(需求分析)</span><br><span class="line">    D --&gt;I(迭代内计划)</span><br><span class="line">    D --&gt;J(测试计划和开发)</span><br><span class="line">    D --&gt;K(环境搭建)</span><br><span class="line">    D --&gt;L(测试执行)</span><br><span class="line">    D --&gt;M(提交缺陷)</span><br><span class="line">    D --&gt;N(回归测试)</span><br><span class="line">    D --&gt;O(发布上线验证)</span><br><span class="line">    C --&gt;E[迭代2]</span><br><span class="line">    C --&gt;F[迭代3]</span><br><span class="line">    C --&gt;G[迭代4]</span><br></pre></td></tr></table></figure>



<p>回归</p>
<ol>
<li><p>迭代内bug和需求的回归</p>
</li>
<li><p>上线前整体的回归</p>
</li>
<li><p>迭代与迭代版本是否有影响</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试理论</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试</title>
    <url>/2021/06/08/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是接口测试？"><a href="#什么是接口测试？" class="headerlink" title="什么是接口测试？"></a>什么是接口测试？</h2><p>接口测试是测试系统组件间接口的一种测试（测试浏览器前端与后台的交互）。接口测试主要用于检测系统内部各个子系统之间（会员卡支付，与会员卡之间有一定的交互。京东微信支付，京东调微信支付的接口）、外部系统与系统之间的交互。测试的重点是<strong>要检擦数据交换，传递和控制管理的过程，以及系统间相互逻辑依赖关系等</strong></p>
<p>通俗来说，接口测试就接口提供方、接口调用方之间交互，及逻辑处理的测试</p>
<span id="more"></span>

<p>本质就是发送一个Request报文给服务器，然后服务器响应返回一个Response报文。我们对Response的报文进行分析，判断是否和我们预期一致，从而验证业务是否正确实现。</p>
<p>模拟实际场景（服务架构、数据场景、业务场景），对接口进行模拟调用，验证其相应性能、输出结果、异常处理等测试点</p>
<p><strong>HTTP 接口测试必须掌握的知识点</strong></p>
<ul>
<li><p>URL：http[s]://host[:port][abs_path][parameter]</p>
<p>例如：<a href="http://182.92.178.83:8081/login">http://182.92.178.83:8081/login</a> http协议，182.92.178.83:8081服务器，8081端口，login页面功能</p>
</li>
<li><p>Header：头信息，包含了报文的描述信息</p>
</li>
<li><p>Method：请求方法 get/post/delete/put</p>
<ul>
<li><p>get “?”后面传参，更多为从服务器获取信息</p>
</li>
<li><p>post 向服务器提交信息，2人同时修改一个信息，谁最后提交修改为最新的</p>
</li>
<li><p>delete 删除</p>
</li>
<li><p>put 2人同时提交，第2人提交内容会和第1个人提交的信息，进行提交。如果两人提交的信息一样，不会提交。比如：扫码付款，请求因网络原因没有返回回来，再次扫码付款不会付款成功</p>
</li>
</ul>
</li>
<li><p>Request Parameters：请求参数</p>
</li>
<li><p>Response Status：响应状态码</p>
<p>请浏览附录</p>
</li>
</ul>
<p><img src="%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E4%BF%A1.png"></p>
<h2 id="为什么要进行接口测试"><a href="#为什么要进行接口测试" class="headerlink" title="为什么要进行接口测试"></a>为什么要进行接口测试</h2><p>接口测试相对于UI来说，更加稳定，也可以说接口测试是一种特殊的单元测试。当一个系统提供了大量的后台服务，有较少或者基本没有页面操作，比较适合开展接口测试。比如某个系统大概有100多个对外接口，每次上线，测试人员不得不一个一个验证，此时如果开展自动化，将大大提高回归的效率和测试的覆盖率。</p>
<p>当用户多时，需要进行接口测试。避免用户绕过前端，直接对接口进行请求。</p>
<p>当用户少时，优先 保证业务使用。</p>
<h2 id="怎样做接口测试？"><a href="#怎样做接口测试？" class="headerlink" title="怎样做接口测试？"></a>怎样做接口测试？</h2><p>开发在写完测试计划之后，在开发接口的同时，拆解功能点，写接口文档。测试人员对照接口文档，边与开发沟通，边测试接口（对照接口文档，做等价类边界值测试）</p>
<p>为提高接口测试效率，及TDD模式，前期我们需要推动开发规范，接口说明文档。</p>
<h2 id="接口测试在工作中的流程"><a href="#接口测试在工作中的流程" class="headerlink" title="接口测试在工作中的流程"></a>接口测试在工作中的流程</h2><p>按照接口文档，编写接口的测试用例。</p>
<p>如何获取接口（Charles、Fiddler）</p>
<p><strong>准备阶段（25%）</strong></p>
<p>拿到开发的接口文档，并理解每个接口的参数及含义了解被测</p>
<p><strong>编写接口测试用例    执行阶段（70%）</strong></p>
<p>测试用例 / 测试场景执行</p>
<p>测试数据 / 系统数据收集</p>
<p><strong>分析阶段（5%）</strong></p>
<p>数据汇总 / 日志分析</p>
<p>测试报告</p>
<h2 id="接口测试用例的设计"><a href="#接口测试用例的设计" class="headerlink" title="接口测试用例的设计"></a>接口测试用例的设计</h2><p><img src="%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png"></p>
<p><strong>接口测试用例编写要点</strong></p>
<ul>
<li>测试每个<strong>参数类型不合法</strong>的情况</li>
<li>测试每个<strong>参数取值范围不合法</strong>的情况</li>
<li>测试<strong>参数为空</strong>的情况</li>
<li>测试<strong>参数前后台定义</strong>的一致性</li>
<li>测试每个<strong>参数的上下限</strong>(这里容易出致命的BUG, 如果程序处理不当，可能导致崩溃)</li>
<li>测试每个<strong>参数取值</strong>不合理的情况(包括取的值不属于自己，取值在这阶段不会出现，取值超出了自己所拥有的数量或者范围)</li>
<li>如果两个请求有严格的先后顺序，需要测试调转顺序的情况</li>
</ul>
<h2 id="接口测试的流程规范（团队中）"><a href="#接口测试的流程规范（团队中）" class="headerlink" title="接口测试的流程规范（团队中）"></a>接口测试的流程规范（团队中）</h2><ul>
<li>与产品、开发一 起梳理需求，确定实现哪些接口和功能</li>
<li>编写测试计划(开发人员开发预估时间、风险预估及解决时间，测试人员用例准备、数据准备（测测试数据准备）、环境准备、与开发产品等协调测试等时间)</li>
<li>测试计划review。请各部门]再进行沟通，确定最终计划</li>
<li>编写用例及自动化脚本</li>
<li>用例评审review(以该用例为最终验证的用例)</li>
<li>执行测试，提交bug, 验证bug</li>
<li>测试总结(包括测试过程、开发过程遇到的问题，解决的问题，小组内讨论以后遇到这种问题如何可以处理更快，对自己启发)</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="HTTP状态码分类"><a href="#HTTP状态码分类" class="headerlink" title="HTTP状态码分类"></a>HTTP状态码分类</h3><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p>
<table>
<thead>
<tr>
<th align="left">分类</th>
<th align="left">分类描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1**</td>
<td align="left">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="left">2**</td>
<td align="left">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="left">3**</td>
<td align="left">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="left">4**</td>
<td align="left">客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td align="left">5**</td>
<td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<p>HTTP状态码列表:</p>
<table>
<thead>
<tr>
<th align="left">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">100</td>
<td align="left">Continue</td>
<td align="left">继续。<a href="http://www.dreamdu.com/webbuild/client_vs_server/">客户端</a>应继续其请求</td>
</tr>
<tr>
<td align="left">101</td>
<td align="left">Switching Protocols</td>
<td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">200</td>
<td align="left">OK</td>
<td align="left">请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td align="left">201</td>
<td align="left">Created</td>
<td align="left">已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td align="left">202</td>
<td align="left">Accepted</td>
<td align="left">已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td align="left">203</td>
<td align="left">Non-Authoritative Information</td>
<td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td align="left">204</td>
<td align="left">No Content</td>
<td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td align="left">205</td>
<td align="left">Reset Content</td>
<td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td align="left">206</td>
<td align="left">Partial Content</td>
<td align="left">部分内容。服务器成功处理了部分GET请求</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">300</td>
<td align="left">Multiple Choices</td>
<td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td align="left">301</td>
<td align="left">Moved Permanently</td>
<td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td>
</tr>
<tr>
<td align="left">302</td>
<td align="left">Found</td>
<td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td align="left">303</td>
<td align="left">See Other</td>
<td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td align="left">304</td>
<td align="left">Not Modified</td>
<td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td align="left">305</td>
<td align="left">Use Proxy</td>
<td align="left">使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td align="left">306</td>
<td align="left">Unused</td>
<td align="left">已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td align="left">307</td>
<td align="left">Temporary Redirect</td>
<td align="left">临时重定向。与302类似。使用GET请求重定向</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">400</td>
<td align="left">Bad Request</td>
<td align="left">客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td align="left">401</td>
<td align="left">Unauthorized</td>
<td align="left">请求要求用户的身份认证</td>
</tr>
<tr>
<td align="left">402</td>
<td align="left">Payment Required</td>
<td align="left">保留，将来使用</td>
</tr>
<tr>
<td align="left">403</td>
<td align="left">Forbidden</td>
<td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td align="left">404</td>
<td align="left">Not Found</td>
<td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td>
</tr>
<tr>
<td align="left">405</td>
<td align="left">Method Not Allowed</td>
<td align="left">客户端请求中的方法被禁止</td>
</tr>
<tr>
<td align="left">406</td>
<td align="left">Not Acceptable</td>
<td align="left">服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td align="left">407</td>
<td align="left">Proxy Authentication Required</td>
<td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td align="left">408</td>
<td align="left">Request Time-out</td>
<td align="left">服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td align="left">409</td>
<td align="left">Conflict</td>
<td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td align="left">410</td>
<td align="left">Gone</td>
<td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td align="left">411</td>
<td align="left">Length Required</td>
<td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td align="left">412</td>
<td align="left">Precondition Failed</td>
<td align="left">客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td align="left">413</td>
<td align="left">Request Entity Too Large</td>
<td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td align="left">414</td>
<td align="left">Request-URI Too Large</td>
<td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td align="left">415</td>
<td align="left">Unsupported Media Type</td>
<td align="left">服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td align="left">416</td>
<td align="left">Requested range not satisfiable</td>
<td align="left">客户端请求的范围无效</td>
</tr>
<tr>
<td align="left">417</td>
<td align="left">Expectation Failed</td>
<td align="left">服务器无法满足Expect的请求头信息</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">500</td>
<td align="left">Internal Server Error</td>
<td align="left">服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td align="left">501</td>
<td align="left">Not Implemented</td>
<td align="left">服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td align="left">502</td>
<td align="left">Bad Gateway</td>
<td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td align="left">503</td>
<td align="left">Service Unavailable</td>
<td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td align="left">504</td>
<td align="left">Gateway Time-out</td>
<td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td align="left">505</td>
<td align="left">HTTP Version not supported</td>
<td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody></table>
<h3 id="Fiddler抓取手机接口"><a href="#Fiddler抓取手机接口" class="headerlink" title="Fiddler抓取手机接口"></a>Fiddler抓取手机接口</h3><ol>
<li><p>启动Fiddler，开始设置。点击“tools–&gt;fiddler options”.（有的版本，fiddler options为options）</p>
<p><img src="1.webp"></p>
</li>
<li><p>设置HTTPS选项。在设置过程中会有弹框，请允许</p>
<p><img src="2.webp"></p>
</li>
<li><p>设置connect选项，记住代理端口号，后面会使用。在设置过程中会有弹框，请允许。设置完之后记得一定要重启Fiddler软件，不然不能使用</p>
<p><img src="3.webp"></p>
</li>
<li><p>手机连接电脑的wifi上网，通过ipconfig查看电脑的IP地址</p>
</li>
<li><p>配置手机wifi</p>
</li>
<li><p>此时就可以正常抓取了，如果要抓取HTTPS需要下载一个<a href="">FidderRoot certificate证书</a>，装在手机中（与服务器严格做对比的APP无法抓取）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>接口测试</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构前言</title>
    <url>/2021/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="初始数据结构"><a href="#初始数据结构" class="headerlink" title="初始数据结构"></a>初始数据结构</h3><p><strong>数据结构</strong>( data structure )是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。</p>
<span id="more"></span>

<h4 id="学习数据结构的意义"><a href="#学习数据结构的意义" class="headerlink" title="学习数据结构的意义"></a>学习数据结构的意义</h4><p>在许多类型的程序的设计中，数据结构的选择是一个基本的设计考虑因素。许多大型系统的构造经验表明，系统实现的困难程度和系统构造的质量都严重地依赖于是否选择了最优的数据结构。许多时候，确定了数据结构后，算法就容易得到了。有些时候事情也会反过来，我们根据特定算法来选择数据结构与之适应。不论哪种情况，选择合适的数据结构都是非常重要的。所以大家需要多关注数据结构的知识点。</p>
<h4 id="如何学习数据结构"><a href="#如何学习数据结构" class="headerlink" title="如何学习数据结构"></a>如何学习数据结构</h4><p>我觉得入门学习算法与数据结构时应包含三个部分：</p>
<ul>
<li><strong>选择一本合适的书</strong> 十分推荐普林斯顿的这本书：<a href="https://algs4.cs.princeton.edu/home/">算法 第四版</a>，是我认为最适合拿来入门的。在书中淡化了算法分析和证明，强调了实现和应用，并且通过一些有趣的习题对比显示了优秀的算法与数据结构在时间和空间上的高效。</li>
<li><strong>编程实现和应用</strong> 我曾使用的一个较笨的方法是尝试默写书本中的实现。另一种较有成就感的方法是在如 Leetcode 上，选择一些简单的但会使用到上述基础数据结构的题目，自己实现那些需要使用到的数据结构。同时，除了底层 coding，最好也从顶层宏观的去观察一种数据结构的各种操作。这里推荐一个动态可视化网站 <a href="https://visualgo.net/zh">Visualgo</a>。</li>
<li><strong>反复学习</strong> 因为算法与数据结构所涵盖的知识较多，所以一本书里的内容可能都需要分几个阶段去学习，难免会遗忘之前的内容。我建议敏捷学习，尽量快的往后学习。如果一个知识点实在不懂，可以存疑，“不求甚解”，很多时候经过后面的学习，前面的一些内容就自然明了。然后反复学习。</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>python数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>无名之辈</title>
    <url>/2021/04/19/%E6%97%A0%E5%90%8D%E4%B9%8B%E8%BE%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-qSYQFpWR" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1387152054" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br/>

<p>之前因为个人原因，有一个月没有加班。然后被领导发邮件，让我多加加班。</p>
<p>其实加班也不错，可以在忙完工作，给自己充充电。因为加班到48小时的话，是工资的20%。所以在上周有连续上13天班，周六日每天九点来公司，七点走。</p>
<p>今天下班的时候还一直算着再加几个小时的班能到48小时，结果跟我关系好的组长看到我还没走，告诉我“不用加那么久，该就就走吧。他们没有跟你吗？你加够了48小时也不会给你发那么多的，他们会给你打8-9折。”</p>
<p>加不加班是自己的选择，如果有规则可以明说。突然内心好失落，虽然没有多少钱，但是都是自己努力换来的。</p>
<p>发的钱就像被踩了脚印，践踏了自己的努力。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>时光飞逝，我已不再年少</title>
    <url>/2021/10/25/%E6%97%B6%E5%85%89%E9%A3%9E%E9%80%9D%EF%BC%8C%E6%88%91%E5%B7%B2%E4%B8%8D%E5%86%8D%E5%B9%B4%E5%B0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-UUDxtgWy" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="442315772" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>

<p>今天和苗帅聊天，发现已经快11月了。这一年过的好快，快到我没有留下什么影响。</p>
<p>还记得年初，北京漫天的黄沙，好像就在不久前。也许3月的时候，和现在一样冷而产生的错觉吧。</p>
<span id="more"></span>

<p><img src="1.jpg" alt="3.15号的黄沙"></p>
<center>3.15号的黄沙</center>

</br>

<p>只记得北京的7月，下班还能迎着夕阳，每天都会带雨伞，以防突如其来的大雨。</p>
<p>似乎这一切，都在不久前，但仔细想想却也是3个月前的事情了。</p>
<p>时间过的好快，快到你稍有不备，它就会偷偷从你身边溜走，当你回想起来的时候，感叹时间是那么遥远。</p>
<p><img src="2.jpg" alt="7.8号的雷雨天"></p>
<center>7.8号的雷雨天</center></br>

<p>每天重复的日子，似乎都堆叠成了一天，只有那些特别的天气，才能让我觉得那是另外一天。也许因为这样，我才会觉得那些日子似乎才在昨天吧。</p>
<p>10年前的自己，和10年后的自己有什么区别呢？还是那个天真、单纯的傻孩子罢了。但年龄、长相、婚姻、周围的人，又时刻提醒着我，已经不再是那个小孩子了。</p>
<p>哎！</p>
<p>怎么说呢，以前挺想回到小时候的，但现在又不太想了，不知道是为什么。</p>
<p>不过希望，我能好好爱自己。那个小时候的自己已经长大了，可能他的心还没有，那也请现在的你多多照顾他吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>时间在流动</title>
    <url>/2021/11/01/%E6%97%B6%E9%97%B4%E5%9C%A8%E6%B5%81%E5%8A%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-iujbPiDp" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="16964043" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>

<p>回想过去一年，时间的齿轮永不停歇的转动，一圈又一圈 。</p>
<p>当我听着2020年的歌单的时候，我感觉不出那是什么时候听到的。</p>
<p>感觉很遥远，但仔细想想也不过一年。</p>
<p>一年！活着好像没有什么感觉，一切瞬息万变，一切好像有没有变。</p>
<p>时间的尺度上，我太渺小了。</p>
<p>我感到很孤独，很无助，很害怕。</p>
<span id="more"></span>
</br>

<p>感觉我有很多事情没有做，但每一个都没能抓住。</p>
<p>人他在时间的缝隙中悄然流逝。</p>
<p>我无能为力，我孤立无援。</p>
<p>我甚至没有一个可以诉说，可以倾听的对象。</p>
</br>

<p>每天上下班只有看书，或者书为我打造的世界中，勉强喘息。</p>
<p>已经是十一月的深秋了，说明这一年已经快要结束。</p>
<p>可是这一年的伊始，我还是历历在目啊，仿佛就在昨天。</p>
<p>时间在我不经意间流逝了，我无能为力</p>
</br>

<p>每一天都是上一天的叠加，然后把他们压扁成一天，甚至只有一道微弱的痕迹。</p>
</br>

<p>关于未来的打算</p>
<p>我想考研，圆自己一个梦，铺平以后的路。</p>
<p>我想去考公务员，然后可有混吃等死。</p>
<p>这样我有更多的时间做自己喜欢的事情，或者虚度光阴。</p>
<p>不再用怕35岁的中年危机。</p>
</br>

<p>或许我能在这几年拥有一段爱情，但我不敢开始，也太想开始。</p>
<p>我害怕拥有，害怕失去。</p>
<p>害怕拥有他阻碍了我的发展，害怕失去他丢失了好不容易好转的我。</p>
</br>

<p>2021.11.1 9:30</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>曾有一段感情挥之不去，暗自回忆徒添伤感</title>
    <url>/2021/01/16/%E6%9B%BE%E6%9C%89%E4%B8%80%E6%AE%B5%E6%84%9F%E6%83%85%E6%8C%A5%E4%B9%8B%E4%B8%8D%E5%8E%BB%EF%BC%8C%E6%9A%97%E8%87%AA%E5%9B%9E%E5%BF%86%E5%BE%92%E6%B7%BB%E4%BC%A4%E6%84%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-YAKhguvX" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1372350500" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<script>
console.log("曾有一段感情挥之不去，暗自回忆徒添伤感");
console.log("曾偶遇一位求学者，志同道合，一见如故。");
console.log("曾感谢一位旅行者，不远千里，与之相会。");
console.log("曾喜欢一位医者，羞于启齿，睡梦难免。");
console.log("曾为一位友人庆幸，终遇良人，雨意云情。");
console.log("曾为一位友人担忧，韦编三绝，劳身焦思。");
console.log("曾为一位友人惋惜，学业爱情，未能兼得。");
console.log("曾有一段感情挥之不去，梦境与回忆交织相融，亦真亦幻,却是只感动了自己。");
</script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>月亮与六便士</title>
    <url>/2021/06/25/%E6%9C%88%E4%BA%AE%E4%B8%8E%E5%85%AD%E4%BE%BF%E5%A3%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>满地都是六便士，而你确抬头望向月亮</p>
</blockquote>
<p>书评都在微信读书里，这里我就不搬运了啊，或者等有兴趣的话。;-)</p>
<span id="more"></span>

<blockquote>
<p>如今，人们对斯特里克兰德的评价非常高，这在过去几乎是无法想象的。那时如果有人为他辩护或说几句好话，那么这个人一定会被大众当作性情古怪的人。在今天的人们看来，他的缺点不是令珍珠蒙尘的缺陷，而是优点的附属品，和优点一样重要。</p>
</blockquote>
<blockquote>
<p>人类生来就会制造神话，对于优秀的人物身上发生的未解事件，人们往往喜欢编造出各类神话传奇来解释。这大概是因为日常生活太过平淡无奇，人们渴望给它增添一抹浪漫主义色彩。</p>
</blockquote>
<blockquote>
<p>为了心灵获得宁静，一个人必须每天做两件不喜欢的事情。</p>
</blockquote>
<blockquote>
<p>以前我们还年轻，总是羞于表达内心的情感，因此习惯以彬彬有礼的外表伪装自己，而今天的情形已经截然不同了。</p>
</blockquote>
<blockquote>
<p>“为什么讨人喜欢的女人总是嫁给头脑不好的人呢？”<br>“因为聪明的男人是不会娶讨人喜欢的女人的。”</p>
</blockquote>
<blockquote>
<p>善于同情他人本身就是很难得的事情，但是有很多人会滥用自己的同情心，看到朋友遭受不幸时，他们恨不得把自己的爱心全掏给对方，这样反而惹人讨厌。同情心理应是一口油井，自己就能喷出油来；但是喜欢把同情显露在脸上的人却总是让这口井喷的像火山一样奔放，导致对方陷入难堪的境地。</p>
</blockquote>
<blockquote>
<p>虽然这种生活有一种平淡的幸福，也符合社会主流价值观，但我的血液却叫嚣着还不够狂放。在这种宁静的幸福生活下面似乎掩藏着什么可怖的东西，令人万分恐惧。比起一成不变的日子，我更希望生活中时时涌动着强烈的变迁和巨大的刺激。我非常乐于攀登陡峭的山崖，奔赴潜藏暗礁的海滩。</p>
</blockquote>
<blockquote>
<p>社会是一个有机整体，不是所有人都能够吸引人的注意力，有些人只构成社会的一部分，不可能脱离它而独自生活。</p>
</blockquote>
<blockquote>
<p>当时我太年轻了，还不清楚人性本来就充满了矛盾，这个世界不是非黑即白的，真挚中也包含着一些做作，高尚中也有一些卑鄙，即使是邪恶，也蕴藏这一些美德。</p>
</blockquote>
<blockquote>
<p>“我跟你说，我非得画画儿不可，我必须这么做，对一个落水的人来讲，他会不会游泳都不是最重要的，能挣扎出去，才是第一位的，否则他就会淹死。”</p>
</blockquote>
<blockquote>
<p>现在回想起来，我觉得他当时看不到这些浮华的事物，他的眼里只有那些能够触及灵魂深处的东西。</p>
</blockquote>
<blockquote>
<p>良心监视着我们，它既忠实地维护着主人的尊严，又把人们置于社会的大框架之下，凡事以社会利益为先。它是维系个人与整体的纽带。人们总是告诫自己，个人利益不是最重要的，肯定有一种利益是凌驾于它之上的。这种思考方式的结果，就是人们无形中把自己看轻了。人们把这种至高无上的利益抬上了王座，自己则像是歌功颂德的大臣一样虔诚地匍匐在它脚下。人们为拥有良心的自己感到无比骄傲，自诩社会的一员。然后他们就会理所当然地指责那些在他们看来没有良心的人，让他们不敢反抗自己。</p>
</blockquote>
<blockquote>
<p>其实，一个人可以兼具卑鄙与伟大、邪恶与善良。</p>
</blockquote>
<blockquote>
<p>她是个聪明的女人，深知一个道理：她如果总是把不幸挂在嘴边，摆出一副可怜相，反而会招人厌烦的。所以当同情她的朋友邀请她去做客时，她总是表现得十分得体。比起诉说自己的不幸，她更愿意倾听别人的心事。</p>
</blockquote>
<blockquote>
<p>高尚之举背后，可能是一颗狭隘之心。灾难往往会让人们的报复心更强。</p>
</blockquote>
<blockquote>
<p>善良过头就是愚蠢，从那些受他恩惠却反咬一口的人身上就能看出这一点。</p>
</blockquote>
<blockquote>
<p>美既美妙又奇特，它的产生不是一蹴而就的，需要经过艺术家精细的雕琢。对，艺术家要经受灵魂的考验，才能创造出一件稀世之宝，这就是美。美诞生于世，本来也不会被所有的人认识。要想认识它，就必须经历一番同样的冒险。对于别人演唱的一段优美旋律，你要是想好好品味一遍，就必须具备相关的知识、敏锐的洞察力和丰富的想象力。</p>
</blockquote>
<blockquote>
<p>“过去的事我已经不再回想了，我要抓住现在，只有现在才是永恒的。”</p>
</blockquote>
<blockquote>
<p>我尊重天才，因为世界上没有什么比天才更奇妙了。可是身怀天分也是一种负担，我们必须包容他们，耐心地对待他们。</p>
</blockquote>
<blockquote>
<p>我爱她胜过爱我自己。我认为，在爱情方面是不应该考虑自尊心的问题的，否则就只能证明一件事：其实你最爱的人还是你自己。</p>
</blockquote>
<p>这我要插一句，爱自己胜过爱一切。只有爱自己，才能更好的爱别人。</p>
<blockquote>
<p>一个女人嫁给一个说得过去的男人，而她心里又暂时没有对别的什么人产生感情，那么只要他们相处一定的时间，她就会对他产生感情，并自认为这就是爱情，而且大众的看法也是这样的。但是，这种感情难道真的是爱情吗？我认为，它是一种综合物：包括对安稳生活的满足、对家庭财产的骄傲，对被人需要的欣喜，以及对组建家庭的得意。女人们天性善良、爱慕虚荣，所以她们认为这种感情很有意义。但是，事情并不是这样的。这种感情可谓苍白无力，根本无法抵挡真正的爱情风暴。是的，爱情是冲动的热情。</p>
</blockquote>
<blockquote>
<p>女人就是这样的生物，她对待一个自己不爱的男人会比对其他人残忍得多。</p>
</blockquote>
<blockquote>
<p>人的外表和灵魂未必是统一的。</p>
</blockquote>
<blockquote>
<p>在实际生活中，我们会发现，那些自己做了错事从而招致灾祸的人，都明白责任全在自己，却总是尽力逃避追责，不想承担后果。</p>
</blockquote>
<blockquote>
<p>女人们总是因为爱情而想不开，甚至为此轻视生命自寻短见，但是她们通常会注意分寸，以免真的导致自杀。她们往往只是希望引起别人的同情。</p>
</blockquote>
<blockquote>
<p>这个世界是残酷的。我们生来就不知道活着的意义，我们死后也不知道会去往何方。我们必须向生活低下头颅，体味孤独的真谛。我们最好在生活中默默无闻，不要引起命运的关注。淳朴的爱情最动人，我们应该追求的正是这种爱情。比起知识，还是愚昧更能让爱情维持到地久天长。我们应该沉默不语，待在自己的一方小天地里，做一个性情温顺的人。生活的智慧就在于此。</p>
</blockquote>
<p>这是施特略夫的话，但作者还有我都不认同他这种观点。</p>
<blockquote>
<p>我很清楚一件事：人们总是对美大谈特谈，其实根本不了解美的含义；“美”这个词用得太频繁，已经失去了原先的崇高含义了。人们能说出一件衣服的美，一只动物的美，一篇文章的美，人们可以用“美”来形容任何事物，但当他们见到真正的美时，却辨认不出它了。因为他们习惯了夸大那些本就不美的事物，所以感受力已经变得十分迟钝了。</p>
</blockquote>
<blockquote>
<p>“女人能够原谅男人对她造成的伤害，”他说，“但是始终无法原谅男人为她做出的牺牲。”</p>
</blockquote>
<blockquote>
<p>通常来说，在进行社交的时候，人们只会让你看到他希望别人看到他的样子，所以你只能从他无意识的一些小动作、小习惯，或者不经意间在面颊上流露过的一丝情绪来对他进行推断和揣测。一个人倘若将面具戴久了，可能就摘不下来了，久而久之就会变成和自己的面具一样的人。</p>
</blockquote>
<blockquote>
<p><strong>人生而孤独。每个人都与众不同并且孤立无援，就像一座孤岛想要与外界取得联系的话就必须从瞭望台发射信号；这些信号大多是没有任何共通意义的，每个信号都独立又模糊，时而存在时而消失，相当不稳定。我们总是尝试着想要把自己岛上的宝藏赠送给人们，但是大部分人好像并没有能力来接收这些宝藏。所以我们大部分时间都是独自度过的，哪怕身边就有人陪伴也依旧是孤独的个体，既无法融入其他人的生命里，也无法坦然地接受别人的融入。好像互相都是陌生人一样。哪怕有再美妙再神奇的事情正在发生着，我们仍旧只能自己感受而无法向旁人诉说，若是非要想办法表示出来，那你所表示出来的东西也一定是相当庸俗且了无生趣的。每个人的脑子里对于这个世界都充满着各种看法和观点，但是最终说出口的却只有“屋子里有一把园丁的姑母的伞”这类的家长里短，毫无新意。</strong></p>
</blockquote>
<blockquote>
<p>在对待爱情这个问题上，女人跟男人最大的不同就是，女人是每时每刻都陷在恋爱的情绪里不可自拔，而男人则是有空了才会去考虑它。</p>
</blockquote>
<blockquote>
<p>生活是杂乱不堪的，充斥着种种荒诞可笑的、低俗龌龊的事情，它只会把人们逗得发笑，但是他却一边笑着一边哀伤着。</p>
</blockquote>
<blockquote>
<p>但是这些包裹着你、让你难以忘怀的景象中却总蕴含着某些神奇的东西。于是，你很厌恶这种并不熟悉的原始力量，但同时，你又被它的神秘深深地吸引。你在这里寻不到任何有关文明和体面的东西，这里只有灰暗的现实，它被一种喧嚣热闹而又悲凉惨淡的氛围笼罩着。</p>
</blockquote>
<blockquote>
<p>他只不过是去做自己想做的事，在一个宁静的环境里，不追名逐利，过好自己的生活，这真的是毁了自己吗？反之，成为一个有名的医生，娶一位貌美的妻子，过着优越的生活，难道就是成功？我认为，关键在于他认为生活具有怎样的意义，在于他认为自己应该尽怎样的社会义务，在于他对自己是怎样的要求。</p>
</blockquote>
<blockquote>
<p>如果你不跟一个男人在一起过日子，你就永远不知道他的为人。</p>
</blockquote>
<blockquote>
<p>这是一个寂静的地方，仿佛与世隔绝了一般，抬头看看湛蓝色的天空和四周青葱的树木，心情就会变得格外沉静。这里有着怎么看都看不完的各种色彩，也有着沁人心脾的芳香，还有着澄澈舒适的空气，我不知道该怎么形容这个美好到极致的地方。</p>
</blockquote>
<blockquote>
<p>不过，海水拍打礁石的声音才是真正一刻也不停息的，还好你听不见。闭上眼睛，你能感受到静谧中的幽幽花香，令人心醉。这是多么美丽的夜晚，你陶醉在其中，感受到自己的灵魂仿佛想要摆脱肉体的束缚。你忽然有一种感觉：你的灵魂似乎随时都有可能飘到夜空中，你觉得就连面目可憎的死神也变得和蔼可亲了。”</p>
</blockquote>
<blockquote>
<p><strong>世界上很多人为了他们的理想而奋斗一生，但最终能达到目标的人只有少数。我们没有野心，过着简单淳朴的生活。我们也有自己的骄傲。我们现在的生活是凭自己的双手打拼出来的，我们想到这一点时，就会感到无比的骄傲。我们从不嫉妒别人，因为我们对自己的生活已经心满意足。</strong></p>
</blockquote>
<blockquote>
<p>人们的本性就是如此。因为人们无法消除心中的恐惧，所以才会变得残酷无情</p>
</blockquote>
<blockquote>
<p>这个迷人的小岛路过了我的生命，而我又将路过它。如果将人生的旅程看成是海上航行，那么此时我的生命之船就是在向下一个地点进发。同时我也能感受到，自己离那块名为死亡的彼岸更近了一步。</p>
</blockquote>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>杂谈</title>
    <url>/2021/10/05/%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-QixCHmzo" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1879348415" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>

<p><strong>幸福是不可以通过直接追求而获得的。</strong></p>
<p>如果以赚钱为目的去做生意的话，永远也赚不来钱，或者永远也赚不到大钱。你只有以你做的这个产品为目的，你才能有可能在这个过程当中，赚到所谓的钱。</p>
<p>追求钱也好，幸福也好，爱情也好。这些都是不能直接去追求的，他们本身就很缥缈，很概念化，没有一个标准。</p>
<p>但是我们可以追求自己的理想，或者自己想做的事情。通过追求这些来间接达到追求金钱、幸福和爱情等等。</p>
<p>所以才有了“爱自己才能爱别人”，一味的对别人好，也只是在追求这个幸福的过程，爱情的过程而已。追求的太纯粹了，反而失去了自我。</p>
<span id="more"></span>

<p><strong>幸福也不是永恒的幸福,而是那一刻的幸福</strong></p>
<p>当我挑灯夜战准备考试最后成功的时候，成功的那一刻是幸福的，或者是那一段时间是幸福的。但之后还有更多的挑战在等待着我们。</p>
<p>我们希望这种幸福可以延续，我们希望可以获得更多的这样的幸福，但幸福从来不是一个永恒的状态，他就是那一刻的状态，他就是那一念的状态。</p>
<p>在现当代，看不清这个事情最惨烈的一个群体就是，痴情的女子。</p>
<p>我很喜欢西方的婚礼，他们大部分都会在教堂里去举行。他要以上帝之名，来见证我们这段婚姻。</p>
<p>所以这个时候一般神父就会问这个新郎：你是不是愿意娶你眼前的这位女子为妻，并与她缔结婚姻。不管贫穷还是富有，不管健康还是疾病，你要永远的爱她、守护她、接受她，永远的矢志不渝直到生命的尽头。</p>
<p>新郎肯定会说我愿意，这时候的新娘一定会感动的痛哭流涕。可是呢，这样的事情过去了一年两年三年之后，两人的争吵变得越来越多，这个妻子就会拿当初的事情来说事：你当初说过你会永远爱我的，你现在怎么这样了。</p>
<p>有的更严重的想法会说：你就是一个渣男，你就是骗我的。</p>
<p>其实即便人家是一个渣男。我们也应该做一个清醒的女王，<strong>你怎么会把誓言这种事情当真呢？</strong>，他跟你说永远的时候就是永远啊，只不过那个永远只是代表那一刻的永远，在那一刻你就是他的世界。</p>
<p>所以，不要为爱情冲昏了头脑，我们都知道这些事情是很难办到的。自己都不行，何况去要求他人。所以我从来或者很少承诺自己办不到的事情，或者是誓言。因为我知道，这很难，说的不过都是空话而已。</p>
<p><strong>所以说，痴情的人没必要，为守护一个当初本就不切实际的誓言，把一刻当成了永远，去留恋一辈子。</strong>如果你们分手了，离婚了，那下一个更好。</p>
<p>世界没有真正的永恒，何况是善变的人。我们就是在这种状态中频繁转变的，又为什么要奢求这种幸福的状态让它持久呢？没有可能的吧！</p>
<p><strong>我们追求幸福的体验其实就是当你全神贯注去做一件事情的时候，只有通过这件事情，你才能过滤掉那些干扰你的信息。</strong></p>
<blockquote>
<p>以上内容来自“杨一哟”，只有一点点自己的见解。</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2021/04/20/%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。<strong>先进后出</strong></p>
<span id="more"></span>

<p><img src="1.png"></p>
<p>栈允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。</p>
<h4 id="栈的演示"><a href="#栈的演示" class="headerlink" title="栈的演示"></a>栈的演示</h4><p><a href="https://visualgo.net/zh/list">Visualgo</a>这个网站，我们可以看到整个数据结构的变化过程。可以通过左下角的按钮调慢演示过程。可能也自己动手 code 实现了过程，那么再在网站上演示一下元素的各种操作过程，会带来一些更直观的印象。</p>
<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>栈属于常见的一种线性结构，对于进栈和退栈而言，时间复杂度都为 O(1)</p>
<h4 id="基本功能介绍"><a href="#基本功能介绍" class="headerlink" title="基本功能介绍"></a>基本功能介绍</h4><p>在接下来的内容里，我们将逐步介绍栈的具体功能是如何实现的。</p>
<p><strong>1. 创建一个 Stack 的类</strong></p>
<p>对栈进行初始化参数设计</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, limit=<span class="number">10</span></span>):</span></span><br><span class="line">        self.stack = []  <span class="comment"># 存放元素</span></span><br><span class="line">        self.limit = limit  <span class="comment"># 栈容量极限</span></span><br></pre></td></tr></table></figure>

<p><strong>2. push 进栈</strong></p>
<p>压入 push ：将新元素放在栈顶</p>
<p>当新元素入栈时，栈顶上移，新元素放在栈顶。</p>
<p>具体实现代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    <span class="comment"># 判断栈是否溢出</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt;= self.limit:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&#x27;超出栈容量极限&#x27;</span>)</span><br><span class="line">    self.stack.append(data)</span><br></pre></td></tr></table></figure>

<p><strong>3. pop 退栈</strong></p>
<p>弹出 pop ：从栈顶移出一个数据</p>
<ul>
<li>栈顶元素拷贝出来</li>
<li>栈顶下移</li>
<li>拷贝出来的栈顶作为函数返回值</li>
</ul>
<p>具体实现代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.stack:</span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&#x27;pop from an empty stack&#x27;</span>)  <span class="comment"># 空栈不能被弹出</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 添加其他函数</strong></p>
<p>peek : 查看堆栈的最上面的元素</p>
<p>is_empty : 判断栈是否为空</p>
<p>size : 返回栈的大小</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.stack:</span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">bool</span>(self.stack)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(self.stack)</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, limit=<span class="number">10</span></span>):</span></span><br><span class="line">        self.stack = []  <span class="comment"># 存放元素</span></span><br><span class="line">        self.limit = limit  <span class="comment"># 栈容量极限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="comment"># 判断栈是否溢出</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt;= self.limit:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;超出栈容量极限&#x27;</span>)</span><br><span class="line">        self.stack.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.stack:</span><br><span class="line">            <span class="keyword">return</span> self.stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 空栈不能被弹出元素</span></span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;pop from an empty stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 查看栈的栈顶元素（最上面的元素）</span></span><br><span class="line">        <span class="keyword">if</span> self.stack:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 查看堆栈的最上面的元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">bool</span>(self.stack判断栈是否溢)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 返回栈的大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack)</span><br></pre></td></tr></table></figure>

<h4 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h4><p>Stack（栈）在教科书中有一些非常经典的应用，例如：</p>
<ul>
<li>一些其他有趣的应用程序但没有用于教学目的</li>
<li>括号匹配</li>
<li>后缀计算器</li>
</ul>
<h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p>检查括号是否完全匹配</p>
<p>在这个实验中，我们要求使用一个堆栈检查括号字符串是否平衡</p>
<p>根据栈的结构特点，结合 stack 代码，完成以下功能的实现。</p>
<p><strong>有效括号字符串</strong>需满足：</p>
<ul>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>注意空字符串可被认为是有效字符串。</li>
</ul>
<p><strong>举例：</strong></p>
<p>((())): True</p>
<p>((()): False</p>
<p>(())): False</p>
<p><strong>目标：</strong></p>
<ol>
<li>使用一个堆栈作为数据结构</li>
<li>来检查括号字符串是否完全匹配</li>
</ol>
<p><strong>参考代码</strong></p>
<p>注意：请务必自己独立思考解决问题之后再对照参考答案，一开始直接看参考答案收获不大。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, limit=<span class="number">10</span></span>):</span></span><br><span class="line">        self.stack = []  <span class="comment"># 存放元素</span></span><br><span class="line">        self.limit = limit  <span class="comment"># 栈容量极限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="comment"># 判断栈容量是否超出范围</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt;= self.limit:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;超出栈容量极限&#x27;</span>)</span><br><span class="line">        self.stack.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.stack:</span><br><span class="line">            <span class="keyword">return</span> self.stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 空栈不能弹出元素</span></span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;pop from an empty stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span>  <span class="comment"># 查看栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span> self.stack:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span>  <span class="comment">#　判断栈是否为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">bool</span>(self.stack)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span>  <span class="comment"># 返回栈的大小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span>  <span class="comment"># 展示堆栈</span></span><br><span class="line">        <span class="keyword">return</span> self.stack</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">balanced_parentheses</span>(<span class="params">parentheses</span>):</span></span><br><span class="line">    stack = Stack(<span class="built_in">len</span>(parentheses))</span><br><span class="line">    <span class="keyword">for</span> parenthesis <span class="keyword">in</span> parentheses:</span><br><span class="line">        <span class="keyword">if</span> parenthesis == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.push(parenthesis)</span><br><span class="line">            <span class="comment"># print(stack.show()) 帮助理解</span></span><br><span class="line">        <span class="keyword">elif</span> parenthesis == <span class="string">&#x27;)&#x27;</span>:   </span><br><span class="line">            <span class="keyword">if</span> stack.is_empty():   </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            stack.pop()</span><br><span class="line">            <span class="comment"># print(stack.show()) 帮助理解</span></span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    examples = [<span class="string">&#x27;((()))&#x27;</span>, <span class="string">&#x27;((())&#x27;</span>, <span class="string">&#x27;(()))&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Balanced parentheses demonstration:\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> example <span class="keyword">in</span> examples:</span><br><span class="line">        <span class="built_in">print</span>(example + <span class="string">&#x27;: &#x27;</span> + <span class="built_in">str</span>(balanced_parentheses(example)))</span><br></pre></td></tr></table></figure>

<p>打开 terminal 终端 运行以下命令即可验证结果。后续课程不再提醒如何运行程序，请大家根据个人需求自行安排。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 balanced_parentheses.py</span><br></pre></td></tr></table></figure>

<p><strong>解析</strong></p>
<p>去除上面<code>print(stack.show())</code>代码的注释，将打印下面的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[]</span><br><span class="line">((())): <span class="literal">True</span></span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]       </span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]  </span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">((()): <span class="literal">False</span></span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[]</span><br><span class="line">(())): <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>可以看出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> parenthesis == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.push(parenthesis)</span><br></pre></td></tr></table></figure>

<p>在循环中，如果遇到 ‘(‘ 就会被放入堆栈中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> parenthesis == <span class="string">&#x27;)&#x27;</span>:   </span><br><span class="line">            <span class="keyword">if</span> stack.is_empty():   </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            stack.pop()</span><br></pre></td></tr></table></figure>

<p>如果遇到 ‘)’ 就会从堆栈中去除一个符号 ‘(‘ 。</p>
<p>所以，”((()))” 符号，入栈三个 ‘(‘ 符号，因’)’循环判断三次，即 ‘(‘ 入栈三次，出栈三次，结果为空</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<p>“((())” 符号，入栈三个 ‘(‘ 符号，因’)’循环判断两次，即出栈两次，剩余一个’(‘ 。结束循环后判断栈是否为空 return stack.is_empty() ，该栈不为空，返回False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;(&#x27;</span>]       </span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]  </span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>“(())” 符号，入栈两个 ‘(‘ 符号，因’)’循环判断三次，即出栈三次，程序中加入了if语句判断，是否为空，防止程序以外终止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<p>在第二次出栈的时候，该栈已为空栈，第三次出栈则会触发.pop()方法的提示，’pop from an empty stack’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> parenthesis == <span class="string">&#x27;)&#x27;</span>:   </span><br><span class="line">	<span class="keyword">if</span> stack.is_empty():   </span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>所以if stack.is_empty() 提前判断了该栈，直接返回False</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>python数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>梦游天姥吟留别</title>
    <url>/2021/01/04/%E6%A2%A6%E6%B8%B8%E5%A4%A9%E5%A7%A5%E5%90%9F%E7%95%99%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-LEsufjPo" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="003xZpo83ch2FN" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<center>
梦游天姥吟留别
</br>
海客谈瀛洲，烟涛微茫信难求；</br>
越人语天姥，云霞明灭或可睹。</br>
天姥连天向天横，势拔五岳掩赤城。</br>
天台四万八千丈，对此欲倒东南倾。</br>
我欲因之梦吴越，一夜飞度镜湖月。</br>
湖月照我影，送我至剡溪。</br>
<span id="more"></span>
谢公宿处今尚在，渌水荡漾清猿啼。</br>
脚著谢公屐，身登青云梯。</br>
半壁见海日，空中闻天鸡。</br>
千岩万转路不定，迷花倚石忽已暝。</br>
熊咆龙吟殷岩泉，栗深林兮惊层巅。</br>
云青青兮欲雨，水澹澹兮生烟。</br>
列缺霹雳，丘峦崩摧。</br>
洞天石扉，訇然中开。</br>
青冥浩荡不见底，日月照耀金银台。</br>
霓为衣兮风为马，云之君兮纷纷而来下。</br>
虎鼓瑟兮鸾回车，仙之人兮列如麻。</br>
忽魂悸以魄动，恍惊起而长嗟。</br>
惟觉时之枕席，失向来之烟霞。</br>
世间行乐亦如此，古来万事东流水。</br>
别君去兮何时还？且放白鹿青崖间。须行即骑访名山。</br>
安能摧眉折腰事权贵，使我不得开心颜！</br></center>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟CPU内存占用</title>
    <url>/2021/12/13/%E6%A8%A1%E6%8B%9FCPU%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="模拟CPU占满"><a href="#模拟CPU占满" class="headerlink" title="模拟CPU占满"></a>模拟CPU占满</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in `seq 1 $(cat /proc/cpuinfo |grep &quot;physical id&quot; |wc -l)`; do dd if=/dev/zero of=/dev/null &amp; done</span><br></pre></td></tr></table></figure>

<h4 id="模拟CPU只占两核"><a href="#模拟CPU只占两核" class="headerlink" title="模拟CPU只占两核"></a>模拟CPU只占两核</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in `seq 1 2`; do dd if=/dev/zero of=/dev/null &amp; done</span><br></pre></td></tr></table></figure>

<h4 id="网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）"><a href="#网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）" class="headerlink" title="网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）"></a>网络异常，可通过以下命令在接口服务端服务器设置（记住测试完删除命令否则一直生效）</h4><span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为延迟 100 毫秒发送。</span></span><br><span class="line">1.tc qdisc add dev eth0 root netem delay 100ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将删除 eth0 网卡 的传输设置为延迟 100 毫秒发送。</span></span><br><span class="line">2.tc qdisc del dev eth0 root netem delay 100ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10ms 该命令将 eth0 网卡 的传输设置为延迟 100ms ± 10ms (90 ~ 110 ms 之间的任意值)发送。</span></span><br><span class="line">3.tc qdisc add dev eth0 root netem delay 100ms 10ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为 100ms ,同 时,大约有 30% 的包会延迟 ± 10ms 发送。</span></span><br><span class="line">4.tc qdisc add dev eth0 root netem delay 100ms 10ms 30%</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为随机丢掉 1% 的数据包</span></span><br><span class="line">5.tc qdisc add dev eth0 root netem loss 1%</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令将 eth0 网卡 的传输设置为随机丢掉 1% 的数据包,成功率为 30%</span></span><br><span class="line">6.tc qdisc add dev eth0 root netem loss 1% 30%</span><br></pre></td></tr></table></figure>

<h4 id="查看已经配置的网络条件"><a href="#查看已经配置的网络条件" class="headerlink" title="查看已经配置的网络条件"></a>查看已经配置的网络条件</h4><p><code>tc qdisc show dev eth0</code></p>
<h4 id="查看已经配置的网络条件-1"><a href="#查看已经配置的网络条件-1" class="headerlink" title="查看已经配置的网络条件"></a>查看已经配置的网络条件</h4><p><code>tc qdisc del dev eth0 root</code></p>
<h4 id="监控CPU、内存"><a href="#监控CPU、内存" class="headerlink" title="监控CPU、内存"></a>监控CPU、内存</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 总的CPU</span></span><br><span class="line">nohup top -b -d 10 -n 240 | grep &quot;%Cpu(s)&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 总的内存</span></span><br><span class="line">nohup top -b -d 10 -n 240 | grep &quot;KiB Mem&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程监控</span></span><br><span class="line">nohup top -b -d 10 -n 180 | grep 进程号</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>nohup</code> 后台运行</p>
</li>
<li><p><code>-d</code> 几秒钟提取一次信息</p>
</li>
<li><p><code>-n</code> 总的提取次数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>氓</title>
    <url>/2021/10/07/%E6%B0%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><center>
氓之蚩蚩，抱布贸丝。<br>
匪来贸丝，来即我谋。<br>
送子涉淇，至于顿丘。<br>
匪我愆期，子无良媒。<br>
将子无怒，秋以为期。<br>

<span id="more"></span>

<br>

<p>乘彼垝垣，以望复关。<br>不见复关，泣涕涟涟。<br>既见复关，载笑载言。<br>尔卜尔筮，体无咎言。<br>以尔车来，以我贿迁。</p>
<p>桑之未落，其叶沃若。<br>于嗟鸠兮，无食桑葚！<br>于嗟女兮，无与士耽！<br>士之耽兮，犹可说也。<br>女之耽兮，不可说也。</p>
<p>桑之落矣，其黄而陨。<br>自我徂尔，三岁食贫。<br>淇水汤汤，渐车帷裳。<br>女也不爽，士贰其行。<br>士也罔极，二三其德。</p>
<p>三岁为妇，靡室劳矣。<br>夙兴夜寐，靡有朝矣。<br>言既遂矣，至于暴矣。<br>兄弟不知，咥其笑矣。<br>静言思之，躬自悼矣。</p>
<p>及尔偕老，老使我怨。<br>淇则有岸，隰则有泮。<br>总角之宴，言笑晏晏。<br>信誓旦旦，不思其反。<br>反是不思，亦已焉哉！</p>
</center>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言第三版-答案</title>
    <url>/2021/02/01/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88-%E6%A3%80%E6%B5%8B%E7%82%B9%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章 基础知识"></a>第一章 基础知识</h2><h3 id="检测点-1-1"><a href="#检测点-1-1" class="headerlink" title="检测点 1.1"></a>检测点 1.1</h3><ol>
<li>1个CPU的寻址能力为8KB，那么它的地址总线的宽度为____。<br><strong>13</strong><br>解析：CPU在内存中寻址的最小单位是Byte（字节），8KB = 2^13B，因此地址总线的宽度为13.</li>
<li>1KB的存储器有____个存储单元。存储单元的编号从____到____。<br><strong>1024 0 1023</strong></li>
<li>1KB的存储器可以存储____个bit，____个Byte。<br><strong>2^13 2^10</strong></li>
<li>1GB、1MB、1KB分别是____________Byte<br><strong>2^30 2^20 2^10</strong></li>
<li>8080、8088、80286、80386的地址总线宽度分别为16根、20根、24根、32根，则他们的寻址能力分别为____（KB）、____（MB）、____（MB）、____（GB）。<br><strong>64 1 16 4</strong></li>
<li>8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为：____（B）、____（B）、____（B）、____（B）、____（B）。<br><strong>1 1 2 2 4</strong></li>
<li>从内存中读取1024字节的数据，8086至少要读取____次，80386至少要读取____次。<br><strong>512 256</strong></li>
<li>在存储器中，数据和程序以____形式存放。<br><strong>二进制</strong></li>
</ol>
<span id="more"></span>

<h2 id="第二章-寄存器"><a href="#第二章-寄存器" class="headerlink" title="第二章 寄存器"></a>第二章 寄存器</h2><h3 id="检测点-2-1"><a href="#检测点-2-1" class="headerlink" title="检测点 2.1"></a>检测点 2.1</h3><ol>
<li><p>写出每条汇编指令执行后相关寄存器中的值</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">62627</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">31H</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">23H</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">826CH</span>		<span class="built_in">BX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="built_in">ax</span>		<span class="built_in">CX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">bh</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="built_in">bl</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="number">ah</span>, <span class="number">ah</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="number">6</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="built_in">al</span>		<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cx</span>		<span class="built_in">AX</span> =</span><br></pre></td></tr></table></figure>

<p>F4A3H 31A3H 3123H 6246H 826CH 6246H 826CH 04D8H 0482H 6C82H D882H D888H D810H 6246H</p>
</li>
<li><p>只能使用目前学过的汇编指令，最多使用4条指令，编程计算2的4次方。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="检测点-2-2"><a href="#检测点-2-2" class="headerlink" title="检测点 2.2"></a>检测点 2.2</h3><ol>
<li>给定段地址为0001H，仅通过变化偏移地址寻址，CPU的寻址范围为_____到_____。<br><strong>00010H到1000FH</strong></li>
<li>有一数据存放在内存20000H的单元中，现给定段地址为SA，若想用偏移地址寻到此单元。则SA应满足的条件是：最小为_____，最大为_____。提示，反过来思考一下，当段地址给定为多少，CPU无论怎么变化偏移地址都无法寻到20000H单元？<br><strong>1001F 2000H</strong><br><strong>20000H - 0FFFFH = 10001H</strong><br><strong>20000H - 00000H = 20000H</strong></li>
</ol>
<h3 id="检测点-2-3"><a href="#检测点-2-3" class="headerlink" title="检测点 2.3"></a>检测点 2.3</h3><p>下面的3条指令执行后，CPU几次修改IP？都是在什么时候？最后IP中的值是多少？</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">sub</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">jmp</span> <span class="built_in">ax</span></span><br></pre></td></tr></table></figure>



<p>修改了四次：</p>
<ol>
<li>第1条指令执行后，IP指向第2条指令</li>
<li>第2条指令执行后，IP指向第3条指令</li>
<li>第3条指令执行后，IP指向第4条指令</li>
<li>JMP指令执行后，IP重新指向第1条指令</li>
</ol>
<h2 id="第三章-寄存器（内存访问）"><a href="#第三章-寄存器（内存访问）" class="headerlink" title="第三章 寄存器（内存访问）"></a>第三章 寄存器（内存访问）</h2><h3 id="检测点-3-1"><a href="#检测点-3-1" class="headerlink" title="检测点 3.1"></a>检测点 3.1</h3><ol>
<li><p>在Debug中，用“d 0:0 1f”查看内存，结果如下。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0000</span>:<span class="number">0000</span> <span class="number">70</span> <span class="number">80</span> F<span class="number">0</span> <span class="number">30</span> EF <span class="number">60</span> <span class="number">30</span> E<span class="number">2</span>-<span class="number">00</span> <span class="number">80</span> <span class="number">80</span> <span class="number">12</span> <span class="number">66</span> <span class="number">20</span> <span class="number">22</span> <span class="number">60</span></span><br><span class="line"><span class="attribute">0000</span>:<span class="number">0010</span> <span class="number">62</span> <span class="number">26</span> E<span class="number">6</span> D<span class="number">6</span> CC <span class="number">2</span>E <span class="number">3</span>C <span class="number">3</span>B-AB BA <span class="number">00</span> <span class="number">00</span> <span class="number">26</span> <span class="number">06</span> <span class="number">66</span> <span class="number">88</span></span><br></pre></td></tr></table></figure>

<p>下面的程序执行前，AX=0，BX=0，写出每条汇编指令执行完后相关寄存器中的值。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="number">0000</span>]			<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, [<span class="number">0001</span>]			<span class="built_in">BX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>			<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="number">0000</span>]			<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, [<span class="number">0002</span>]			<span class="built_in">BX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>			<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, [<span class="number">0004</span>]			<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span>			<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="number">0002</span>]			<span class="built_in">AX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span>			<span class="built_in">BX</span> =</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bl</span>, [000C]			<span class="built_in">BX</span> =</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="built_in">bl</span>			<span class="built_in">AX</span> =</span><br></pre></td></tr></table></figure>

<p>提示，注意ds的设置。</p>
<p>2662H E626H E626H 2662H D6E6H FD48H 2C14H 0 00E6H 0 0026H 000CH</p>
</li>
<li><p>内存中的情况如图3.6所示。<br>各寄存器的初始值：CS=2000H，IP=0，DS=1000H，AX=0，BX=0；<br>(1)写出CPU执行的指令序列（用汇编指令写出）<br>(2)写出CPU执行每条指令后，CS、IP和相关寄存器中的数值。<br>(3)再次体会：数据和程序有区别吗？如何确定内存中的信息哪些是数据，哪些是程序？</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">CS:IP</th>
<th align="center">DS</th>
<th align="center">AX</th>
<th align="center">BX</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mov ax, 6622H</td>
<td align="center">2000:3</td>
<td align="center">1000H</td>
<td align="center">6622H</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">jmp 0ff0:0100</td>
<td align="center">2000:8-&gt;0ff0:0100</td>
<td align="center">1000H</td>
<td align="center">6622H</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">mov ax, 2000H</td>
<td align="center">0ff0:0103</td>
<td align="center">1000H</td>
<td align="center">2000H</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">mov ds, ax</td>
<td align="center">0ff0:0105</td>
<td align="center">2000H</td>
<td align="center">2000H</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">mov ax, [0008]</td>
<td align="center">0ff0:0108</td>
<td align="center">2000H</td>
<td align="center">C389H</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">mov ax, [0002]</td>
<td align="center">0ff0:010B</td>
<td align="center">2000H</td>
<td align="center">EA66H</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>程序和数据没有区别，本质上都是二进制01码，关键在于CPU如何解读。</p>
<h3 id="检测点-3-2"><a href="#检测点-3-2" class="headerlink" title="检测点 3.2"></a>检测点 3.2</h3><ol>
<li><p>补全下面的程序，使其可以将10000H～1000FH中的8个字，逆序复制到20000H～2000FH中。逆序复制的含义如图3.17所示（图中内存里的数据均为假设）。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">__________</span><br><span class="line">__________</span><br><span class="line">__________</span><br><span class="line"><span class="keyword">push</span> [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">push</span> [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">push</span> [<span class="number">4</span>]</span><br><span class="line"><span class="keyword">push</span> [<span class="number">6</span>]</span><br><span class="line"><span class="keyword">push</span> [<span class="number">8</span>]</span><br><span class="line"><span class="keyword">push</span> [A]</span><br><span class="line"><span class="keyword">push</span> [C]</span><br><span class="line"><span class="keyword">push</span> [E]</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">0010H</span></span><br></pre></td></tr></table></figure></li>
<li><p>补全下面的程序，使其可以将10000H～1000FH中的8个字，逆序复制到20000H～2000FH中。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">__________</span><br><span class="line">__________</span><br><span class="line">__________</span><br><span class="line"><span class="keyword">pop</span> [E]</span><br><span class="line"><span class="keyword">pop</span> [C]</span><br><span class="line"><span class="keyword">pop</span> [A]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">8</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">6</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">4</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第六章-包含多个段的程序"><a href="#第六章-包含多个段的程序" class="headerlink" title="第六章 包含多个段的程序"></a>第六章 包含多个段的程序</h2><h3 id="检测点-6-1"><a href="#检测点-6-1" class="headerlink" title="检测点 6.1"></a>检测点 6.1</h3><ol>
<li><p>下面的程序实现依此用内存0:0-0:15单元中的内容改写程序中的数据，完成程序：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</span><br><span class="line"></span><br><span class="line">codesg <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">0123h</span>, <span class="number">0456h</span>, <span class="number">0789h</span>, <span class="number">0abch</span>, <span class="number">0defh</span>, <span class="number">0fedh</span>, <span class="number">0cbah</span>, <span class="number">0987h</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="built_in">bx</span>]</span><br><span class="line">	_________</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">cs</span>:[<span class="built_in">bx</span>], <span class="built_in">ax</span></span><br></pre></td></tr></table></figure></li>
<li><p>下面的程序实现依此用内存0:0-0:15单元中的内容改写程序中的数据，数据的传送用栈来进行。栈空间设置在程序内。完成程序：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</span><br><span class="line">	<span class="built_in">dw</span> <span class="number">0123h</span>, <span class="number">0456h</span>, <span class="number">0789h</span>, <span class="number">0abch</span>, <span class="number">0defh</span>, <span class="number">0fedh</span>, <span class="number">0cbah</span>, <span class="number">0987h</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>, ____</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">push</span> [<span class="built_in">bx</span>]</span><br><span class="line">	____________</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cs</span></span><br><span class="line"><span class="number">24h</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cs</span>:[<span class="built_in">bx</span>]</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第九章-转移指令的原理"><a href="#第九章-转移指令的原理" class="headerlink" title="第九章 转移指令的原理"></a>第九章 转移指令的原理</h2><h3 id="检测点-9-1"><a href="#检测点-9-1" class="headerlink" title="检测点 9.1"></a>检测点 9.1</h3><ol>
<li><p>程序如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">	___________</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, data</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">jmp</span> <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">bx</span>+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>若要使程序中的jmp指令执行后，CS:IP指向程序的第一条指令，在data段中应该定义哪些数据？<br>答案：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dw</span> <span class="number">0</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><p>程序如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dd</span> <span class="number">12345678H</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, data</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> [<span class="built_in">bx</span>], ____</span><br><span class="line">	<span class="keyword">mov</span> [<span class="built_in">bx</span> + <span class="number">2</span>], ____</span><br><span class="line">	<span class="keyword">jmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>补全程序，使jmp指令执行后，CS:IP指向程序的第一条指令。<br>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bx</span></span><br><span class="line"><span class="built_in">cs</span></span><br></pre></td></tr></table></figure>

<p>注意：bx指向低位，bx+2指向高位，低位为IP，而高位为CS。</p>
</li>
<li><p>用Debug查看内存，结果如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2000</span>:<span class="number">1000</span> BE <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> ......</span><br></pre></td></tr></table></figure>

<p>则此时，CPU执行指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">jmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">1000H</span>]</span><br></pre></td></tr></table></figure>

<p>后，(CS)=?，(IP)=?<br>答案：<br>(CS)=0006，(IP)=00BE</p>
</li>
</ol>
<h3 id="检测点-9-2"><a href="#检测点-9-2" class="headerlink" title="检测点 9.2"></a>检测点 9.2</h3><p>补全编程，利用jcxz指令，实现在内存2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存储在dx中。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">s:</span>	__________</span><br><span class="line">	__________</span><br><span class="line">	__________</span><br><span class="line">	__________</span><br><span class="line">	<span class="keyword">jmp</span> short s</span><br><span class="line"><span class="symbol">ok:</span>	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, [<span class="built_in">bx</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span> <span class="comment">;注意这一步的必要性</span></span><br><span class="line"><span class="keyword">jcxz</span> ok</span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">bx</span></span><br></pre></td></tr></table></figure>



<h3 id="检测点-9-3"><a href="#检测点-9-3" class="headerlink" title="检测点 9.3"></a>检测点 9.3</h3><p>补全编程，利用loop指令，实现在内存的2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存储在dx中。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">cl</span>, [<span class="built_in">bx</span>]</span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span></span><br><span class="line">	_________</span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line"><span class="symbol">ok:</span>	<span class="keyword">dec</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inc</span> <span class="built_in">cx</span> <span class="comment">;注意loop的工作原理</span></span><br></pre></td></tr></table></figure>



<h2 id="第十章-CALL和RET指令"><a href="#第十章-CALL和RET指令" class="headerlink" title="第十章 CALL和RET指令"></a>第十章 CALL和RET指令</h2><h3 id="检测点-10-1"><a href="#检测点-10-1" class="headerlink" title="检测点 10.1"></a>检测点 10.1</h3><p>补全程序，实现从内存1000：0000处开始执行指令。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">db</span> <span class="number">16</span> dup (<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">retf</span></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<p>答案：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1000</span><span class="built_in">h</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="检测点-10-2"><a href="#检测点-10-2" class="headerlink" title="检测点 10.2"></a>检测点 10.2</h3><p>下面的程序执行后，ax中的数值为多少？</p>
<table>
<thead>
<tr>
<th align="center">内存地址</th>
<th align="center">机器码</th>
<th align="center">汇编指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1000:0</td>
<td align="center">b8 00 00</td>
<td align="center">mov ax,0</td>
</tr>
<tr>
<td align="center">1000:3</td>
<td align="center">e8 01 00</td>
<td align="center">call s</td>
</tr>
<tr>
<td align="center">1000:6</td>
<td align="center">40</td>
<td align="center">inc ax</td>
</tr>
<tr>
<td align="center">1000:7</td>
<td align="center">58</td>
<td align="center">s: pop ax</td>
</tr>
</tbody></table>
<p>ax中的数值为6，注意执行完call s后，IP先变为6，然后将IP的值压栈，最后跳转至s。</p>
<h3 id="检测点-10-3"><a href="#检测点-10-3" class="headerlink" title="检测点 10.3"></a>检测点 10.3</h3><p>下面的程序执行后，ax中的数值为多少？</p>
<table>
<thead>
<tr>
<th align="center">内存地址</th>
<th align="center">机器码</th>
<th align="center">汇编指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1000:0</td>
<td align="center">b8 00 00</td>
<td align="center">mov ax,0</td>
</tr>
<tr>
<td align="center">1000:3</td>
<td align="center">9a 09 00 00 10</td>
<td align="center">call far ptr s</td>
</tr>
<tr>
<td align="center">1000:8</td>
<td align="center">40</td>
<td align="center">inc ax</td>
</tr>
<tr>
<td align="center">1000:9</td>
<td align="center">58</td>
<td align="center">s: pop ax</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">add ax,ax</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">pop bx</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">add ax,bx</td>
</tr>
</tbody></table>
<p>ax中的数值为1010H，注意执行完call far ptr s后，IP先变为8，然后将CS、IP的值分别为1000和8依此压栈，最后再跳转至s继续执行。</p>
<h3 id="检测点-10-4"><a href="#检测点-10-4" class="headerlink" title="检测点 10.4"></a>检测点 10.4</h3><p>下面的程序执行后，ax中的数值为多少？</p>
<table>
<thead>
<tr>
<th align="center">内存地址</th>
<th align="center">机器码</th>
<th align="center">汇编指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1000:0</td>
<td align="center">b8 06 00</td>
<td align="center">mov ax,6</td>
</tr>
<tr>
<td align="center">1000:3</td>
<td align="center">ff d0</td>
<td align="center">call ax</td>
</tr>
<tr>
<td align="center">1000:5</td>
<td align="center">40</td>
<td align="center">inc ax</td>
</tr>
<tr>
<td align="center">1000:6</td>
<td align="center">58</td>
<td align="center">mov bp,sp</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center">add ax,[bp]</td>
</tr>
</tbody></table>
<p>ax中的数值为0BH，分析方法类似检测点10.2</p>
<h3 id="检测点-10-5"><a href="#检测点-10-5" class="headerlink" title="检测点 10.5"></a>检测点 10.5</h3><ol>
<li><p>下面的程序执行后，ax中的数值为多少？</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">8</span> dup (<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">call</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0eh</span>]</span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>ax中的数值为3，注意ds与ss中存放的段地址相同，在执行了call word ptr ds:[0EH]之后，程序会先将下一条指令inc ax的偏移量压栈，然后跳转到栈顶所指向的指令的位置，即跳转至第一条inc ax的位置，故最后ax的值为3。<br>注意：在使用Debug单步跟踪的时候，由于t命令所导致的中断，而影响了栈中的值。</p>
</li>
<li><p>下面的程序执行后，ax和bx中的数值为多少？</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">8</span> dup (<span class="number">0</span>)</span><br><span class="line">data ends</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="number">0</span>],offset s</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>:[<span class="number">2</span>],<span class="built_in">cs</span></span><br><span class="line">	<span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,offset s</span><br><span class="line">	<span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="built_in">ss</span>:[<span class="number">0ch</span>]     </span><br><span class="line">   	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="built_in">cs</span></span><br><span class="line">	<span class="keyword">sub</span> <span class="built_in">bx</span>,<span class="built_in">ss</span>:[<span class="number">0eh</span>]</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>ax中的数值为1，bx中的数值为0，注意到程序的一开始将a的偏移量和cs放入ss:[0]和ss:[2]中，然后调用call指令，将CS和IP(nop指令的偏移量)依此压栈后跳转到s处继续执行，ax最终为s的偏移量减去nop指令所在位置的偏移量，为1，bx最终为cs的段地址相减，为0。</p>
</li>
</ol>
<h2 id="第十一章-标志寄存器"><a href="#第十一章-标志寄存器" class="headerlink" title="第十一章 标志寄存器"></a>第十一章 标志寄存器</h2><h3 id="检测点-11-1"><a href="#检测点-11-1" class="headerlink" title="检测点 11.1"></a>检测点 11.1</h3><p>写出下面每条指令执行后，ZF、PF、SF等标志位的值</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">ZF</th>
<th align="center">PF</th>
<th align="center">SF</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sub al, al</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">mov al, 1</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">push ax</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">pop bx</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">add al, bl</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">add bl, 10</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">mul al</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<h3 id="检测点-11-2"><a href="#检测点-11-2" class="headerlink" title="检测点 11.2"></a>检测点 11.2</h3><p>写出下面每条指令执行后，ZF、PF、SF、CF、OF等标志位的值</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">CF</th>
<th align="center">OF</th>
<th align="center">SF</th>
<th align="center">ZF</th>
<th align="center">PF</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sub al, al</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">mov al, 10H</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">add al, 90H</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">mov al, 80H</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">add al, 80H</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">mov al, 0FCH</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">add al, 05H</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">mov al, 7DH</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">add al, 0BH</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
</tbody></table>
<h3 id="检测点-11-3"><a href="#检测点-11-3" class="headerlink" title="检测点 11.3"></a>检测点 11.3</h3><ol>
<li><p>补全下面的程序，统计F000:0处32个字节中，大小在[32,128]的数据的个数。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0f000h</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">32</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">bx</span>]</span><br><span class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">32</span></span><br><span class="line">	__________</span><br><span class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">128</span></span><br><span class="line">	__________</span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">dx</span></span><br><span class="line"><span class="symbol">s0:</span>	<span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jb </span><span class="built_in">s0</span></span><br><span class="line"><span class="keyword">ja </span><span class="built_in">s0</span></span><br></pre></td></tr></table></figure></li>
<li><p>补全下面的程序，统计F000:0处32个字节中，大小在(32,128)的数据的个数。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0f000h</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">32</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">bx</span>]</span><br><span class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">32</span></span><br><span class="line">	__________</span><br><span class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">128</span></span><br><span class="line">	__________</span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">dx</span></span><br><span class="line"><span class="symbol">s0:</span>	<span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jna </span><span class="built_in">s0</span></span><br><span class="line"><span class="keyword">jnb </span><span class="built_in">s0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="检测点-11-4"><a href="#检测点-11-4" class="headerlink" title="检测点 11.4"></a>检测点 11.4</h3><p>下面的程序执行后：(ax)=?</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">popf</span> <span class="comment">;将PSW置0(本章所学习的标志位都为0)</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0fff0h</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="number">0010h</span> <span class="comment">;修改相关标志位</span></span><br><span class="line"><span class="keyword">pushf</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span> <span class="comment">;(将PSW保存至ax)</span></span><br><span class="line"><span class="keyword">and</span> <span class="built_in">al</span>, <span class="number">11000101B</span></span><br><span class="line"><span class="keyword">and</span> <span class="number">ah</span>, <span class="number">00001000B</span> <span class="comment">;只考虑CF,PF,ZF,SF,OF五个标志位</span></span><br></pre></td></tr></table></figure>

<p>答案：<br>(ax)=45H</p>
<h2 id="第十二章-内中断"><a href="#第十二章-内中断" class="headerlink" title="第十二章 内中断"></a>第十二章 内中断</h2><h3 id="检测点-12-1"><a href="#检测点-12-1" class="headerlink" title="检测点 12.1"></a>检测点 12.1</h3><ol>
<li>用Debug查看内存，情况如下：<br>0000:0000 68 10 A7 00 8B 01 70 00-16 00 9D 03 8B 01 70 00<br>则3号中断源对应的中断处理程序的入口地址为：<em><strong>*____*</strong></em><br>答案：<br>0070:018B<br>注意高地址存放段地址，低地址存放偏移地址</li>
<li>存储N号中断源对应的中断处理程序入口的偏移地址的内存单元的地址为：<em><strong>*<br>存储N号中断源对应的中断处理程序入口的段地址的内存单元的地址为：*</strong></em><br>答案：4N，4N+2</li>
</ol>
<h2 id="第十三章-int指令"><a href="#第十三章-int指令" class="headerlink" title="第十三章 int指令"></a>第十三章 int指令</h2><h3 id="检测点-13-1"><a href="#检测点-13-1" class="headerlink" title="检测点 13.1"></a>检测点 13.1</h3><ol>
<li><p>在上面的内容中，我们用7ch中断例程实现loop的功能，则上面的7ch中断例程所能进行的最大转移位移为多少？<br>答案：65535</p>
</li>
<li><p>用7ch中断例程完成jmp near ptr s指令的功能，用bx向中断例程传送转移位移。<br>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">jnp:</span>	<span class="keyword">push</span> <span class="built_in">bp</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bp</span>, <span class="built_in">sp</span></span><br><span class="line">	<span class="keyword">add</span> [<span class="built_in">bp</span>+<span class="number">2</span>], <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">pop</span> <span class="built_in">bp</span></span><br><span class="line">	<span class="keyword">iret</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="检测点-13-2"><a href="#检测点-13-2" class="headerlink" title="检测点 13.2"></a>检测点 13.2</h3><p>判断下面说法的正误：</p>
<ol>
<li>我们可以编程改变FFFF:0处的指令，使得CPU不去执行BIOS中的硬件系统检测和初始化程序。<br>错误：FFFF:0处的内容无法修改</li>
<li>int 19h中断例程，可以由DOS提供。<br>错误：此时DOS还未被引导</li>
</ol>
<h2 id="第十四章-端口"><a href="#第十四章-端口" class="headerlink" title="第十四章 端口"></a>第十四章 端口</h2><h3 id="检测点-14-1"><a href="#检测点-14-1" class="headerlink" title="检测点 14.1"></a>检测点 14.1</h3><ol>
<li><p>编程，读取CMOS RAM的2号单元的内容。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">out</span> <span class="number">70h</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">in</span> <span class="built_in">al</span>, <span class="number">71h</span></span><br></pre></td></tr></table></figure></li>
<li><p>编程，向CMOS RAM的2号单元写入0。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">out</span> <span class="number">70h</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">out</span> <span class="number">71h</span>, <span class="built_in">al</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="检测点-14-2"><a href="#检测点-14-2" class="headerlink" title="检测点 14.2"></a>检测点 14.2</h3><p>编程，用加法和位移指令计算(ax)=(ax)*10。<br>提示，(ax)*10=(ax)*2+(ax)*8。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">shl</span> <span class="built_in">ax</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">shl</span> <span class="built_in">bx</span>, <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">bx</span></span><br></pre></td></tr></table></figure>

<h2 id="第十五章-外中断"><a href="#第十五章-外中断" class="headerlink" title="第十五章 外中断"></a>第十五章 外中断</h2><h3 id="检测点-15-1"><a href="#检测点-15-1" class="headerlink" title="检测点 15.1"></a>检测点 15.1</h3><ol>
<li><p>仔细分析一下上面的int 9中断例程，看看是否可以精简一下？<br>其实在我们的int 9中断例程中，模拟int指令调用原int 9中断例程的程序段是可以精简的，因为在进入中断例程后，IF和TF都已经置0，没有必要再进行设置了。对于程序段：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pushf</span></span><br><span class="line"><span class="keyword">pushf</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">and</span> <span class="number">ah</span>, <span class="number">11111100B</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">popf</span></span><br><span class="line"><span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>可以精简为：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pushf</span></span><br><span class="line"><span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>两条指令。</p>
</li>
<li><p>仔细分析上面程序中的主程序，看看有什么潜在的问题？<br>在主程序中，如果在执行设置int 9中断例程的段地址和偏移地址的指令之间发生了键盘中断，则CPU将转去一个错误的地址执行，将发生错误。<br>找出这样的程序段，改写它们，排除潜在的问题。<br>提示，注意sti和cli指令的用法。<br>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cli</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>],offset int9</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>+<span class="number">2</span>],<span class="built_in">cs</span></span><br><span class="line"><span class="keyword">sti</span></span><br></pre></td></tr></table></figure>

<p>以及：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cli</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>]</span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>+<span class="number">2</span>]</span><br><span class="line"><span class="keyword">sti</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="第十六章-直接定址表"><a href="#第十六章-直接定址表" class="headerlink" title="第十六章 直接定址表"></a>第十六章 直接定址表</h2><h3 id="检测点-16-1"><a href="#检测点-16-1" class="headerlink" title="检测点 16.1"></a>检测点 16.1</h3><p>下面的程序将code段中a处的8个数据累加，结果存储到b处的双字中，补全程序。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line">	a <span class="built_in">dw</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">	b <span class="built_in">dd</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</span><br><span class="line">	<span class="keyword">add</span> ____, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">adc</span> ____, <span class="number">0</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">si</span>, ____</span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<p>答案：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[si]</span></span><br><span class="line">word ptr <span class="selector-tag">b</span><span class="selector-attr">[0]</span></span><br><span class="line">word ptr <span class="selector-tag">b</span><span class="selector-attr">[2]</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>


<p>注意word ptr的使用</p>
<h3 id="检测点-16-2"><a href="#检测点-16-2" class="headerlink" title="检测点 16.2"></a>检测点 16.2</h3><p>下面的程序将data段中a处的8个数据累加，结果存储到b处的字中，补全程序。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">es</span>:data</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">a	<span class="built_in">db</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">b	<span class="built_in">dw</span> <span class="number">0</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span>	__________</span><br><span class="line">	__________</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">al</span>, a[<span class="built_in">si</span>]</span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">add</span> b, <span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></span><br></pre></td></tr></table></figure>



<h2 id="第十七章-使用BIOS进行键盘输入和磁盘读写"><a href="#第十七章-使用BIOS进行键盘输入和磁盘读写" class="headerlink" title="第十七章 使用BIOS进行键盘输入和磁盘读写"></a>第十七章 使用BIOS进行键盘输入和磁盘读写</h2><h3 id="检测点-17-1"><a href="#检测点-17-1" class="headerlink" title="检测点 17.1"></a>检测点 17.1</h3><p>“在int 16h中断例程中，一定有设置IF=1的指令”，这种说法对吗？</p>
<p>正确，int 16h中断例程在键盘缓冲区中没有数据时，会等待直到键盘缓冲区中有数据为止，因此，int 16h中需要处理int 9h中断，所以一定有设置IF=1的指令。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汉江</title>
    <url>/2021/05/18/%E6%B1%89%E6%B1%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><center>

<p>汉江&nbsp;&nbsp;&nbsp;&nbsp;杜甫<br></p>
<p>汉江思客归，乾坤一腐儒。<br><br>片云天共远，永夜月同孤。<br><br>落日心犹壮，秋风病欲疏。<br><br>古来存老马，不必取长途。<br></p>
<center>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>江南逢李龟年</title>
    <url>/2021/11/25/%E6%B1%9F%E5%8D%97%E9%80%A2%E6%9D%8E%E9%BE%9F%E5%B9%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-zLwZCAnz" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="816965" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>



<center>
岐王宅里寻常见，</br></br>
崔九堂前几度闻。</br></br>
正是江南好风景，</br></br>
落花时节又逢君。</br>
</center>



<span id="more"></span>





<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="https://www.bilibili.com/video/BV1Mh41147ty?spm_id_from=333.999.0.0"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>测试-搭建iWebShop项目</title>
    <url>/2021/01/21/%E6%B5%8B%E8%AF%95-%E6%90%AD%E5%BB%BAiWebShop%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>目录</p>
<ul>
<li><a href="#about">about</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93">配置数据库</a></li>
<li><a href="#centos%E9%85%8D%E7%BD%AElnmp%E7%8E%AF%E5%A2%83%E5%B9%B6%E9%85%8D%E7%BD%AEiwebshop%E9%A1%B9%E7%9B%AE">Centos配置LNMP环境并配置iwebshop项目</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8LNMP">使用LNMP</a></li>
</ul>
<h1 id="about"><a href="#about" class="headerlink" title="about"></a><a href="https://mengxun.club/2021/01/21/%E6%B5%8B%E8%AF%95-%E6%90%AD%E5%BB%BAiWebShop%E9%A1%B9%E7%9B%AE/#about">about</a></h1><p>摘自<a href="http://www.aircheng.com/">iWebShop官网</a>：</p>
<blockquote>
<p>iWebShop是一款基于PHP语言及MYSQL数据库开发的B2B2C单用户和多用户开源商城系统，系统支持平台自营和多商家入驻、集成微信商城、手机商城、移动端APP商城、三级分销、微信小程序等于一体，它可以承载大数据量且性能优良，还可以跨平台，界面美观功能丰富是电商建站首选源码。<br>最低环境版本：PHP5.5以上 + MYSQL(MariaDB)5.4以上 + Apache2.2以上 或 Nginx1.4以上。</p>
</blockquote>
<span id="more"></span>

<p>由上面的环境说明就知道，这个鬼东西安装不简单(其实挺简单的)！</p>
<p>但是为了省事儿，我们这里使用LNMP一键安装包来一键安装iWebShop项目。</p>
<p>LNMP是什么？LNMP一键安装包是一个用Linux Shell编写的可以为CentOS/RHEL/Fedora/Aliyun/Amazon、Debian/Ubuntu/Raspbian/Deepin/Mint Linux VPS或独立主机安装LNMP(Nginx/MySQL/PHP)、LNMPA(Nginx/MySQL/PHP/Apache)、LAMP(Apache/MySQL/PHP)生产环境的Shell程序。</p>
<p>接下来演示在centos环境如何搭建iwebshop项目。</p>
<blockquote>
<p>iwebshop5.6百度云盘：链接：<a href="https://pan.baidu.com/s/1_linjSP_tqKlb7n8hWkFYA">https://pan.baidu.com/s/1_linjSP_tqKlb7n8hWkFYA</a> 提取码：<code>4dug</code><br>you can also go to <a href="http://www.aircheng.com/down">http://www.aircheng.com/down</a> download source code</p>
</blockquote>
<h1 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a><a href="https://mengxun.club/2021/01/21/%E6%B5%8B%E8%AF%95-%E6%90%AD%E5%BB%BAiWebShop%E9%A1%B9%E7%9B%AE/#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93">配置数据库</a></h1><blockquote>
<p>centos安装docker：<a href="https://www.cnblogs.com/Neeo/articles/11945963.html">https://www.cnblogs.com/Neeo/articles/11945963.html</a></p>
</blockquote>
<p>提前配置好MySQL数据库，这里以MySQL5.7.26版本为例。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@C <span class="regexp">/]# mkdir -p /</span>docker_data<span class="regexp">/mysql_data/</span>data <span class="regexp">/docker_data/my</span>sql_data<span class="regexp">/logs /</span>docker_data<span class="regexp">/mysql_data/</span>conf</span><br><span class="line">[root@C <span class="regexp">/]# touch /</span>docker_data<span class="regexp">/mysql_data/</span>conf/my.cnf</span><br><span class="line">[root@C /]<span class="comment"># docker pull mysql:5.7.26</span></span><br><span class="line">[root@C /]<span class="comment"># docker run \</span></span><br><span class="line">  -p <span class="number">3307</span>:<span class="number">3306</span> \</span><br><span class="line">  -d \</span><br><span class="line">  -u root \</span><br><span class="line">  --name mysql \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v <span class="regexp">/docker_data/my</span>sql_data<span class="regexp">/conf:/</span>etc<span class="regexp">/mysql/</span>conf.d \</span><br><span class="line">  -v <span class="regexp">/docker_data/my</span>sql_data<span class="regexp">/logs:/</span>logs \</span><br><span class="line">  -v <span class="regexp">/docker_data/my</span>sql_data<span class="regexp">/data:/</span>var<span class="regexp">/lib/my</span>sql \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=root1234 \</span><br><span class="line">  mysql:<span class="number">5.7</span>.<span class="number">26</span></span><br><span class="line">[root@C /]<span class="comment"># docker exec -it -u root mysql bash</span></span><br><span class="line">root@<span class="number">2</span>da4755a41f0:/<span class="comment"># mysql -uroot -proot1234</span></span><br><span class="line">mysql&gt; create database iwebshop default character set utf8;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>上述配置，是创建一个MySQL容器，容器中的mysql账号密码:</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 账号</span></span><br><span class="line">root</span><br><span class="line"><span class="meta"># 密码</span></span><br><span class="line">root1234</span><br></pre></td></tr></table></figure>

<p>在容器环境要提前创建一个iwebshop数据库。后续会用到。</p>
<h1 id="Centos配置LNMP环境并配置iwebshop项目"><a href="#Centos配置LNMP环境并配置iwebshop项目" class="headerlink" title="Centos配置LNMP环境并配置iwebshop项目"></a><a href="https://mengxun.club/2021/01/21/%E6%B5%8B%E8%AF%95-%E6%90%AD%E5%BB%BAiWebShop%E9%A1%B9%E7%9B%AE/#centos%E9%85%8D%E7%BD%AElnmp%E7%8E%AF%E5%A2%83%E5%B9%B6%E9%85%8D%E7%BD%AEiwebshop%E9%A1%B9%E7%9B%AE">Centos配置LNMP环境并配置iwebshop项目</a></h1><p>这里以<code>/home</code>目录展开…..</p>
<ol>
<li>下载lnmp集成安装包，并选择数据库版本，这里以mysql5.7为例，输入对应版本之前的序号即可:</li>
</ol>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@CS2</span> /]<span class="meta"># cd /home/</span></span><br><span class="line">[root<span class="symbol">@CS2</span> home]<span class="meta"># ls</span></span><br><span class="line">[root<span class="symbol">@CS2</span> home]<span class="meta">#</span></span><br><span class="line">[root<span class="symbol">@CS2</span> home]<span class="meta"># wget http://soft.vpser.net/lnmp/lnmp1.6.tar.gz -cO lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; ./install.sh lnmp</span></span><br></pre></td></tr></table></figure>

<p><img src="pic/2021-01-21_23-44.png" alt="img"></p>
<ol>
<li>输入数据库root账户的密码<code>1234</code>:</li>
</ol>
<p><img src="pic/2021-01-21_23-45.png" alt="img"></p>
<ol>
<li>询问是否需要启⽤MySQL InnoDB，InnoDB引擎默认为开启，⼀般建议开启，直接回⻋或输⼊ y ，如果确定确实不需要该引擎可以输⼊ n，(MySQL 5.7+版本⽆法关闭InnoDB),输⼊完成，回⻋进⼊下⼀步：</li>
</ol>
<p><img src="pic/2021-01-21_23-45_1.png" alt="img"></p>
<ol>
<li>选择PHP版本，这里我选择默认。</li>
</ol>
<p><img src="pic/2021-01-21_23-46.png" alt="img"></p>
<ol>
<li>内存分配器选项，默认不安装内存分配器。</li>
</ol>
<p><img src="pic/2021-01-21_23-46_1.png" alt="img"></p>
<ol>
<li>按任意键进行安装。</br></li>
</ol>
<p>然后就是漫长的等待了…..请保持你的网络连接！</br></p>
<ol>
<li><p>完事之后，LNMP环境算是搭建完毕，默认监听80端口，你可以访问你的服务器<code>ip:80</code>来访问：</br></p>
</li>
<li><p>现在，你可以将iwebshop解压后的目录拷贝到<code>/home/wwwroot/default</code>，如下所示：</p>
</li>
</ol>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@CS2</span> <span class="literal">default</span>]<span class="meta"># pwd</span></span><br><span class="line">/home/wwwroot/<span class="literal">default</span></span><br><span class="line">[root<span class="symbol">@CS2</span> <span class="literal">default</span>]<span class="meta"># ls</span></span><br><span class="line">index.html  iwebshop  lnmp.gif  ocp.php  phpinfo.php  phpmyadmin  p.php</span><br></pre></td></tr></table></figure>

<ol>
<li>再给iwebshop目录一个777权限：</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@CS2 <span class="keyword">default</span>]# chmod <span class="number">777</span> -R <span class="regexp">/home/</span>wwwroot<span class="regexp">/default/i</span>webshop/</span><br></pre></td></tr></table></figure>

<ol>
<li>现在可以访问<code>ip:80/iwebshop</code>地址，然后会自动的跳转到安装目录了，勾选许可点击下一步：<br><img src="pic/47.png" alt="img"></li>
<li>可以看到各个配置都是没有问题的，直接点击下一步：<br><img src="pic/48.png" alt="img"></li>
<li>参照下图配置相关数据参数和管理员密码，并牢记密码</li>
</ol>
<p><img src="pic/49.png" alt="img"></p>
<p>可能会遇到安装失败的情况，在这个页面就多尝试几次，只要你的数据库配置的没有问题。</p>
<ol>
<li>安装完成，可以选择到前台和到后台进入网站了。</li>
</ol>
<p><img src="pic/50.png" alt="img"></p>
<ol>
<li>可以使用admin账号(密码是：root1234)登录到后台：</li>
</ol>
<p><img src="pic/51.png" alt="img"></p>
<p>后续的配置可以根据你的情况来配置了。</p>
<h1 id="使用LNMP"><a href="#使用LNMP" class="headerlink" title="使用LNMP"></a><a href="https://mengxun.club/2021/01/21/%E6%B5%8B%E8%AF%95-%E6%90%AD%E5%BB%BAiWebShop%E9%A1%B9%E7%9B%AE/#%E4%BD%BF%E7%94%A8LNMP]">使用LNMP</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: lnmp &#123;start|stop|reload|restart|kill|status&#125;</span><br><span class="line">Usage: lnmp &#123;nginx|mysql|mariadb|php-fpm|pureftpd&#125; &#123;start|stop|reload|restart|kill|status&#125;</span><br><span class="line">Usage: lnmp vhost &#123;add|list|del&#125;</span><br><span class="line">Usage: lnmp database &#123;add|list|edit|del&#125;</span><br><span class="line">Usage: lnmp ftp &#123;add|list|edit|del|show&#125;</span><br><span class="line">Usage: lnmp ssl add</span><br><span class="line">Usage: lnmp &#123;dnsssl|dns&#125; &#123;cx|ali|cf|dp|he|gd|aws&#125;</span><br><span class="line">Usage: lnmp onlyssl &#123;cx|ali|cf|dp|he|gd|aws&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>欢迎斧正,that’s all, see also:</p>
<p><a href="https://my.oschina.net/u/4350098/blog/4073513">Docker部署LAMP项目</a></p>
<p>作者： 听雨危楼</p>
<p>出处：<a href="https://www.cnblogs.com/Neeo/articles/12728236.html">https://www.cnblogs.com/Neeo/articles/12728236.html</a></p>
<p>版权：本作品采用「<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">署名-非商业性使用-相同方式共享 4.0 国际</a>」许可协议进行许可。</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>iWebShop</tag>
      </tags>
  </entry>
  <entry>
    <title>测试流程</title>
    <url>/2021/01/18/%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.png" alt="测试流程图 展开全文查看"></p>
<h1 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="实际工作相关"><a href="#实际工作相关" class="headerlink" title="实际工作相关"></a>实际工作相关</h3><h3 id="常见web服务器软件，数据库软件"><a href="#常见web服务器软件，数据库软件" class="headerlink" title="常见web服务器软件，数据库软件"></a>常见web服务器软件，数据库软件</h3><h2 id="熟悉被测环境"><a href="#熟悉被测环境" class="headerlink" title="熟悉被测环境"></a>熟悉被测环境</h2><h3 id="1-项目调研"><a href="#1-项目调研" class="headerlink" title="1. 项目调研"></a>1. 项目调研</h3><h3 id="2-组织架构"><a href="#2-组织架构" class="headerlink" title="2. 组织架构"></a>2. 组织架构</h3><span id="more"></span>

<ul>
<li><p>认识软件有哪些模块组成</p>
</li>
<li><p>分析到模块</p>
<ul>
<li>若干相关功能点的组合</li>
</ul>
</li>
</ul>
<h3 id="3-测试范围列表"><a href="#3-测试范围列表" class="headerlink" title="3. 测试范围列表"></a>3. 测试范围列表</h3><ul>
<li>理清当前被测模块的功能点，防止未来测试用例设计遗漏</li>
</ul>
<h2 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h2><h3 id="6要素"><a href="#6要素" class="headerlink" title="6要素"></a>6要素</h3><ul>
<li>what（测试范围）</li>
<li>why（测试目的）</li>
<li>when（测试时间轮次安排）</li>
<li>where（测试产出的保存）</li>
<li>who（测试参与人员）</li>
<li>how（怎么测试）</li>
</ul>
<h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><h3 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h3><h3 id="测试发布标准"><a href="#测试发布标准" class="headerlink" title="测试发布标准"></a>测试发布标准</h3><h3 id="测试风险"><a href="#测试风险" class="headerlink" title="测试风险"></a>测试风险</h3><h3 id="实体标准制定"><a href="#实体标准制定" class="headerlink" title="实体标准制定"></a>实体标准制定</h3><h2 id="测试设计"><a href="#测试设计" class="headerlink" title="测试设计"></a>测试设计</h2><h3 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h3><ul>
<li>点（功能点）</li>
<li>线（业务场景在不同模块之间传递）</li>
<li>面（非功能测试，兼容性、安全性等）</li>
<li>体</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p>测试需求分析</p>
<ul>
<li>显性需求</li>
<li>隐形需求（测试需求文档没有的）</li>
</ul>
</li>
<li><p>测试点</p>
</li>
<li><p>测试用例</p>
</li>
</ul>
<h3 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h3><ul>
<li><p>输入</p>
<ul>
<li><p>可见输入</p>
<ul>
<li>输入长度</li>
<li>类型</li>
<li>组成规则</li>
<li>是否重复</li>
<li>是否为空</li>
</ul>
</li>
</ul>
</li>
<li><p>处理</p>
<ul>
<li><p>正常处理</p>
<ul>
<li>正常的数据+正确的操作</li>
</ul>
</li>
<li><p>异常处理</p>
<ul>
<li>正确的数据+错误操作</li>
<li>错误数据+错误操作</li>
<li>错误数据+正确操作</li>
<li>正确数据+正确操作+环境异常</li>
</ul>
</li>
</ul>
</li>
<li><p>输出</p>
<ul>
<li><p>可见输出</p>
<ul>
<li>前台表现</li>
<li>后台表现</li>
</ul>
</li>
<li><p>不可见输出</p>
<ul>
<li>数据库</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="测试执行"><a href="#测试执行" class="headerlink" title="测试执行"></a>测试执行</h2><h3 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h3><h3 id="全面测试"><a href="#全面测试" class="headerlink" title="全面测试"></a>全面测试</h3><h3 id="交叉测试"><a href="#交叉测试" class="headerlink" title="交叉测试"></a>交叉测试</h3><h3 id="全面测试-1"><a href="#全面测试-1" class="headerlink" title="全面测试"></a>全面测试</h3><h3 id="探索测试等"><a href="#探索测试等" class="headerlink" title="探索测试等"></a>探索测试等</h3><h3 id="基本流等重要流程测试"><a href="#基本流等重要流程测试" class="headerlink" title="基本流等重要流程测试"></a>基本流等重要流程测试</h3><ul>
<li>生产环境</li>
</ul>
<h2 id="测试总结"><a href="#测试总结" class="headerlink" title="测试总结"></a>测试总结</h2><h3 id="产品上线一周内随时监控线上用户使用反馈"><a href="#产品上线一周内随时监控线上用户使用反馈" class="headerlink" title="产品上线一周内随时监控线上用户使用反馈"></a>产品上线一周内随时监控线上用户使用反馈</h3><p><a href="/download/pdf/%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.pdf">点击下载测试流程pdf</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试基本理论</tag>
      </tags>
  </entry>
  <entry>
    <title>测试计划</title>
    <url>/2021/02/04/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>软件测试是有计划、有组织和有系统的软件质量保证活动，而不是随意地、松散地、杂乱地实施过程。为了规范软件测试内容、方法和过程，在软件进行测试之前，必须创建测试计划</p>
<span id="more"></span>

<h4 id="测试计划-定义"><a href="#测试计划-定义" class="headerlink" title="测试计划-定义"></a>测试计划-定义</h4><p>测试计划：一个叙述了预定的测试活动的范围（哪些模块）、测试资源（软件、硬件）及进度安排的文档。它确认了测试项、被测特征、测试任务、人员安排，以及任何偶发事件的风险</p>
<p>包含了产品概述、测试策略、测试方法、测试范围、时间安排、测试人力、风险分析等内容。</p>
<h4 id="为什么要编写测试计划"><a href="#为什么要编写测试计划" class="headerlink" title="为什么要编写测试计划"></a>为什么要编写测试计划</h4><ol>
<li>使软件测试工作进行更顺利：计划使我们软件测试工作的预先安排，整个测试工作指明了方向（该怎么进行，什么时候进行）</li>
<li>促进项目参加人员彼此的沟通：测试人员能够了解整个项目测试情况以及项目测试不同阶段的所要进行的工作等。这种形式使测试工作于开发工作紧密的联系起来。</li>
<li>使软件测试工作更易于管理：领导能够根据测试计划做宏观调控，进行相应资源配置等；其他人员了解测试人员的工作内容，进行有关配合工作。按照这种方式，资源与变更变成了一个可控制的风险。</li>
</ol>
<h4 id="什么时间编写测试计划"><a href="#什么时间编写测试计划" class="headerlink" title="什么时间编写测试计划"></a>什么时间编写测试计划</h4><p>确定什么时间开始做测试计划是很重要的，一般来说是测试需求分析完成之后开始。</p>
<h4 id="谁编写测试计划"><a href="#谁编写测试计划" class="headerlink" title="谁编写测试计划"></a>谁编写测试计划</h4><p>编写测试计划是一项系统工作，编写者必须对项目了解，对测试工作所接触到的方方面面都要有系统地把握。因此一般情况下是由具有丰富经验的项目测试负责人或测试负责人编写。</p>
<h4 id="测试计划编写原则"><a href="#测试计划编写原则" class="headerlink" title="测试计划编写原则"></a>测试计划编写原则</h4><ol>
<li>制定测试计划应尽早开始：越早进行测试计划，从最根本的地方去了解物品们所要测试的对象及内容，方便后续完善测试计划</li>
<li>保持测试计划简洁和易读：测试计划做出来后应该能够让测试人员明了自己的任务和计划</li>
<li>尽量争取多渠道评审测试计划：通过不同的人来发现测试计划中的不足及缺陷，可以很好的保证测试计划的质量。</li>
<li>计算测试的投入：投入到测试中的项目经费是一定的，我们制定测试计划时一定要注意测试计划的费用情况，要量力而行。</li>
</ol>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试理论</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器如何识别selenium及爬虫如何绕过反爬</title>
    <url>/2021/01/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%ABselenium%E5%8F%8A%E7%88%AC%E8%99%AB%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87%E5%8F%8D%E7%88%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>各位做爬虫的对selenium应该都很熟悉了，我们经常会拿selenium进行自动登录来搭建cookie池，对于不想自己网站被爬的站主/开发人员来说，防止自动化脚本操作网站自然是反爬必须要做的工作。那么，他们究竟有哪些手段来检测用户是否是selenium呢？今天就来总结一下常见的识别selenium的方法以及各种解决之道。</p>
<span id="more"></span>

<p>最广为人知的识别是否是selenium的方法就是window.navigator.webdriver，当浏览器被打开后，js就会给当前窗口一个window属性，里面存放着用户的各种”信息”。话不多说直接上图</p>
<p><img src="https://pic3.zhimg.com/80/v2-25a344a9bd1d04dec2f602ef741292ee_720w.jpg" alt="img">正常用户访问时的webdriver为undefined</p>
<p><img src="https://pic4.zhimg.com/80/v2-997a5e933f19e4af17848afa9714034b_720w.png" alt="img">selenium访问时为true</p>
<p>明白了这个属性，我们来一段简单的js来反爬</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.navigator.webdriver == <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;span&gt;看到这段就代表你是爬虫&lt;/span&gt;&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;span&gt;真正的信息在这儿呢&lt;/span&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>现在把这段代码保存到HTML中分别正常打开和selenium打开</p>
<p><img src="https://pic4.zhimg.com/80/v2-c17c45d289ce9e3a42bd2cc546f84c43_720w.jpg" alt="img">selenium打开</p>
<p><img src="https://pic1.zhimg.com/80/v2-12afcfa70a958a371d24bfbb49d39b7c_720w.jpg" alt="img">正常打开</p>
<p>其实，不只是webdriver，selenium打开浏览器后，还会有这些特征码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webdriver  </span><br><span class="line">__driver_evaluate  </span><br><span class="line">__webdriver_evaluate  </span><br><span class="line">__selenium_evaluate  </span><br><span class="line">__fxdriver_evaluate  </span><br><span class="line">__driver_unwrapped  </span><br><span class="line">__webdriver_unwrapped  </span><br><span class="line">__selenium_unwrapped  </span><br><span class="line">__fxdriver_unwrapped  </span><br><span class="line">_Selenium_IDE_Recorder  </span><br><span class="line">_selenium  </span><br><span class="line">calledSelenium  </span><br><span class="line">_WEBDRIVER_ELEM_CACHE  </span><br><span class="line">ChromeDriverw  </span><br><span class="line">driver-evaluate  </span><br><span class="line">webdriver-evaluate  </span><br><span class="line">selenium-evaluate  </span><br><span class="line">webdriverCommand  </span><br><span class="line">webdriver-evaluate-response  </span><br><span class="line">__webdriverFunc  </span><br><span class="line">__webdriver_script_fn  </span><br><span class="line">__$webdriverAsyncExecutor  </span><br><span class="line">__lastWatirAlert  </span><br><span class="line">__lastWatirConfirm  </span><br><span class="line">__lastWatirPrompt  </span><br></pre></td></tr></table></figure>

<p>只要识别到这些，那么该用户就是selenium无误了，目前针对selenium的反爬，都是从这些特征码下手的，那么该怎么反反爬呢？</p>
<ol>
<li>使用火狐浏览器</li>
</ol>
<p>大家先别急着笑，很多时候selenium+谷歌打不开目标网站，都可以用火狐试试。因为selenium只是一个控制浏览器的工具，而chromedriver和geckodriver都不是selenium官方发布的（鬼知道谁发布的），因此在控制浏览器方面会有不同的差异，具体原理不再赘述，总之很多网站不能用selenium+chrome就可以试试firefox。</p>
<p>（理论上IE也可能会达到相应效果，但IE内核实在太烂了，selenium+IE=龟速爬虫）</p>
<p>\2. 给webdriver的options增加参数</p>
<p>谷歌浏览器的设置中有一个参数名为excludeSwitches，它的值是一个数组，向里面添加chrome的命令就可以在selenium打开chrome后自动执行数组内的指令，我们向里面添加一个enable-automation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver import ChromeOptions</span><br><span class="line"></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;])</span><br><span class="line">brower = webdriver.Chrome(options=option)</span><br><span class="line">brower.get(&#x27;file:///C:/Users/Administrator/Desktop/js.html&#x27;)</span><br></pre></td></tr></table></figure>

<p>此时运行这段代码，发现可以拿到正确的信息</p>
<p><img src="https://pic2.zhimg.com/80/v2-02e2106ce10bdab43fcf4ce1fdafb7e5_720w.jpg" alt="img">右上角会跳出提示，不要管它，更不要点停用</p>
<p>如果你觉得右上角的提示太碍眼，可以参考这篇教程禁用此提示</p>
<p><a href="https://link.zhihu.com/?target=https://www.jianshu.com/p/b5deac715115">彻底禁用Chrome的“请停用以开发者模式运行的扩展程序”提示www.jianshu.com<img src="https://pic3.zhimg.com/v2-9769537726985ead0ed24f3a77d64aaa_180x120.jpg" alt="图标"></a></p>
<p>\3. 中间人代理mitmproxy</p>
<p>爬过app的朋友应该对这玩意儿不陌生，简单介绍一下吧。mitmproxy其实和fiddler/charles等抓包工具的原理有些类似，作为一个第三方，它会把自己伪装成你的浏览器向服务器发起请求，服务器返回的response会经由它传递给你的浏览器，你可以通过编写脚本来更改这些数据的传递，从而实现对服务器的“欺骗”和对客户端的“欺骗”。具体原理和使用见此</p>
<p><a href="https://link.zhihu.com/?target=https://blog.wolfogre.com/posts/usage-of-mitmproxy/">使用 mitmproxy + python 做拦截代理blog.wolfogre.com<img src="https://pic4.zhimg.com/v2-736d57a8dd324d73dd46a03a064f8fdb_180x120.jpg" alt="图标"></a></p>
<p>下面提供一个防屏蔽selenium的简单demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># my_demo.py</span><br><span class="line">from mitmproxy import ctx  </span><br><span class="line">    </span><br><span class="line">def response(flow):  </span><br><span class="line">    # &#x27;js&#x27;字符串为目标网站的相应js名 </span><br><span class="line">    if &#x27;js&#x27; in flow.request.url:  </span><br><span class="line">        for i in [&#x27;webdriver&#x27;, &#x27;__driver_evaluate&#x27;, &#x27;__webdriver_evaluate&#x27;, &#x27;__selenium_evaluate&#x27;, &#x27;__fxdriver_evaluate&#x27;, &#x27;__driver_unwrapped&#x27;, &#x27;__webdriver_unwrapped&#x27;, &#x27;__selenium_unwrapped&#x27;, &#x27;__fxdriver_unwrapped&#x27;, &#x27;_Selenium_IDE_Recorder&#x27;, &#x27;_selenium&#x27;, &#x27;calledSelenium&#x27;, &#x27;_WEBDRIVER_ELEM_CACHE&#x27;, &#x27;ChromeDriverw&#x27;, &#x27;driver-evaluate&#x27;, &#x27;webdriver-evaluate&#x27;, &#x27;selenium-evaluate&#x27;, &#x27;webdriverCommand&#x27;, &#x27;webdriver-evaluate-response&#x27;, &#x27;__webdriverFunc&#x27;, &#x27;__webdriver_script_fn&#x27;, &#x27;__$webdriverAsyncExecutor&#x27;, &#x27;__lastWatirAlert&#x27;, &#x27;__lastWatirConfirm&#x27;, &#x27;__lastWatirPrompt&#x27;, &#x27;$chrome_asyncScriptInfo&#x27;, &#x27;$cdc_asdjflasutopfhvcZLmcfl_&#x27;]:  </span><br><span class="line">            ctx.log.info(&#x27;Remove %s from %s.&#x27; % (i, flow.request.url))  </span><br><span class="line">            flow.response.text = flow.response.text.replace(&#x27;&quot;%s&quot;&#x27; % (i), &#x27;&quot;NO-SUCH-ATTR&quot;&#x27;)  </span><br><span class="line">        flow.response.text = flow.response.text.replace(&#x27;t.webdriver&#x27;, &#x27;false&#x27;)  </span><br><span class="line">        flow.response.text = flow.response.text.replace(&#x27;ChromeDriver&#x27;, &#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p>然后我们使用如下命令行启动脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mitmdump.exe -S my_demo.py</span><br></pre></td></tr></table></figure>

<p>然后通过selenium就可以正常访问一些屏蔽selenium的网站了</p>
<p>\4. pyppeteer</p>
<p>先简单介绍一下puppeteer，这玩意儿是一个基于node.js的chrome官方框架，主要用于操作谷歌无头模式进行各种操作，pyppeteer则是puppeteer的python版本。</p>
<p>它的作用和selenium是类似的，通过脚本操作无头谷歌，但是它并不会有selenium那么多的特征字符串，可以做到完全把“自己”当作真人操作。当然，它还是有缺点的.虽然puppeteer一直在更新，但是pyppeteer已经停止更新将近一年了，所以无法保证它以后是否可用。同样因为它是基于谷歌无头的，因此它只能用于谷歌无头，不想selenium一样，编写完脚本只需改变少量代码，便可以在多种浏览器中运行。下面是pyppeteer的官方文档：</p>
<p><a href="https://link.zhihu.com/?target=https://miyakogi.github.io/pyppeteer/">Pyppeteer’s documentationmiyakogi.github.io</a></p>
<p>下面是一个简单的demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">from pyppeteer import launch</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    browser = await launch()</span><br><span class="line">    page = await browser.newPage()</span><br><span class="line">    await page.goto(&#x27;file:///C:/Users/Administrator/Desktop/js.html&#x27;)</span><br><span class="line">    print(await page.content())</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>

<p>如果你电脑中没有chromium，执行这段代码后会自动帮你安装，然后再运行这段代码，但是非常慢，所以建议自己网上下载chromium后再执行脚本</p>
<p>\5. 编译后的chromedriver</p>
<p>鬼知道为什么又是chrome……最近发现的一个比较有趣的chromedriver，与一般chromedriver不同的是它经过了一些底层的修改，可以直接使用它来登录一些对selenium有检测的网站（比如某宝），有兴趣的可以私聊我获取</p>
<p>目前个人已知的就这几种解决方法，欢迎补充更新~</p>
<p><a href="https://zhuanlan.zhihu.com/p/85663187">https://zhuanlan.zhihu.com/p/85663187</a></p>
<p>这里提供了防淘宝检测的简单demo视频版及源码（已失效），编译后的chromedriver，大家可以参考一下，编译后的chromedriver的网盘链接也在文末，大家自行获取~</p>
<p>转载：<a href="https://www.zhihu.com/people/z-ri-tian">看起来是不是很凶</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/78368287">https://zhuanlan.zhihu.com/p/78368287</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爱乐之城</title>
    <url>/2021/06/13/%E7%88%B1%E4%B9%90%E4%B9%8B%E5%9F%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-tlFpyypR" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="421203025" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br/>

<p>《爱乐之城》是由达米安·查泽雷执导，瑞恩·高斯林、艾玛·斯通 主演的爱情歌舞片，可以说是近年来最好的一部爱情歌舞片了。当年这部影片横扫奥斯卡，拿下14项提名，刷平《泰坦尼克号》保持了19年的最多提名记录，并最终斩获6座小金人。金球奖上，它七提七中，成为史上最大赢家。</p>
<span id="more"></span>

<p>有人认为《爱乐之城》影片之所以这么成功是和导演亲身经历与剧情相似有关。据说，导演达米安和妻子在读书时相识，他们在洛杉矶结婚后，共同完成《爱乐之城》的剧本。和电影一样，两人也曾互相支持着对方的梦想，只是和电影一样，后来两人也没能终老，离婚了。虽然不知道他们一起写的影片最初剧本结局是在一起还是分手，但有意思是《爱乐之城》上映后达米安的前妻作为执行制片人被加在了职员表上。前妻表示，为了追逐梦想，两人曾经互相帮助过，对此她十分感激。</p>
<p>爱乐之城的叙事是按冬春夏秋冬五个章节的顺序展开的。电影将四季的特征与男女主的人物关系一一对应，陌路，相知，热恋，吵架，分手正好呼应季节的变化。随着时光流转，他们从陌生人变成情侣，只是最后仍是成了最熟悉的陌生人。</p>
<p>不过，影片中最令人印象深刻的技巧，还是最后的闪回片段。男主看到台下的女主后，说了一句“欢迎来到Seb’s ”随着旋律的响起，一段精彩的蒙太奇将男女主带回初见的时刻，似真似假的时光乱流给了影片剧情另外一种发展。这个故事如童话般梦幻，又甜到无以复加，而它的镜头和情节转换以及灯光效果都类似舞台剧，美好的同时又提醒着观众这不是真的。对比梦醒后的现实，更加戳人泪点。</p>
<p>而同样精彩的还有两人天文台的定情片段中，导演运用了如今比较少见的超现实手法，刚刚确定关系的情侣心情轻快地好像要飞起来，沐浴在爱河里的他们，在星空中舞蹈，未来似乎有无数种可能。每一种的结局都是从此他们幸福地生活在一起。</p>
<p>影片有一处不太容易理解的情节，那就是他们在天文台分手的这段。其实第一个提出分手的是女主米娅，但之后男主到她家拉着她试镜。而两人似乎有所缓和，在这里女主试探性地问了一句“我们之间该怎么办”。其实，这句话里是有一点对之前分手的犹豫的。因为如果她不想要给这段感情任何机会，她是没有必要这么问的，所以她把这个问题抛给了男主。在很多其他的爱情片里，男主来找女主之后，两人就会顺理成章地复合，但《爱乐之城》确实一部有童话质感的现实爱情电影。男主说“我不觉得我们能做任何事”虽然分手是女友提出来的，但男主想即使此时复合了，两人以后可能还是要分手。于是便让她不要再纠结于此，两人各自都有不同的路要走。然后，没有在狗血没有争吵的交谈中，两人在十分冷静的状态下，做出了他们当时认为的成熟决定。这一情节将故事的伤感气氛冲淡了许多，却又让那种为可言说的悲伤更加酸楚与后劲十足。</p>
<p>关于影片想要表达的主题，从戏剧结构来说，电影探讨了理想和爱情，讲述了一个两者不可兼得的故事。二人的理想和目标成为了爱情的阻力，在故事的最后，他们都实现了各自的梦想，却终究没有在一起，而这个主题其实和导演的想法是相对应的。</p>
<p>导演在访谈中说“在追求梦想的过程中，你会牺牲很多重要的东西，甚至还会有人笑你傻，就像LA LA LAND（指不切实际的幻想）这个词的意思一样。我想拍一部电影来赞美对梦想的坚持，无论多么遥不可及也决不放弃”所以，虽然是爱情片，但导演也是想要拍一个坚持梦想的故事。而另一方面，导演应该相信爱不不是只有天长地久着一个美好的结局，曾经拥有过，就是一个重要的意义。</p>
<p>他们两人或许从一开始就不合适。比如女主最初明确表示自己不喜欢爵士乐，而男主在海边唱歌那场戏中，问了一句「这是一个崭新有美好的开始？还是一场不能实现的梦？」说明他也怀疑这份爱情能持续多久。</p>
<p>另外，两人的追求可能是背道而驰的。女主的梦想是成为一名演员，她必须迎合观众，需要通过别人的认可才能实现价值，所以她害怕自己的话剧太怀旧或者没有观众，总是在质疑自己。而男主之前最不在意的就是别人的看法，她喜欢爵士乐，并且坚定的认可这种音乐，想要把它传扬出去。男主追求的是事物的内在价值，而女主追求的是外在认可。</p>
<p>从这些方面他们确实是不太一样的人，为了维持组合段感情，他们都努力过。比如，女主在跟母亲的电话中表示。他很棒，自己愿意跟这个穷小子在一起，即使遇到了她最在意的周围人的不认可，她也坚定站在男友一边，并且不在乎周围人对她的评价。而男主为了女主，做了自己不喜欢的事——加入朋友的电子爵士乐队。虽然他自己并不在意别人的看法，但他愿意为了女主身边人的看法改变自己。其实他们都曾为了对方最在意的部分，改变了自己最在意的想法。</p>
<p>这种努力和牺牲，其实不可以说不大了，只是这让他们不再像原来的自己。比如塞巴斯汀签约后，他并没有筹划爵士乐俱乐部，也失去了对待梦想的热情和执着，而米娅爱上他的反而正是这点。</p>
<p>为了爱情而改变自己，反而失去了原本对方最爱的自己的样子，这实在是一个遗憾的悖论。无奈的是，有很多爱情就像这样最后是没有办法在一起的。它们的代价太大，而如果勉强坚持，最后会毁掉爱情本身。</p>
<p>或许他们曾以为，爱情可以填满人生的遗憾，然而，制造更多遗憾的，偏偏是爱情。但是，如果两人不曾相遇，女主是不会喜欢上爵士音的，更不会有面对失败从头再来的勇气。而男主也不会参加朋友的乐队，脱离那个从不为未来考虑的中二状态，更不会开一间名叫「Seb’s」的俱乐部。而这些美好的成长经历，都是因为他们相爱而发生的。所以，虽然他们没有在一起，但谁能说这份没有结果的爱对他们不够重要呢？</p>
<p>虽然有些观众觉得《爱乐之城》的故事落于俗套，又或者觉得女主在有男友的情况下，与男主暧昧不清实在不妥，但这并非最关键的。此外，虽然是歌舞片，但两位主演都不是歌手或舞者，动作略显笨拙，但好在他们用演技进行了弥补。比如石头姐的表演灵动而极富感染力，把观众情绪带动了起来。</p>
<p>而影片的类型歌舞片对于现代的观众也有一定的接受门槛，它曾有过十分辉煌的时候。但歌舞元素确实在客观上放缓了剧情的发展，这也是有人觉得《爱乐之城》故事简单的一个原因。不过，敢挑战拍这种类型的影片也不容易。</p>
<p>作为一部完成度这么高的电影，《爱乐之城》其实是近几年中不可多得的歌舞片作品。它以观众第一眼看上去以为是童话的画面质感，讲述了一个非常具有现实意义的爱情故事。</p>
<p>有的时候，爱情就是会呈现出「注定无法在一起」的样子。但它的存在却是一种深沉却又优雅的美感，可以让相爱的两人即使分手后仍然心存感激。米娅和塞巴斯汀没有在一起这非常遗憾，但他们彼此都珍惜着这段感情。并且都把这段爱情留存在心中作为珍宝，最终实现了各自的梦想。这其实也令观众得到一种在电影遗憾结局之外的安慰。</p>
<p>其实爱人之间的相遇已是偶然，相伴更是不易。虽然相处有时会遇到困难，但其实很多时候在困难中再坚持一下，不要放弃，会有更好的结果。我们刚刚过了一个特殊的情人节，有可能你与爱人同处一城却连想见一面都成了奢侈。可能相隔千里却只能通过手机道一句「情人节快乐」，但被牵挂总归是幸福的。当然还有人仍然在寻找着一份真爱，又或者有人说「能看懂这部电影的都是曾被伤了心，又释怀过的人」。那我希望你们都不比经历「如果当初」的悔恨。对爱情的残酷保持懵懂，且永远对爱情的美好拥有憧憬。</p>
<blockquote>
<p>转自木鱼水心微剧场《爱乐之城》</p>
</blockquote>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="https://www.bilibili.com/video/BV1G741137jn?from=search&seid=2296532356523104963"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>]]></content>
      <categories>
        <category>佳片分享</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>海底</title>
    <url>/2021/07/29/%E6%B5%B7%E5%BA%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-ZnhJPbvu" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1840192925" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br>

<center>
来不及，来不及，你曾笑着哭泣<br>
来不及，来不及，也要唱给你听<br>
春日雨，夏蝉鸣<br>
明天是个好天气<br>
秋风起，雪花轻<br>
海底看不见四季<br>

</center>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>爱的五种语言</title>
    <url>/2022/08/07/%E7%88%B1%E7%9A%84%E4%BA%94%E7%A7%8D%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-OKuqZzDY" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="521416693" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br/>

<p>爱大致可以分为五种语言——肯定的言辞、精心的时刻、接受礼物、服务的行动、身体的接触。</p>
<p>我们每个人的爱语都是不同的，比如我的爱语是精心的时刻，那我就更希望我的爱人能够多花时间陪我，不管是做任何事，只要是肯认真地陪我。我就认为他是爱我的、关系我的，这样会使我的爱箱常满。</p>
<p>常有人说，婚姻是爱情的坟墓，其实是我们不懂得说第二种爱的语言。如果你的爱语是精心的时刻，那么你肯定会专心地陪着爱人做任何事。你在用你的方式爱着对方，同时你也希望对方用同样的方式对待你。</p>
<p>其实，这只是你的爱语。对于对方来说，他可能并不太对这种爱的方式感冒。</p>
<p>这时候，我们都须竭力学习第二种爱的语言——即对方的爱语，如果我们要他感受到我们所传达的爱，我们就必须以他的爱语来表达。</p>
<span id="more"></span>

<h3 id="肯定的言辞"><a href="#肯定的言辞" class="headerlink" title="肯定的言辞"></a>肯定的言辞</h3><p>首先需要澄清的是：<strong>肯定的言辞并非是用口头的称赞来使你的配偶替你做事。</strong>爱的目的，不是得到你想要的，而是为了你所爱之人的福祉，去做什么。</p>
<p>肯定的言辞分为：<strong>鼓励的话语</strong>、<strong>仁慈的话语</strong>、<strong>谦和的话语</strong>、<strong>其他肯定的方言</strong>这四种</p>
<h4 id="鼓励的话语"><a href="#鼓励的话语" class="headerlink" title="鼓励的话语"></a>鼓励的话语</h4><p>给予口头的赞赏，是向你配偶表达肯定言词的一种方式。另外一种用语就是鼓励的话。鼓励这个字表示[激起某人的勇气]，我们所有的人都有一些缺乏安全感的地方。缺乏勇气，常阻碍我们去成就一些积极想去做的事。可能在你配偶缺乏安全感的地方，有潜在之能力，正等着你用鼓励的话语来激发。</p>
<p>对于鼓励的话语，需要注意的是：<strong>不是用鼓励的话语来向配偶施加压力，强迫他去做你要求他做的事。而是鼓励他去发展他已经有的兴趣。</strong>∂</p>
<h4 id="仁慈的话语"><a href="#仁慈的话语" class="headerlink" title="仁慈的话语"></a>仁慈的话语</h4><p>“说话的方式是极度重要的。一位古代的贤人曾说：「回答柔和，使怒消退。」当你的配偶发怒、烦乱、说话火爆的时候，如果你选择做有爱心的人，你不会火上加油，反而是以柔和的声音作为回报。你会把他说的话，当做有关他感觉的讯息；你会让他告诉你，他的伤痛、怒气、以及对事情的认知：你会设法置身于他的处境，经由他的双眼来看事情；然后，你会柔和、用爱心回答，你了解他为什么会有那样的感觉。如果是你冒犯了他，你愿意认错，请求饶恕；如果你的动机和他所了解的不一样，你可以和善地解释你的动机。你会寻求了解和重修旧好，而不是证明你自己的认知，是对所发生的事情之唯一诠释。这才是成熟的爱：如果我们企求一个成长的婚姻，这即是我们切望的健康之爱。</p>
<p>爱是不保存犯错的记录；爱是不提过去的失败。我们没有一个人是完美的；在婚姻中，我们并非总是做最好或对的事。有时候，我们在做事或说话时，伤了配偶；我们无法擦掉过去，只能承认、同意那是错误的，并且请求饶恕，试着改变。除了承认自己的失败并请求饶恕，我们无法再做任何事来减轻配偶的伤痛。当我们自己被配偶亏待了，她痛苦地认错，且要求饶恕后，我们可以选择公义或是饶恕。如果选择了公义去报复，要她为错误付代价，那么我们就是使自己成为法官，使她成为罪犯，亲密的关系就变成不可能了；但如果选择了饶恕，亲密关系就可以恢复。饶恕才是爱的方式。”</p>
<h4 id="谦和的话语"><a href="#谦和的话语" class="headerlink" title="谦和的话语"></a>谦和的话语</h4><p>“爱是提出请求，而非要求。若我要求我的配偶，我就变成了父亲或母亲，而他则成了孩子。只有父母亲才告诉三岁的孩子应该做什么；事实上，是必须做什么。那是应该的，因为三岁的孩子，还不知道如何在靠不住的人生大海中航行。可是，在婚姻中，我们是平等、成年的伙伴。我们虽不完美，可是我们已成年，而且是合伙人。如果，我们要发展亲密关系，我们需要知道彼此的愿望；如果，我们想要彼此相爱，我们需要知道对方要的是什么。”</p>
<p>“当你向配偶提出请求，是在肯定他或她的价值和能力。你等于在本质上表明，她有些什么，或者可以做些什么；这对你是有意义、有价值的。可是，当你提出的是要求，你就不是在爱人，而成了暴君。你的配偶不但不觉得被肯定，反感到被贬低了。请求带着选择；你的配偶可以选择成全你的请求，或者否决它，因为爱永远是一个选择，那是使爱有意义的原因。知道我的配偶如此爱我，愿意成全我的某一个请求；在情绪上，那表达了她关心我、尊重我、仰慕我，而且要做什么事来使我高兴。我们不能经由要求，得到情感上的爱；事实上，配偶也许会依从我们的要求，可是那并不是爱的表示。那是一种惧怕、愧疚、或者什么其它情绪的行动，但不是爱。因此，请求制造了表示爱的可能性，而要求则扼杀了那样的可能性。”</p>
<h4 id="其他肯定的方言"><a href="#其他肯定的方言" class="headerlink" title="其他肯定的方言"></a>其他肯定的方言</h4><p>“你可能也要试试给予不直接的肯定言词；就是当你的配偶不在场的时候，说些夸赞他或她的话。最后，总有人告诉你的配偶，而你会得到爱的满分。告诉你的丈母娘，你的妻子有多好；当她告诉她女儿的时候会更精彩，你甚至会得到更高的分数。除此之外，有你配偶在场的时候，当着别人的面肯定他(或她)；当你为某一成就，得到公开荣誉的时候，一定要跟你的配偶分享这份功劳。你也可以试试手写肯定的言词：写出来的东西，有让人重复阅读的好处。”</p>
<h3 id="精心的时刻"><a href="#精心的时刻" class="headerlink" title="精心的时刻"></a>精心的时刻</h3><p>精心时刻的中心意思是“同在一起”。不单指接近……同在一起乃是跟彼此注意力的焦点有关。即<strong>给予某人全部的注意力。</strong></p>
<h4 id="集中注意力"><a href="#集中注意力" class="headerlink" title="集中注意力"></a>集中注意力</h4><p>能够给你的配偶“精心时刻”的关键在于注意力要集中，特别是在这个信息化、快节奏的时代。</p>
<p>精心时刻的意义，并非指我们必须用所有共处的时间，凝视着对方；而应该是说，两人同心一起做什么，并且给予对方全部的注意力。参与的那项活动是次要的，重要的是花时间关注对方的情感，而活动只是创造那种同在一起的感觉的载体。</p>
<h4 id="精心的会话"><a href="#精心的会话" class="headerlink" title="精心的会话"></a>精心的会话</h4><p>精心的会话是指具有同理心的对话，两个人在友善、不受干扰的环境中，分享他们的经验、思想、感觉和愿望。</p>
<p>“精心会话跟第一种爱的语言，是很不同的。肯定言词的焦点是我们在说什么，而精心会话的焦点是我们在听什么。如果我要以精心时刻来表达对你的爱，在那段交谈的时间，我会专心让你吐露心声，而且具有同理心地倾听你所要说的话。我会问些问题，但不是以不耐烦的方式，而是以真实的渴望去问，为要了解你的思想、感觉和愿望。”</p>
<p>有时候我们的爱人会一直跟我们诉工作或者生活上的苦，其他她要的不是解决问题的建议，而是能够了解她的不易。很多男生多会为自己的女友出谋划策，认为如果你不想采取我的建议，就不要再跟我谈这件事。但是<strong>婚姻是一种关系，而非一个待完成的方案，或是一个待解决的问题。这种关系要求具有同理心的倾听，以了解对方的思想、感觉和愿望为目的。</strong>当对方要求我们提供建议的时候，我们才该必须提供建议，并且绝不可带着优越感的骄傲。</p>
<p>下面是简短的建议：</p>
<ol>
<li><p>当配偶说话的时候，保持眼光的接触 那可以防止你心不在焉，而且传达对你全部的注意力。</p>
</li>
<li><p>不要一边听配偶说话，一边做别的事记住，精心的时刻，是给予某人你全部的注意力。如果你在看什么、阅读什么、或者做什么非常有兴趣的事，无法分神，马上告诉他(她)实话。一种正面的方式可以是：「我知道你要跟我说话，我有兴趣要听，而且，我要给你我全部的注意力。现在我没法子，可如果你给我十分钟完成这件事，我可以坐下来听你说话。」多数的配偶会尊重这样的请求。</p>
</li>
<li><p>注意听感觉 问你自己：「我的配偶正体验什么样的情绪？」当你认为你有了答案，就确定它。例如：「听起来好象你觉得失望，因为我忘记了……。」这不仅给了他机会说明他的感觉，也传达了你在专心地听他说话。</p>
</li>
<li><p>观察肢体语言 紧握的拳头、颤抖的双手、眼泪、皱眉头、和眼神的转动可以给你一些有关对方感觉的线索。有时候言词表示了某种信息，但在肢体语言上却诉说着另一种信息。可请求说明，以确定你知道对方真正在想些什么、感觉到什么。拒绝插嘴最近的一个研究指出，一般人听人说话，只过了十七秒钟，就会插嘴、发表自己的意见。当配偶讲话的时候，如果要给对方全部的注意力，就要避免为自己辩护、口出恶言责难对方、或者武断地表示自己的立场。目标是发掘配偶的思想和感觉，不是保卫自己或者矫正对方，而是了解他(她)。</p>
</li>
</ol>
<h4 id="学习说话"><a href="#学习说话" class="headerlink" title="学习说话"></a>学习说话</h4><p>“精心之会话，不仅需要具同理心的倾听，还需要自我表白。当一个妻子说：「但愿我的丈夫愿意说话。我从不知道他在想什么，或者他觉得怎么样。」她祈求着亲密感，要感觉跟丈夫接近。可是如果她不认识一个人，她怎么能感觉与他接近呢？为了使她感觉到被爱，他必须学习表白自己。如果她的主要爱语是精心的时刻，而她的方言是精心的会话；那么她的情绪爱箱永不会被填满，除非他能告诉太太他的思想和感觉。”</p>
<p>“自我表白对我们有些人来说，是不容易的。许多成年人，从小生长在一个没有鼓励、甚至责备他们表达自己思想和感觉的家庭中；要求一个玩具，得到的响应却是父母长篇大论说家用如何拮据的唠叨话；这个孩子带着愧疚失望地走开了，只因为他有一个愿望；因此，他很快地学会了，不去表达自己的愿望。当他表示怒气的时候，父母以严厉和责难的话作为回报；于是这孩子就学会了，表示愤怒的情绪是不恰当的。如果使这个孩子对表示失望(因为他不能跟父亲到店里买东西)也觉得愧疚，他就学会压抑自己的失望。在这种成长背景下进入成年期，我们很多人就习惯去否认自己的感觉，跟情绪的自我失去了连系。”</p>
<h4 id="精心之活动"><a href="#精心之活动" class="headerlink" title="精心之活动"></a>精心之活动</h4><p>“精心之活动，可以包括任何你们个人、或者两人同有兴趣的事：其中强调的不是你们做什么，而是你们为什么做它：它的目的是两人一起经历什么事，事后觉得：「他关心我。他愿意跟我一起做我喜欢的事，而且他有正面的态度。」那就是爱，对有些人，那是最响亮的爱。”</p>
<p>“一个精心活动之必要成分是：(一)至少你们之中一人想作这活动，(二)另一个人也愿意做这活动，(三)你们俩都知道为何要一同作活动：藉同在一起的机会来表达爱。”</p>
<h3 id="接受礼物"><a href="#接受礼物" class="headerlink" title="接受礼物"></a>接受礼物</h3><p>礼物是爱的视觉象征。如果你的配偶主要的爱语是接受礼物。那么，你就可以称为送礼物的高手。</p>
<p>“礼物不需要是昂贵的，也不需要每个星期送一次。对于某些人，礼物的价值与钱币的价值无关，只与爱的程度有关。”</p>
<p>摘录来自<br>爱的五种语言<br>电子书免费赠送:行行微信491256034<br>此材料可能受版权保护。</p>
<p>接受礼物分为：最好的投资、把自己当作礼物</p>
<p>“礼物可以是买来的、找到的、或者自制的。丈夫在路旁停下来，为妻子摘一朵野花，他为自己找到了一种爱的表示；除非，他的妻子对野花过敏。对于负担得了的人，用不到五块钱，你可以买一张美丽的卡片。对于负担不起的人，你可以自制一张。在废纸堆里找张纸，从中间对折，用剪刀剪出一个心形，写上「我爱你」，然后签上你的名字。礼物不需要是昂贵的。”</p>
<h4 id="最好的投资"><a href="#最好的投资" class="headerlink" title="最好的投资"></a>最好的投资</h4><p>“如果，你发觉你配偶主要的爱的语言，是接受礼物；那么，你也许会发现，为他或她买礼物，是你能做的最好投资。”</p>
<h4 id="把自己当作礼物"><a href="#把自己当作礼物" class="headerlink" title="把自己当作礼物"></a>把自己当作礼物</h4><p>“有一种无形的礼物，有时候胜过那可以拿在手里的礼物；我称之「自己就是礼物」，或以「在场作伴」为厚礼。当你的配偶需要你的时候，你就在那里陪伴：这对主要爱的语言是接受礼物的人，传达了响亮的信息。”</p>
<h3 id="服务的行动"><a href="#服务的行动" class="headerlink" title="服务的行动"></a>服务的行动</h3><p>“所谓服务的行动，是指你的配偶想要你做的事。你设法借着替他(她)服务，而使他(她)高兴；借着替他(她)做事，而表示你对他(她)的爱。”</p>
<p><strong>在服务的行动中，我们需要请求对方的帮助，而非要求对方。请求会引导爱，而要求却阻碍爱的流通。</strong></p>
<p>爱是自由地付出，是不能被要求的。我们可以请求对方什么事，可是绝不可以要求任何事。</p>
<p>不要得不到爱人的帮助而刻意的批评对方，因为批评是一种无效的祈求爱的方式。</p>
<h3 id="身体的接触"><a href="#身体的接触" class="headerlink" title="身体的接触"></a>身体的接触</h3><p>我们早就知道，身体的接触是沟通情感的一种方式。在儿童发展方面，无数的研究下了这样的结论：有人拥抱、有人亲吻的婴孩，比那些长期没人理会、没能接受身体抚触的婴孩，在情绪发展上会来得健康。</p>
<p>“在婚姻中的爱抚可以有很多形式。因为触觉接受器散布全身，所以用充满之爱来抚触你的配偶，几乎任何部位，都可以是爱的表示。这并不是说，所有的触摸都是同等的，仍有某些特别的方式，会带给你的配偶更多的乐趣。当然，你最好的老师是你的配偶；毕竟，她才是你企求去爱的那一位，她最知道什么是自己所谓的爱的触摸。莫坚持以自己的方式和时间去抚摸她，要学习说她爱的方言。对你配偶而言，也许有些触摸是不舒服或者讨厌的；若继续坚持那样的抚摸，则传达与爱相反的信息，等于是说明了你感受不到她的需要，而且你对她所认为的愉快的事不关心。不要再犯这样的错；错误地相信带给你快乐的触摸，也会带给配偶快乐。</p>
<p>爱的抚摸是要明确且全神贯注的；比如；搓揉背部，或者性爱前的游戏、进入行房的高潮。另一方面，爱的抚摸可以是含蓄的，只需要短短的一刻；比如：当你倒咖啡给他的时候，把手放在他的肩头；你们在厨房“中擦身而过时，轻触到对方的身体。显然明确之爱的抚摸要花较多的时间；不仅在实际的抚摸上，而且培养你逐渐了解如何以这种方式向你的配偶表达爱。如果背部的按摩，能大声地向你的配偶传达爱，那么，你为了成为一个好的按摩者所花的时间、金钱和精力，都值得了。如果行房是你配偶的主要方言，阅读和讨论做爱的艺术，将会增强你对爱的表达。</p>
<p>含蓄之爱的抚摸，需要的时间较少，可是得多花心思；尤其是如果你主要的爱的语言，并非身体的抚摸，而如果你也不是从一个「抚摸的」家庭里长大，当你们在看喜欢的电视节目时，坐在沙发上彼此相靠紧些，并不需要额外的对话，但效果却如大声在传达你的爱。当你穿过房间时配偶正坐在那儿，抚摸他，只需要一分钟。你们出门时要彼此抚摸；回家的时候，也是一样。那可以只是短短的一吻或拥抱，但却从你的抚摸表达了深情。</p>
<p>一旦你发现配偶主要的爱语是身体的接触以后，就只有你的想象力可以限制你表达爱的方式了。而发现抚摸身体的新方式和新地方，总可以成为令人兴奋的挑战。如果，过去你不是一个「桌面下的抚摸者」，你可能会发现，那样将会为你们外出的晚餐添上火花。如果你不习惯在公众场合牵手，你也许会发现，漫步经过停车场时，你可以填满你配偶情感的爱箱。如果，你们通常不是一坐进车子里就亲吻的话，你也许会发现，那会使你的旅游乐趣无穷。在你的配偶外出购物前拥抱她，不仅可以表示爱，也会使她早些回家。在新的地方尝试新的身体接触，并且让你的配偶告诉你他的反应，他是否觉得那是愉快的。记住，他说的才算数；你在学习说的是他的语言。”</p>
<h4 id="身体接触的本质"><a href="#身体接触的本质" class="headerlink" title="身体接触的本质"></a>身体接触的本质</h4><p>“这时代的特征显示出性开放和性自由的特性。在那样的自由下，我们已经证明开放的婚姻(配偶双方有自由与其它人有性的亲密关系)是不真实的。那些不以道德观点来反对的人，最终仍会以情感的观点来反对。在我们对亲密和爱的需求中，有某些成分不允许我们给配偶这样的自由。当我们察觉自己的配偶在性方面跟某人有牵连时，那种情感上的痛苦是十分深刻，而且婚姻的亲密感将消逝无踪。在辅导人员的档案里满是这样的记录；丈夫或妻子设法努力解决因配偶的不忠实所引致的情感创伤。那种创伤对一个主要爱语是身体接触的人来说，更加剧烈。他深深渴望得到的(经由身体的抚摸而表达的爱)，现在却被别人硬是夺走。他的情绪爱箱不仅虚空，还被暴怒打得满是窟窿。为了满足那些情绪的需要，尚需要大加整修一番。”</p>
<h4 id="危机与身体的接触"><a href="#危机与身体的接触" class="headerlink" title="危机与身体的接触"></a>危机与身体的接触</h4><p>“所有的婚姻都会经历危机；如同父母的去世是不可避免的，车祸每年使千万人伤残和死亡，疾病对人一视同仁；失望是人生的一部分。在危机中你能为配偶做的最重要的事，是爱他或她。如果你配偶主要爱的语言，是身体的接触；在她哭的时候，没有任何事比搂着她更重要了。你说的话也许不算什么，可是你的抚触会传达你的关心。危机为表示爱提供了一个独特的机会，在危机过去很久以后，你温柔的抚触仍然会被记得；而你若是藉此来表示，可能永不会被忘记。”</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>爱的艺术</title>
    <url>/2021/11/27/%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>本书目的在于使读者确信：除了努力积极发展你的全部个性，使之形成一种创造性人格倾向外，一切爱的尝试都一定是要失败的；没有爱自己邻人的能力，没有真诚的恭谦、勇气、忠诚、自制，就不可能得到满意的个人的爱。</p>
</blockquote>
<p>这本书值得反复阅读，第一遍阅读很多地方都不是很明白，加上一些事情耽搁，没有写笔记。导致现在忘得差不多了，如果有时间我会再读一遍，然后补上书评。</p>
<span id="more"></span>

<blockquote>
<p>一无所知的人儿也就一无所爱，什么都不做的人儿也就什么都不懂。什么都不懂的人儿是没有价值的。懂得事理的人儿也懂得爱、观察和发现……对事物本质了解得越多，也就越钟爱……设想所有水果与草莓同时成熟的人儿，对葡萄一无所知。        ——帕拉塞萨斯</p>
</blockquote>
<blockquote>
<p>多数人宁愿把爱当成被爱的问题，而不愿当成爱的问题，即不愿当成一个爱的能力问题。对他们来说，爱就是如何被爱、如何惹人爱。他们沿着几条途径来追求这一目的：一条是——尤为男性所采用——应该取得成就，获得他自己所处的社会条件所允许的最大限度的地位和财富；另一条尤为女性所采用的途径，是使自己富于魅力：通过健美锻炼、修饰仪表、穿着入时等；男女共同采用的使自己富于魅力的其他方法是：举止温文尔雅，谈吐风趣幽默，乐于助人，诚实谦虚，不矫揉造作。那些使自己可爱的方法许多是与使自己成功地“赢得朋友和影响他人”的方法相同的。<strong>实际上，就我们的文化而言，大多数人所谓可爱，不过意味着适于大众的爱慕和性吸引力的融合。</strong></p>
</blockquote>
<blockquote>
<p><strong>成熟的爱是保持自己的尊严和个性条件下的结合。爱是人的一种主动的能力，是一种突破使人与人分离的那些屏障的能力，一种把他和他人联合起来的能力。爱使人克服孤独和分离感，但爱承认人自身的价值，保持自身的尊严。在爱之中，存在着这样的矛盾状态：两个人成为一体而仍然保留着个人尊严和个性。</strong></p>
</blockquote>
<blockquote>
<p>童稚的爱遵循这一原则：“我因被爱而爱。”成熟的爱遵循“我因爱而被爱” 这一原则。不成熟的爱宣称：“我爱你，因为我需要你。” <strong>成熟的爱是：“我需要你，因为我爱你。”</strong></p>
</blockquote>
<blockquote>
<p>如果我真正爱一个人，我就会爱所有人，爱这个世界，爱生活。如果我能对另一个人说“我爱你”，我就一定能够说：“我因为你而爱每个人，我通过你而爱这个世界，我由于你而爱我自己。”</p>
</blockquote>
<blockquote>
<p>人们没有看到性爱中的一个重要因素——意志。爱上某人不只是一种强烈感情，还是一种决定、一种判断、一种承诺。如果爱仅是一种感情，便没有那种永远互爱的诺言的基础。感情可生亦可灭。当我们的行为不能囊括判断和决定时，怎么可能判断它将永驻呢？</p>
</blockquote>
<blockquote>
<p>只有发自两个人存在的核心的相互交流，两个人都从核心感受到自己的存在，爱才是可能的。人的真实性只存在于这种“核心的感受”中，这里是活生生的，这里才是爱的基础。因而感知到爱是一种永恒的挑战；它不是一块供歇息的地方，而是一起行动、一起发展、一起工作；甚至不管是和谐还是冲突，是快乐还是悲哀，都从属这样一个根本事实：双方从生存的本质感到了自身的存在，他们成为自己，而非逃离自己，并在这个基础上，与对方合一。爱的存在只有一条证据：双方关系的深度以及二人各具的活力和力量；这是爱的果实，能识辨爱。</p>
</blockquote>
<blockquote>
<p>爱是一种每个人都只能通过自身并为自身获得的个人体验。</p>
</blockquote>
<blockquote>
<p><strong>在我们的文化中，实现专心致志困难得多，一切事情似乎都与专心相对抗。学会专心最重要的是学习独自一人待在那里，不读书、不听收音机、不抽烟、不喝酒。的确，专心意味着孤独——而这种能力恰是具有爱的能力的一个条件。假如我因为不能自立而依附于另一个人，他或她可算是一个救命恩人，但这种关系不是一种爱的关系。相反，独立的能力是爱的能力的条件。</strong></p>
</blockquote>
<blockquote>
<p>客观的思考本领是理智，理智后面的情感态度是谦卑。要客观，要使自己理智，就只有采取谦恭的态度才可能做到，只有在人们从孩子般的对大千世界无所不知、无所不能的幻梦中清醒过来以后才能做到。<br>就爱的艺术的实践的讨论而言，这意味着：爱依赖于相对排除自恋，它要求谦恭、客观和理智的发展。</p>
</blockquote>
<blockquote>
<p><strong>当你意识上担心没有被爱的时候，实际上你害怕的是爱（尽管这常是不自觉的）。爱意味着在没有保证的条件下承诺自己，奉献自己，希望我们的爱能激起爱人心中的爱。爱是信心的行为，谁没有信心谁便没有爱。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>献给阿尔吉侬的花束</title>
    <url>/2021/05/02/%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-lxnBRmVN" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="476646283" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br/>

<blockquote>
<p>​    我害怕。不是恐惧生命，或死亡，或是虚无，而是害怕虚掷生命，好像我从来不曾存在过似的。</p>
</blockquote>
<h3 id="故事介绍"><a href="#故事介绍" class="headerlink" title="故事介绍"></a>故事介绍</h3><p>本书是以第一人称叙述，以“进步报告”的形式来展现主人公查理的智商从68到186再到低智能人的故事。</p>
<span id="more"></span>

<h3 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h3><p>书中大部分个人情感都留在了微信读书和未来得及记录的眼泪中。</p>
<p>还是总结性的说一下。世界上任何一个生命都值得被尊重。不管是动物，还是人。不论是否带有疾病，或缺陷。当人类通过科技的手术刀，改变了生命，他还是属于自然界的，而非人所创造。</p>
<p>那些勇于献身的人值得我们铭记</p>
<p>我不会将微信读书中的内容再搬到这里来了。情感只有一次，我已留下痕迹。就像作画一样，没有两幅一样的作品，因为他们在创作中投入的感情不同。现在的我感觉内心空空的，装不下任何东西。</p>
<h3 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h3><p>查理知道自己已经快不行了，智力在飞速下降。此时身体中的查理与自己有了交集。头眼昏花，心灵一片空白。梦境…回忆…联系…问题…但现在只觉得孤立与空洞。</p>
<p>此段文字及其优美与梦幻，我将之记录下来，以便日后反复阅读。</p>
<blockquote>
<p>我在向上飘浮，移动，有如上升热气流中的一片树叶。身体中的原子加速奔离彼此，我变得更轻，不再那么紧密，而是更宽阔……更宽阔……向外爆破到太阳中。我是个扩张的宇宙，在静谧海洋里向上漂游。起初很渺小，只能环绕自己的身体，然后是整个房间、建筑、城市、国家，最后我知道如果往下看，会看到自己的影子已笼罩整个地球。</p>
<p>轻盈、没有感觉，在时空中漂流与扩张。</p>
<p>然后，就在我知道即将突破生存的外壳，像飞鱼般跃出海面之际，我感觉到来自下方的拖力。</p>
<p>这让我生气，我要摆脱。但在与宇宙融合的边缘，我听到意识分水岭四周的低语，那看似轻微的拉扯，把我拉回下面有限与平凡的世界。</p>
<p>随着波浪的消退，我扩张的灵魂也缓缓缩回地面……我并非心甘情愿，因为我宁可迷失自己，却已被下面的力量拉回，回到自己的体内。仅仅片刻间，我已再次回到沙发上，把意识的指头伸进躯体的手套中。如果想要，我知道我已能移动指头或眨眼，但我不想动，我不要移动！</p>
<p>我等待着，被动地对这莫名的经验保持开放。查理不要我突破心灵的上层帘幕，他不要我知道外在的世界是什么。</p>
<p>他害怕见到上帝吗？</p>
<p>或是害怕什么也见不到？</p>
<p>我躺在那里等待，在那个时刻，我已回到自己的身体，并再次失去身体的所有感觉与知觉。查理正拖着我回到自己体内。我向内凝望那视而不见的眼睛中央，盯着那转变成多瓣花朵的红点……那朵深藏在潜意识核心内闪烁、旋转，并发着冷光的花。</p>
<p>我逐渐萎缩。但不是说体内的原子变得更紧、更密，而是一种融合……我自己的原子融成一个微小的宇宙。那里会有高热与难忍的光芒……地狱中的地狱……但我不会注视那光芒，只会看着那既不增殖、也不分解的花朵，看着它从多融合为一。闪烁的花朵在片刻间转变成绕着绳子旋转的金盘，然后又变成旋转的彩虹泡沫，最后我回到宁静黑暗的洞穴，在潮湿的迷宫中游泳，寻找一个接受我……拥抱我……并将我吸收到他自身之内的人。</p>
<p>这样我才能够开始。</p>
<p>我在核心中又看到光芒，是许多最黑暗洞穴中的一个开口，微小而遥远……像是从望远镜的末端看进去……灿烂、刺眼、闪烁，我也再次看到多瓣的花朵（旋转的莲花……浮在潜意识的入口附近）。如果我胆敢回去，能够穿过洞穴，直到光芒彼端的洞窟，我将会在洞穴入口处找到答案。</p>
<p>还不是时候！</p>
<p>我害怕。不是恐惧生命，或死亡，或是虚无，而是害怕虚掷生命，好像我从来不曾存在过似的。而且，我开始走向洞口时，感觉到来自四周的压力，就像汹涌的波涛，不断把我推向洞穴的开口。</p>
<p>洞口太小了！我穿不过去！</p>
<p>突然间，我被一次又一次猛掷到墙上，并强迫穿过洞穴开口，那里的强光几乎要刺穿眼睛。于是，我知道我将突破外壳，进到那神圣的光芒中。但那不是我所能够承受。从来不曾有过的痛苦、冰冷、恶心，以及像有一千只翅膀在头顶拍打的嗡嗡鸣响。我睁开眼，但被强烈的光芒刺痛。我挥击着空气、颤抖，并尖叫。</p>
<p>我被一只粗暴的手摇动唤醒。是斯特劳斯医生的手。</p>
</blockquote>
<p>本段摘抄自《进步报告17》，查理读过很多书，也接触过各种女性，并与之结合。但他始终无法忘记艾丽斯——他的真爱。他曾尝试与艾丽斯发生关系，但都被阻止了，被自己所阻止。</p>
<p>在他智力下降之后，那份孤独，无助，恐惧而又无能为力的情感也随之而来。但他以为世界会放弃他，他也倔强的认为，他再也不需要任何人，任何朋友时，艾丽斯找到了他！</p>
<p>曾经在查理智力逐渐上升时，想要和艾丽斯在一起。不仅是自己告诉他，现在不是时候。艾丽斯也说过，现在的查理会遇到很多女性，智力也在不断上涨，恐怕不会在要自己，会看不起自己。诚然，事实是焦躁的查理看不起所有人，懒得向他们解释所有的“简单”事物。而艾丽斯努力的学习，想让自己能抓的住查理，却让自己感觉像个弱智。</p>
<p>现在，查理的智力又和艾丽斯一样了，她又来找到了他，他也没有阻止他。</p>
<blockquote>
<p>我还没再说什么，她就吻了我。她在我旁边的沙发上坐着，头倚在我胸前。我等待着，但没有恐慌出现。艾丽斯是个女人，但查理现在或许已经知道，她不是他的母亲或妹妹。</p>
<p>知道我已度过危机，感觉如释重负，我松了口气，因为再没有什么可以阻止我。已经没有时间害怕或假装，因为我已不可能再和另一个人经历这样的事。所有障碍都已移除，我已解开她加诸的束缚，走出迷宫的终点，而她就在那里等我。我全心全意地爱她。</p>
<p>我不需假装了解爱情的奥秘，但这回并不只有性或女人的身体，我觉得我被升离地面，跳脱恐惧与折磨，属于一个比自己更宏大的个体。我升离自我心灵的暗房，成为别人的一部分……就像那天在沙发上接受心理治疗时的经验一样。这是往外迈向宇宙的第一步……宇宙之外……因为我们在宇宙中与之融合，重新创造与延续人类的精神。我们既向外扩张与爆裂，也向内收缩与成形，这是存在的节奏……就像呼吸、心跳，或是白天与夜晚……而我们身体的节奏也在我的心灵中激起回响。这是重返那奇怪幻象的方式。覆盖在心灵上的灰暗升离，光芒穿透其中，进入我的头脑（多奇怪，那光芒竟会让我目眩！），我的身体被吸回大片汪洋中，在海洋下的奇妙浸礼中洗涤。我的身体因为给予而惊颤，她的身体因为接受而惊颤。</p>
<p>这是我们相爱的方式，直到夜晚转成静谧的白昼。我和她一起躺在那里时，我了解肉体的爱有多重要，我们需要埋在彼此怀里，一面给予，一面接受。宇宙在爆裂，每个微粒彼此远离，我们被抛入黑暗与寂寞的空间，把我们永远地撕开……胎儿离开母体，朋友和朋友分别，每个人彼此分离，踏上自己的道路，迈向孤独死亡的目标。</p>
</blockquote>
<p>书中最后一段看的我泪流满面。那个善良的查理回来了，一度渴望变聪明收获朋友的查理回来了。并且最后面包店的所有人都真心实意的接纳了他。</p>
<p>但，我却不想让他回来，也不想让查理走。</p>
<p>他知道自己的最终归宿是那个疗养院，不给他人带来不必要的麻烦，他选择了离开。</p>
<p>不要忘记自己和阿尔吉侬，他是一个人！不论智力如何，不论善良与否，不论是否为世界做过贡献。</p>
<p>我想我会永远记住你，查理！以及阿尔吉侬，并会努力不带任何歧视的对待每一个人。</p>
<blockquote>
<p>纪尼安小姐如果你有机会读到这个请不要为我难过。我很感机我就像你说的得到生命中的弟二次机会。因为我学到很多我以前甚至不知到这世界上真的存在的事情。我很高兴能够看到这些即使只是很短的时间。我很高兴我发现了所有关于我的家人和我的事。好像在我想起他们并且看过他们之前我并没有家人似的但现在我知到我有家人而且我和大家一样也是一个人。</p>
<p>我不知到为什么我又便笨或是做错了什么事。也许那是因为我不够用工或是因为有人用邪眼害我。但是如果我努力尝试而且非常用工练习也许我就可以便得聪明一点并且董得所有字的意思。我还记得一点点读那本书面已经被撕破的蓝色书时感受到的快乐。当我闭上眼睛时我会想起撕破那本书的人。他看起来和我很像只是他看起来很不一样说话也不同但我不任为他就是我因为我好像是从窗户看到在外面的他。</p>
<p>无论如何那就是我继续想要便聪明的原因这样我才能在次有那种感觉。聪明并且知到很多东西是很棒的事情我旦愿我能够知到世界上的所有事情。我希望我现在就能够在便聪明。如果我能的话我就会坐下来一直读书。</p>
<p>无论如何我感说我是世界上第一个为科学找出一些重要花现的笨蛋。我做了一些事但我不记得是什么。所以我猜我可能是为沃伦之家以及全世界所有和我一样的笨蛋做了一些事。</p>
<p>再见了纪尼安小姐还有斯特劳斯医生以及所有的人……</p>
<p>还有：请告诉尼姆教受当别人朝笑他时皮气不要那么暴躁这样他就会有更多的朋友。如果你让别人朝笑你你就比叫容易有朋友。我要去的地方我将会有很多的朋友。</p>
<p>还有：如果你有机会请放一些花在后院的阿尔吉侬坟上。</p>
</blockquote>
<p><img src="%E6%B8%A9%E6%9F%94%E8%80%8C%E5%BC%BA%E5%A4%A7.jpg" alt="温柔而强大"></p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>球状闪电</title>
    <url>/2021/05/20/%E7%90%83%E7%8A%B6%E9%97%AA%E7%94%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-hNNNolBj" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1085375" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<br>

<p>先占个坑，以后填…</p>
<p>对于《球状闪电》，想说的不多。最后海战面对三个同时袭来的超级龙卷风，江星辰临危不乱，考虑不敌，而选择锁死核动力系统，壮烈牺牲，还是让我挺难过的，莫名想到了章北海，可能都是英雄儿女吧。</p>
<span id="more"></span>

<p>林云对于武器的偏执，葬送了自己，也成就了自己。一心想用研究出的球状闪电击败敌军，可毕竟年少，考虑不周。部队全部葬送在，本就不被看好的奇袭击中。绝望的最后，使用宏裂变导致了中国1/3的国土，电子芯片全部报废而完全失守。却也因为她，快速的结束了这可怕的战争。个人感觉林云一直都没有改变，人物没有升华。可能因为母亲死于新型武器的原因，成为了她一生的枷锁，而只有死亡，才能让她真正解脱，过上平凡的生活。</p>
<p>对于主人公陈博士，他是故事人讲述者，也是剧情的推动者。因为童年的经历使他失去了父母，进而研究球状闪电。在泰山遇到林云之后，在军方和丁仪的帮助下，正式研究球状闪电。不过丁仪在大刘的书里一直都是神一样的存在，有了丁仪后主角到像个帮助读者问问题的小白。之后，借球状闪电的研究成果，开发出了天气预测系统。在卖给他国后，被改造成军事武器，间接导致江星晨阵亡，战争处于被动形势。</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>白鹿原</title>
    <url>/2021/08/11/%E7%99%BD%E9%B9%BF%E5%8E%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-yQgdewgQ" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="29738999" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<br>

<p>白孝文从一开始就被他的父亲白嘉轩当作族长被培养，自然是管教严格。与伙伴们玩耍都叫的是官名，而非是小名。<br>在他16岁的时候，家中急需要人，娶了一房大他3岁的妻子。在前2次新婚之夜，他完全没有性的观念，夜晚一直挑灯看书，直至深夜入睡。</p>
<p>在妻子的引导下，他日日夜夜都要与妻子交欢。父亲得知后，严厉的教导了他，这件事才算结束。<br>期间，奶奶有劝诫过他和他妻子，完全不顶用。从这是否可以看出，孝文虽被管教严格，却经不起引诱，为后面他和田小娥偷情的剧情埋下了伏笔。</p>
<span id="more"></span>

<p>在一点一点父亲的指引下，有了族长的样子，族长的威严。鹿子霖出于想看白家笑话的目的，想要田小娥引诱孝文。在这之前，田小娥已经因和其他男子偷情，而被孝文以族规惩罚过。<br>在一次秋收宴会中，小娥在人群中拽住了孝文的命根，将他拉到荒地上，亲吻了孝文。孝文由惊慌逐渐无法控制自己，在要与小娥发生关系时，射在了外面，无法进入小娥身体。</p>
<p>之后，父亲因家里来了土匪，被打弯了腰，自己的孩子也降生于世。他再也忘不掉与小娥的那一晚，便去窑洞中与小娥偷欢。在没被发现之前，他每次都不能进入小娥体内。因为还要“脸面”<br>当终于被父亲发现后，被废除了族长职务，对其实施族规后，顺理成章的与小娥生活在一起了。<br>也终于得到了全部的小娥，没有脸面之后，也就没有什么可顾及的了。</p>
<p>因为被发现偷欢，羞了先人的脸，而被分了家产。在饥荒年中，因为父亲不接济自己粮食，而最终与其撕破脸。不得已将田地一点一点的卖给鹿子霖。</p>
<p>然后将卖来的钱全部送到小娥手中。过年时，在一次与小娥偷欢的过程中，小娥送给孝文一杆鸦片。这也使得他最终将8亩田地和房屋全部卖给鹿子霖，当他的妻子询问他，卖地得的钱时，他百般推辞一分都没拿回家里。</p>
<p>这也使得他的妻子和孩子沦落街头，找白嘉轩讨饭吃。在与白嘉轩倾诉苦水后，最终饿死。</p>
<p>孝文也因为家财败尽而四处讨饭，野狗在死人坑中等待着孝文咽气。因听见在发赈灾粮而爬到那里，在鹿子霖的介绍下经过努力反而让其当了官，升至营长。</p>
<p>重新与白嘉轩恢复了父子关系，又从鹿子霖家卖回了房屋。解放后，当上了县长，虽然有踩着黑娃兄弟的尸体上位的嫌疑(赵匡胤行为)。</p>
<br>
<br>
<br>

<p>鹿兆海,鹿子霖的二儿子，小时候曾在白鹿原旧学堂与孝文、孝武、黑娃和兆鹏一起读书,后来又去城里读了新式学堂。<br>从小与白灵是青梅竹马，长大一起去城里念了新式学堂。在北伐战争中，曾与白灵一起搬运死人尸体，两人心生好感。</p>
<p>第一次国共合作，私定终生。用硬币互猜正反，兆海加入共产党，去了保定军校，白灵加入国民党。<br>因为兆海看到了黑娃、小娥和兆鹏在白鹿原上混乱的农协管理，给村中很多了人留下阴影，也带来痛苦，所以加入了国民党。<br>白灵也看到国民党政变后，将曾经的友党填入枯井，认为注定不是一个正确的党应该做的事，而加入共产党。</p>
<p>白灵曾多次被人求婚，却心念兆海委婉拒绝。</p>
<p>在他们再见面时，欣喜的告诉对方自己加入了对方的党派，终于可以在一起了，从而发现他们再次错过了彼此。因为党派观念不合，他们没能在一起，但都心念着对方，其他对方能放弃党派。<br>他们彼此约定，在分开的几年后，会让对方看见究竟哪个党才是正确的党。在这分开的几年中，一个不嫁，一个不娶。</p>
<p>而白灵因为对鹿兆鹏所秉承的共产党观念而喜欢上了他，生有一子。兆鹏知道弟弟与白灵的感情，但也没能克制住自己对白灵的喜爱。<br>在一次他们煽动学生爱国运动中遭到了封城围捕，兆鹏找到了兆海，说是帮嫂子出城去乡下做月子。兆海轻快又俏皮的答应了下来，兆海能看出来哥哥对白灵的喜欢，<br>但他想哥哥这次已经结婚了，自己和白灵就没有人阻碍了。可结局是那个嫂子就是白灵，出城后，兆海在白灵同意后吻了白灵的脸颊，放走了身为共产党的白灵。<br>并再次承诺，非她终身不娶。</p>
<p>白灵回到组织后，因为高级特务导致队伍疑心四起，因领导者陷入严重左倾错误，而最终导致白灵被活埋。<br>而兆海去潼关与日本作战，杀死43名日本士兵，成功阻挡日本人进入西安。后被蒋介石安排剿共，牺牲在其枪下。<br>在旅途中，遇见以为酷似白灵的女子，与其结婚后，送给她很多钱便离开了。</p>
<p>之后的几年，女子带着娃娃找到了鹿子霖，将其留给公公，自己改嫁。</p>
<br>
<br>
<br>

<p>小娥先后和四个男性发生过性关系，而且没有负罪感。可能那个时代的女性地位低下，而且小娥来到原上本来就不被大家所待见，只能依靠男人而活着。她知道别人来找她是喜欢她的身体，但给第一位老爷用尿泡过红枣，尿过鹿子霖一脸，也说明小娥不是那种卑微屈膝的人。<br>她也清楚哪种男人不能惹，那种男人靠得住。曾经有个游手好闲的人，在她窑上唱黄歌，学狼叫吓唬她，她都没有答应他。<br>孝文和黑娃是她能依靠的人，老爷和鹿子霖是她不敢招惹的人(在没有新靠山之前)。</p>
<br>
<br>

<p><img src="1.png"></p>
<center> □ 一座六棱砖塔在黑娃和小娥居住过的窑垴上竖立起来。</center>


<p><img src="2.png"></p>
<center> □ 处罚的条例包括罚跪，罚款，罚粮以及鞭抽板打。白鹿村的祠堂里每到晚上就传出庄稼汉们粗浑的背读《乡约》的声音。</center>]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>禅道使用流程</title>
    <url>/2021/01/14/%E7%A6%85%E9%81%93%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="%E7%A6%85%E9%81%93%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B.png" alt="禅道使用流程图 展开全文查看"></p>
<h1 id="禅道软件使用流程"><a href="#禅道软件使用流程" class="headerlink" title="禅道软件使用流程"></a>禅道软件使用流程</h1><h2 id="1-创建角色"><a href="#1-创建角色" class="headerlink" title="1. 创建角色"></a>1. 创建角色</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><ol>
<li>使用管理员登录</li>
</ol>
</li>
<li><ol start="2">
<li>点击组织菜单</li>
</ol>
</li>
<li><ol start="3">
<li>选择用户，点击添加用户，或者点击“批量添加”</li>
</ol>
</li>
</ul>
<h2 id="2-创建产品"><a href="#2-创建产品" class="headerlink" title="2. 创建产品"></a>2. 创建产品</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><ol>
<li>由产品经理登录禅道</li>
</ol>
</li>
<li><ol start="2">
<li>点击“产品”视图</li>
</ol>
</li>
<li><ol start="3">
<li>点击添加产品按钮，即可添加</li>
</ol>
</li>
</ul>
<span id="more"></span>

<h2 id="3-创建产品计划"><a href="#3-创建产品计划" class="headerlink" title="3. 创建产品计划"></a>3. 创建产品计划</h2><h3 id="1-产品经理登录"><a href="#1-产品经理登录" class="headerlink" title="1. 产品经理登录"></a>1. 产品经理登录</h3><h3 id="2-进入产品中，点击“计划”菜单，填写相应的计划信息即可"><a href="#2-进入产品中，点击“计划”菜单，填写相应的计划信息即可" class="headerlink" title="2. 进入产品中，点击“计划”菜单，填写相应的计划信息即可"></a>2. 进入产品中，点击“计划”菜单，填写相应的计划信息即可</h3><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li><ol>
<li>可以帮助产品人员控制产品的研发过程</li>
</ol>
</li>
<li><ol start="2">
<li>帮助相关人员了解产品进度，以做好后续工作安排</li>
</ol>
</li>
</ul>
<h2 id="4-创建产品模块"><a href="#4-创建产品模块" class="headerlink" title="4. 创建产品模块"></a>4. 创建产品模块</h2><h3 id="1-有产品经理登录"><a href="#1-有产品经理登录" class="headerlink" title="1. 有产品经理登录"></a>1. 有产品经理登录</h3><h3 id="2-选择“产品”视图，点击“模块”菜单—-gt-添加产品相应模块即可"><a href="#2-选择“产品”视图，点击“模块”菜单—-gt-添加产品相应模块即可" class="headerlink" title="2. 选择“产品”视图，点击“模块”菜单—&gt;添加产品相应模块即可"></a>2. 选择“产品”视图，点击“模块”菜单—&gt;添加产品相应模块即可</h3><h3 id="好处：可以帮助产品人员对产品有一个宏观认识"><a href="#好处：可以帮助产品人员对产品有一个宏观认识" class="headerlink" title="好处：可以帮助产品人员对产品有一个宏观认识"></a>好处：可以帮助产品人员对产品有一个宏观认识</h3><h2 id="5-需求创建"><a href="#5-需求创建" class="headerlink" title="5. 需求创建"></a>5. 需求创建</h2><h3 id="1-由产品经理登录"><a href="#1-由产品经理登录" class="headerlink" title="1. 由产品经理登录"></a>1. 由产品经理登录</h3><h3 id="2-选择“产品”视图，点击“需求”菜单—-gt-点击右侧的“提需求”按钮即可"><a href="#2-选择“产品”视图，点击“需求”菜单—-gt-点击右侧的“提需求”按钮即可" class="headerlink" title="2. 选择“产品”视图，点击“需求”菜单—&gt;点击右侧的“提需求”按钮即可"></a>2. 选择“产品”视图，点击“需求”菜单—&gt;点击右侧的“提需求”按钮即可</h3><h3 id="注意：填写相应的需求模块、所属计划、需求是否需要评审、需求名称、优先级"><a href="#注意：填写相应的需求模块、所属计划、需求是否需要评审、需求名称、优先级" class="headerlink" title="注意：填写相应的需求模块、所属计划、需求是否需要评审、需求名称、优先级"></a>注意：填写相应的需求模块、所属计划、需求是否需要评审、需求名称、优先级</h3><h2 id="6-需求评审"><a href="#6-需求评审" class="headerlink" title="6. 需求评审"></a>6. 需求评审</h2><h3 id="当需求提出以后为草稿状态，需要产品主管对需求进行评审"><a href="#当需求提出以后为草稿状态，需要产品主管对需求进行评审" class="headerlink" title="当需求提出以后为草稿状态，需要产品主管对需求进行评审"></a>当需求提出以后为草稿状态，需要产品主管对需求进行评审</h3><h3 id="评审状态"><a href="#评审状态" class="headerlink" title="评审状态"></a>评审状态</h3><ul>
<li><p>确认通过</p>
</li>
<li><p>有待明确</p>
<ul>
<li>需求需要继续完善</li>
</ul>
</li>
<li><p>拒绝</p>
<ul>
<li><p>给出拒绝原因</p>
<ul>
<li>已完成</li>
<li>已细分</li>
<li>重复</li>
<li>延期</li>
<li>不做</li>
<li>已取消</li>
<li>设计如此</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="只有进入激活状态的需求才能进行后续的开发"><a href="#只有进入激活状态的需求才能进行后续的开发" class="headerlink" title="只有进入激活状态的需求才能进行后续的开发"></a>只有进入激活状态的需求才能进行后续的开发</h3><h3 id="注意：需求评审在公司是一个线下会议，有多人决定，评审完毕后在禅道添加记录即可"><a href="#注意：需求评审在公司是一个线下会议，有多人决定，评审完毕后在禅道添加记录即可" class="headerlink" title="注意：需求评审在公司是一个线下会议，有多人决定，评审完毕后在禅道添加记录即可"></a>注意：需求评审在公司是一个线下会议，有多人决定，评审完毕后在禅道添加记录即可</h3><h2 id="7-需求变更"><a href="#7-需求变更" class="headerlink" title="7. 需求变更"></a>7. 需求变更</h2><h3 id="当需求内容（标题-描述-附件信息等）的变化都需要执行变更流程"><a href="#当需求内容（标题-描述-附件信息等）的变化都需要执行变更流程" class="headerlink" title="当需求内容（标题/描述/附件信息等）的变化都需要执行变更流程"></a>当需求内容（标题/描述/附件信息等）的变化都需要执行变更流程</h3><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><ol>
<li>产品经理登录禅道</li>
</ol>
</li>
<li><ol start="2">
<li>在“产品”试图下选择需求—&gt;选中需求，点击变更按钮，对需求内容变更</li>
</ol>
</li>
<li><p>变更的状态</p>
<ul>
<li><p>确认通过</p>
</li>
<li><p>有待明确</p>
</li>
<li><p>撤销变更</p>
<ul>
<li>会回到变更之前的版本</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="注意如果提出需求变更，并勾选“不需要评审”则直接进入激活状态，不勾选“不需要评审”需要执行审批流"><a href="#注意如果提出需求变更，并勾选“不需要评审”则直接进入激活状态，不勾选“不需要评审”需要执行审批流" class="headerlink" title="注意如果提出需求变更，并勾选“不需要评审”则直接进入激活状态，不勾选“不需要评审”需要执行审批流"></a>注意如果提出需求变更，并勾选“不需要评审”则直接进入激活状态，不勾选“不需要评审”需要执行审批流</h3><h2 id="8-立项"><a href="#8-立项" class="headerlink" title="8. 立项"></a>8. 立项</h2><h3 id="召开立项会议"><a href="#召开立项会议" class="headerlink" title="召开立项会议"></a>召开立项会议</h3><ul>
<li><ol>
<li>产品经理需求告诉项目人员会议时间/地点</li>
</ol>
</li>
<li><ol start="2">
<li>产品经理讲解需求内容，并且把需求中经过不需要的去除</li>
</ol>
</li>
<li><ol start="3">
<li>项目组成员估算完成需求的工作量</li>
</ol>
</li>
<li><ol start="4">
<li>对需求进行任务分解</li>
</ol>
</li>
</ul>
<h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><ul>
<li><ol>
<li>项目经理登陆禅道</li>
</ol>
</li>
<li><ol start="2">
<li>点击“项目”视图</li>
</ol>
</li>
<li><ol start="3">
<li>点击“添加项目”，填写项目信息即可</li>
</ol>
</li>
<li><p>注意：</p>
<ul>
<li><p>项目代号，团队/公司人员知晓即可</p>
</li>
<li><p>选择关联产品</p>
</li>
<li><p>访问控制</p>
<ul>
<li><p>默认</p>
<ul>
<li>只要“项目”视图的成员都可以访问</li>
</ul>
</li>
<li><p>私有的</p>
<ul>
<li>项目团队成员可以访问</li>
</ul>
</li>
<li><p>定义白名单</p>
<ul>
<li>相应组下的成员可以访问</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="添加团队"><a href="#添加团队" class="headerlink" title="添加团队"></a>添加团队</h3><ul>
<li>注意：当创建玩项目后可以直接点击设置团队，来组织项目中的成员（包括测试/开发）</li>
<li>团队也可以在项目创建完成以后点击“项目”视图—&gt;团队—&gt;团队管理，添加团队人员</li>
</ul>
<h3 id="确定项目中的需求"><a href="#确定项目中的需求" class="headerlink" title="确定项目中的需求"></a>确定项目中的需求</h3><ul>
<li><ol>
<li>项目经理登陆禅道</li>
</ol>
</li>
<li><ol start="2">
<li>点击“项目”视图</li>
</ol>
</li>
<li><ol start="3">
<li>点击“需求”菜单—&gt;点击关联需求—&gt;勾选项目中需要完成的需求</li>
</ol>
</li>
</ul>
<h3 id="分解需求"><a href="#分解需求" class="headerlink" title="分解需求"></a>分解需求</h3><ul>
<li><p>将需求分解给相应的开发及测试人员</p>
</li>
<li><p>分解步骤</p>
<ul>
<li><ol>
<li>项目经理登陆禅道</li>
</ol>
</li>
<li><ol start="2">
<li>点击“项目”视图</li>
</ol>
</li>
<li><ol start="3">
<li>点击“需求”菜单—&gt;选择需求—&gt;点击分解任务按钮</li>
</ol>
</li>
<li><p>注意</p>
<ul>
<li><p>任务类型</p>
<ul>
<li>事物：可以指派给多个人，主要用来做总结</li>
</ul>
</li>
<li><p>添加完任务后</p>
<ul>
<li>可以继续分配任务</li>
<li>可以进入任务列表</li>
<li>可以返回到需求列表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：实际工作中，不能项目经理一个人包办，而是多个角色自由领取相应的任务</p>
</li>
</ul>
<h2 id="9-开发阶段"><a href="#9-开发阶段" class="headerlink" title="9. 开发阶段"></a>9. 开发阶段</h2><h3 id="1-领取任务及每天的工作量"><a href="#1-领取任务及每天的工作量" class="headerlink" title="1. 领取任务及每天的工作量"></a>1. 领取任务及每天的工作量</h3><ul>
<li>当剩余时间为0时，自动提示结束任务</li>
</ul>
<h3 id="2-创建版本"><a href="#2-创建版本" class="headerlink" title="2. 创建版本"></a>2. 创建版本</h3><ul>
<li><p>步骤</p>
<ul>
<li><ol>
<li>由开发人员登陆禅道</li>
</ol>
</li>
<li><ol start="2">
<li>点击“项目”视图</li>
</ol>
</li>
<li><p>点击“版本”菜单—&gt;创建版本</p>
<ul>
<li>注意：版本名称：产品名_版本号_状态（stble/beta）_日期</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-版本关联需求"><a href="#3-版本关联需求" class="headerlink" title="3. 版本关联需求"></a>3. 版本关联需求</h3><ul>
<li><p>注意：默认版本是不可之间关联需求的，所以需要管理员赋予权限</p>
</li>
<li><p>步骤</p>
<ul>
<li><ol>
<li>由管理员登陆禅道</li>
</ol>
</li>
<li><ol start="2">
<li>进入“组织”视图</li>
</ol>
</li>
<li><ol start="3">
<li>选择“权限”—&gt;找到开发组—&gt;点击“权限维护”按钮—&gt;找到“版本”项—&gt;选择“关联需求”</li>
</ol>
</li>
<li><ol start="4">
<li>由开发登陆禅道—&gt;找到项目—&gt;版本—&gt;选中版本，点击“关联需求”选项</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="4-提测"><a href="#4-提测" class="headerlink" title="4. 提测"></a>4. 提测</h3><ul>
<li><p>步骤</p>
<ul>
<li><ol>
<li>开发人员登陆禅道</li>
</ol>
</li>
<li><ol start="2">
<li>选择测试视图</li>
</ol>
</li>
<li><ol start="3">
<li>选择“测试”菜单</li>
</ol>
</li>
<li><ol start="4">
<li>点击提交测试即可</li>
</ol>
</li>
<li><p>注意：</p>
<ul>
<li>负责人：是指测试人员</li>
<li>测试优先级：数字越小优先级越高</li>
<li>描述：可以描述一些测试需要注意的地方</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="10-测试阶段"><a href="#10-测试阶段" class="headerlink" title="10. 测试阶段"></a>10. 测试阶段</h2><h3 id="1-编写测试用例"><a href="#1-编写测试用例" class="headerlink" title="1. 编写测试用例"></a>1. 编写测试用例</h3><ul>
<li><p>步骤</p>
<ul>
<li><ol>
<li>测试人员登陆禅道</li>
</ol>
</li>
<li><ol start="2">
<li>点击“测试”视图</li>
</ol>
</li>
<li><ol start="3">
<li>选择“用例”菜单，点击“创建用例”</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="2-用例关联版本"><a href="#2-用例关联版本" class="headerlink" title="2. 用例关联版本"></a>2. 用例关联版本</h3><ul>
<li><p>步骤</p>
<ul>
<li><ol>
<li>测试人员进行登陆</li>
</ol>
</li>
<li><ol start="2">
<li>点击测试视图</li>
</ol>
</li>
<li><ol start="3">
<li>点击版本—&gt;选择关联用例即可</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="3-用例评审"><a href="#3-用例评审" class="headerlink" title="3. 用例评审"></a>3. 用例评审</h3><ul>
<li><p>在禅道用例评审默认是闭关的，如果想要对用例进行评审，禅道管理员需要进入—&gt;后台—&gt;自定义—&gt;用例—&gt;评审流程，开启即可</p>
</li>
<li><p>评审结果</p>
<ul>
<li>继续完善</li>
<li>确认通过</li>
</ul>
</li>
</ul>
<h3 id="4-执行测试用例"><a href="#4-执行测试用例" class="headerlink" title="4. 执行测试用例"></a>4. 执行测试用例</h3><ul>
<li><p>步骤</p>
<ul>
<li><ol>
<li>由测试人员登陆</li>
</ol>
</li>
<li><ol start="2">
<li>选择“测试”视图</li>
</ol>
</li>
<li><ol start="3">
<li>找到相应的用例，点击执行即可</li>
</ol>
<ul>
<li>当执行过程中如果出现bug，则直接转bug</li>
</ul>
</li>
<li><ol start="4">
<li>提交bug</li>
</ol>
<ul>
<li>可以在用例执行中提bug</li>
<li>也可以在“测试”视图下提bug</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-解决bug"><a href="#5-解决bug" class="headerlink" title="5. 解决bug"></a>5. 解决bug</h3><ul>
<li><ol>
<li>开发人员确认该bug存在</li>
</ol>
</li>
<li><ol start="2">
<li>点击“解决”</li>
</ol>
<ul>
<li><p>解决方案</p>
<ul>
<li>设计如此</li>
<li>重复bug</li>
<li>外部原因</li>
<li>已解决</li>
<li>无法重现</li>
<li>延期处理</li>
<li>不予处理 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-回归测试"><a href="#6-回归测试" class="headerlink" title="6. 回归测试"></a>6. 回归测试</h3><ul>
<li>回归测试过程中，如果该bug依然存在，那么需要激活</li>
<li>如果bug不存在则关闭，如果一段时间后又出现，则重新激活</li>
</ul>
<h2 id="11-总结"><a href="#11-总结" class="headerlink" title="11. 总结"></a>11. 总结</h2><p>围绕禅道介绍公司流程</p>
<ol>
<li><p>产品经理—&gt;收集信息</p>
<p>建立产品</p>
<ul>
<li>产品计划（很有必要存在：1. 产品经理可以控制产品过程中的优先级 2. 对于项目人员可通过了解产品进度，以做后续安排）</li>
<li>新建模块</li>
<li>新建模块对应需求</li>
<li>需求评审（实际上是线下会议）</li>
<li>需求变更—&gt;也需要变更审核流程</li>
</ul>
</li>
<li><p>项目经理</p>
<p>建立项目（基于产品）</p>
<ul>
<li>组建团队（包括测试、开发）</li>
<li>确定项目中要做的需求</li>
<li>对进行任务分解—&gt;开发、测试等等<ul>
<li>注意：任务类型：事物，可以分配给多个人，主要用来做总结</li>
</ul>
</li>
</ul>
</li>
<li><p>开发</p>
<p>领取任务</p>
<ul>
<li>统计每天工作量</li>
<li>提交版本：产品名_版本号_状态（stble,beta）_日期</li>
<li>提交测试</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li>编写测试用例</li>
<li>用例评审—&gt;默认是关闭的，需要管理员开启</li>
<li>执行用例—&gt;转bug</li>
<li>由开发人员进行修复（先确认-&gt;再修改状态）</li>
<li>回归测试：如果有问题则激活，否则关闭</li>
</ul>
</li>
</ol>
<p><a href="/download/pdf/%E7%A6%85%E9%81%93%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B.pdf">点击下载禅道使用流程pdf</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>禅道</tag>
      </tags>
  </entry>
  <entry>
    <title>系统学习英语</title>
    <url>/2021/01/16/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>作者：潇峰学长<br>链接：<a href="https://www.zhihu.com/question/22808635/answer/258783880">https://www.zhihu.com/question/22808635/answer/258783880</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>谢邀，英语到底怎么学？我总结自身之前英语，西班牙语，以及日语三门语言的学习经验，提炼一套语言学习方法，<strong>特别花了两周写出这篇万字精华攻略，干货满满，建议先赞再看，</strong>从英语学习的方法论到不同阶段的注意要点及教材，听说读写。<strong>英语学习的“道和术”。</strong></p>
<p>在本文第一部分，我从愿景和方法论两方面重点谈谈语言学习的“<strong>道</strong>”。第二部分，在“道”的基础上，我会专注英语学习的“<strong>术</strong>”， 从学习周期和学习体系出发，结合在不同学习阶段使用的具体的教材推荐以及使用方法。相信不管是零基础或者是中高级的英语学习者都能从这份攻略中找到自己的需要的。</p>
<span id="more"></span>

<p><img src="https://pic3.zhimg.com/v2-7d71b9c02cfb7d593fd09be2af949e1e_b.jpg" alt="img"></p>
<p><strong>（全文知识脑图）</strong></p>
<p><strong>英语学习的“道”：</strong></p>
<p><strong>愿景：为表达，交流，文化而学习语言</strong></p>
<p>我坚信语言学习并不那么需要天赋，更重要的是日积月累，以正确的方法来进行高效的学习。坚持是最难也是最简单的事情。</p>
<p>让我们一起看看Cambridge<br>Dictionary 对语言Language的定义：</p>
<p>“a system of communication consisting of<br>sounds, words, and grammar, or the system of communication used by people in a<br>particular country or type of work”</p>
<p>语言的本质是一种<strong>被人使用的沟通系统</strong>, 包含声音，词汇以及语法。每一种语言都有独特的使用群体和文化背景。</p>
<p>在应试教育的思维下，往往我们把语言学习当成一项任务，只强调语法和词汇的输入，而没有交流形式的输出。这种思维忽略了语言的本质，让语言学习变得痛苦。<strong>语言学习应该回归其本质，交流、表达和文化这三个维度。</strong>我个人从语言学习厌恶者到语言兴趣爱好者的转变也是由于这一思维的转化。</p>
<p>在学习英语的过程中，刚开始从零开始的跌跌撞撞，到慢慢可以阅读比较基础的英文读物，听懂一部分的外文电台节目。视野也随之变得宽广，世界向你打开了另外一个大门，门后面是语言学习进阶之路。通过坚持学习英语，你领略到一个日益丰富、不同于往日的文化，你手头的积累的信息量也是最新的、高质的。日常生活中帮助老外指路，参加英语角活动认识新的小伙伴，这些点点滴滴都带来惊喜、欣慰以及激励。看到具体英语能力的提升和应用，你感知到“英语是有用的”，你有了自信，也有了继续学下去的动力。</p>
<p><strong>方法论：理论，理解，实践，引导，复习，习惯化。</strong></p>
<p>这六个步骤形成我的学习闭环——从最初接触一个语言知识，到把它实践纠正内在化。</p>
<p><img src="https://pic3.zhimg.com/v2-a4b3c71cbc13f22aada538a6445001ca_b.jpg" alt="img"></p>
<p>听起来似乎有点抽象，很多小伙伴可能觉得语言学习不就是听说读写，输入输出。作为一枚社会学背景的语言爱好者，我倾向于将其抽象归纳为一套方法论。这一套方法也在之前我写的《如何三年学习英日西三门语言》中提到过，这里再拓展一下。</p>
<p><strong>其实学习方法都是通用的，这套方法论其实适用于学习任何一项技能。先寻找最本质的真理，强调底层理解，再以高强度强质量的实践去快速熟悉，实践后再寻找已经高度掌握这项技能的导师(mediator) 来帮你纠正，进入下一个“最近发展区”，之后不断地去复习消化，最后把这项技能习惯化，内在化。</strong></p>
<p>*<strong>第一个阶段是“理论”*</strong></p>
<p><strong>“理论”是指一定要追求事物背后最根本的内涵</strong>。很多时候我们在学习一些事情的时候，看到的都是一些具像化的东西，但是并没有思考它背后的东西到底是什么。</p>
<p>应试教育的语言学习中，点到即止，只追求对错却不知道为什么。这是一个思维上的，一个系统性的大问题。</p>
<p>比如说学习虚拟式，虚拟式的用法是什么，它的源头是什么，为什么在生活中要用虚拟式？它可能表达了不确定的语气、可能表达祈使……它有很多种不同的用法，但你要思考它背后的原理。</p>
<p>就像我举的这个案例，你要去思考这种时态到底希望表达什么，而不是简简单单地记住它，在表达，交流，了解文化中中如何使用。</p>
<p>包括在大学中做的非常多的英文演讲，你可能就会按照老师教的这几句话去讲。但是你要思考做 presentation 到底是为了什么，它背后的东西是什么？如果是为了传递一个<br>idea （比如TED），那么要在很简短的时间内去讲一件事情，去追求这件事背后的本质，并思考如何以有趣、新颖和互动的方式去交流，这就是我所说的理论。  </p>
<p><strong>信息时代我们最不缺的就是学习资料了。信息太多了，信息的筛选成本也大大提高。</strong></p>
<p>很多时候，我们看到英语资料干货就去收集（放到数据库里或者收藏夹里），感觉自己有很多本领。如果单单有了理论但是没有后面的理解包括实践、引导、复习和最后的习惯化。那你并没有去消化，你只是在“知”这个范围内。可能甚至完全没有达到“知”，就不用说后面的“行”了。<strong>很多时候我们没有意识到知与行的鸿沟。</strong></p>
<p>所以，我们的大多数人可能也只是停留在第一个步骤了，停留在不断地收集干货了。</p>
<p>在这里也送给大家一句话——<strong>“在这个信息时代，不要把自己的收藏当作知识、不要把看到的东西当成自己的、不要把阅读当成掌握”。</strong></p>
<p>这句话也是我非常深刻的个人体验。</p>
<p>可能太多人都有这样一个癖好——“非常喜欢收集各种干货、非常喜欢下载各种东西、非常喜欢在朋友圈传各种需要分享资料”。首先，我必须承认这是一件好事。但是收集这些资料以后，你需要去从里面找出好的资料，然后理解它。</p>
<p>*<strong>第二个阶段是“理解”*</strong></p>
<p>在我看来，理解分为几个不同的层次：</p>
<p>第一层次的理解可能你只是读过一遍文字之后的理解。第二层次的理解可能是读了三遍或者思考了一下，你能用这个东西去完成任务。</p>
<p>第三层次的理解是你可以去教授别人，包括灵活地运用这种东西。当你理解以后你才能够把这个理论讲给别人。</p>
<p><img src="https://pic3.zhimg.com/v2-1ac5b49f9f6e6a9b9a006b9f4444bf5a_b.jpg" alt="img"></p>
<p><strong>我们应该追求的也是第三层次的理解——“理解了之后达到完全理解并且能够输出”。</strong></p>
<p>就像英语中的一个语法，你可能在掌握过去时以后有能力做题目了，你就达到了第一个层次的理解。如果你能够不拘泥于做题，能够在一个合理语境中正确使用过去时，在作文中很好地表达，你就达到了第二个层次的理解。如果你能够讲出来为什么使用过去时，过去完成式和过去时的区别是什么，并且能够教授给其他人，你就已经达到了第三阶段的理解。</p>
<p>*<strong>第三个阶段是“实践”*</strong></p>
<p>先举个例子，有天我和朋友们一起去开卡丁车。卡丁车大家可能都有经历，戴个头盔在赛道上开赛车。之前有听过很多道理，怎么在弯道快速地翻越、快速地加速和冲刺。但是我发现，只有我第一次尝试上车，开了第一圈，开了第一个十圈之后，我有稍微一点点的理解，明白了如何开卡丁车，如何配合风速和车速。当时我是最后一名。当第二个十圈开完以后，我发现我有感觉了。感觉可能不是特别容易获得，它一定要通过一定量的实践结合你的理论，并在实践中不断吸收你的理论。</p>
<p>一个英语演讲对语音的把控、语言的掌握都是在不断的实践中不断地去深化理解，变成了“潜意识”和“语感”。这些都是和实践紧密联合在一起的。就像开卡丁车，你可能学了大量的语法，但是你并不知道怎么样实践。只有你真正用到它的时候，你才会知道这样开车是最爽的，这样开车过弯道是最快的……</p>
<p>*<strong>第四阶段是“引导”*</strong></p>
<p>这个步骤是高效学习的关键。很大程度上受到了被称为“心理学中贝多芬”的前苏联教育心理学大师维果茨基Lev Vygosky的启发。</p>
<p>根据维果茨基的“最近发展区”理论：</p>
<p><strong>“学生的发展有两种水平：一种是学生的现有水平，指独立活动时所能达到的解决问题的水平；另一种是学生可能的发展水平，也就是通过教学所获得的潜力。两者之间的差异就是最近发展区。教学应着眼于学生的最近发展区，为学生提供带有难度的内容，调动学生的积极性，发挥其潜能，超越其最近发展区而达到下一发展阶段的水平，然后在此基础上进行下一个发展区的发展。”</strong></p>
<p><img src="https://pic4.zhimg.com/v2-1d4f00e848ff2a695deefe9685174ab3_b.jpg" alt="img"></p>
<p>就像学习语言一样，它的捷径就是——不断找一个比你高几个段位的“高手”。我把它称为“引导”， Vygosky的话说叫做“mediation”。这个高手能够给你很多正确的指点，防止你在摸索的过程中看了错误的材料，产生一系列的问题。</p>
<p>这个“前人”（不一定是要顶尖的人，经验丰富就好）能够给你去引导和纠正错误。就像你在说英语的时候，你可能自我感觉很好（包括你写作的时候），你需要有人引导你学习。<strong>如果没有一个高段位的人及时去引导你把你抬上去（起到一个脚手架的作用），到达Vygosky所说的“最近发展区”，很多时候单凭你个人摸索会花十倍甚至百倍的力量才能达到一样的段位。</strong></p>
<p>*<strong>第五阶段是“复盘”（复习）*</strong></p>
<p><strong>不断地反思、调整、回顾。</strong></p>
<p>人是很容易遗忘的。比如说你这次被纠正以后，下一次也很难保证不犯同样的错误。所以人是非常地需要回顾反思的。可能有些小伙伴读过我那篇《二十五岁需要做的五件事》。我当时为了学语言，有一大堆的资料册和资料柜，每种语言按照不同的部分分类。每个资料柜都是我的数据库，我会不断地整理、记录、反思、回顾、消化，以求用最快的速度去学习。</p>
<p><img src="https://pic2.zhimg.com/v2-0e358c5814f934498078dd566b8ccb95_b.jpg" alt="img"></p>
<p><strong>图片来自《Vygosky for Educators》pp109</strong></p>
<p>*<strong>最后一个部分是“习惯化”*</strong></p>
<p>也就是整套的“由知到行”，很多人一次做对了，但是很难说每次都做对。<strong>习惯化是非常重要的，把一次正确的实践变成习惯，把理论内在化，把这个东西变成你身体的一个部分，当你去使用它的时候你甚至可以不用思考。这也是文化社会学家Bourdieu所谓的文化惯习（Habitus）。</strong></p>
<p>这可能是学习的最高境界。比如说，有些人说英语可能真的不用去想语法，但是我们说英语的时候可能会去思考怎么使用语法。当我们使用多了以后，我们也就不用去思考很多东西，这样的话可能也就达到了一个很高的“知行合一”的境界。</p>
<p><strong>英语学习的术：</strong></p>
<p><strong>学习体系：</strong></p>
<p>在英语学习的日常实践中，要逐渐形成适合自己的一套学习体系。我觉得要做到四个要点：<strong>生态化，流程化，数据化以及精细化。</strong></p>
<p><img src="https://pic1.zhimg.com/v2-19bf7fc6a96d971e7a0d98e6a697aba8_b.jpg" alt="img"></p>
<p><strong>生态化</strong>：把英语学习当成是一个有机的生态整体，听说读写环环相扣，互相促进，而不是人为拆分，单词不好狂补单词，口语不好只练口语。从一开始就注重全面平衡进展，哪怕进度稍微慢一些。</p>
<p><strong>流程化</strong>：养成持续稳定的学习流程，避免三天打鱼两天晒网的波动性学习。比如每天2小时英语学习，固定半小时练习听力，半小时背记单词再花1小时学习语法和阅读，周末的时候写一篇作文。这样的常规式稳定流程化学习确保了学习的稳定和积累。</p>
<p>这里介绍一个将时间流程化做到极致的大牛，柳比歇夫。他是哲学家，昆虫学家以及数学家，坚持56年用时间统计法，在80多岁的生涯中完成了70多部学术著作。一生效率之高，跨领域之多让人敬佩。由俄罗斯作家格拉宁所写的柳比歇夫传记《奇特的一生》详细展现了他流程化的时间管理。</p>
<p>虽然我在做自己的时间投资管理的时候，并不知道柳比歇夫。以上是我的时间记录表格，和他的精细化管理本质上相似。</p>
<p>我之前学习语言的时候要求自己每日高效学习4小时，尽量不熬夜，正常作息。</p>
<p>表格非常简单，也是用普通的Excel记录。横轴是时间，以每周为单位。</p>
<p>如：2017.10.23-10.29</p>
<p>周一， 周二， 周三， 周四， 周五， 周六， 周日</p>
<p>纵轴是项目名，因人而异。我会把项目按照优先级以及时间比从上往下排序。</p>
<p>每个项目对应的具体任务会写在当日的框里面，完成标双划线。</p>
<p>如果遇到特殊情况，既定任务在当日无法完成，不会感到懊悔，而是顺延到下一天的任务一起完成。在保持整体进度不受影响下，灵活机动。</p>
<p>这样一个简单的表格让我对语言学习时间的安排有了精细明确的感觉，每周每月以及每年都可以定期复盘回顾，了解情况来进行调整。</p>
<p><img src="https://pic4.zhimg.com/v2-0e6f2d0bde92ebdd36468bcae65c524b_b.jpg" alt="img"></p>
<p><strong>数据化</strong>：虽然语言能力很难定量化检测，我们还是可以定期记录学习数据，了解自己的进度和效果。这样可以定量地让我们清晰地了解自己目前的进展。比如花了多少时间在各项的时间，单词记录的总数，语法错误的出现率等等。</p>
<p><strong>精细化</strong>：不断归纳整理，结合Onenote，打造自己的英语学习库，如英语文化背景库，常用口语表达库，写作好词好句库，语法易错点库，英剧美剧库等等。把学过的知识点，看到的好的语言素材，犯过的错误全部精细化整理。</p>
<p><img src="https://pic4.zhimg.com/v2-7a1dbd6ca032026cef24ab3ac0fe7553_b.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-5c58de8f76bd7e8a55c30955471f3447_b.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-e3cad082967b5c0a9b07cbe2e1497204_b.jpg" alt="img"></p>
<p>(我的语言学习库)</p>
<p><strong>学习周期：</strong></p>
<p>最后来谈谈学习周期以及不同阶段推荐使用的学习材料。</p>
<p><img src="https://pic3.zhimg.com/v2-13a3f693b00d39d5bde5cc0109105d96_b.jpg" alt="img"></p>
<p>欧洲通用语言框架将语言能力分为6个等级，A1，A2 （初级）；B1，B2（中级），C1，C2 （高级），分别对应不同的语言能力阶段。</p>
<p><img src="https://pic2.zhimg.com/v2-67ffaccd25771b847958e80a19c45801_b.jpg" alt="img"></p>
<p>以下是我做的翻译，根据欧洲标准语言框架，语言能力主要展现在理解，口语和写作三个维度。其中理解细分为听力和阅读，口语细分为口语对话和口语表达。</p>
<p>根据我个人的实践以及每个阶段的特性，<strong>我将语言学习看做一个生命周期，每个阶段有着不同的特点（类似下图的产品生命周期），A1，A2为导入期； B1，B2 为成长期，C1，C2为成熟期，而这之后如果语言没有经常使用则会慢慢退化进入衰退期。</strong></p>
<p><img src="https://pic1.zhimg.com/v2-fbd1ca95b3b19d04bb72544df1e35b88_b.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-c4565d457130d44f3a2606722e1c9685_b.jpg" alt="img"></p>
<p><strong>导入期：</strong></p>
<p>导入期是语言学习从0到1的阶段，就像盖楼处于打地基的阶段，也是最艰难和关键的的。<strong>这时候你从零基础接触英语，在很长的一段时间内，学习不会有明显的起效，你可能会灰心，会觉得自己并没有天分。</strong>随着慢慢坚持，特别是到了导入期后期，你会感到慢慢对英语有了感觉，进度也逐渐加速。</p>
<p><img src="https://pic1.zhimg.com/v2-1b09d49cd335ad298a4e64f39fcd9060_b.jpg" alt="img"></p>
<p>A1，A2 英语基础使用者的特点如下：</p>
<p><img src="https://pic4.zhimg.com/v2-e7f964150b1069fdd4d5bf868b95e107_b.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-7871f2b237bc4a6b30d780a6e282e5b3_b.jpg" alt="img"></p>
<p>按照每天2-3小时的学习投入，导入期大约为6-8个月。</p>
<p><img src="https://pic2.zhimg.com/v2-1db459548cef9da54dcd8bd60d828205_b.jpg" alt="img"></p>
<p><strong>教材推荐：</strong></p>
<p><strong>音标入门：</strong></p>
<p><strong>《Tree or Three》：</strong>《剑桥国际英语语音入门(第2版)》讲述了：它与《Ship or<br>sheep？》为同一系列，是由剑桥大学出版社出版的最为经典的英语语音教材。包含科学，系统的语音练习：逼真的口型图，详细的发音指导，互动的语音、音节、连读、重读与弱读、句子重音、语调、句子节奏等语音练习。最小对立体（minimal pairs）的对比发音训练。特别适合中国学习者比较和纠正容易混淆的发音，在语音对比中更快更好地掌握英语发音的规律。丰富的词汇短语、短句及对话近2000个单词以及相关的短语、短句和真实对话；600余幅插图。</p>
<p><img src="https://pic2.zhimg.com/v2-06eeeb20fcce2d89130d9eab25cb088d_b.jpg" alt="img"></p>
<p>亚马逊链接：<a href="https://link.zhihu.com/?target=https://www.amazon.cn/%E5%89%91%E6%A1%A5%E5%9B%BD%E9%99%85%E8%8B%B1%E8%AF%AD%E8%AF%AD%E9%9F%B3%E5%85%A5%E9%97%A8-Ann-Baker/dp/B002I7TEPK/ref=sr_1_1?ie=UTF8&qid=1510384693&sr=8-1&keywords=Tree+or+three">剑桥国际英语语音入门(第2版)</a></p>
<p><img src="https://pic2.zhimg.com/v2-bb2525872971bb983a65b6e3ec7ea0f5_b.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-0ae60eff76b962e19f22e2694fe85b0c_b.jpg" alt="img"></p>
<p>单个音标的发音及口型还可以重点参考：BBC出品的英式发音教程</p>
<p><img src="https://pic1.zhimg.com/v2-ce1db23673bfc0915e4ee12353284480_b.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-7709d6f324bef73614fa1069587e486f_b.jpg" alt="img"></p>
<p>B站视频连接：<a href="https://link.zhihu.com/?target=http://www.bilibili.com/video/av3102611/">http://www.bilibili.com/video/av3102611/</a></p>
<p>语法：重点推荐剑桥校友张满胜的《英语语法新思维》初级教程-走近语法</p>
<p><img src="https://pic1.zhimg.com/v2-59e63b208815c0839a49c8793041d788_b.jpg" alt="img"></p>
<p>这套书强调英语语法背后是英语的思维。英语学习者应该把语法当作思维规律来理解，而不应该当作规则来死记，把“死规则”转化为“活思维”。也就是我在道中强调的“追求事物的底层逻辑”。在书中，作者从比较中英思维上的差距出发，解释英语语法。比英文原本语法书更适合国人使用。</p>
<p><img src="https://pic1.zhimg.com/v2-b5a2f55c133bdb60509f669084758514_b.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-46c7d82e83e97bc36f18dadb68bfc490_b.jpg" alt="img"></p>
<p>词汇：英语大学四级词汇即可</p>
<p><strong>成长期：</strong></p>
<p><strong>完成导入期后，英语学习进入成长期。在成长期中，我们完成从英语的基础使用者到独立使用者的进阶。投入的时间能明显见到效果。</strong>绝大多数完成高中英语学习的学弟学妹以及大学四级在成长期B1阶段，当然因为国内教学考核体系忽视口语，听说能力可能弱于B1，成长期B2往往是英语国家留学的语言的要求。</p>
<p><img src="https://pic4.zhimg.com/v2-84465842053a39b3e41b5eee79fe3e37_b.jpg" alt="img"></p>
<p>以下是雅思与欧标的通用换算：</p>
<p><img src="https://pic4.zhimg.com/v2-e056957c95b37b7578a4ee9feec9ca33_b.jpg" alt="img"></p>
<p>（图片来源<a href="https://link.zhihu.com/?target=http://IELTS.ORG">http://IELTS.ORG</a>）</p>
<p>B1， B2英语独立使用者的特点，学弟学妹们可以自我对照一下。</p>
<p><img src="https://pic3.zhimg.com/v2-afc98c5dc687e572d1f5920ef785ae42_b.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-563263b271859c8550dd1e8ad3aa3c65_b.jpg" alt="img"></p>
<p>成长期比导入期的时间稍短，按照每日2-3小时投入，大约需要4-6个月。<strong>渡过了导入期苦哈哈的日子，成长期我们可以充分享受到语言学习带来的乐趣。对于非专业性的工作和学习，成长期的英语能力都能够应付。在成长期因为英语基础的提升，学习资源也特别丰富。</strong></p>
<p><img src="https://pic1.zhimg.com/v2-0e2b1440fbc780eaa8eae803100c8900_b.jpg" alt="img"></p>
<p><strong>推荐教材：</strong></p>
<p>语法：继续《英语语法新思维》系列，完成第二册中级和第三册高级的学习。</p>
<p>单词：在之前4000词的基础上，按照雅思7000核心词学习，这一部分教材市面上也很多。</p>
<p>口语: 口语话题可以直接按照雅思话题来进行练习。在这一阶段，我们可以熟悉练习英语的弱读，连读等表达习惯。</p>
<p>这里首推《Elements of Pronunciation》：</p>
<p><img src="https://pic4.zhimg.com/v2-e5e16f432fa00471e93379a5df298d77_b.jpg" alt="img"></p>
<p>来自剑桥大学语言教学中心（Cambridge Language Centre)的官方推荐，我拜读后对英语发音的理解和掌握有了质的提升。剑桥大学出版社（Cambridge Press）曾出版过一书Elements of<br>Pronunciation 发音的要素，着重解决 weak form–弱读，cluster–例如辅音音节连续出现在一个单词中，link-up–连读，contraction–缩略， stress time –一句话里面各重点单词所花时间是一样的，这些方面的发音问题。</p>
<p>以下是我从***Elements of Pronunciation***一书中整理出的三个连音规律：</p>
<p>1，连接词末的辅音与后一词词头的元音</p>
<p>例如：read it<br>变为 rea-dit</p>
<p>put-it-off 变为<br>pu-ti-toff</p>
<p>2 , 以辅音字母r结尾的单词跟着一个以元音开头的单词时，r的发音往往是保留的</p>
<p>例如： after<br>all 变为 afte-rall</p>
<p>3 , 连接词末的元音与后一词词头的元音</p>
<p>例如：do it 变为 do-it 其中o-i发/w</p>
<p>You are; I<br>ought;</p>
<p><img src="https://pic4.zhimg.com/v2-55c6b8ebbd24a046aa9be54e3bce8703_b.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-501822c1328795f688c725cc73a4d4a1_b.jpg" alt="img"></p>
<p>此外，在成长期，你也应该了解如何做专业的演讲（Presentation）。这里首推英语教育学大师Douglas Bell的《Passport for Academic Presentation》。书中介绍了各类常见的演讲表达方式及技巧。</p>
<p><img src="https://pic4.zhimg.com/v2-13af214b6f0770182b1940bf2bada2d7_b.jpg" alt="img"></p>
<p>以及 《Talk like Ted》，《像Ted演讲一样说话》</p>
<p>Ted是非常经典的演讲方式，追求以20分钟左右的演讲时间传递一个想法。这本书很好地分析了Ted演讲的一些技巧以及案例，生动形象，结合书中的案例观看，非常易读。</p>
<p><img src="https://pic4.zhimg.com/v2-0cbaca4da03142d53ee4c2e0bf0518e7_b.jpg" alt="img"></p>
<p>亚马逊链接：</p>
<p><a href="https://link.zhihu.com/?target=https://www.amazon.com/Talk-Like-TED-Public-Speaking-Secrets/dp/1250061539/ref=sr_1_1?ie=UTF8&qid=1497944860&sr=8-1&keywords=talk+like+ted">The 9</a><br><a href="https://link.zhihu.com/?target=https://www.amazon.com/Talk-Like-TED-Public-Speaking-Secrets/dp/1250061539/ref=sr_1_1?ie=UTF8&qid=1497944860&sr=8-1&keywords=talk+like+ted">Public-Speaking Secrets of the World&amp;amp;#x27;s Top Minds: Carmine</a><br><a href="https://link.zhihu.com/?target=https://www.amazon.com/Talk-Like-TED-Public-Speaking-Secrets/dp/1250061539/ref=sr_1_1?ie=UTF8&qid=1497944860&sr=8-1&keywords=talk+like+ted">Gallo: 9781250061539: Amazon.com: Books</a></p>
<p>与大家分享我做的读书脑图,放大可见笔记细节。</p>
<p><img src="https://pic3.zhimg.com/v2-4eef844c39401bfa6628e92360aa603a_b.jpg" alt="img"></p>
<p>听力的练习可以开始看英剧美剧,TED 以及英文纪录片，特别是BBC出品的系列纪录片。英剧美剧首推《老友记》《Friends》作为入门款。作为经典美剧，《Friends》中的用词都非常接近生活场景，简单易懂，表达灵活，本身内容讲述的是一群大学刚毕业年轻人的生活。可以看无字幕版，反复看，边看边记录好的表达。共有10季，当年我练习西班牙语听力就是从《Friends》的西班牙语版《Amigos》看起的，看了不下五遍</p>
<p><img src="https://pic3.zhimg.com/v2-26327e7ea478da240c884f07ec49687a_b.jpg" alt="img"></p>
<p>同时你可以开始听一些TED演讲，学习优秀TED主讲人的表达和思想。</p>
<p><img src="https://pic4.zhimg.com/v2-92f4bafb74276f092d49f978819d5c47_b.jpg" alt="img"></p>
<p>阅读：你可以开始读一些英文小说，这里首推《Harry Potter》《哈利波特》作为入门级阅读，再慢慢进阶到其他难度更大的英文文学。</p>
<p><img src="https://pic3.zhimg.com/v2-f9ac411ba0b3a4f0080e9440f218a4f2_b.jpg" alt="img"></p>
<p>J·K罗琳编织的魔法世界下年轻的巫师们成长的故事。可是说是十分经典的读物了，有趣又不缺乏思考。虽然系列中有总计7本书，每一本都毫不逊色，情节一环扣一环，在生动展示了魔法世界的神奇和不可思议的同时，向我们呈现了各个角色丰富的内心世界和他们各自的成长。单词量不大，唯有些比较难读的咒语，但是把它们记下来岂不是很酷吗？</p>
<p>同时可以开始阅读新闻报道，比如BBC新闻。</p>
<p><img src="https://pic3.zhimg.com/v2-3def49fcfb4a6963a0d945c9242128de_b.jpg" alt="img"></p>
<p>最后谈谈写作，强烈推荐 《Elements of Style》。</p>
<p>《Elements of Style》 by <a href="https://link.zhihu.com/?target=https://www.amazon.com/William-Strunk-Jr./e/B000AQ6TSQ/ref=dp_byline_cont_book_1">William Strunk Jr.</a></p>
<p><img src="https://pic4.zhimg.com/v2-044dde949c3c951f6c5e4d9a9bd3f177_b.jpg" alt="img"></p>
<p>评价:</p>
<p>“Buy it, study it, enjoy it. It’s as timeless as a book can<br>be in our age of volubility.”</p>
<p>— <em>The New York Times</em></p>
<p>“No book in shorter space, with fewer words, will help any<br>writer more than this persistent little volume.”</p>
<p>— <em>The Boston Globe</em></p>
<p>“White is one of the best stylists and most lucid minds in<br>this country. What he says and his way of saying it are equally<br>rewarding.”</p>
<p>— <em>The Wall Street Journal</em></p>
<p>作者介绍：</p>
<p>William Strunk Jr. (1 July 1869 – 26 September 1946), was a<br>professor of English at Cornell University and author of the The Elements of<br>Style (1918). After revision and enlargement by his former student E. B. White,<br>it became a highly influential guide to English usage during the late 20th<br>century, commonly called Strunk &amp; White.</p>
<p>《格调的元素》</p>
<p>这本书作为这个时代的畅言标志，有永恒价值。 –纽约时代</p>
<p>相比短小精悍、容量巨大的这本书，没有一本书可以通过更少的内容、空间，更多地帮助其他作家。–波士顿</p>
<p>White拥有这个国家最清晰的头脑与最好的写作风格。在此书中，他表述的内容以及他表达的方式都具有很高的价值。 –华尔街</p>
<p>作者简介</p>
<p>William 是康奈尔大学的英文教授，风格元素的作者。这本书经过他原学生White的修改与扩充，成为20世纪末有影响力的英文使用指导。</p>
<p>亚马逊链接：</p>
<p><a href="https://link.zhihu.com/?target=https://www.amazon.com/Elements-Style-Fourth-William-Strunk/dp/020530902X/ref=sr_1_1?ie=UTF8&qid=1496107835&sr=8-1&keywords=elements+of+style">The Elements of</a><br><a href="https://link.zhihu.com/?target=https://www.amazon.com/Elements-Style-Fourth-William-Strunk/dp/020530902X/ref=sr_1_1?ie=UTF8&qid=1496107835&sr=8-1&keywords=elements+of+style">Style, Fourth Edition (9780205309023): William Strunk Jr., E. B. White, Test</a><br><a href="https://link.zhihu.com/?target=https://www.amazon.com/Elements-Style-Fourth-William-Strunk/dp/020530902X/ref=sr_1_1?ie=UTF8&qid=1496107835&sr=8-1&keywords=elements+of+style">Editor, Roger Angell: Books</a></p>
<p><strong>成熟期：</strong></p>
<p><strong>大部分人的英语学习都停留在成长期，因为已经够用了。只有不到1%的学习者，凭借着对语言的喜爱，不满于现状，进入成熟期，精进到成熟期，成为资深使用者。在这一阶段，学习的提高效果不再明显，趋于平缓。</strong></p>
<p><img src="https://pic2.zhimg.com/v2-297964c03a010aacd2fb4da339c0c6f1_b.jpg" alt="img"></p>
<p>以下是成熟期的语言学习者特点：</p>
<p><img src="https://pic2.zhimg.com/v2-e71cabaebbabb9e9beaae438ff74dc61_b.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/v2-73d4e5126b69e033fa2c1adf434c7c0e_b.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/v2-a3582648866f5f9aca3903d73565c161_b.jpg" alt="img"></p>
<p>从B2到成熟期，按照每日2-3小时的投入，大约需要4-6个月。</p>
<p><strong>口语可以关注一些英文的辩论，讨论技巧</strong>。这里首推英国议会辩论。看英国绅士们如何唇枪舌战，就各项政治议题，骂人不带脏字。</p>
<p><img src="https://pic3.zhimg.com/v2-41697d2fe13f0d32ff146b90e525b752_b.jpg" alt="img"></p>
<p><strong>词汇则首推《Academic</strong><br><strong>Vocabulary in Use》，介绍各种词汇在学术场景上的用法。</strong></p>
<p><img src="https://pic3.zhimg.com/v2-f803615dc61e719b311a2cdd9a87831a_b.jpg" alt="img"></p>
<p><strong>写作则是《On Writing Well》。</strong></p>
<p>《On Writing Well》 by <a href="https://link.zhihu.com/?target=https://www.amazon.com/William-Zinsser/e/B000AQ1LN4/ref=dp_byline_cont_book_1">William</a> <a href="https://link.zhihu.com/?target=https://www.amazon.com/William-Zinsser/e/B000AQ1LN4/ref=dp_byline_cont_book_1">Zinsser</a> (Author)</p>
<p><img src="https://pic2.zhimg.com/v2-2a4576937f451237af512aa052f6725d_b.jpg" alt="img"></p>
<p>评价：</p>
<p><em>On Writing Well</em> has been<br>praised for its sound advice, its clarity and the warmth of its style. It is a<br>book for everybody who wants to learn how to write or who needs to do some<br>writing to get through the day, as almost everybody does in the age of e-mail<br>and the Internet. </p>
<p>Whether you want to write about people or places, science and technology, business, sports, the<br>arts or about yourself in the increasingly popular memoir genre, <em>On Writing</em><br><em>Well</em> offers you fundamental priciples as well as the insights of a<br>distinguished writer and teacher. With more than a million copies sold, this<br>volume has stood the test of time and remains a valuable resource for writers<br>and would-be writers.</p>
<p>作者介绍：</p>
<p>William Zinsser<br>is a writer, editor and teacher. He began his career on the New York <em>Herald</em><br><em>Tribune</em> and has since written regularly for leading magazines. During the<br>1970s he was master of Branford College at Yale. His 17 books, ranging from<br>baseball to music to American travel, include the influential <em>Writing to</em><br><em>Learn</em> and <em>Writing About Your Life</em>. He teaches at the New School in<br>New York.</p>
<p>历年来，写作之源都因实用的建议、清晰的内容、平易近人的文体而备受赞誉。在这个互联网、电邮成为现实生活重要一部分的时代，每一个期望了解写作之道或打算靠写作谋生的人都能从这本书中获益。</p>
<p>无论你想要描写人物、风景，解释科学、技术原理，展示商务、体育、艺术活动，或是打算写个人的自传、回忆录，写作之源会给你提供基本的写作原则指导，以及作者作为一名出色的笔者对写作自身的观察与思考。截至目前，超过一百万的销量见证了这本书经受时代的考验，依旧对作家以及渴望成为作家的人具有一定的指导作用。</p>
<p><strong>阅读：</strong>强推《The Economist》《经济学人》。</p>
<p>作为连续五年阅读的铁粉，我来安利一波。</p>
<p>\1. 在公众辩论发出声音，参与讨论的价值观：</p>
<p><img src="https://pic2.zhimg.com/v2-748b510a87718da3be529589305cbe75_b.jpg" alt="img"></p>
<p>\2. 老少咸宜，千人千面的内容。</p>
<p><img src="https://pic1.zhimg.com/v2-38ebeef1dbda4fce13f5c85bd13a9df4_b.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/v2-d3e426084f2ba47f439b9e63df02aac7_b.jpg" alt="img"></p>
<p>\3. 性感的封面</p>
<p><img src="https://pic2.zhimg.com/v2-a0057696fa95739441b7d64e5082b415_b.jpg" alt="img"></p>
<p>4.有观点，有立场，也有evidence，如图表数据去佐证支持观点。</p>
<p><img src="https://pic3.zhimg.com/v2-7b4eec0e052f282f8b90d2d703268a92_b.jpg" alt="img"></p>
<p>\5. 英语学习宝典，听说读写都有裨益</p>
<p><img src="https://pic4.zhimg.com/v2-30f44b4240a461b47f6c2e5ee554f86f_b.jpg" alt="img"></p>
<p><strong>最后谈谈听，成熟期的资深使用者，英语能力几乎接近了母语使用者，也就意味着几乎所有英文的教育资源都对你打开了大门</strong>，你可以开始自由地浏览各种世界名校的线上公开课及原版教材，学习自己需要的专业知识。Coursera, Udacity 等平台都有大量资源。</p>
<p><strong>衰退期：</strong></p>
<p><img src="https://pic1.zhimg.com/v2-98be9bb86c01dc68005ab22ccdf412a8_b.jpg" alt="img"></p>
<p>可以说成熟期是英语学习的顶峰。大家都知道，语<strong>言学习如逆水行舟，不用则退。有顶峰，自然也有衰退期</strong>。如果长期不用或者和该语言没有任何接触，语言能力会慢慢退化。</p>
<p>克服衰退期的办法是保持一周2-3小时的接触和复习，使英语能力稳定在成熟期的水平。学习材料与成熟期相同，只不过强度从每天2-3小时减少到一周2-3小时来维持水平。</p>
<p><img src="https://pic1.zhimg.com/v2-f92870abd6d81964dcd43703f199df48_b.jpg" alt="img"></p>
<p><strong>最后的寄语：</strong></p>
<p>语言作为人类特有的能力，其本质是表达，交流，和文化。语言学习重在坚持，也要有科学的愿景，方法论，体系和学习材料。</p>
<p>我不敢说本文推荐的内容都是最科学的，语言学习因人而异，但本文至少是我五年三门语言坚持学习下来的经验总结，推荐的方法和每一份学习材料都有亲身使用。如果对同样是爱好语言学习，但不知从何下手，迷茫甚至灰心的的学弟学妹们有一些小小启发，那也是我花两周写出万字攻略的价值所在。</p>
<p><strong>学会一门新语言，打开一门新世界。语言学习之路，你不是一个人。</strong></p>
<p>最全雅思攻略来了！</p>
<p><a href="https://www.zhihu.com/question/20166937/answer/269156692">自学考雅思 7.0，要做到些什么？ 怎么学？www.zhihu.com<img src="https://pic4.zhimg.com/v2-ebb5f1eecb101b0f7d5e0dfeab9cbf57_120x160.jpg" alt="图标"></a></p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>蛤蟆先生去看心理医生</title>
    <url>/2021/11/28/%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%8C%BB%E7%94%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>感谢妞妞给我推荐这本心理书，与自己和解。让我了解了很多心理学的知识，这个周六在统一写书评吧。</p>
<p>没想到在图书馆随便找的一本书——《面纱》太好看了。</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>说走就走的滑雪</title>
    <url>/2021/12/05/%E8%AF%B4%E8%B5%B0%E5%B0%B1%E8%B5%B0%E7%9A%84%E6%BB%91%E9%9B%AA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>突然想去滑雪了，于是…</p>
<p>我摔得好惨，就连魔术滑道都摔了2次，太丢人了😂</p>
<p>不过好在最终学会了双板，嗯应该学会了吧。第一次滑雪直接练习的中级赛道，下次有机会我想滑单板。</p>
<p>滑雪我有点上瘾了</p>
<span id="more"></span>

<p><img src="./3.jpeg"></p>
</br>

<p><img src="./4.jpeg"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>读书的四种境界</title>
    <url>/2021/09/20/%E8%AF%BB%E4%B9%A6%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%A2%83%E7%95%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="1-我们在书籍中逃避世界。这个世界并不美好，有很多伤心的事，工作和生活也不是很好。"><a href="#1-我们在书籍中逃避世界。这个世界并不美好，有很多伤心的事，工作和生活也不是很好。" class="headerlink" title="1.我们在书籍中逃避世界。这个世界并不美好，有很多伤心的事，工作和生活也不是很好。"></a>1.我们在书籍中逃避世界。这个世界并不美好，有很多伤心的事，工作和生活也不是很好。</h4><p>当我们沉浸在书籍中的时候，现实就已经不存在了。但当走出书房时，我还是那个无能为力的懦弱之辈<br>这难道不是一种自我欺骗吗，如果读书只是一种逃避，那么读书和吸毒、读书和放纵又有什么区别呢？<br>不都是为了逃避庸碌空虚的生活吗？一个在双十一剁了一晚上手的人和一个读了一晚上书的人，<br>真的有本质上的区别吗？难道不都是带着暂时的兴奋和事后的疲倦吗？乘兴而来，败兴而归。</p>
<span id="more"></span>

<h4 id="2-我们在书籍中营造世界。我们在书籍中创造世界，这个世界不完美，让我们可以暂时忽略世界的苦。"><a href="#2-我们在书籍中营造世界。我们在书籍中创造世界，这个世界不完美，让我们可以暂时忽略世界的苦。" class="headerlink" title="2.我们在书籍中营造世界。我们在书籍中创造世界，这个世界不完美，让我们可以暂时忽略世界的苦。"></a>2.我们在书籍中营造世界。我们在书籍中创造世界，这个世界不完美，让我们可以暂时忽略世界的苦。</h4><p>有时这种营造的美，并不真实，而且带有强烈的虚伪和自我欺骗。<br>这些虚构的故事是他真实的想法，却也是他无法实现的愿望。<br>所以很多文人都喜欢通过文字来获得救赎。更有可能走向自欺欺人的道路。<br>我们在书籍中所营造的完美世界，在现实生活中依然不完美。</p>
<p>这种境界就好像是在阅读言情小说，将自己营造成男女主人公。沉浸在自己幻想的世界中，当你合上书本的那一刻，一个真实且残酷的世界便又在你眼前了。</p>
<p>【人偏向追求完美，通过读书营造完美世界，虚构的完美世界是我们真实想法，但可能是我们未实现的愿望，也是自我欺骗】</p>
<h4 id="3-我们在书籍中理解世界。读书我们可以暂时忘记真实的世界，我们终究是要有进入世界的力量与勇气。"><a href="#3-我们在书籍中理解世界。读书我们可以暂时忘记真实的世界，我们终究是要有进入世界的力量与勇气。" class="headerlink" title="3.我们在书籍中理解世界。读书我们可以暂时忘记真实的世界，我们终究是要有进入世界的力量与勇气。"></a>3.我们在书籍中理解世界。读书我们可以暂时忘记真实的世界，我们终究是要有进入世界的力量与勇气。</h4><p>读书既是一种出世，也是一种入世。<br>书籍可以拓展我们接轨人类经验的总和。我们个体是独特的，但在我们人类总经验中我们并不独特。<br>当特殊时刻来临的时候，你到底是被拯救的还是被淹没的。</p>
<pre><code>读书让我们理解世界，书籍拓展我们个体经验，让我们接轨于人类经验总和
每个他者与自己休戚相关，无论过去、现在、未来
无论虚构非虚构作品，探讨的都是人类在各种情境中的选择
可以通过每一部伟大的作品，认识自己，理解自己，当我们越理解世界，我们越理解自己
</code></pre>
<h4 id="4-我们在书籍中超越世界。人类总体的经验时常拷问着我们的内心"><a href="#4-我们在书籍中超越世界。人类总体的经验时常拷问着我们的内心" class="headerlink" title="4.我们在书籍中超越世界。人类总体的经验时常拷问着我们的内心"></a>4.我们在书籍中超越世界。人类总体的经验时常拷问着我们的内心</h4><p>这些书籍能不能帮助我们，成为人类历史长河中的高光一刻。</p>
<p>虽然这种高光一刻，在有些人看来是一种愚蠢。</p>
<p>书籍能否帮助我们成就高光一刻？即使会发生各种不好的事情，我们还是要努力。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">莱维（意大利）《坚不可摧》———— 二战励志题材</span><br><span class="line"></span><br><span class="line">威廉·戈尔丁 《蝇王》———— 反映自己内心的幽暗</span><br><span class="line"></span><br><span class="line">赫胥黎 《美丽新世界》 ———— 反思科技与幸福</span><br><span class="line"></span><br><span class="line">陀思妥耶夫斯基 ————《白痴》</span><br><span class="line"></span><br><span class="line">海明威 ————《丧钟为谁而鸣》</span><br><span class="line"></span><br><span class="line">苏格拉底 ————《申辩篇》</span><br></pre></td></tr></table></figure>



<p>人类的智慧从根本上来说是否定的智慧</p>
<p>我们今生活着的唯一意义就是超越今生</p>
<p>思考：这个世界有好的标准吗？如果每个人都有好的标准，凭什么你口中的好，对我而言就是好的呢？</p>
<p>当然要警惕全盘否定的观念。</p>
<br>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="https://www.bilibili.com/video/BV1do4y1k74t?spm_id_from=333.999.0.0"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试常规提问</title>
    <url>/2021/01/14/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%A7%84%E6%8F%90%E9%97%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p>什么是测试用例</p>
<ul>
<li>设计一个情况，软件程序在这种情况下，必须能够正常运行并且达到程序所设计的预期结果</li>
</ul>
</li>
<li><p>如果软件按照测试用例达不到预期结果这么办？</p>
<ul>
<li>如果程序在这种情况下不能正常运行，而且这种问题会重复发生，那就表明软件人员已经c测出软件有缺陷，这有时候就必须将这个问题标示出来，并通知软件开发人员。软件开发人员接获通知后，将这个问题修改完成于下一个测试版本内</li>
<li>软件测试工程师取得新的测试版本后，必须利用同一个测试用例来测试这个问题，确保该问题已修改完成。</li>
</ul>
</li>
<li><p>开发人员说缺陷修复了，你认可吗？(回归测试)</p>
<ul>
<li>软件测试工程师取得新的测试版本后，必须利用同一个测试用例来测试这个问题，确保该问题已修改完成。</li>
</ul>
</li>
<li><p>测试用例真的有必要耗费时间进行设计和编写吗？</p>
</li>
<li><p>时间不够用的情况下，还要进行详细的测试用例吗</p>
</li>
</ol>
<span id="more"></span>

<ol start="6">
<li><p>测试用例需要经常更新吗？</p>
<ul>
<li>必须更新，尤其是发现过缺陷的测试用例。“杀虫剂效应”，一个发现过缺陷的测试用例，就相当于杀虫剂。必须使用“更强的杀虫剂”——新的测试用例（与之前的用例中数据类型保持一致）进行重新测试。</li>
</ul>
</li>
<li><p>现在有一个文本框，有一个规则：xxxxx；请对这个规则，进行输入内容的等价类划分（尽可能详细划分）</p>
</li>
<li><p>缺陷的严重程度和缺陷的优先级有什么关系？</p>
<ul>
<li>二者之间没有任何直接的关系。</li>
<li>不要认为严重的缺陷，修复优先级就高。</li>
<li>如果碰到优先级和严重程度都高的缺陷，也只是偶然。例如QQ的帮助按钮，会有经常闪退的现象。严重程度很高，但是优先级就很低。</li>
</ul>
</li>
<li><p>提交缺陷时能不能夸大或降低缺陷的严重程度或优先级？</p>
<ul>
<li>不能搞“狼来了”</li>
<li>也不能私人关系“帮”好朋友减少不良影响</li>
</ul>
</li>
<li><p>针对你工作中发现的一个bug,说说这个bug的处理过程。（缺陷的生命周期中，每一个环节由谁做什么）</p>
<ul>
<li>发现缺陷后，先再做一遍，发现真的是缺陷后在做提交缺陷。由主管领导确认是缺陷后，分配给相关人员去修复缺陷。在他们修复后，将状态改为已修复，我在去执行之前所发现的测试用例，去验证缺陷是否被真的修复。除此之外还应该，还去设计一条新的测试用例进行验证（对测试用例具有免疫性）。如果没有问题由我去关闭测试用例。</li>
</ul>
</li>
<li><p>测试需求和测试用例、缺陷报告的关系？</p>
<ol>
<li><p>测试的基本流程：<strong>获取测试需求</strong>——编写测试用例——制定测试方案——<strong>设计和开发测试用例</strong>——<strong>执行测试</strong>——<strong>提交缺陷</strong>——测试分析和评审——测试总结——准备下一版本的测试</p>
<ul>
<li><p>获取测试需求是测试的工作重点，也是第一步。通过需求的分析，了解和掌握测试的方向和内容。设定测试中需求的正反向和优先级。例如：</p>
<ol>
<li>分析出系统的模块和组织结构</li>
<li>分析出软件的基本功能和运行流程（业务分析）。包括分析出有那些人和那些角色要用</li>
<li>识别出软件的重要功能和次要功能获取测试需求的过程中，测试人员要有相应的分析成果。一般用思维导图进行分析，或者使用需求跟踪矩阵来完成测试需求的获取和分析。</li>
</ol>
</li>
<li><p>当有了测试需求之后，就开始针对每一个需求点进行测试用例的设计，也就是每一个需求点，都要被测。因此测试的过程中，衡量需求的覆盖程度，就非常重要了。使用：<strong>需求的覆盖程度 = 被测试用例覆盖的需求数 / 需求点总数</strong></p>
<p>如果需求覆盖度&lt;100%，那一定说明测试覆盖度不够</p>
</li>
<li><p>测试中，最能体现测试人员工作量的指标就是缺陷的数量和用例的数量</p>
<ol>
<li>设计的测试用例总量    TC</li>
<li>执行的测试用例数量     EC</li>
<li>未执行的测试用例总量    WC</li>
<li>执行通过的测试用例总量    SC</li>
<li>执行失败的测试用例总量    FC</li>
<li>提交的缺陷总量    BC（Bug Counts）</li>
</ol>
<ul>
<li>以上几个数据，他们要符合如下的数量关系<ol>
<li>TC 大于等于 EC</li>
<li>TC = EC + WC</li>
<li>EC = SC + FC</li>
<li>BC 大于等于 FC。提交的Bug数量，多于未通过的用例数。一条测试用例的预期结果数量是固定的（甚至是唯一的）。测试过程中发现的缺陷，除一部分是测试用例执行失败带来的，还有一部分应该是测试人员自身的经验和直觉（其他知识）带来的</li>
<li>通过 SC/EC 可以表现出系统的质量是否合格</li>
<li>通过 EC/TC 可以表现出系统的需求是否被满足</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><p>测试时间不够的情况下，（还有大量的内容没有测试），软件能不能发布/上线/发版？</p>
</li>
<li><p>有的严重bug没修复，但是赶着上线，能不能通融/放任？</p>
</li>
<li><p>需求重要吗？错误的需求对测试有什么样的影响</p>
</li>
<li><p>你觉得软件测试在什么阶段介入比较好？为什么</p>
</li>
<li><p>软件发布了，但是有缺陷，是测试人员的错吗</p>
</li>
<li><p>你写过测试计划吗？包含什么内容？测试计划可以被修改吗？</p>
</li>
<li><p>设计与编写测试用例有什么区别？设计是一项脑力活动，编写从本质上是一种体力活动</p>
</li>
<li><p>针对已经发现了缺陷的模块，如何进行深入测试？对发现却显得模块使劲测，另外关联的模块也要进行测试（缺陷有一种集群效应）</p>
</li>
<li><p>软件项目不着急的时候，测试任务完成了，你会干什么？反复测试</p>
</li>
<li><p>软件项目上线了/发布了，还要进行测试吗？</p>
</li>
<li><p>你觉得你有什么样的缺点？（不能说的：粗心、耐心不够、不善沟通、语言表达能力不行）（对于工作比较爱计较，和追求完美。穷就不舍。认死理）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试基本理论</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试术语</title>
    <url>/2021/02/03/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%9C%AF%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><table>
<thead>
<tr>
<th align="left">软件测试术语Software Testing Items</th>
<th align="left">翻译</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1.Manual testing</td>
<td align="left">手动测试</td>
<td align="left">一种测试人员<strong>无需</strong>使用任何<strong>自动化工具</strong>即可<strong>手动执行</strong>测试用例的软件测试。a type of software <strong>testing</strong> in which <strong>test</strong> cases are executed <strong>manually</strong> by a tester without using any automated tools.</td>
</tr>
<tr>
<td align="left">2.Automated Testing</td>
<td align="left">自动测试</td>
<td align="left">通过<strong>自动化</strong>（例如一组回归测试）进行特定测试而不是手动进行测试的行为。the act of conducting specific tests via <strong>automation</strong> (e.g. a set of regression tests) as opposed to conducting them manually.</td>
</tr>
<tr>
<td align="left">3.Black box testing（Behavioral <strong>Testing</strong>）</td>
<td align="left">黑匣子测试（又名：行为测试）</td>
<td align="left">测试人员<strong>不知道</strong>其<strong>内部结构</strong>/<strong>设计</strong>/<strong>实现</strong>的测试方法的软件测试方法。a software <strong>testing</strong> method in which the internal structure /design /implementation of the item being tested is not known to the tester.</td>
</tr>
<tr>
<td align="left">4.White box testing（Clear <strong>Box Testing</strong>）</td>
<td align="left">白盒测试</td>
<td align="left">一种软件测试方法，其中测试人员<strong>知道</strong>被测项目的<strong>内部结构</strong>/<strong>设计</strong>/<strong>实现。</strong>a software testing method in which the internal structure/ design/ implementation of the item being tested is <strong>known</strong> to the tester.</td>
</tr>
<tr>
<td align="left">5.Debug</td>
<td align="left">调试</td>
<td align="left">调试是<strong>发现</strong>和<strong>解决</strong>计算机程序，软件或系统中的<strong>错误</strong>（缺陷或妨碍正常操作的问题）的过程。<strong>debugging</strong> is the process of <strong>finding</strong> and <strong>resolving</strong> <em><a href="https://en.wikipedia.org/wiki/Software_bug">bugs</a></em> (defects or problems that prevent correct operation) within <a href="https://en.wikipedia.org/wiki/Computer_program">computer programs</a>, <a href="https://en.wikipedia.org/wiki/Software">software</a>, or <a href="https://en.wikipedia.org/wiki/Software_system">systems</a>.</td>
</tr>
<tr>
<td align="left">6.Test plan</td>
<td align="left">测试计划</td>
<td align="left"><strong>描述</strong>软件<strong>测试范围</strong>和<strong>活动</strong>的文档。a document describing software <strong>testing</strong> scope and activities.</td>
</tr>
<tr>
<td align="left">7.Test case</td>
<td align="left">测试用例</td>
<td align="left">测试用例是对输入，执行条件，测试过程和预期结果的<strong>规范</strong>，它们<strong>定义</strong>了要执行以实现<strong>特定</strong>软件测试目标的<strong>单个测试</strong>a test case is a specification of the inputs, execution conditions, testing procedure, and expected results that define a single test to be executed to achieve a particular software testing objective</td>
</tr>
<tr>
<td align="left">8.Bug</td>
<td align="left">错误（臭虫）</td>
<td align="left">计算机程序或系统中的<strong>错误，缺陷或故障</strong>，导致其产生不正确或意外的结果，或行为异常A <strong>software bug</strong> is an error, flaw or fault in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways.</td>
</tr>
<tr>
<td align="left">9.Defect</td>
<td align="left">缺陷</td>
<td align="left">缺陷是所创建的应用程序中的错误或错误。A <strong>defect</strong> is an error or a bug, in the application which is created.</td>
</tr>
<tr>
<td align="left">10.Test report</td>
<td align="left">测试报告</td>
<td align="left">一个文档，其中包含测试<strong>项目</strong>的所有<strong>测试活动</strong>和<strong>最终</strong>测试<strong>结果</strong>的<strong>摘要</strong>。a document which contains a <strong>summary</strong> of all <strong>test activities</strong> and <strong>final test results</strong> of a testing project.</td>
</tr>
<tr>
<td align="left">11.Testing environment Deployment</td>
<td align="left">测试环境部署（搭建）</td>
<td align="left">测试环境的目的是允许人类测试人员通过<strong>自动检查</strong>或<strong>非自动技术</strong>来<strong>执行新</strong>的和更改的<strong>代码</strong>。The purpose of the <strong>test environment</strong> is to allow human testers to exercise new and changed code via either automated checks or non-automated techniques. 企业内部一般有三个环境：开发环境、测试环境、线上环境</td>
</tr>
<tr>
<td align="left">12.Sprint</td>
<td align="left">冲刺</td>
<td align="left">冲刺是指一定的时间段，在此期间必须完成特定的工作并准备进行审查。a <strong>sprint</strong> is a set period of time during which specific work has to be completed and made ready for review.</td>
</tr>
<tr>
<td align="left">13.Version</td>
<td align="left">版本</td>
<td align="left">一组数字，<strong>标识</strong>计算机<strong>程序</strong>的独特<strong>演变</strong>a set of numbers that identify a unique evolution of a computer program方便测试时找寻软解更新和管理</td>
</tr>
<tr>
<td align="left">14.Functional testing</td>
<td align="left">功能测试</td>
<td align="left">根据<strong>功能要求</strong>/规格<strong>验证</strong>软件系统。validates the software system against the functional requirements/ specifications.</td>
</tr>
<tr>
<td align="left">15.User interface testing</td>
<td align="left">用户界面测试</td>
<td align="left">用于<strong>识别缺陷</strong>是否存在的测试技术是<strong>使用图形用户界面</strong>[GUI]进行测试a testing technique used to identify the presence of defects is a product/software under test by using Graphical user interface [GUI]</td>
</tr>
<tr>
<td align="left">16.Exception testing</td>
<td align="left">异常测试</td>
<td align="left"><strong>检测</strong>系统对<strong>异常情况</strong>的处理。e.g. 在要求输入数字是，输入字母，测试系统是否能对其屏蔽</td>
</tr>
<tr>
<td align="left">17.Unit testing</td>
<td align="left">单元测试</td>
<td align="left">一种软件测试方法，通过该方法<strong>测试源代码</strong>的<strong>各个单元</strong>（一个或多个计算机程序模块的集合以及相关的控制数据，使用过程和操作过程），以确定它们<strong>是否适合使用</strong>。a software testing method by which individual units of source code—sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures—are tested to determine whether they are fit for use.</td>
</tr>
<tr>
<td align="left">18.Integration testing</td>
<td align="left">集成测试</td>
<td align="left">一种测试类型，其中<strong>软件模块</strong>在逻辑上<strong>集成</strong>在一起并作为<strong>一组</strong>进行测试。a type of testing where software modules are integrated logically and tested as a group.</td>
</tr>
<tr>
<td align="left">19.System testing</td>
<td align="left">系统测试</td>
<td align="left"><strong>验证完整</strong>和<strong>完全集成</strong>的软件<strong>产品</strong>的测试级别。a level of <strong>testing</strong> that validates the complete and fully integrated software product.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试理论</tag>
      </tags>
  </entry>
  <entry>
    <title>莫使金樽空对月，举杯幸会有缘人</title>
    <url>/2021/01/23/%E8%8E%AB%E4%BD%BF%E9%87%91%E6%A8%BD%E7%A9%BA%E5%AF%B9%E6%9C%88%EF%BC%8C%E4%B8%BE%E6%9D%AF%E5%BA%86%E4%BC%9A%E6%9C%89%E7%BC%98%E4%BA%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-osYEXGQZ" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="000TC8Wl1kEhCr" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<p>生活中有很多的不如意，如果一不开心，就寄希望于如果当初，那你永远也不会开心。</p>
<p>幻境再美终是梦，珍惜眼前始为真。</p>
<p>莫使金樽空对月，举杯幸会有缘人。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试笔记</title>
    <url>/2021/01/14/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、软件缺陷的定义"><a href="#一、软件缺陷的定义" class="headerlink" title="一、软件缺陷的定义"></a>一、软件缺陷的定义</h2><h4 id="1-软件为实现产品说明书要求的功能"><a href="#1-软件为实现产品说明书要求的功能" class="headerlink" title="1. 软件为实现产品说明书要求的功能"></a>1. 软件为实现产品说明书要求的功能</h4><h4 id="2-软件出现了产品说，明书指明不应该出现的功能"><a href="#2-软件出现了产品说，明书指明不应该出现的功能" class="headerlink" title="2. 软件出现了产品说，明书指明不应该出现的功能"></a>2. 软件出现了产品说，明书指明不应该出现的功能</h4><h4 id="3-软件实现了产品说明书未提到的功能"><a href="#3-软件实现了产品说明书未提到的功能" class="headerlink" title="3. 软件实现了产品说明书未提到的功能"></a>3. 软件实现了产品说明书未提到的功能</h4><h4 id="4-软件未实现产品说明书虽未明确提及但应该实现的目标"><a href="#4-软件未实现产品说明书虽未明确提及但应该实现的目标" class="headerlink" title="4. 软件未实现产品说明书虽未明确提及但应该实现的目标"></a>4. 软件未实现产品说明书虽未明确提及但应该实现的目标</h4><h4 id="5-用户不易理解、不易使用、运行缓慢或者（从测试角度看）最终用户会认为不好"><a href="#5-用户不易理解、不易使用、运行缓慢或者（从测试角度看）最终用户会认为不好" class="headerlink" title="5. 用户不易理解、不易使用、运行缓慢或者（从测试角度看）最终用户会认为不好"></a>5. 用户不易理解、不易使用、运行缓慢或者（从测试角度看）最终用户会认为不好</h4><span id="more"></span>

<h2 id="二、软件测试的定义和目的"><a href="#二、软件测试的定义和目的" class="headerlink" title="二、软件测试的定义和目的"></a>二、软件测试的定义和目的</h2><h4 id="1-正向思维的定义"><a href="#1-正向思维的定义" class="headerlink" title="1. 正向思维的定义"></a>1. 正向思维的定义</h4><blockquote>
<p>出发点：使自己确信产品还能够正常工作的评价一个程序和系统的特性或能力，</p>
<p>​                并确定他是否能达到期望的结果，软件测试就是以此为目的的任何行为。</p>
</blockquote>
<h4 id="2-逆向思维的定义"><a href="#2-逆向思维的定义" class="headerlink" title="2. 逆向思维的定义"></a>2. 逆向思维的定义</h4><blockquote>
<p>出发点：</p>
<ul>
<li>测试是为了发现错误而执行一个程序或系统的过程</li>
<li>测试是为了证明程序有错，而不是证明程序无错误</li>
<li>一个好的测试用例在于他能发现以前未发现的错误</li>
<li>一个成功的测试用例市发现了以前未发现的错误测试</li>
</ul>
</blockquote>
<h4 id="3-IEEE定义的软件测试"><a href="#3-IEEE定义的软件测试" class="headerlink" title="3. IEEE定义的软件测试"></a>3. IEEE定义的软件测试</h4><blockquote>
<ul>
<li>在规定条件下运行系统或构件的过程：观察和记录结果，并对系统或构件的某方面给出评价</li>
<li>分析软件项目的过程：检测现有状况和所需状况之间的不同，并评估项目的特性</li>
</ul>
</blockquote>
<h4 id="4-广义的软件测试"><a href="#4-广义的软件测试" class="headerlink" title="4. 广义的软件测试"></a>4. 广义的软件测试</h4><blockquote>
<ul>
<li>软件测试是对软件形成过程中的所有工作产品（包括程序以及相关文档）进行测试，而不是仅仅对程序的运行进行测试</li>
<li><strong>确认</strong>  通过检查和提供客观证据来证实特定目的的功能或应用i是否已经实现</li>
<li><strong>验证</strong>  通过检查和提供客观证据来证实指定的需求是否满足</li>
</ul>
</blockquote>
<h4 id="5-软件测试的目的"><a href="#5-软件测试的目的" class="headerlink" title="5. 软件测试的目的"></a>5. 软件测试的目的</h4><blockquote>
<ul>
<li>以最少的人力、物力的时间找出软件中潜在的各种错误和缺陷，保证各种错误额缺陷得以修复，避免软件发布后由于潜在软件错误和缺陷造成的隐患所带来的商业风险。</li>
<li>同时利用测试过程中得到的测试结果和测试信息，作为后续项目开发和测试过程改进的重要输入，避免在将来的项目和测试开发中重复同样的错误；</li>
<li>采用更加高效的测试管理手段，提高软件的效率和软件产品的质量。</li>
</ul>
</blockquote>
<h4 id="6-测试和调试的区别"><a href="#6-测试和调试的区别" class="headerlink" title="6. 测试和调试的区别"></a>6. 测试和调试的区别</h4><ul>
<li>在主体、目标、方法和思路上都有所不同</li>
<li>测试是从已知条件开始，使用预先定义的过程，并且有预知的结果；调试是从未知的条件开始，结果的过程可能不可预计</li>
<li>测试可以计划，可以预先制定测试用例和过程，工作精度可以度量；描述调试的过程或持续时间相对比较困难</li>
<li>测试的对象包括软件开发过程中的文档、数据以及代码，而调试的对象一般来说只是代码</li>
</ul>
<h4 id="7-软件测试的对象"><a href="#7-软件测试的对象" class="headerlink" title="7. 软件测试的对象"></a>7. 软件测试的对象</h4><p>源程序、目标程序、数据及相关文档</p>
<h2 id="三、软件生命周期模型"><a href="#三、软件生命周期模型" class="headerlink" title="三、软件生命周期模型"></a>三、软件生命周期模型</h2><h3 id="瀑布模型（要求会画图）"><a href="#瀑布模型（要求会画图）" class="headerlink" title="瀑布模型（要求会画图）"></a>瀑布模型（要求会画图）</h3><p><img src="%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B.png" alt="瀑布模型图"></p>
<p>存在问题</p>
<blockquote>
<ul>
<li>强调时间顺序的严格执行。前阶段不完成，后阶段不开始</li>
<li>将i测试放在编码之后。<font color="#dd0000">没有体现出测试贯穿软件生命周期的原则。可以避免需求的问题一直延续到代码完成才暴露或者被发现</font></li>
</ul>
</blockquote>
<p>优点</p>
<blockquote>
<ul>
<li>为项目提供了按阶段划分的检查点</li>
<li>当前一阶段完成后，只需要关注后续阶段即可</li>
</ul>
</blockquote>
<p>缺点</p>
<blockquote>
<ul>
<li>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量</li>
<li>线性开发，用户等到整个过程的末期才能见到开发的成果，从而增加了开发的风险。</li>
<li>瀑布模型不适用于用户需求的变化。</li>
</ul>
</blockquote>
<h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><ul>
<li>原型模型弥补了瀑布模型的不足，更关注用户需求的正确性，也符合人们软件结构开发习惯。</li>
<li>原型模型需要迅速建造一个可运行的软件原型</li>
<li>工作中很多公司把i原型模型称为DEMO，即演示版。</li>
<li>经典应用工具：Axure，制作原型</li>
</ul>
<h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><ul>
<li>把软件分割成独立的模块，分批次的完成和交付。</li>
<li>缺点：打破原有的软件框架和结构，可能会带来一定风险。</li>
<li>增量模型一般回合迭代模型一起使用</li>
</ul>
<h3 id="迭代模型"><a href="#迭代模型" class="headerlink" title="迭代模型"></a>迭代模型</h3><ul>
<li>迭代包括产生产品发布（稳定、可执行的产品版本）的全部开发活动和要使用该发布必须的所有其他元素，强调开发的深入</li>
<li>在某种程度上，开发迭代是一次完整地经过所有工作流程的过程：需求分析、设计、实施和测试工作流程。</li>
<li>迭代过程具有以下优点：<ul>
<li>降低了在一个增量上的开支风险</li>
<li>降低了产品无法按照既定进度进入市场的风险</li>
<li>加快了整个开发工作的进度</li>
<li>迭代u过程这种模式使适应需求的变化会变得更容易</li>
</ul>
</li>
</ul>
<h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><blockquote>
<ul>
<li>螺旋模型是一种演化软件开发过程模型，他兼顾了快速迭代的特征以及瀑布模型的系统化于严格监控</li>
<li>引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。</li>
<li>螺旋模型适合大型昂贵的系统级软件应用</li>
</ul>
</blockquote>
<h3 id="敏捷模型"><a href="#敏捷模型" class="headerlink" title="敏捷模型"></a>敏捷模型</h3><p>敏捷模型的原则：快速迭代、让测试人员和开发着参与需求讨论、编写可测试的需求文档、多沟通，尽量减少文档、做好产品原型、及早考虑测试</p>
<p>个体和互动    高于    流程和工具</p>
<p>工作和软件    高于    详尽的文档</p>
<p>客户合作        高于    合同谈判</p>
<p>响应变化        高于    遵循计划</p>
<h2 id="四、软件测试流程"><a href="#四、软件测试流程" class="headerlink" title="四、软件测试流程"></a>四、软件测试流程</h2><p><img src="%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.png" alt="软件测试流程图"></p>
<h3 id="软件测试过程模型"><a href="#软件测试过程模型" class="headerlink" title="软件测试过程模型"></a>软件测试过程模型</h3><h4 id="1-V-模型：揭示了开发过程于测试过程中各阶段的对应关系"><a href="#1-V-模型：揭示了开发过程于测试过程中各阶段的对应关系" class="headerlink" title="1. V 模型：揭示了开发过程于测试过程中各阶段的对应关系"></a>1. V 模型：揭示了开发过程于测试过程中各阶段的对应关系</h4><p><img src="v%E6%A8%A1%E5%9E%8B.png" alt="v模型图"></p>
<ul>
<li>缺点与不足：<ol>
<li>V 模型不仅仅把测试过程作为在需求分析、系统设计以及编码最后的一个阶段，忽视了测试对需求分析、系统设计的验证；</li>
<li>需求的满足情况一直到后期的验收测试才被验证；</li>
<li>没有体现出“尽早地和不断地进行软件测试”的原则</li>
</ol>
</li>
</ul>
<h4 id="2-W-模型"><a href="#2-W-模型" class="headerlink" title="2. W 模型"></a>2. W 模型</h4><p><img src="w%E6%A8%A1%E5%9E%8B.png" alt="w模型图"></p>
<ul>
<li>由两个V字型模型组成，分别代表测试与开发过程，明确表示出了测试与开发的并行关系</li>
<li>优点：<ul>
<li>测试的活动与软件开发同步进行</li>
<li>测试对象不仅仅是程序，包括需求的设计</li>
<li>尽早发现软件缺陷可降低软件开发成本</li>
</ul>
</li>
<li>局限性<ul>
<li>在 W 模型中，需求、设计、编码等活动被视为串行的，这样就无法支持灵活的迭代</li>
</ul>
</li>
</ul>
<h4 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h4><ul>
<li>H模型将测试活动完全独立起来，形成了一个完全独立的流程，将测试准备活动和测试执行活动清晰地体现出来</li>
<li>H模型揭示了一个原理：软件测试是一个独立的流程</li>
<li>H模型指出软件测试要尽早准备，尽早执行；只要某个测试达到准备就绪点，测试执行活动就可以开展，并且不同的测试活动可按照某个次序i先后进行，也可以反复进行。</li>
</ul>
<h4 id="X模型"><a href="#X模型" class="headerlink" title="X模型"></a>X模型</h4><ul>
<li>X模型也是对V模型的改进，X模型u提出针对单独的程序片段进行相互分离的编码和测试，此后通过频繁的交接，通过集成最终合成为可执行的程序。</li>
<li>X模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误</li>
</ul>
<h3 id="软件测试过程理念"><a href="#软件测试过程理念" class="headerlink" title="软件测试过程理念"></a>软件测试过程理念</h3><ul>
<li>尽早测试<ul>
<li>测试人员早期参与软件测试</li>
<li>尽早的开展测试执行工作</li>
</ul>
</li>
<li>全面测试<ul>
<li>对软件的所有产品进行全面的测试</li>
<li>软件开发及测试人员（有时包括用户）全面的参与</li>
</ul>
</li>
<li>全过程测试<ul>
<li>测试 人员要充分关注开发过程</li>
<li>测试人员要对测试的全过程进行全程的跟踪</li>
</ul>
</li>
<li>独立的、迭代的测试<ul>
<li>测试活动是独立的</li>
<li>测试活动应该i是循环往复、不断的进行</li>
</ul>
</li>
</ul>
<h3 id="软件测试分类"><a href="#软件测试分类" class="headerlink" title="软件测试分类"></a>软件测试分类</h3><h4 id="1-按照开发阶段分类"><a href="#1-按照开发阶段分类" class="headerlink" title="1.按照开发阶段分类"></a>1.按照开发阶段分类</h4><ul>
<li><p>按照开发阶段划分</p>
<ul>
<li><p>单元测试：单元测试又称模块测试，是针对软件设计的最小单位–程序模块进行h正确性检验的测试工作。其目的在于检查每个程序单元是否正确实现详细设计说明中的模块功能、性能、接口和设计约束等要求，发现各模块内部可能存在的各种错误。单元测试需要从程序的内部结构出发设计测试用例。多个模块可以平行地独立进行单元测试</p>
</li>
<li><p>集成测试：集成测试也叫组装测试。通常在单元测试的基础上，将所有的程序模块进行有序的、递增的测试。集成测试是检验程序单元或部件的接口关系，逐步集成为符合概要设计要求的程序部件或整个系统。</p>
</li>
<li><p>按照开发阶段：</p>
<ul>
<li>确认测试：确认测试也叫有效性测试。是在模拟的环境下，验证软件的所有功能和性能及其他特性是否与用户的预期要求一致。通过了确认测试之后的软件，才具备了进入系统测试的资格。（一般不作为正式的测试环节）</li>
<li>系统测试：系统测试是在真实的系统运行的环境下，检查完的程序系统是否和系统（包括硬件、外设、网络和系统软件、支持平台等）正确配置、连接，并最终满足用户的所有需求</li>
<li>验收测试：是软件产品检验的最后一个环节。按照项目任务书或合同、供需双方约定的验收依据文档进行的对整个系统的测试与评审，决定是否接受或拒收系统。</li>
</ul>
</li>
<li><p>按照测试技术划分：</p>
<ul>
<li><p>黑盒测试：通过软件的外部表现来发现其缺陷和错误。黑盒测试法吧测试对象看成一个黑盒子，完全不考虑程序内部结构和处理过程。黑盒测试是在程序界面处进行的测试，他只是检查程序是否按照需求规格说明书的规定正常实现。</p>
</li>
<li><p>白盒测试：通过对程序内部结构的分析、检测来寻找问题。白盒测试可以把程序看成装在一个透名的盒子里，检查是否所有的结构及路径是否都正确，检查软件内部动作是否按照设计说明的规定正常进行。</p>
</li>
<li><p>灰盒测试：介于白盒测试与黑盒测试之间的测试。灰盒测试关注输出对于输入的正确性同时也关注内部表现，但这种关注不像白盒测试那样详细、完整，只是通过一些表征性的现象、时间、标志来判断内部的运行状态。</p>
</li>
</ul>
</li>
<li><p>按照代码运行划分：</p>
<ul>
<li><p>静态测试：</p>
<blockquote>
<ol>
<li>指不实际运行被测对象，而只是静态地检查程序代码、界面或文档中可能存在错误的过程</li>
<li>代码测试：主要测试代码是否符合相应的标准和规范</li>
<li>界面测试：主要测试软件的实际界面与需求中的说明是否相符</li>
<li>文档测试：主要测试用户手册和需求说明是否真正符合用户的实际需求</li>
</ol>
</blockquote>
</li>
<li><p>动态测试：指实际运行被测对象，输入相印的测试数据，检查实际输出结果和预期结果是否相符的过程。所以我们判断一个测试属于动态测试还是静态测试，唯一的标准就是看是否运行程序。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>按照软件特性划分</p>
<ul>
<li><p>功能测试：黑盒测试的一方面</p>
<ul>
<li>逻辑功能测试</li>
<li>界面测试</li>
<li>易用性测试</li>
<li>安装/卸载测试</li>
<li>兼容性测试</li>
</ul>
</li>
<li><p>性能测试</p>
<ul>
<li>功能的另一个指标，主要关注软件中的某一功能在指定的时间、空间条件下，是否能满足使用正常</li>
<li>软件的性能包括很多方面，主要有时间性能和空间性能</li>
</ul>
</li>
<li><p>安全测试</p>
<ul>
<li>验证安装在系统内的保护机制是否在实际应用中对系统进行保护，使之不被非法入侵，不受各种因素的干扰。</li>
</ul>
</li>
</ul>
</li>
<li><p>其他测试</p>
<ul>
<li>回归测试<ul>
<li>是指对软件的新版本测试时，重复执行之前某一个重要版本的所有测试用例</li>
<li>目的：<ol>
<li>验证之前版本产生的所有缺陷已全部被修复;</li>
<li>确认修复这些缺陷没有引发新的缺陷</li>
</ol>
</li>
</ul>
</li>
<li>冒烟测试：是指在对一个新版本进行系统大规模的测试之前，先验证一下软件的基本功能是否实现，是否具备可测试性。也叫可测性测试。</li>
<li>随机测试：是指测试人员基于经验和直觉的测试，发现一些边缘性的错误。</li>
<li>猴子测试：把自己当成不懂产品的小白，随便乱点，没有任何主观意识和想法参与进来，让一些意想不到的操作造成错误的结果。</li>
</ul>
</li>
<li><h2 id="软件测试的原则"><a href="#软件测试的原则" class="headerlink" title="软件测试的原则"></a>软件测试的原则</h2><ul>
<li>所有测试的标准都是建立在用户需求之上的</li>
<li>软件测试必须基于“质量第一”的思想去展开各项工作，当时间和质量冲突时，时间要服从质量</li>
<li>事先定义好产品的质量标准，只有有了质量标准，才能根据测试结果，对产品的质量进行分析和评估</li>
<li>软件项目一启动，软件测试也就开始，而不是等程序写完，才开始测试</li>
<li>穷举测试是不可能的</li>
<li>第三方进行测试会更客观，更有效</li>
<li>软件测试计划是做好软件测试工作的前提</li>
<li>测试用例是设计出来的，不是写出来的，所以要根据测试目的，采用相应的方法去设计测试用例，从而提高测试效率，更多地发现错误，提高程序的可靠性。</li>
<li>对发现错误较多的程序段，应进行更深入的测试。一般来说，一段程序已发现的错误数较多，其中的错误概率也就越大。</li>
<li>重视文档，妥善保存一切测试过程文档（测试计划、测试用例、测试报告等）</li>
<li>应当把“尽早和不断地测试”作为测试人员的座右铭</li>
<li>回归测试的关联性一定要引起充分的注意，修改一个错误而引起更多错误出现的现象并不少见</li>
<li>测试应从“小规模”开始，逐步转向“大规模”</li>
<li>不可将测试用例置之度外，排除随意性</li>
<li>必须彻底检查每一个测试结果</li>
<li>一定要注意测试中的错误集中发生现象，这和程序员的编程水平和习惯有很大关系</li>
<li>对测试错误结果一定有一个确认的过程</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="五、什么是测试用例"><a href="#五、什么是测试用例" class="headerlink" title="五、什么是测试用例"></a>五、什么是测试用例</h2><p><img src="%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png" alt="测试用例图"></p>
<ol>
<li>标识符（用例编号）：一般编号规则：TestCase_项目名称_项目模块_功能名称_0001</li>
<li>测试项。测试用例的测试目的。一般情况下，用一句话表明目的。例如：使用谷歌浏览器打开百度首页; 在QQ登陆界面输入正确的用户名密码能登陆上。（表明你的测试模块、测试对象、方式、事件）</li>
<li>依赖用例：一般功能流程上，下游的功能测试依赖与上游的功能测试用例</li>
<li>测试步骤：用最朴实的语言，写出来软件的操作步骤。要尽量详细。例如：在用户名文本框输入：xxx; 在省份下拉列表选择：北京     城市下拉列表选择：北京</li>
<li>测试数据：单独整合测试数据。必须和测试步骤中的数据保持一致</li>
<li>预期结果：要准确、对象准确、内容的准确，内容的准确性。原则上每一个操作，都要有一个结果。在重要步骤之后，设定预期结果。例如：页面跳转到xxx；程序弹出对话框，提示：用户名或密码错误，请重新输入！一般和测试目的密切相关。测试目的决定了测试步骤和预期结果。</li>
<li>测试结果：要求在测试执行完成后添加。没有执行保持为空。测试结果只有两个：通过/失败；Pass/Failed；和预期结果一直即为通过，不一致即为失败。</li>
<li>测试人：测试的执行人。可以和设计者相同，也可以不同</li>
<li>备注：为了测试用例正常执行而做的特殊准备。例如：专门制造网络不畅情况下，软件错误提示</li>
</ol>
<ul>
<li>用例设计和编写的作用<ul>
<li>有效性：测试用例是测试人员测试过程中的重要参考依据</li>
<li>可复读性：良好的测试用例具有重复使用的功能，使得测试过程事半功倍，提高测试效率</li>
<li>易组织性：即使是小的项目，也可能有几千甚至更多的测试用例，测试用例可能在数月甚至技能的测试过程中被创建和使用</li>
<li>可评估性：从测试的项目管理角度来说，测试用例的通过率是检验代码质量的保证</li>
<li>可管理性：测试用例也可以作为检验测试人员进度、工作量以及跟踪/管理测试人员的工作效率的标准</li>
</ul>
</li>
<li>测试用例编写注意事项<ul>
<li>不要设计”穷举测试用例“</li>
<li>在详细测试用例与有效测试时间中找到平衡点</li>
<li>好的测试用例应该多关注”反向测试问题“</li>
<li>测试用例库应该不断更新和维护</li>
<li>测试用例可以复用，但要注意数据有效性与环境变化</li>
<li>测试用例是设计出来的，不是写出来的</li>
<li>多去学习经验丰富的测试工程师所设计的测试用例</li>
<li>针对不同需求类型和测试对象，灵活采用不同测试用例设计方法</li>
</ul>
</li>
</ul>
<h2 id="六、缺陷基本概述"><a href="#六、缺陷基本概述" class="headerlink" title="六、缺陷基本概述"></a>六、缺陷基本概述</h2><h3 id="软件缺陷的属性"><a href="#软件缺陷的属性" class="headerlink" title="软件缺陷的属性"></a>软件缺陷的属性</h3><h4 id="1-缺陷类型"><a href="#1-缺陷类型" class="headerlink" title="1. 缺陷类型"></a>1. 缺陷类型</h4><ul>
<li><p>功能缺陷（Function）</p>
</li>
<li><p>界面缺陷（UI）</p>
</li>
<li><p>文档缺陷（Documentation）</p>
</li>
<li><p>软件包（Package）</p>
</li>
<li><p>性能缺陷（Performance）</p>
</li>
<li><p>接口缺陷（Interface）</p>
<blockquote>
<p>注意： 需求分析、设计阶段，文档类型的缺陷多；集成测试阶段，一般接口类型的缺陷多一些；系统测试阶段，功能、界面类型的缺陷多一些；验收测试阶段，更多的关注性能缺陷；实施过程，可能会遇到一些软件包的缺陷</p>
</blockquote>
</li>
</ul>
<h4 id="2-缺陷严重程度"><a href="#2-缺陷严重程度" class="headerlink" title="2. 缺陷严重程度"></a>2. 缺陷严重程度</h4><ul>
<li><p>致命（Fatal）：任何一个主要功能完全丧失，用户数据受到破坏，系统崩溃、悬挂、死机，或者威胁人身安全</p>
</li>
<li><p>严重（Critical）：系统的主要功能部分丧失，数据不能保存，系统的次要功能完全丧失，系统所提供的功能或服务受到明显的影响。</p>
</li>
<li><p>一般（Major）：系统的次要功能没有完全实现，但不影响用户正常使用。例如：提示信息不太准确或用户界面差、操作时间长等一些问题。</p>
</li>
<li><p>较小（Minor）：是操作者不方便或遇到麻烦，但它不影响功能的操作和执行，如个别不影响产品理解的错别字、文字排列不整齐等一些小问题</p>
<blockquote>
<p>注意：结合缺陷的影响，结合软件的具体功能（业务或者流程）</p>
</blockquote>
</li>
</ul>
<h4 id="3-缺陷的修复优先级"><a href="#3-缺陷的修复优先级" class="headerlink" title="3. 缺陷的修复优先级"></a>3. 缺陷的修复优先级</h4><p>修复优先级很大程度取决于测试工作的影响程度</p>
<table>
<thead>
<tr>
<th align="left">缺陷优先级</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">立即解决（P1级）</td>
<td>缺陷导致系统几乎不能使用或测试不能继续，需立即修复</td>
</tr>
<tr>
<td align="left">高优先级（P2级）</td>
<td>缺陷严重，影响测试，需要优先考虑</td>
</tr>
<tr>
<td align="left">正常排队（P3级）</td>
<td>缺陷需要正常排队等待修复</td>
</tr>
<tr>
<td align="left">低优先级（P4级）</td>
<td>缺陷可以在开发人员有时间的时候被纠正</td>
</tr>
</tbody></table>
<p>立即解决：电商系统的用户注册功能无法使用（无法登录、购买、结算、支付、下单、物流跟踪、收货、评论等功能无法进行），就必须立即修复；</p>
<p>高优先级：自然时常24小时之内</p>
<p>正常排队：新版本发布之前</p>
<p>低优先级：电商系统中关于用户购买流程帮助说明的网页链接点击404页面。没有什么影响</p>
<blockquote>
<p>注意：优先级的衡量，一般可以根据测试的软件系统的全业务流程划分，软件的基本功能的缺陷，优先级高，甚至需要立即解决。软件的备选流、基本功能测试中的反向测试的内容，优先级较低，甚至有些可改可不改。</p>
</blockquote>
<h4 id="4-缺陷的状态"><a href="#4-缺陷的状态" class="headerlink" title="4. 缺陷的状态"></a>4. 缺陷的状态</h4><p>缺陷状态指缺陷通过一个跟踪修复过程的进展情况。</p>
<table>
<thead>
<tr>
<th align="left">缺陷状态</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">激活或打开</td>
<td>问题还没有解决，存在源代码中，确认“提交的缺陷”，等待处理，如新报的缺陷</td>
</tr>
<tr>
<td align="left">已修复或修复</td>
<td>已被开发人员检查、修复过的缺陷，通过单元测试，认为已解决但还没有被测试人员验证</td>
</tr>
<tr>
<td align="left">关闭或非激活</td>
<td>测试人员验证后，确认缺陷不存在之后的状态</td>
</tr>
<tr>
<td align="left">重新打开</td>
<td>测试人员验证后，还依然存在缺陷，等待开发人员进一步修复</td>
</tr>
<tr>
<td align="left">推迟</td>
<td>这个软件缺陷还可以在下一个版本中解决</td>
</tr>
<tr>
<td align="left">保留</td>
<td>由于技术原因或第三者软件的缺陷，开发人员不能修复缺陷</td>
</tr>
<tr>
<td align="left">不能重现</td>
<td>开发不能再现这个软件缺陷，需要测试人员检查缺陷复现的步骤</td>
</tr>
<tr>
<td align="left">需要更多信息</td>
<td>开发能再现这个缺陷，但开发人员需要一些信息。例如缺陷的日志文件、图片等</td>
</tr>
<tr>
<td align="left">重复</td>
<td>这个软件缺陷已经被其他测试人员发现</td>
</tr>
<tr>
<td align="left">不是缺陷</td>
<td>这个问题不是软件缺陷</td>
</tr>
<tr>
<td align="left">需要修改软件规格说明书</td>
<td>由于软件规格说明书对软件设计的要求，必须要修改软件说明书</td>
</tr>
</tbody></table>
<p>缺陷的状态：表示缺陷的处理进度</p>
<p>发现缺陷是缺陷处理的前提，但是还没有进入缺陷的处理流程</p>
<ol>
<li>激活/打开（新建）：由测试人员标注</li>
<li>确认：确认新提交的缺陷是一个真实有效的缺陷。一般由测试主管、质量保证（QA）或产品经理进行确认。经确认后，有效的缺陷会指派给相关人员进行处理</li>
<li>已修复/修正：在缺陷被修复后，一般由开发人员进行</li>
<li>关闭/非激活：缺陷被修复完成后，经过测试人员的验证后，没有问题</li>
<li>重新打开：经过测试人员的验证后，缺陷没有修复成功，需要重新打开进行再次处理和修复</li>
<li>推迟：缺陷现在不修复，推迟下一个版本或者阶段，测试要跟开发或者其他相关的管理人员进行确认</li>
<li>保留：缺陷暂时修复不了，一般也是由开发人员去设定，也需要测试人员进行确认</li>
<li>不能重现：开发按照缺陷的复现步骤不能再次发现缺陷。一般闪退、崩溃类型的缺陷具有类似的特征。或者由于操作系统的差异、浏览器的缓存等信息，出现问题。<strong>所以作为测试人员，提交bug之前，要再三确认bug.</strong></li>
<li>需要更多信息：作为测试人员，提交bug的时候，要尽可能的把所有相关文件一起提交。（图片、视频）</li>
<li>重复：测试中，一定要避免这种情况的出现。尤其在软件的某一个功能频繁被多个模块（由不同的测试人员测试）调用的情况下。</li>
<li>不是缺陷：<strong>一定不要在测试工程师的工作生涯中被开发标注缺陷状态为不是缺陷</strong></li>
<li>需要修改需求说明书：缺陷不是技术原因造成的，而是由于需求不明确或者设计不明确造成</li>
</ol>
<h4 id="5-缺陷的起源"><a href="#5-缺陷的起源" class="headerlink" title="5. 缺陷的起源"></a>5. 缺陷的起源</h4><table>
<thead>
<tr>
<th align="center">缺陷起源</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">需求</td>
<td align="center">在需求测试发现的缺陷</td>
</tr>
<tr>
<td align="center">架构</td>
<td align="center">在系统架构设计阶段发现的缺陷</td>
</tr>
<tr>
<td align="center">设计</td>
<td align="center">在程序设计阶段发现的缺陷</td>
</tr>
<tr>
<td align="center">编码</td>
<td align="center">在编码阶段发现的缺陷</td>
</tr>
<tr>
<td align="center">测试</td>
<td align="center">在测试阶段发现的缺陷</td>
</tr>
<tr>
<td align="center">用户</td>
<td align="center">在用户使用阶段发现的缺陷</td>
</tr>
</tbody></table>
<h4 id="6-缺陷的来源"><a href="#6-缺陷的来源" class="headerlink" title="6. 缺陷的来源"></a>6. 缺陷的来源</h4><table>
<thead>
<tr>
<th>缺陷来源</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>需求说明书</td>
<td>需求说明书的错误或不清楚引起的</td>
</tr>
<tr>
<td>设计文档</td>
<td>设计文档描述不准确，和需求说明书不一致的问题</td>
</tr>
<tr>
<td>系统集成接口</td>
<td>系统各模块参数不匹配、开发组之间缺乏协调所引起的缺陷</td>
</tr>
<tr>
<td>数据流（库）</td>
<td>由于数据字典、数据库中的错误引起的缺陷</td>
</tr>
<tr>
<td>程序代码</td>
<td>是编码中的问题所引起的缺陷</td>
</tr>
</tbody></table>
<h4 id="7-缺陷的根源"><a href="#7-缺陷的根源" class="headerlink" title="7. 缺陷的根源"></a>7. 缺陷的根源</h4><table>
<thead>
<tr>
<th>缺陷根源</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>测试策略</td>
<td>错误的测试范围，误解了测试目标，超越测试能力等</td>
</tr>
<tr>
<td>过程，工具和方法</td>
<td>无效的需求收集过程，过时的风险管理过程，不适用的项目管理方法，没有估算规程，无效的变更控制过程等</td>
</tr>
<tr>
<td>团队/人</td>
<td>项目团队职责交叉，缺乏培训。没有经验的项目团队，缺乏士气和动机不纯等</td>
</tr>
<tr>
<td>缺乏组织和通讯</td>
<td>缺乏用户参与，职责不明确，管理失败等</td>
</tr>
<tr>
<td>硬件</td>
<td>硬件配置不对、缺乏，或处理器导致算数精度丢失，内存溢出</td>
</tr>
<tr>
<td>软件</td>
<td>软件设置不对、缺乏，或操作系统错误导致无法释放资源，工具软件的错误，编译器的错误，千年虫的问题等</td>
</tr>
<tr>
<td>工作环境</td>
<td>组织机构调整，预算改变，工作环境恶劣，如噪音过大</td>
</tr>
</tbody></table>
<p>缺陷的起源、来源、根源。一般关注较多的是缺陷的来源（直接原因）；在测试总结的时候，关注缺陷的根源。</p>
<h3 id="缺陷的生命周期"><a href="#缺陷的生命周期" class="headerlink" title="缺陷的生命周期"></a><font color="red">缺陷的生命周期</font></h3><p><img src="%E7%BC%BA%E9%99%B7%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="缺陷的生命周期图"></p>
<ul>
<li><p>发现缺陷：由测试人员发现</p>
</li>
<li><p>提交缺陷：由测试人员提交</p>
</li>
<li><p>确认缺陷：一般由测试主管、或者质量保证（QA）、由产品经理确认</p>
</li>
<li><p>分配缺陷：经过确认后，有效的缺陷会指派给相关人员进行处理。一般由谁确认的缺陷，就由谁分配。分配的对象可能是开发、也可能是UI、可以能使产品经理。</p>
</li>
<li><p>修复缺陷：主要由开发修复，也有可能是产品经理修复文档问题，也有可能是UI修复界面设计缺陷</p>
</li>
<li><p>验证缺陷：测试人员去验证缺陷有没有修复成功。</p>
</li>
<li><p>关闭缺陷：只能是测试人员进行。否则出了问题，测试人员一律不背锅。</p>
</li>
</ul>
<h3 id="缺陷的识别（重点）"><a href="#缺陷的识别（重点）" class="headerlink" title="缺陷的识别（重点）"></a>缺陷的识别（重点）</h3><ul>
<li>通过测试用例中的预期结果进行识别</li>
<li>通过需求规格说明书进行识别</li>
<li>通过用户手册及其他文档进行识别</li>
<li>通过同行业相类似成熟的商业软件来识别</li>
<li>通过和开发人员的沟通进行识别（最下下策）</li>
<li>通过和有经验的测试人员沟通进行识别</li>
<li>参照同行业隐式需求进行识别</li>
</ul>
<p>客观依据：需求文档、设计文档、产品原型、测试用例</p>
<p>主观依据：同行业相类似的成熟软件，和开发人员沟通进行识别，和有经验的测试人员沟通，根据同行业的隐性需求</p>
<p>测试人员在识别缺陷的时候，要很灵活的对待。</p>
<h3 id="缺陷报告"><a href="#缺陷报告" class="headerlink" title="缺陷报告"></a>缺陷报告</h3><p><strong>[缺陷报告本身要保证没有任何表述性的错误]</strong></p>
<ol>
<li><p>缺陷编号：Bug_项目名称_功能名称_00001</p>
</li>
<li><p>所属模块：一级模块/二级模块/三级模块。例如：上课所用的直播软件，如果想要查看签到的历史记录，需要进入直播主界面——互动应用——签到——签到历史记录</p>
</li>
<li><p>优先级：缺陷的修复紧急程度。P1&gt;P2&gt;P3&gt;P4</p>
</li>
<li><p>严重程度：S1&gt;S2&gt;S3&gt;S4</p>
</li>
<li><p>缺陷概述：用一句话描述缺陷的基本情况</p>
</li>
<li><p>缺陷描述：将缺陷的复现步骤、预期结果和实际结果列出来。</p>
</li>
<li><p>提交人：是谁就写谁的名字</p>
</li>
<li><p>备注：一般写出产生该缺陷的特殊情况。将bug截图作为备注信息。</p>
</li>
<li><p>缺陷报告编写目的</p>
<ul>
<li>易于搜索软件测试报告的缺陷</li>
<li>报告的软件缺陷进行了必要的隔离，报告的缺陷信息更具体、准确</li>
<li>软件开发人员希望获得缺陷的本质特征和复现步骤</li>
<li>市场和技术支持等部门希望获得缺陷类型分布以及对市场和用户的影响程度</li>
</ul>
</li>
<li><p>预期读者：开发人员、质量管理人员、市场人员、运维人员….</p>
</li>
<li><p>缺陷报告编写准则</p>
<ul>
<li>Correct（准确）：每个组成部分的描述准确，不会引起误解</li>
<li>Clear（清晰）：每个组成部分描述清晰，易于理解</li>
<li>Concise（简洁）：之包含必不可少的信息，不包括任何多余内容</li>
<li>Complete（完整）：包含复现该缺陷的完整步骤和其他本质信息</li>
<li>Consistent（一致）：按照一致的格式书写全部缺陷报告</li>
</ul>
</li>
<li><p>缺陷描述的准则</p>
<ul>
<li>单一准确</li>
<li>可以再现：针对绝大多数缺陷。但有一小部分缺陷难以做到，如闪退崩溃不可再现，无需做到</li>
<li>完整统一</li>
<li>短小简练</li>
<li>特定条件</li>
<li>补充完整</li>
<li>不做评价：不对缺陷的严重程度和缺陷表现出来的效果进行主观臆断-</li>
</ul>
</li>
</ol>
<br>

<h2 id="参考表"><a href="#参考表" class="headerlink" title="参考表"></a>参考表</h2><h2 id="测试需求分析"><a href="#测试需求分析" class="headerlink" title="测试需求分析"></a>测试需求分析</h2><table>
<thead>
<tr>
<th>测试需求编号</th>
<th>测试需求名称</th>
<th>质量特性</th>
<th>所在模块</th>
<th>所在页面</th>
<th>优先级</th>
<th>负责人</th>
<th>版本号</th>
<th>需求详细描述</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><table>
<thead>
<tr>
<th>用例编号</th>
<th>用例名称</th>
<th>用例描述</th>
<th>需求编号</th>
<th>步骤名称</th>
<th>步骤描述</th>
<th>预期结果</th>
<th>实际结果</th>
<th>是否通过</th>
<th>缺陷编号</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="缺陷报告-1"><a href="#缺陷报告-1" class="headerlink" title="缺陷报告"></a>缺陷报告</h2><table>
<thead>
<tr>
<th>缺陷编号</th>
<th>所属模块</th>
<th>优先级</th>
<th>严重程度</th>
<th>缺陷概述</th>
<th>缺陷描述</th>
<th>提交人</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<br>

<h2 id="白盒测试逻辑覆盖图"><a href="#白盒测试逻辑覆盖图" class="headerlink" title="白盒测试逻辑覆盖图"></a>白盒测试逻辑覆盖图</h2><p><img src="%E9%80%BB%E8%BE%91%E8%A6%86%E7%9B%96%E6%B5%8B%E8%AF%95.jpg" alt="白盒测试逻辑覆盖图"></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试基本理论</tag>
      </tags>
  </entry>
  <entry>
    <title>那些好用的zsh插件</title>
    <url>/2020/12/29/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84zsh%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h2><p>可自动跳转目录，避免每次输入很长代码</p>
<h3 id="安装autojump"><a href="#安装autojump" class="headerlink" title="安装autojump"></a>安装autojump</h3><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/wting/autojump.git</span><br><span class="line"></span><br><span class="line">cd autojump</span><br><span class="line"></span><br><span class="line">./install.py or ./uninstall.py</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p><strong>安装后会提示你将代码写入.zshrc或者.bashrc</strong>，写入后在你第二次再打开文件时，就可以在任意路径下直接<code>j folder</code>就行了</p>
<h4 id="arch用户安装autojump（有些小问题不推荐新手）"><a href="#arch用户安装autojump（有些小问题不推荐新手）" class="headerlink" title="arch用户安装autojump（有些小问题不推荐新手）"></a>arch用户安装autojump（有些小问题不推荐新手）</h4><blockquote>
<p>sudo pacman -S autojump</p>
</blockquote>
<p>安装后同样会提示将代码写入.zshrc或者.bashrc，按提示为标准</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">autojump 参考代码</span></span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>

<h2 id="bash-insulter"><a href="#bash-insulter" class="headerlink" title="bash-insulter"></a>bash-insulter</h2><p>输入错误代码就会挨骂的插件，在谩骂声中鞭策自己吧</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Method 1 - know what you are doing</span></span><br><span class="line">git clone https://github.com/hkbakke/bash-insulter.git bash-insulter</span><br><span class="line">sudo cp bash-insulter/src/bash.command-not-found /etc/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Method 2 - I don<span class="string">&#x27;t care, insult me!</span></span></span><br><span class="line">sudo wget -O /etc/bash.command-not-found https://raw.githubusercontent.com/hkbakke/bash-insulter/master/src/bash.command-not-found</span><br></pre></td></tr></table></figure>


<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">bash-insulter</span></span><br><span class="line">if [ -f /etc/bash.command-not-found ]; then</span><br><span class="line">    . /etc/bash.command-not-found</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="oh-my-zsh自带的一些插件"><a href="#oh-my-zsh自带的一些插件" class="headerlink" title="oh-my-zsh自带的一些插件"></a>oh-my-zsh自带的一些插件</h2><ol>
<li><p>plugins/vi-mode</p>
<p> 使zsh可以像vi那样输入</p>
</li>
<li><p>zsh-autosuggestions</p>
<p> 根据历史输入指令的记录即时的提示，能够很大的提高效率</p>
</li>
<li><p>zsh-completions</p>
<p> 收集/开发Zsh中尚不可用的新完成脚本。如果足够稳定，这些脚本可能会贡献给Zsh项目</p>
</li>
<li><p>zsh-history-substring-search</p>
<p> 你输入的每条命令他会给你记录下时间，并且在你的home目录创建.zsh_history/相对应的目录，并记录你在当前目录下用过的命令。</p>
</li>
</ol>
<ol start="5">
<li><p>zsh-syntax-highlighting</p>
<p> 语法高亮谁能拒绝呢</p>
</li>
</ol>
<p>可参考配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> If you come from bash you might have to change your <span class="variable">$PATH</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Path to your oh-my-zsh installation.</span></span><br><span class="line">export ZSH=&quot;/home/william/.oh-my-zsh&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set name of the theme to load --- <span class="keyword">if</span> <span class="built_in">set</span> to <span class="string">&quot;random&quot;</span>, it will</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> load a random theme each time oh-my-zsh is loaded, <span class="keyword">in</span> <span class="built_in">which</span> <span class="keyword">case</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to know <span class="built_in">which</span> specific one was loaded, run: <span class="built_in">echo</span> <span class="variable">$RANDOM_THEME</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------- POWERLEVEL ---------------------------------</span></span><br><span class="line"></span><br><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br><span class="line">COLOR=(</span><br><span class="line">        004 </span><br><span class="line"><span class="meta">#</span><span class="bash">       005</span> </span><br><span class="line">        006 </span><br><span class="line"><span class="meta">#</span><span class="bash">       010</span></span><br><span class="line">        007</span><br><span class="line">        )</span><br><span class="line">COLOR_ARRAY=(</span><br><span class="line">        004 067 059 </span><br><span class="line"><span class="meta">#</span><span class="bash">       005 062 059</span> </span><br><span class="line">        006 073 109 </span><br><span class="line"><span class="meta">#</span><span class="bash">       010 070 115</span></span><br><span class="line">        007 249 240</span><br><span class="line">        )</span><br><span class="line"><span class="meta">#</span><span class="bash"> THEME_COLOR=$(( <span class="variable">$RANDOM</span> % <span class="number">3</span> ))</span></span><br><span class="line">THEME_COLOR=1</span><br><span class="line">DEFAULT_BACKGROUND=235</span><br><span class="line">DEFAULT_FOREGROUND=&quot;$&#123;COLOR[$(( $THEME_COLOR + 1 ))]&#125;&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_MODE=&quot;nerdfont-complete&quot;</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################[ prompt ]######################################</span></span></span><br><span class="line">POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=&quot;%F&#123;$DEFAULT_FOREGROUND&#125;╭─&quot;</span><br><span class="line">POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR=&#x27;\ue0b4&#x27;</span><br><span class="line">POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR=&#x27;\ue0b4&#x27;</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=&#x27;\ue0b0&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;%F&#123;$DEFAULT_FOREGROUND&#125;╰─%F&#123;$&#123;COLOR_ARRAY[$(( $THEME_COLOR * 3 + 2 ))]&#125;&#125;\uf054%F&#123;$DEFAULT_FOREGROUND&#125;\uf054&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typeset -g POWERLEVEL9K_PROMPT_CHAR_&#123;OK,ERROR&#125;_VIINS_CONTENT_EXPANSION=$&#x27;\uf054&#x27;</span><br><span class="line">typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_&#123;VIINS,VICMD,VIVIS,VIOWR&#125;_FOREGROUND=124</span><br><span class="line">typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_&#123;VIINS,VICMD,VIVIS,VIOWR&#125;_FOREGROUND=70</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user device virtualenv dir vcs newline prompt_char)</span><br><span class="line"><span class="meta">#</span><span class="bash">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command_execution_time background_jobs status <span class="built_in">history</span> time ssh)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################[ vcs: git status ]######################################</span></span></span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_BACKGROUND=&quot;green&quot;</span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_FOREGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_VCS_GIT_ICON=$&#x27;\uF113 &#x27;</span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=&quot;yellow&quot;</span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=166</span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################[ dir: current directory ]##################################</span></span></span><br><span class="line">POWERLEVEL9K_DIR_HOME_BACKGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_DIR_HOME_FOREGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_SHORTEN_DIR_LENGTH=16</span><br><span class="line">POWERLEVEL9K_SHORTEN_STRATEGY=&quot;truncate_absolute&quot;</span><br><span class="line">POWERLEVEL9K_SHORTEN_DELIMITER=&#x27;...&#x27;</span><br><span class="line">POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=240</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################[ status ]##################################</span></span></span><br><span class="line">POWERLEVEL9K_STATUS_OK_FOREGROUND=&quot;green&quot;</span><br><span class="line">POWERLEVEL9K_STATUS_OK_BACKGROUND=&quot;$(( $DEFAULT_BACKGROUND + 4 ))&quot;</span><br><span class="line">POWERLEVEL9K_STATUS_ERROR_FOREGROUND=&quot;red&quot;</span><br><span class="line">POWERLEVEL9K_STATUS_ERROR_BACKGROUND=&quot;$(( $DEFAULT_BACKGROUND + 4 ))&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_HISTORY_FOREGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_HISTORY_BACKGROUND=&quot;$(( $DEFAULT_BACKGROUND + 2 ))&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_VIRTUALENV_BACKGROUND=&quot;$((  $DEFAULT_BACKGROUND - 2 ))&quot;</span><br><span class="line">POWERLEVEL9K_VIRTUALENV_FOREGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_OS_ICON_FOREGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_OS_ICON_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_TIME_FORMAT=&quot;%D&#123;%T&#125;&quot; #  15:29:33</span><br><span class="line">POWERLEVEL9K_TIME_FOREGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_TIME_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3</span><br><span class="line"><span class="meta">#</span><span class="bash">POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0</span></span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_ROOT_ICON=$&#x27;\uF198&#x27;  # </span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_SSH_FOREGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_SSH_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_SSH_ICON=&quot;\uF489&quot;  # </span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_HOST_LOCAL_FOREGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_HOST_LOCAL_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_HOST_REMOTE_FOREGROUND=&quot;$DEFAULT_FOREGROUND&quot;</span><br><span class="line">POWERLEVEL9K_HOST_REMOTE_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_LOAD_CRITICAL_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_WARNING_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_NORMAL_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_CRITICAL_FOREGROUND=&quot;red&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_WARNING_FOREGROUND=&quot;yellow&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_NORMAL_FOREGROUND=&quot;green&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_CRITICAL_VISUAL_IDENTIFIER_COLOR=&quot;red&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_WARNING_VISUAL_IDENTIFIER_COLOR=&quot;yellow&quot;</span><br><span class="line">POWERLEVEL9K_LOAD_NORMAL_VISUAL_IDENTIFIER_COLOR=&quot;green&quot;</span><br><span class="line"></span><br><span class="line">POWERLEVEL9K_BATTERY_LEVEL_BACKGROUND_COLOR=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_BATTERY_CHARGING_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_BATTERY_CHARGED_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line">POWERLEVEL9K_BATTERY_DISCONNECTED_BACKGROUND=&quot;$DEFAULT_BACKGROUND&quot;</span><br><span class="line"></span><br><span class="line">function prompt_user() &#123;</span><br><span class="line">    p10k segment -b  $DEFAULT_BACKGROUND -f $DEFAULT_FOREGROUND -i $&#x27;\uf2be&#x27; +r -t &#x27;%n&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function prompt_device() &#123;</span><br><span class="line">    p10k segment -b &quot;$(( $DEFAULT_BACKGROUND + 2 ))&quot; -f $DEFAULT_FOREGROUND -i $&#x27;\uf108&#x27; +r -t &#x27;%m&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------- POWERLEVEL ---------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set list of themes to pick from when loading at random</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setting this variable when ZSH_THEME=random will cause zsh to load</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a theme from this variable instead of looking <span class="keyword">in</span> <span class="variable">$ZSH</span>/themes/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If <span class="built_in">set</span> to an empty array, this variable will have no effect.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME_RANDOM_CANDIDATES=( <span class="string">&quot;robbyrussell&quot;</span> <span class="string">&quot;agnoster&quot;</span> )</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to use case-sensitive completion.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CASE_SENSITIVE=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to use hyphen-insensitive completion.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Case-sensitive completion must be off. _ and - will be interchangeable.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HYPHEN_INSENSITIVE=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to <span class="built_in">disable</span> bi-weekly auto-update checks.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DISABLE_AUTO_UPDATE=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to automatically update without prompting.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DISABLE_UPDATE_PROMPT=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to change how often to auto-update (<span class="keyword">in</span> days).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> UPDATE_ZSH_DAYS=13</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line <span class="keyword">if</span> pasting URLs and other text is messed up.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DISABLE_MAGIC_FUNCTIONS=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to <span class="built_in">disable</span> colors <span class="keyword">in</span> ls.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DISABLE_LS_COLORS=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to <span class="built_in">disable</span> auto-setting terminal title.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DISABLE_AUTO_TITLE=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to <span class="built_in">enable</span> <span class="built_in">command</span> auto-correction.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ENABLE_CORRECTION=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to display red dots whilst waiting <span class="keyword">for</span> completion.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> COMPLETION_WAITING_DOTS=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line <span class="keyword">if</span> you want to <span class="built_in">disable</span> marking untracked files</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> under VCS as dirty. This makes repository status check <span class="keyword">for</span> large repositories</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> much, much faster.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DISABLE_UNTRACKED_FILES_DIRTY=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line <span class="keyword">if</span> you want to change the <span class="built_in">command</span> execution time</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> stamp shown <span class="keyword">in</span> the <span class="built_in">history</span> <span class="built_in">command</span> output.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can <span class="built_in">set</span> one of the optional three formats:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;mm/dd/yyyy&quot;</span>|<span class="string">&quot;dd.mm.yyyy&quot;</span>|<span class="string">&quot;yyyy-mm-dd&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or <span class="built_in">set</span> a custom format using the strftime <span class="keyword">function</span> format specifications,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> see <span class="string">&#x27;man strftime&#x27;</span> <span class="keyword">for</span> details.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HIST_STAMPS=<span class="string">&quot;mm/dd/yyyy&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Would you like to use another custom folder than <span class="variable">$ZSH</span>/custom?</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Which plugins would you like to load?</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Standard plugins can be found <span class="keyword">in</span> <span class="variable">$ZSH</span>/plugins/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Custom plugins may be added to <span class="variable">$ZSH_CUSTOM</span>/plugins/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add wisely, as too many plugins slow down shell startup.</span></span><br><span class="line">plugins=(git)</span><br><span class="line"></span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zplug configruation</span></span><br><span class="line">if [[ ! -d &quot;$&#123;ZPLUG_HOME&#125;&quot; ]]; then</span><br><span class="line">  if [[ ! -d ~/.zplug ]]; then</span><br><span class="line">    git clone https://github.com/zplug/zplug ~/.zplug</span><br><span class="line">    # If we can&#x27;t get zplug, it&#x27;ll be a very sobering shell experience. To at</span><br><span class="line">    # least complete the sourcing of this file, we&#x27;ll define an always-false</span><br><span class="line">    # returning zplug function.</span><br><span class="line">    if [[ $? != 0 ]]; then</span><br><span class="line">      function zplug() &#123;</span><br><span class="line">        return 1</span><br><span class="line">      &#125;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  export ZPLUG_HOME=~/.zplug</span><br><span class="line">fi</span><br><span class="line">if [[ -d &quot;$&#123;ZPLUG_HOME&#125;&quot; ]]; then</span><br><span class="line">  source &quot;$&#123;ZPLUG_HOME&#125;/init.zsh&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">zplug &#x27;plugins/git&#x27;, from:oh-my-zsh, if:&#x27;which git&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">zplug <span class="string">&#x27;romkatv/powerlevel10k&#x27;</span>, use:powerlevel10k.zsh-theme</span></span><br><span class="line">zplug &quot;plugins/vi-mode&quot;, from:oh-my-zsh</span><br><span class="line">zplug &#x27;zsh-users/zsh-autosuggestions&#x27;</span><br><span class="line">zplug &#x27;zsh-users/zsh-completions&#x27;, defer:2</span><br><span class="line">zplug &#x27;zsh-users/zsh-history-substring-search&#x27;</span><br><span class="line">zplug &#x27;zsh-users/zsh-syntax-highlighting&#x27;, defer:2</span><br><span class="line"></span><br><span class="line">if ! zplug check; then</span><br><span class="line">  zplug install</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">zplug load</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zsh-autosuggestions 自动补全快捷键修改</span></span><br><span class="line">bindkey &#x27;,&#x27; autosuggest-accept</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User configuration</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> MANPATH=<span class="string">&quot;/usr/local/man:<span class="variable">$MANPATH</span>&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You may need to manually <span class="built_in">set</span> your language environment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> LANG=en_US.UTF-8</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Preferred editor <span class="keyword">for</span> <span class="built_in">local</span> and remote sessions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> [[ -n <span class="variable">$SSH_CONNECTION</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="built_in">export</span> EDITOR=<span class="string">&#x27;vim&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="built_in">export</span> EDITOR=<span class="string">&#x27;mvim&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">fi</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Compilation flags</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> ARCHFLAGS=<span class="string">&quot;-arch x86_64&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For a full list of active aliases, run `<span class="built_in">alias</span>`.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Example aliases</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">alias</span> zshconfig=<span class="string">&quot;mate ~/.zshrc&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">alias</span> ohmyzsh=<span class="string">&quot;mate ~/.oh-my-zsh&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------aliases-------------------</span></span><br><span class="line">if [ -f ~/.aliases ]; then</span><br><span class="line">        . ~/.aliases</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">autojump</span></span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">bash-insulter</span></span><br><span class="line">if [ -f /etc/bash.command-not-found ]; then</span><br><span class="line">    . /etc/bash.command-not-found</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>那些美丽的风景</title>
    <url>/2021/10/05/%E9%82%A3%E4%BA%9B%E7%BE%8E%E4%B8%BD%E7%9A%84%E9%A3%8E%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-fxatESzM" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="28352987" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>

<p>第一百篇文章了，给自己留个纪念，分享一些生活中的风景，希望在以后的生活中砥砺前行，做更好的自己。</p>
<span id="more"></span>

<p><img src="1.jpg" alt="2021.8.20">2021.8.20<br></br><br><img src="2.jpg" alt="2021.8.5">2021.8.5<br></br><br><img src="3.jpg" alt="2021.8.5">2021.8.5<br></br><br><img src="4.jpg" alt="2021.4.12">2021.4.12<br></br><br><img src="7.jpg" alt="2021.4.12">2021.4.12<br></br><br><img src="5.jpg" alt="2021.7.30">2021.7.30<br></br><br><img src="6.jpg" alt="2021.7.8">2021.7.8<br></br><br><img src="8.jpg" alt="2021.8.17">2021.8.17<br></br><br><img src="9.jpg" alt="2021.8.26">2021.8.26<br></br><br><img src="23.jpg" alt="2021.8.5">2021.8.5<br></br><br><img src="22.jpg" alt="2021.8.26">2021.8.26<br></br><br><img src="12.jpg" alt="2021.8.27">2021.8.27<br></br><br><img src="13.jpg" alt="2021.8.28">2021.8.28<br></br><br><img src="14.jpg" alt="2021.8.31">2021.8.31<br></br><br><img src="15.jpg" alt="2021.9.2">2021.9.2<br></br><br><img src="16.jpg" alt="2021.8.28">2021.8.28<br></br><br><img src="17.jpg" alt="2021.8.28">2021.8.28<br></br><br><img src="18.jpg" alt="2021.8.26">2021.8.26<br></br><br><img src="19.jpg" alt="2021.9.5">2021.9.5<br></br><br><img src="20.jpg" alt="2021.5.3">2021.5.3<br></br><br><img src="21.jpg" alt="2021.5.26">2021.5.26<br></br></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>部署hexo后github pages页面未更新或无法打开问题</title>
    <url>/2021/10/07/%E9%83%A8%E7%BD%B2hexo%E5%90%8Egithub-pages%E9%A1%B5%E9%9D%A2%E6%9C%AA%E6%9B%B4%E6%96%B0%E6%88%96%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2021/04/21/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>链表(linked_list)是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>
<span id="more"></span>

<p><img src="linked_list.png"></p>
<p>链表通过将链点 i 与其邻居链点 i+1 通过指针相关联，从索引 0 到索引 N-1 对链点进行排序。</p>
<h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>链表分为单链表和双链表两种。在接下来的内容里，我们将逐步介绍单链表的具体功能是如何实现的。</p>
<p><strong>1. 创建 Node 类</strong></p>
<p>创建一个 Node 的类，作为基础数据结构：链点，并初始化对应的内参。</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data  <span class="comment"># 表示对应的元素值</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 表示下一个链接的链点</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 创建 Linked_List 类</strong></p>
<p>创建一个 Linked_List 的类，并初始化对应的内参。</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linked_List</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, head=<span class="literal">None</span></span>):</span>  <span class="comment"># 链表初始化函数</span></span><br><span class="line">        self.head = head  <span class="comment"># 表示链表的头部元素</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 添加 append 函数</strong></p>
<p>添加一个 append 的函数，功能是向链表添加新的结点</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, new_element</span>):</span></span><br><span class="line">    <span class="comment"># 将头部结点指向临时变量 current</span></span><br><span class="line">    current = self.head</span><br><span class="line">    <span class="comment"># 当头部结点存在时</span></span><br><span class="line">    <span class="keyword">if</span> self.head:</span><br><span class="line">        <span class="comment"># 循环遍历到链表的最后一个元素</span></span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span>:</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = new_element</span><br><span class="line">    <span class="comment"># 当头部结点不存在时</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.head = new_element</span><br></pre></td></tr></table></figure>

<p><strong>4. 添加 is_empty 函数</strong></p>
<p>添加一个 is_empty 的函数，功能是判断链表是否为空</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断链表是否为空</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># bool() 函数只返回 True 和 False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> self.head</span><br></pre></td></tr></table></figure>

<p><strong>5. 添加 insert 函数</strong></p>
<p>insert(new_element) 往链表中任意位置添加一个 new_element 元素</p>
<p>流程如下：</p>
<ol>
<li>先判断要插入的位置是否在链表的索引范围内。</li>
<li>当插入的位置是头结点（即索引为 0）时，做特殊情况处理。</li>
<li>当要插入结点的位置不在 0 时，找到要插入的位置，插入新结点</li>
</ol>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, position, new_element</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在链表中指定索引处插入元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> position &lt; <span class="number">0</span> <span class="keyword">or</span> position &gt; self.get_length():</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&#x27;insert 插入时,key 的值超出了范围&#x27;</span>)</span><br><span class="line">    temp = self.head</span><br><span class="line">    <span class="comment"># 将插入元素的 next 属性指向老的头结点，并将新的元素赋值给头结点</span></span><br><span class="line">    <span class="keyword">if</span> position == <span class="number">0</span>:</span><br><span class="line">        new_element.<span class="built_in">next</span> = temp</span><br><span class="line">        self.head = new_element</span><br><span class="line">        <span class="comment"># new_element.next, self.head = temp, new_element</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历找到索引值为 position 的结点后, 在其后面插入结点</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; position:</span><br><span class="line">        pre = temp</span><br><span class="line">        temp = temp.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># pre, temp = temp, temp.next</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    pre.<span class="built_in">next</span> = new_element</span><br><span class="line">    new_element.<span class="built_in">next</span> = temp</span><br><span class="line">    <span class="comment"># pre.next, new_element.next = new_element, temp</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 添加 remove 函数</strong></p>
<p>remove() 从链表中任意位置删除一个元素</p>
<p>流程如下：</p>
<ol>
<li>先判断要删除的元素索引是否存在，如果不存在抛出错误</li>
<li>接着判断当存在链表元素时才能执行删除操作。</li>
<li>当要删除的是头结点时（即索引为 0），做特殊情况处理。</li>
<li>其他情况时，通过循环找到要删除的结点。</li>
<li>最后要做的就是把这个结点删除掉。</li>
</ol>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, position</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除指定索引的链表元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> position &lt; <span class="number">0</span> <span class="keyword">or</span> position &gt; self.get_length()-<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(&quot;insert error&quot;)</span></span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&#x27;删除元素的索引超出范围&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    temp = self.head</span><br><span class="line">    <span class="comment"># 当存在链表元素时才能执行删除操作</span></span><br><span class="line">    <span class="keyword">while</span> temp != <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 将头结点的后一个结点赋值给新的头结点，再将之前的头结点指向 `None`</span></span><br><span class="line">        <span class="keyword">if</span> position == <span class="number">0</span>:</span><br><span class="line">            self.head = temp.<span class="built_in">next</span></span><br><span class="line">            temp.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        pre = temp</span><br><span class="line">        <span class="comment"># 以此来遍历链表</span></span><br><span class="line">        temp = temp.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># pre, temp = temp, temp.next</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == position:</span><br><span class="line">            <span class="comment"># 将 pre 的 next 属性指向 temp 的下一个结点</span></span><br><span class="line">            pre.<span class="built_in">next</span> = temp.<span class="built_in">next</span></span><br><span class="line">            temp.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># pre.next, temp.next = temp.next, None</span></span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p><strong>7. 添加其他函数</strong></p>
<p>get_length:获取链表的长度</p>
<p>print_list:遍历链表，并将元素依次打印出来</p>
<p>reverse:将链表反转</p>
<p>initlist: 将列表转换为链表</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_length</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回链表的长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    头部结点赋值给头部结点</span><br><span class="line">    temp = self.head</span><br><span class="line">    <span class="comment"># 计算链表的长度变量</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> temp != <span class="literal">None</span>:</span><br><span class="line">        length = length+<span class="number">1</span></span><br><span class="line">        temp = temp.<span class="built_in">next</span></span><br><span class="line">    <span class="comment"># 返回链表的长度</span></span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    遍历链表，并将元素依次打印出来</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;linked_list:&quot;</span>)</span><br><span class="line">    <span class="comment"># 头部结点赋值给临时变量 temp</span></span><br><span class="line">    temp = self.head</span><br><span class="line">    <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(temp.data)</span><br><span class="line">        temp = temp.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将链表反转</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prev = <span class="literal">None</span></span><br><span class="line">    current = self.head</span><br><span class="line">    <span class="keyword">while</span> current:</span><br><span class="line">        next_node = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = prev</span><br><span class="line">        prev = current</span><br><span class="line">        current = next_node</span><br><span class="line">    self.head = prev</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initlist</span>(<span class="params">self,data_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将列表转换为链表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建头结点</span></span><br><span class="line">    self.head = Node(data_list[<span class="number">0</span>])</span><br><span class="line">    temp = self.head</span><br><span class="line">    <span class="comment"># 逐个为 data 内的数据创建结点, 建立链表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_list[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(i)</span><br><span class="line">        temp.<span class="built_in">next</span> = node</span><br><span class="line">        temp = temp.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<p>基于链表的基本功能介绍，我们给出链表的完整代码</p>
<p>在<code>/home/shiyanlou/</code>下新建一个文件<code>linked_list.py</code>。</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linked_List</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, head=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.head = head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, new_element</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在链表后面增加一个元素</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        current = self.head</span><br><span class="line">        <span class="keyword">if</span> self.head:</span><br><span class="line">            <span class="keyword">while</span> current.<span class="built_in">next</span>:</span><br><span class="line">                current = current.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = new_element</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.head = new_element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        判断链表是否为空</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取链表的长度</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 临时变量指向队列头部</span></span><br><span class="line">        temp = self.head</span><br><span class="line">        <span class="comment"># 计算链表的长度变量</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> temp != <span class="literal">None</span>:</span><br><span class="line">            length = length+<span class="number">1</span></span><br><span class="line">            temp = temp.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 返回链表的长度</span></span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, position, new_element</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在链表中指定索引处插入元素</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> position &lt; <span class="number">0</span> <span class="keyword">or</span> position &gt; self.get_length():</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;insert 插入时,key 的值超出了范围&#x27;</span>)</span><br><span class="line">        temp = self.head</span><br><span class="line">        <span class="keyword">if</span> position == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># new_element.next = temp</span></span><br><span class="line">            <span class="comment"># self.head = new_element</span></span><br><span class="line">            new_element.<span class="built_in">next</span>, self.head = temp, new_element</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 遍历找到索引值为 position 的结点后, 在其后面插入结点</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; position:</span><br><span class="line">            <span class="comment"># pre = temp</span></span><br><span class="line">            <span class="comment"># temp = temp.next</span></span><br><span class="line">            pre, temp = temp, temp.<span class="built_in">next</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># pre.next = node</span></span><br><span class="line">        <span class="comment"># node.next = temp</span></span><br><span class="line">        pre.<span class="built_in">next</span>, new_element.<span class="built_in">next</span> = new_element, temp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        遍历链表，并将元素依次打印出来</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;linked_list:&quot;</span>)</span><br><span class="line">        temp = self.head</span><br><span class="line">        new_list = []</span><br><span class="line">        <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            new_list.append(temp.data)</span><br><span class="line">            temp = temp.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(new_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, position</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        删除指定索引的链表元素</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> position &lt; <span class="number">0</span> <span class="keyword">or</span> position &gt; self.get_length()-<span class="number">1</span>:</span><br><span class="line">            <span class="comment"># print(&quot;insert error&quot;)</span></span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;删除元素的位置超出范围&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        temp = self.head</span><br><span class="line">        <span class="comment"># 遍历找到索引值为 position 的结点</span></span><br><span class="line">        <span class="keyword">while</span> temp != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> position == <span class="number">0</span>:</span><br><span class="line">                self.head = temp.<span class="built_in">next</span></span><br><span class="line">                temp.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># pre = temp</span></span><br><span class="line">            <span class="comment"># temp = temp.next</span></span><br><span class="line">            pre, temp = temp, temp.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i == position:</span><br><span class="line">                <span class="comment"># pre.next = temp.next</span></span><br><span class="line">                <span class="comment"># temp.next = None</span></span><br><span class="line">                pre.<span class="built_in">next</span>, temp.<span class="built_in">next</span> = temp.<span class="built_in">next</span>, <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将链表反转</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        current = self.head</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            <span class="comment"># next_node = current.next</span></span><br><span class="line">            <span class="comment"># current.next = prev</span></span><br><span class="line">            <span class="comment"># prev = current</span></span><br><span class="line">            <span class="comment"># current = next_node</span></span><br><span class="line">            next_node, current.<span class="built_in">next</span> = current.<span class="built_in">next</span>, prev</span><br><span class="line">            prev, current = current, next_node</span><br><span class="line">        self.head = prev</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initlist</span>(<span class="params">self, data_list</span>):</span></span><br><span class="line">        “”“</span><br><span class="line">        将列表转换为链表</span><br><span class="line">        ”“”</span><br><span class="line">        <span class="comment"># 创建头结点</span></span><br><span class="line">        self.head = Node(data_list[<span class="number">0</span>])</span><br><span class="line">        temp = self.head</span><br><span class="line">        <span class="comment"># 逐个为 data 内的数据创建结点, 建立链表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data_list[<span class="number">1</span>:]:</span><br><span class="line">            node = Node(i)</span><br><span class="line">            temp.<span class="built_in">next</span> = node</span><br><span class="line">            temp = temp.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>链表属于常见的一种线性结构，对于插入和移除而言，时间复杂度都为 O(1)</p>
<p>但是对于搜索操作而言，不管从链表的头部还是尾部，都需要遍历 O(n)，所以最好复杂度为 O(1)，最坏的情况就是从头部遍历到尾部才搜索出对应的元素，所以最坏复杂度为 O(n)，平均复杂度为 O(n)。</p>
<p>归纳如下：</p>
<ul>
<li>最好复杂度为 O(1)</li>
<li>最坏复杂度为 O(n)</li>
<li>平均复杂度为 O(n)</li>
</ul>
<h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>双向链表（Double_linked_list）也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。</p>
<p><img src="610px-Doubly-linked-list.png"></p>
<p>这里直接给出参考代码，大家有兴趣请自行探索，这里就不再详细介绍。</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 双向链表节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLinkList</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 双向链表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 判断链表是否为空</span></span><br><span class="line">        <span class="keyword">return</span> self._head == <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 返回链表的长度</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            count = count+<span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 遍历链表</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(cur.item)</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="comment"># 头部插入元素</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="comment"># 如果是空链表，将 node 赋值给 _head</span></span><br><span class="line">            self._head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 将 node 的 next 属性指向头节点 _head</span></span><br><span class="line">            node.<span class="built_in">next</span> = self._head</span><br><span class="line">            <span class="comment"># 将头节点 _head 的 prev 属性指向 node</span></span><br><span class="line">            self._head.prev = node</span><br><span class="line">            <span class="comment"># 将 node 赋值给 _head</span></span><br><span class="line">            self._head = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="comment"># 尾部插入元素</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="comment"># 如果是空链表，将 node 赋值给 _head</span></span><br><span class="line">            self._head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 循环移动到链表尾部结点的位置</span></span><br><span class="line">            cur = self._head</span><br><span class="line">            <span class="keyword">while</span> cur.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 将尾结点 cur 的 next 属性指向 node</span></span><br><span class="line">            cur.<span class="built_in">next</span> = node</span><br><span class="line">            <span class="comment"># 将 node 的 prev 属性指向 cur</span></span><br><span class="line">            node.prev = cur</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="comment"># 查找元素是否存在</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.item == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, pos, item</span>):</span></span><br><span class="line">        <span class="comment"># 在指定位置添加节点</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt;= <span class="number">0</span>:</span><br><span class="line">            self.add(item)</span><br><span class="line">        <span class="keyword">elif</span> pos &gt; (self.length()-<span class="number">1</span>):</span><br><span class="line">            self.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = Node(item)</span><br><span class="line">            cur = self._head</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 移动到指定位置的前一个位置</span></span><br><span class="line">            <span class="keyword">while</span> count &lt; (pos-<span class="number">1</span>):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 将 node 的 prev 属性指向 cur</span></span><br><span class="line">            node.prev = cur</span><br><span class="line">            <span class="comment"># 将 node 的 next 属性指向 cur 的下一个节点</span></span><br><span class="line">            node.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 将 cur 的下一个节点的 prev 属性指向 node</span></span><br><span class="line">            cur.<span class="built_in">next</span>.prev = node</span><br><span class="line">            <span class="comment"># 将 cur 的 next 指向 node</span></span><br><span class="line">            cur.<span class="built_in">next</span> = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="comment"># 删除元素</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self._head</span><br><span class="line">            <span class="keyword">if</span> cur.item == item:</span><br><span class="line">                <span class="comment"># 如果首节点的元素即是要删除的元素</span></span><br><span class="line">                <span class="keyword">if</span> cur.<span class="built_in">next</span> == <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 如果链表只有这一个节点</span></span><br><span class="line">                    self._head = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 将第二个节点的 prev 属性设置为 None</span></span><br><span class="line">                    cur.<span class="built_in">next</span>.prev = <span class="literal">None</span></span><br><span class="line">                    <span class="comment"># 将 _head 指向第二个节点</span></span><br><span class="line">                    self._head = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> cur.item == item:</span><br><span class="line">                    <span class="comment"># 将 cur 的前一个节点的 next 指向 cur 的后一个节点</span></span><br><span class="line">                    cur.prev.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">                    <span class="comment"># 将 cur 的后一个节点的 prev 指向 cur 的前一个节点</span></span><br><span class="line">                    cur.<span class="built_in">next</span>.prev = cur.prev</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<p>交换单链表里两个链点</p>
<p>在这个实验中，我们要给定两个值，如果这两个值都在单链表的链点中，即交换这两个链点在单链表的位置。</p>
<p>举例：</p>
<p>1-&gt;2-&gt;3-&gt;4-&gt;5</p>
<p>input:1 4 output:4-&gt;2-&gt;3-&gt;1-&gt;5</p>
<p>目标：</p>
<ol>
<li>交换两个链点在链表中的位置</li>
<li>不改变其他链点在链表中的位置</li>
</ol>
<p>思路：</p>
<ul>
<li>采用 insert 的思想，对于要交换的两个链点 d1 d2，各自声明新的 D1 D2 ，使 D1=d1, D2=d2</li>
<li>然后把 然后再根据 d1 d2 的位置，改变索引的位置，即完成交换的全部操作</li>
</ul>
<p><strong>参考代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linkedlist</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_list</span>(<span class="params">self</span>):</span>  <span class="comment"># 遍历链表，并将元素依次打印出来</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;linked_list:&quot;</span>)</span><br><span class="line">        temp = self.head</span><br><span class="line">        new_list = []</span><br><span class="line">        <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            new_list.append(temp.data)</span><br><span class="line">            temp = temp.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(new_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, new_data</span>):</span></span><br><span class="line">        new_node = Node(new_data)</span><br><span class="line">        new_node.<span class="built_in">next</span> = self.head</span><br><span class="line">        self.head = new_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapNodes</span>(<span class="params">self, d1, d2</span>):</span></span><br><span class="line">        prevD1 = <span class="literal">None</span></span><br><span class="line">        prevD2 = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> d1 == d2:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            D1 = self.head</span><br><span class="line">            <span class="keyword">while</span> D1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> D1.data != d1:</span><br><span class="line">                prevD1 = D1</span><br><span class="line">                D1 = D1.<span class="built_in">next</span></span><br><span class="line">            D2 = self.head</span><br><span class="line">            <span class="keyword">while</span> D2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> D2.data != d2:</span><br><span class="line">                prevD2 = D2</span><br><span class="line">                D2 = D2.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> D1 <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> D2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> prevD1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                prevD1.<span class="built_in">next</span> = D2</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.head = D2</span><br><span class="line">            <span class="keyword">if</span> prevD2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                prevD2.<span class="built_in">next</span> = D1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.head = D1</span><br><span class="line">            temp = D1.<span class="built_in">next</span></span><br><span class="line">            D1.<span class="built_in">next</span> = D2.<span class="built_in">next</span></span><br><span class="line">            D2.<span class="built_in">next</span> = temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">list</span> = Linkedlist()</span><br><span class="line">    <span class="built_in">list</span>.insert(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">list</span>.insert(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">list</span>.insert(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">list</span>.insert(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">list</span>.insert(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">list</span>.print_list()</span><br><span class="line">    <span class="built_in">list</span>.swapNodes(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After swapping&quot;</span>)</span><br><span class="line">    <span class="built_in">list</span>.print_list()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>python数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2021/04/24/%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>队列 (queue) 是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p>
<span id="more"></span>

<p><img src="queue.png" alt="队列的介绍"></p>
<p>队列符合先进先出[FIFO]的原则。因为要排队的第一个项目，最终将是第一个要出列的项目，如在现实生活中的队列，先来的站在队列前面，后来的就只能站在队列后面啦。</p>
<h4 id="基本功能介绍"><a href="#基本功能介绍" class="headerlink" title="基本功能介绍"></a>基本功能介绍</h4><p>队列有两种实现形式，分为两种：<strong>数组</strong>和<strong>链表</strong>。</p>
<p>在接下来的内容里，我们将以链表的形式实现队列，逐步介绍具体功能是如何实现的。</p>
<p><strong>1. 创建 Node 类</strong></p>
<p>创建一个 Node 的类，作为基础数据结构：链点，并初始化对应的内参。</p>
<p>具体实现代码如下</p>
<p>队列有两种实现形式，分为两种：<strong>数组</strong>和<strong>链表</strong>。</p>
<p>在接下来的内容里，我们将以链表的形式实现队列，逐步介绍具体功能是如何实现的。</p>
<p><strong>1. 创建 Node 类</strong></p>
<p>创建一个 Node 的类，作为基础数据结构：链点，并初始化对应的内参。</p>
<p>具体实现代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,elem,<span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.elem = elem  <span class="comment"># 表示对应的元素值</span></span><br><span class="line">        self.<span class="built_in">next</span>=<span class="built_in">next</span>  <span class="comment"># 表示下一个链接的链点</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 创建 Queue 类</strong></p>
<p>创建一个 Queue 的类，以链表形式的队列，并初始化对应的内参。</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.head = <span class="literal">None</span>  <span class="comment"># 头部链点为 None</span></span><br><span class="line">        self.rear = <span class="literal">None</span>  <span class="comment"># 尾部链点为 None</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 添加 is_empty 函数</strong></p>
<p>添加一个 is_empty 的函数，功能是判断队列是否为空</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.head <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># 判断队列是否为空</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 添加 enqueue 函数</strong></p>
<p>添加一个 enqueue(elem) 函数，功能是往队列中添加一个 elem 元素</p>
<p>流程如下：</p>
<ol>
<li>Vertex vtx = new Vertex(v) 初始化一个新的点</li>
<li>tail.next = vtx 队列尾部的后继是这个新的点</li>
<li>tail = vtx 然后让队列尾部指针指向这个新的点</li>
</ol>
<p>效果演示：往已知队列[29,9,53]里面添加一个 80 元素</p>
<p><img src="https://doc.shiyanlou.com/document-uid890547labid10283timestamp1552295156350.png" alt="enqueue"></p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, elem</span>):</span></span><br><span class="line">    p = Node(elem)  <span class="comment"># 初始化一个新的点</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():</span><br><span class="line">        self.head = p  <span class="comment"># 队列头部为新的链点</span></span><br><span class="line">        self.rear = p  <span class="comment"># 队列尾部为新的链点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.rear.<span class="built_in">next</span> = p  <span class="comment"># 队列尾部的后继是这个新的点</span></span><br><span class="line">        self.rear =p  <span class="comment"># 然后让队列尾部指针指向这个新的点</span></span><br></pre></td></tr></table></figure>

<p><strong>5. 添加 dequeue 函数</strong></p>
<p>添加一个 dequeue() 函数，功能是从队列头部删除一个元素</p>
<p>流程如下：</p>
<ol>
<li>先判断队列是否为空，为空即退出 dequeue 操作，不为空即继续后续操作</li>
<li>将队列头部元素赋值到 result 变量里</li>
<li>改变队列的头部指针的位置，然后返回 result</li>
</ol>
<p>效果演示：对已知队列[29,9,53,80] 删除头部元素</p>
<p><img src="https://doc.shiyanlou.com/document-uid890547labid10283timestamp1552295200577.png" alt="dequeue"></p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():  <span class="comment"># 判断队列是否为空</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Queue_is_empty&#x27;</span>)  <span class="comment"># 若队列为空，则退出 dequeue 操作</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = self.head.elem  <span class="comment"># result为队列头部元素</span></span><br><span class="line">        self.head = self.head.<span class="built_in">next</span>  <span class="comment"># 改变队列头部指针位置</span></span><br><span class="line">        <span class="keyword">return</span> result  <span class="comment"># 返回队列头部元素</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 添加 peek 函数</strong></p>
<p>添加一个 peek() 函数，功能是查看队列头部的元素</p>
<p>流程如下：</p>
<ol>
<li>判断队列是否为空，为空即返回 NOT_FOUND</li>
<li>队列如果不为空，返回队列头部元素</li>
</ol>
<p>具体代码实现如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.is_empty():  <span class="comment"># 判断队列是否为空</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NOT_FOUND&#x27;</span>)  <span class="comment"># 为空则返回 NOT_FOUND</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.head.elem  <span class="comment"># 返回队列头部元素</span></span><br></pre></td></tr></table></figure>

<p><strong>7. 添加 print_queue 函数</strong></p>
<p>添加一个 print_queue() 函数，功能是展现队列的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;queue:&quot;</span>)</span><br><span class="line">    temp=self.head</span><br><span class="line">    myqueue=[]  <span class="comment"># 暂时存放队列数据</span></span><br><span class="line">    <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        myqueue.append(temp.elem)</span><br><span class="line">        temp=temp.<span class="built_in">next</span></span><br><span class="line">    <span class="built_in">print</span>(myqueue)</span><br></pre></td></tr></table></figure>

<p>最终代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, elem, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.elem = elem  <span class="comment"># 表示对应的元素值</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span>  <span class="comment"># 表示下一个链接的链点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.head = <span class="literal">None</span>  <span class="comment"># 头部链点为 None</span></span><br><span class="line">        self.rear = <span class="literal">None</span>  <span class="comment"># 尾部链点为 None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.head <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># 判断队列是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, elem</span>):</span></span><br><span class="line">        p = Node(elem)  <span class="comment"># 初始化一个新的点</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.head = p  <span class="comment"># 队列头部为新的链点</span></span><br><span class="line">            self.rear = p  <span class="comment"># 队列尾部为新的链点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.rear.<span class="built_in">next</span> = p  <span class="comment"># 队列尾部的后继是这个新的点</span></span><br><span class="line">            self.rear = p  <span class="comment"># 然后让队列尾部指针指向这个新的点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():  <span class="comment"># 判断队列是否为空</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Queue_is_empty&#x27;</span>)  <span class="comment"># 若队列为空，则退出 dequeue 操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.head.elem  <span class="comment"># result为队列头部元素</span></span><br><span class="line">            self.head = self.head.<span class="built_in">next</span>  <span class="comment"># 改变队列头部指针位置</span></span><br><span class="line">            <span class="keyword">return</span> result  <span class="comment"># 返回队列头部元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():  <span class="comment"># 判断队列是否为空</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;NOT_FOUND&#x27;</span>)  <span class="comment"># 为空则返回 NOT_FOUND</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.head.elem  <span class="comment"># 返回队列头部元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;queue:&quot;</span>)</span><br><span class="line">        temp = self.head</span><br><span class="line">        myqueue = []  <span class="comment"># 暂时存放队列数据</span></span><br><span class="line">        <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            myqueue.append(temp.elem)</span><br><span class="line">            temp = temp.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(myqueue)</span><br></pre></td></tr></table></figure>

<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>队列属于常见的一种线性结构，对于出队和进队而言，时间复杂度都为 O(1)</p>
<h4 id="队列的其他实现"><a href="#队列的其他实现" class="headerlink" title="队列的其他实现"></a>队列的其他实现</h4><p>队列有两种实现形式，数组和链表。我们在前面已经介绍了如何用链表实现的队列，这里就不再赘述，直接给出另一种用数组实现的队列代码，供大家学习参考。</p>
<p>形式：用数组实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.entries = []  <span class="comment"># 表示队列内的参数</span></span><br><span class="line">        self.length = <span class="number">0</span>  <span class="comment"># 表示队列的长度</span></span><br><span class="line">        self.front = <span class="number">0</span>  <span class="comment"># 表示队列头部位置</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.entries.append(item)  <span class="comment"># 添加元素到队列里面</span></span><br><span class="line">        self.length = self.length + <span class="number">1</span>  <span class="comment"># 队列长度增加 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.length = self.length - <span class="number">1</span>  <span class="comment"># 队列的长度减少 1</span></span><br><span class="line">        dequeued = self.entries[self.front]  <span class="comment"># 队首元素为 dequeued</span></span><br><span class="line">        self.front += <span class="number">1</span>  <span class="comment"># 队首的位置减少 1</span></span><br><span class="line">        self.entries = self.entries[self.front:]  <span class="comment"># 队列的元素更新为退队之后的队列</span></span><br><span class="line">        <span class="keyword">return</span> dequeued</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.entries[<span class="number">0</span>]  <span class="comment"># 直接返回队列的队首元素</span></span><br></pre></td></tr></table></figure>

<h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p>设计队列的实现( 在这里我们要求用之前介绍的链表形式实现 )</p>
<p>在队列中实现这些步骤：</p>
<ol>
<li>初始化创建 Node, Queue 类</li>
<li>依次添加 21 35 58 13 进队列</li>
<li>返回队列头部元素</li>
<li>删除此时队列头部元素</li>
<li>返回此时队列头部元素</li>
</ol>
<h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h4><p>注意：请务必自己独立思考解决问题之后再对照参考答案，一开始直接看参考答案收获不大。</p>
<p>参考代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, elem, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.elem = elem  <span class="comment"># 表示对应的元素值</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span>  <span class="comment"># 表示下一个链接的链点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.head = <span class="literal">None</span>  <span class="comment"># 头部链点为 None</span></span><br><span class="line">        self.rear = <span class="literal">None</span>  <span class="comment"># 尾部链点为 None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.head <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># 判断队列是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, elem</span>):</span></span><br><span class="line">        p = Node(elem)  <span class="comment"># 初始化一个新的点</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.head = p  <span class="comment"># 队列头部为新的链点</span></span><br><span class="line">            self.rear = p  <span class="comment"># 队列尾部为新的链点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.rear.<span class="built_in">next</span> = p  <span class="comment"># 队列尾部的后继是这个新的点</span></span><br><span class="line">            self.rear = p  <span class="comment"># 然后让队列尾部指针指向这个新的点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():  <span class="comment"># 判断队列是否为空</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Queue_is_empty&#x27;</span>)  <span class="comment"># 若队列为空，则退出 dequeue 操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.head.elem  <span class="comment"># result为队列头部元素</span></span><br><span class="line">            self.head = self.head.<span class="built_in">next</span>  <span class="comment"># 改变队列头部指针位置</span></span><br><span class="line">            <span class="keyword">return</span> result  <span class="comment"># 返回队列头部元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():  <span class="comment"># 判断队列是否为空</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;NOT_FOUND&#x27;</span>)  <span class="comment"># 为空则返回 NOT_FOUND</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.head.elem  <span class="comment"># 返回队列头部元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_queue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;queue:&quot;</span>)</span><br><span class="line">        temp = self.head</span><br><span class="line">        myqueue = []  <span class="comment"># 暂时存放队列数据</span></span><br><span class="line">        <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            myqueue.append(temp.elem)</span><br><span class="line">            temp = temp.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(myqueue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    queue = Queue()</span><br><span class="line">    queue.enqueue(<span class="number">21</span>)</span><br><span class="line">    queue.enqueue(<span class="number">35</span>)</span><br><span class="line">    queue.enqueue(<span class="number">58</span>)</span><br><span class="line">    queue.enqueue(<span class="number">13</span>)</span><br><span class="line">    queue.print_queue()</span><br><span class="line">    <span class="built_in">print</span>(queue.peek())</span><br><span class="line">    queue.dequeue()</span><br><span class="line">    queue.print_queue()</span><br><span class="line">    <span class="built_in">print</span>(queue.peek())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>python数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>随机生成句子</title>
    <url>/2022/06/20/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%8F%A5%E5%AD%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存在，存在则删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_exists</span>():</span></span><br><span class="line">    file_path = <span class="string">&#x27;/root/file&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        os.remove(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装句子生成</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_sentence</span>(<span class="params">i</span>):</span></span><br><span class="line">    f = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line">    s = f.sentence(nb_words=i, variable_nb_words=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将句子与标签拼接，生成文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_document</span>(<span class="params">sentence_list</span>):</span></span><br><span class="line">    create_paragraph = <span class="string">&#x27;&lt;audio src=&quot;询问.wav&quot;&gt;&#123;&#125;&lt;/audio&gt;&#123;&#125;&lt;audio src=&quot;金额.wav&quot;&gt;&#123;&#125;&lt;/audio&gt;&#123;&#125;&lt;audio src=&quot;请您在.wav&quot; &gt;&#123;&#125;&lt;/audio&gt;&#123;&#125;&lt;audio src=&quot;逾期提醒.wav&quot; &gt;&#123;&#125;&lt;/audio&gt;\n&#x27;</span>.<span class="built_in">format</span>(*sentence_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/root/file&#x27;</span>,<span class="string">&#x27;at&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(create_paragraph)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    file_exists()</span><br><span class="line"></span><br><span class="line">    concurrent_time = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入并发次数：&quot;</span>))</span><br><span class="line">    loop_time = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入循环次数：&quot;</span>))</span><br><span class="line"></span><br><span class="line">    word_list = [<span class="number">21</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">5</span>,<span class="number">33</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(loop_time*concurrent_time):</span><br><span class="line">        sentence_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> word_list:</span><br><span class="line">            data = create_sentence(i)</span><br><span class="line">            sentence_list.append(data)</span><br><span class="line">        create_document(sentence_list)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>雪</title>
    <url>/2021/01/25/%E9%9B%AA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-VjwdFCJZ" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="586299" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<p>岁月几许沧桑，人间几多风雪，遥望雪花飘洒，梦回古时华夏。</p>
<span id="more"></span>

<p><img src="2021-01-25_18-46.png" alt="img1"></p>
<p>就着这今天的雪景，也抄手小诗，品品人间风景。</p>
<p><img src="2021-01-25_18-46_1.png" alt="img2"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>面纱</title>
    <url>/2021/11/30/%E9%9D%A2%E7%BA%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-aXnNWEER" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="16139396" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>

<blockquote>
<p>50岁时毛姆写下这个近乎完美的爱情故事，因为每个人都在故事中找到了自己。这本小说讲述了爱情中所有的不美好：背叛、猜忌、报复，还有我们终将面对的离别与自我救赎。毛姆以他冷静得近乎刻薄的方式，将一个女人的堕落与觉醒刻画得淋漓尽致。凯蒂怎么也琢磨不透，文夫到底有没有发现她出轨的秘密偷情时门把手的转动、晚餐时意有所指的话语，还有突然要带她前往霍乱之地的决定，这些都让凯蒂的神经越绷越紧。终于，忍无可忍的她打算摊牌，离婚后投奔心爱的情人。然而面纱揭开，爱情的真相与人生的意义将她的天真击得粉碎。毛姆以他冷静得近乎刻薄的方式，将一个女人的堕落与觉醒刻画得淋漓尽致–在两个人的世界里，她只能选择爱他或者失去他，以填补心灵的空虛；但当她身处更为广袤的世界，目睹了生活的残酷和人性的光辉之后，才真正获<br>得了心灵的宁静和对自我的救赎。</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>你用面纱遮蔽他人的窥探，自己也难以一睹世界之真实。</p>
</blockquote>
<p>这本小说真是一部让人揪心的作品</p>
<p>沃尔特爱而不得，凯蒂的个人成长，查理的渣男行为都被描写的淋漓尽致</p>
<blockquote>
<p>“我对你不抱什么幻想，”他说，“我知道你愚蠢、轻浮、没有头脑，但是我爱你。我知道你的目标和理想既庸俗又普通，但是我爱你。我知道你是二流货色，但是我爱你。想一想真是好笑，我竭力去喜欢那些讨你喜欢的东西，忍受折磨也要对你隐瞒起自己，实际上我并不无知粗俗、不爱散播丑闻也不愚蠢。我知道你何等害怕智慧，便尽我所能让你觉得我是个大傻瓜，跟你认识的其他人一样。我知道你嫁给我只图一时利益，我是那样爱你，我不在乎。大多数人，就我所知，当他们爱一个人，却没有得到爱的回报时就会觉得委屈不平，甚至愈发愤怒和痛苦。我不是那样，我从来没有指望你爱我，我看不出任何理由让你爱我，我也从来没想过自己会被人爱。我很感激能被允许爱你，当我时常想起你高兴跟我在一起，或者当我发现你眼中闪烁着愉快的爱意时，我就会欣喜若狂。我尽量不让我的爱来烦扰你，我知道那会让我承受不起，所以我一直察言观色，留意我的爱让你厌烦的最初迹象。大部分丈夫认为那是一种权力，我却准备当成恩惠来接受。”</p>
</blockquote>
<p>个人认为沃尔特是一个很拧巴的人，当他知道凯蒂出轨后，他就带上了一副面具。他深爱着凯蒂，却不愿意过多的表达。毕竟对方是出轨者，他有自己的骄傲，但终究是败给了爱情。</p>
<blockquote>
<p>假如汤森太太向我保证她会跟她丈夫离婚，假如他给我一份书面承诺，保证在两份判决生效的一个星期内娶你，我就答应你。”</p>
</blockquote>
<blockquote>
<p>“你特别瞧不起我吧，沃尔特？”<br>“不。”他犹豫了一下，声音十分奇怪，“我瞧不起我自己。”</p>
<p>“因为我爱你。”</p>
</blockquote>
<p>他无疑用他自己的方式深爱着凯蒂，却让凯蒂觉得自己是一个客人，而非是家庭的一员。（找不到那一段话了）</p>
<p>我个人感觉他的爱太卑微、太深沉了，打动了千万读者读者，却打动不了凯蒂。其实，对于这一点没有人怪凯蒂，因为换做任何一个人可能都无法接受这样的爱吧。</p>
<p>一开始沃尔特是想与凯蒂一起死的，因为他们去瘟疫肆虐的湄潭府无疑是送死。这点凯蒂问过他，去过之后呢，他没有想过。在书的尾声，他也承认了自己当时确实想让她死在那里。</p>
<p>哎，何必呢。</p>
<p>凯蒂在修女院中获得了新生与成长。当他们渐渐拨开层层云雾，慢慢和解，凯蒂却怀了身孕。</p>
<blockquote>
<p>“我要生孩子了。”她说。</p>
<p>当她说出一句本以为会引发惊叹的话，他却习惯以沉默相对，这在她已见怪不怪，但从未像现在这样令她难以忍受。他什么也没说，也没做任何手势，脸上和那双黑眼睛里的神色没有任何变化，以表示他听见了。她突然有种想哭的冲动。如果一个男人爱他的妻子，他的妻子也爱他，在这样的时刻，他们本该受一种强烈的情感驱使着紧紧抱在一起。沉默令人不堪忍受，她耐不住了。</p>
<p>“我不知道为什么以前我从未想到这一点。我太愚蠢了，不过……由于种种原因……”</p>
<p>“你有多长时间……你估计什么时候分娩？”</p>
<p>这话似乎花了好大力气才从他嘴里说出来，她觉得他喉咙发干，就跟她自己一样。可恨的是她说起话来嘴唇一直打颤，如果他不是石头做的，这也该激发他的恻隐之心了吧。</p>
<p>“我估计已经有两三个月了。”</p>
<p>“我是那父亲吗？”</p>
<p>她倒吸一口冷气，他的声音里有一丝颤抖。他一贯冷静、自我克制，以至于微乎其微的情感表示都会让她震惊，这简直太可怕了。她不知为什么想到了在香港见过的一种仪器，上面有一根指针轻轻振动，人们告诉她那代表上千英里外发生了一场地震，想必上千人会丧失生命。她看着他，他面如死灰，这种苍白她以前见过一到两次。他低着头，稍稍看着一边。</p>
<p>“是吗？”</p>
</blockquote>
<p>算了，一切都是无言。</p>
<p>刚开始挺为沃尔特感到难过的，但后来慢慢发现他也是一个卑微的普通人，小说最后成长了的只有凯蒂一个人。他能原谅凯蒂的出轨，却无法视肚子里的孩子不见，最后我想他是自杀吧。</p>
<blockquote>
<p>别瞎忙了。我经过了一段艰难的路途，但现在已经全好了。”<br>凯蒂又等了一会儿，但只有沉默。他全然不动的样子撕扯着她凄苦的心。看见他竟那样毫无动静地躺着，太过让人害怕——他似乎已经准备好寂然进入坟墓。</p>
</blockquote>
<p>亲眼看见深爱之人的背叛，用永无休止的忙碌去麻痹自己破碎的心，把死亡看成最后解脱的沃尔特你太傻了。</p>
<blockquote>
<p>人生何其短暂，世界本来就充满了痛苦，人们却还是要折磨自己，这岂不是太可怜了吗？</p>
</blockquote>
<p>你是那个痴情的凯蒂，成为了口中的那只狗，而凯蒂则变成了善人。</p>
<blockquote>
<p>过去已经完结，逝者已然安息。这样是不是太过无情？她满心希望自己已经学会同情和博爱，即使不知道什么样的未来在等待着她，也感到内心有一股力量，无论将要发生什么，她都能带着轻松愉悦的心情去接受。接着，突然之间，全然说不清是何因由，那段旅行的回忆从她无意识的脑海深处浮现出来：她跟着可怜的沃尔特，两人一道前往那座饱受瘟疫摧残、让他丢了性命的城市——一天早上，天还没亮他们便坐上轿子出发。破晓之时，与其说她看到，不如说是凭直觉预见了那样一幅令人惊叹的美妙景致，一时缓和了她心里的痛苦，让尘世间的所有磨难都显得无关重要。太阳升起来，驱散了一片雾霭，她看见他们循着的那条小径蜿蜒向前，直到目力不及之处，穿插于稻田之间，横跨过一条小河，越过高低起伏的大地——也许她的过失，她做下的蠢事，还有她所遭受的不幸，并非一概徒劳无益，只要现在她能够遵循眼前这条让她依稀可辨的路。那不是亲切古怪的老沃丁顿所说的无所通达的道路，而是修道院那些可爱的修女谦卑地遵循的路——那是一条通往内心安宁的路。</p>
</blockquote>
<p>所有的伤、所有的恨都该慢慢学着与自己和解。现在失恋的男女也是一样啊，如果在所爱的人背叛自己后，能有勇气断掉一切，学着与自己和解是否能像凯蒂一样获得新生。</p>
</br>

<p><strong>与世界和解，与往事和解。</strong></p>
<p><strong>原谅该原谅的，忘记该忘记的。</strong></p>
<p><strong>记住该记住的，回忆该回忆的。</strong></p>
<p><strong>未来很长，当有勇气面对，当与自己和解。</strong></p>
</br>

<p>让我想到了两首歌：《一直很安静》和《路过人间》</p>

    <div id="aplayer-FJndTDYW" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="505997881" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>


    <div id="aplayer-WMyLAJeX" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1495052210" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

</br>

<p><img src="1.jpg"></p>
<center><small>11.27号在国家图书馆无意间发现了这本书</small></center>

]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>鹊桥仙·纤云弄巧</title>
    <url>/2021/01/06/%E9%B9%8A%E6%A1%A5%E4%BB%99%C2%B7%E7%BA%A4%E4%BA%91%E5%BC%84%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-BhLrOEta" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="002Rgg8P4PdjXa" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
</br>

<center>

<p>纤云弄巧，</br><br>飞星传恨，</br><br>银汉迢迢暗度。</br><br>金风玉露一相逢，</br><br>便胜却人间无数。</br><br>柔情似水，</br><br>佳期如梦，</br><br>忍顾鹊桥归路。</br><br>两情若是久长时，</br><br>又岂在朝朝暮暮。</p>
</center>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗词歌赋</tag>
      </tags>
  </entry>
  <entry>
    <title>你当像鸟飞往你的山</title>
    <url>/2022/10/10/%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>《你当像鸟飞往你的山》刚看到这个名字的时候，我以为是回归本心，或是久别重逢，却没想到是通过教育来认识世界，从而坚持自我。</p>
<p>这也正印证了英文的标题《Educated》</p>
<p>塔拉的家庭无疑是一个偏激的摩门家庭——父母不信任政府、不参与涉及关于政府的任何工作、从不去医院治疗、他的孩子也从不上学。</p>
<p>直接原因应该是：<strong>韦恩家事件</strong></p>
<p>书中多处提到韦恩家在1990年发生的惨案，这导致了父亲的直接转变。但这一切父亲并未亲身经历，只是双向情感障碍带来的幻想。</p>
<p>对于塔拉来说，家庭是不可分割的一部分。即使肖恩对塔拉在残忍，塔拉依然愿意相信哥哥，而非是自己的记忆。对于父母的作为，她更愿意相信那是一场梦，只要有人告诉她这一切都是她自己幻想出来的，她就会相信。</p>
<p>直到父母在巴克峰中大肆宣扬她被恶魔附身，塔拉用了一年的时间终于与父亲切断联系，但还是对母亲念念不忘。</p>
<p>对于父母给塔拉施加的偏激思想——不可以穿露出肉的衣服、不要相信政府、不能去医院等，还有那些文化与学识。塔拉都通过教育慢慢的认清社会与现实。</p>
<p>教育改变了自己，认清了和家人的隔阂，不会再为家人而妥协与让步，而是更多的考虑自身</p>
<p>我想到了我父母也是带有这偏激色彩，小病不相信医院也不愿意去医院，反而耽误了病情。还有一些网上的说教也严重影响了他们的主观认知。对于他们来说，那些东西他们也不曾经历过，而奉为经典。</p>
<p>或许对于我们来说，父母的偏激不会那么明显，但教育是能够认清自己，并摆脱他们偏激思想的重要途径</p>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学</title>
    <url>/2022/08/28/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>离散数学课程的主要内容：</p>
<ol>
<li>基础：逻辑和证明</li>
<li>基本结构（包括集合、函数、序列、求和与矩阵）</li>
<li>计数</li>
<li>高级计数</li>
<li>关系</li>
<li>图</li>
<li>树</li>
<li>布尔代数</li>
</ol>
<p>学习该课程的目的：</p>
<ol>
<li>为学习计算机后继课程，如数据结构、编译原理、操作系统、数据库原理、形式语言及自动机。软件工程与方法学、计算机网络和人工智能、高级程序设计语言等，提供必要的数据基础；为阅读计算机文章作充分的数学准备</li>
</ol>
<p>数理逻辑：人工智能、数据库、形式语言及自动机、高级程序设计语言</p>
<p>集合论：信息结构与检索、数据结构</p>
<p>布尔代数等：开关理论、逻辑设计和程序理论、语法分析</p>
<p>图论：可计算性理论、计算机网络、数据结构</p>
<ol start="2">
<li>通过学习离散数学，可以培养和提高自己的抽象思维和逻辑推理能力，获得解决实际问题的能力，为以后的软、硬学习和研究开发工作，打下坚实的数学基础。</li>
</ol>
<span id="more"></span>

<h2 id="基础：逻辑和证明"><a href="#基础：逻辑和证明" class="headerlink" title="基础：逻辑和证明"></a>基础：逻辑和证明</h2><h3 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><ul>
<li>命题</li>
<li>联结词<ul>
<li>否定联结词</li>
<li>合取联结词</li>
<li>析取联结词</li>
<li>条件语句：逆命题、逆否命题、反命题</li>
<li>双条件语句</li>
</ul>
</li>
<li>真值表</li>
</ul>
<h4 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h4><ul>
<li><strong>命题：</strong>是一个陈述句（即陈述事实的语句），它或者或假，但不能既真又假。即：<strong>命题是能够判断真假的陈述句。</strong></li>
<li><strong>原子命题：</strong>不能分解为更简单的陈述句</li>
</ul>
<p><img src="%E5%91%BD%E9%A2%981.png"></p>
<p>说明：</p>
<ol>
<li><p>只有具有确定真值得陈述句才是命题。</p>
<p>一切没有判断内容的句子，无所谓是非的句子，如：祈使句、感叹句、疑问句等都不是命题</p>
</li>
<li><p>因为命题只有两种真值，所以“命题逻辑”又称“二值逻辑”</p>
</li>
<li><p>“具有确定真值”是指客观上的具有，有我们是否知道它的真值是两回事</p>
<p>比如：其他星球上有生命</p>
</li>
</ol>
<p>命题逻辑</p>
<p><strong>命题构造</strong></p>
<ul>
<li>命题变元：p，q，r，s……</li>
<li>一个命题是真命题，用T表示</li>
<li>一个命题是加盟命题，用F表示</li>
<li>复合命题：由原子命题用逻辑运算符组合而来<ul>
<li>否定联结词：┐</li>
<li>合取联结词：∧</li>
<li>析取联结词：∨</li>
<li>or 联结词：⊕</li>
<li>条件联结词：→</li>
<li>双条件联结词：↔</li>
</ul>
</li>
</ul>
<h4 id="复合命题——联结词"><a href="#复合命题——联结词" class="headerlink" title="复合命题——联结词"></a>复合命题——联结词</h4><ol>
<li><p>否定联结词（逻辑非）</p>
<p>令p为一命题，则p的否定记作┐p</p>
<table>
<thead>
<tr>
<th>p</th>
<th>┐p</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>F</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
</tr>
</tbody></table>
</li>
<li><p>合取联结词（逻辑与）</p>
<p>令p和q为命题，p、q的合取记作p∧q</p>
<table>
<thead>
<tr>
<th>p</th>
<th>q</th>
<th>p∧q</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>T</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
</tbody></table>
</li>
<li><p>析取联结词（逻辑或）</p>
<p>令p和q为命题，p、q的析取记作p∨q</p>
<table>
<thead>
<tr>
<th>p</th>
<th>q</th>
<th>pVq</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
</tbody></table>
</li>
<li><p>联结词 or （or有两种不同的含义）</p>
<ul>
<li><p>兼或（inclusive or）</p>
<p>例如：修过计算机科学或高数的学生可以修这门课</p>
<p>这就是析取的含义，p v q为真，只要两个命题之一为真或两者均为真即可。</p>
</li>
<li><p>异或（exclusive or）【相异为真】</p>
<p>例如：套餐含汤或饮料</p>
<p>这就是异或（XOR）的含义。p⊕q为真，则两个命题只有一个为真，但不能同事为真</p>
</li>
</ul>
<p>两个命题异或的真值表</p>
<table>
<thead>
<tr>
<th>p</th>
<th>q</th>
<th>p⊕q</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>T</td>
<td>F</td>
</tr>
<tr>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
</tbody></table>
</li>
<li><p>条件联结词（如果p，则q）</p>
<table>
<thead>
<tr>
<th>p（前件）</th>
<th>q（后件）</th>
<th>p→q</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>T</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>T</td>
</tr>
</tbody></table>
<p>前提条件为假，结果必为真。例如：</p>
<ul>
<li>如果月亮是绿色奶酪做的，我比比尔盖茨更有钱</li>
<li>如果月亮是绿色奶酪做的，那么我就得靠救济生活</li>
<li>如果1+1=3，那么猪会飞。</li>
</ul>
<p>在条件语句p→q中，在前件之间不需要有任何联系。p→q只依赖于p和q的真值</p>
<p><img src="%E5%B8%B8%E7%94%A8%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E8%A1%A8%E8%BF%B0%E6%96%B9%E5%BC%8F.png" alt="常用条件语句表述方式"></p>
<p><strong>逆命题、逆否命题、反命题</strong></p>
<ul>
<li>q→p    是p→q的逆命题</li>
<li>┐q→┐p    是p→q的逆否命题</li>
<li>┐p→┐q    是p→q的反命题</li>
</ul>
</li>
<li><p>双条件联结词【相同为真】（与异或相反）</p>
<table>
<thead>
<tr>
<th>p</th>
<th>q</th>
<th>p↔q</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>T</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>T</td>
</tr>
</tbody></table>
<p>双条件的表达方式</p>
<ul>
<li>p是q的充分必要条件</li>
<li>如果p那么q，反之亦然</li>
<li>p当且仅当q</li>
</ul>
</li>
</ol>
<h4 id="等价命题"><a href="#等价命题" class="headerlink" title="等价命题"></a>等价命题</h4><p><strong>如果两个命题总是有相同的真值，他们就是等价的</strong></p>
<p>例：用真值表说明条件语句等价于逆否命题</p>
<table>
<thead>
<tr>
<th>p</th>
<th>q</th>
<th>┐p</th>
<th>┐q</th>
<th>p→q</th>
<th>┐q→┐p</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>T</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>T</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>F</td>
<td>T</td>
<td>T</td>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>F</td>
<td>F</td>
<td>T</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
</tbody></table>
<p>问题：有n个命题变元的真值表有多少行</p>
<p>解：2^n。我们可以构造的命题数量（不相等）为2^2^n个</p>
<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><table>
<thead>
<tr>
<th>Operator</th>
<th>Precedence</th>
</tr>
</thead>
<tbody><tr>
<td>┐</td>
<td>1</td>
</tr>
<tr>
<td>∧</td>
<td>2</td>
</tr>
<tr>
<td>∨</td>
<td>3</td>
</tr>
<tr>
<td>→</td>
<td>4</td>
</tr>
<tr>
<td>↔</td>
<td>5</td>
</tr>
</tbody></table>
<h3 id="命题逻辑的应用"><a href="#命题逻辑的应用" class="headerlink" title="命题逻辑的应用"></a>命题逻辑的应用</h3><h4 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h4><ul>
<li>语句翻译</li>
<li>系统规范说明</li>
<li>布尔搜索</li>
<li>逻辑谜题</li>
<li>逻辑电路</li>
</ul>
<h4 id="语句翻译"><a href="#语句翻译" class="headerlink" title="语句翻译"></a>语句翻译</h4><p>汉语常有二义性，为了在数学上避免歧义，需要翻译成由命题变量和逻辑联结词组成的表达式</p>
<p><strong>如何翻译成正确的命题公式</strong></p>
<p>命题演算的合式公式Wff</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
  </entry>
  <entry>
    <title>监控docker容器状态脚本</title>
    <url>/2022/10/13/%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>使用前先要修改的内容</strong></p>
<ol>
<li><p>更改<code>server_log_path</code> 存储路径，该路径是存储监控内容的总路径 </p>
</li>
<li><p>修改<code>server_array</code> 数组值，修改成要监控的docker容器名称</p>
</li>
<li><p>同步修改calc.sh文件第13行 <code>printf &#39;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&#39;</code></p>
</li>
</ol>
<p><strong>使用方法</strong></p>
<ol>
<li><p>执行 calc.sh 文件</p>
</li>
<li><p>输入要监控的容器名称，**数字间空格分开。如: 0 2 3 **</p>
</li>
<li><p>输入监控的时长<strong>只能输入数字</strong></p>
<p><strong>注意1: calc.py 和 calc.sh</strong> <strong>要在同一个目录下</strong></p>
<p><strong>注意2: 请使用管理员用户执行该脚本，否则需要修改脚本中docker status，给其添加权限</strong></p>
</li>
</ol>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line">date_time=`date &quot;+%Y_%m_%d_%H-%M-%S&quot;`</span><br><span class="line">server_log_path=/home/dengyuanjing/docker/test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始服务数组</span></span><br><span class="line">server_array=(&quot;Freeswitch&quot; &quot;dialer&quot; &quot;PNLP&quot; &quot;MRCP&quot; &quot;VCG_TTS&quot; &quot;ptts_cloud&quot; &quot;VCG&quot; &quot;PSTT&quot;)</span><br><span class="line"></span><br><span class="line">echo &quot;-----------------------------------------------------------------------------------------------&quot;</span><br><span class="line">echo &quot;生成的目录名称是：$date_time&quot;</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">printf &#x27;0.FreeSwitch\t1.dialer\t2.PNLP\t3.MRCP\t4.VCG_TTS\t5.ptts_cloud\t 6.VCG\t7.PSTT\n&#x27;</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">read -p &quot;请输入要监控的服务序号(空格分隔)：&quot; number</span><br><span class="line">read -p &quot;请输入要监控的时长(分钟)：&quot; server_time</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取用户输入的长度（不包括空格）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> num=`<span class="built_in">echo</span> <span class="variable">$number</span> | awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;print NF&#125;&#x27;</span>`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户指定要监控的数组</span></span><br><span class="line">select_array=()</span><br><span class="line"></span><br><span class="line">for i in $&#123;number[@]&#125;</span><br><span class="line">do</span><br><span class="line">    select_array[$&#123;#select_array[@]&#125;]=$&#123;server_array[$i]&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;您所选择的监控有：$&#123;select_array[@]&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用下面命令生成1.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker stats dialer &gt; dialer.txt</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存放<span class="built_in">log</span>的路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">LOG_PATH=/home/dengyuanjing/docker/<span class="built_in">test</span>/<span class="variable">$date_time</span>/<span class="variable">$server</span>/</span></span><br><span class="line">PID_array=()</span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    mkdir -p $log_path</span><br><span class="line">    log_result_path=$log_path/result</span><br><span class="line">    mkdir -p $log_result_path</span><br><span class="line">    # 后台监控docker进程</span><br><span class="line">    nohup docker stats $server &gt; $log_path/$server.txt 2&gt;&amp; 1 &amp;</span><br><span class="line">    # 将各个服务的进程号记录的数组中</span><br><span class="line">    PID_array[$&#123;#PID_array[@]&#125;]=$!</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出PID_array的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ps -ef | grep <span class="string">&quot;docker stats dialer&quot;</span></span></span><br><span class="line">for i in $&#123;PID_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo &quot;所监控的进程ID为：$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sleep $&#123;server_time&#125;m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> 掉监控进程</span></span><br><span class="line">for server_PID in $&#123;PID_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    kill -9 $server_PID</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sleep 1m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 过滤docker监控的文本</span></span><br><span class="line"></span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    log_result_path=$log_path/result/</span><br><span class="line">    #echo &quot;现在要过滤的server名称为：$server&quot;</span><br><span class="line">    #echo &quot;路径为：$log_path/$server.txt&quot;</span><br><span class="line">    # 1.过滤出Container ID</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;NR==2 &#123;print $1&#125;&#x27; | grep -v CONTAINER &gt; CONTAINER.log</span><br><span class="line">    # 2.过滤出容器名</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;NR==2 &#123;print $2&#125;&#x27; &gt; CONTAINER_NAME.log</span><br><span class="line">    # 3.过滤出CPU</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $3&#125;&#x27; | grep -v NAME &gt; CPU_Usage.log</span><br><span class="line">    # 4.过滤出使用内存</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $4&#125;&#x27; | grep -v CPU &gt; MEM_Usage.log</span><br><span class="line">    # 5.过滤出内存占比</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $7&#125;&#x27; | grep -v USAGE &gt; MEM_Rate.log</span><br><span class="line">    # 6.过滤出发送数据量Net I</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $8&#125;&#x27; | grep -v USAGE |grep -v / &gt; NET_input.log</span><br><span class="line">    # 7.过滤出接受数据量Net O</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $10&#125;&#x27; | grep -v USAGE |grep -v &#x27;MEM&#x27; &gt; NET_output.log</span><br><span class="line">    # 8.过滤出块读取数据量Block </span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $11&#125;&#x27; | grep -v &quot;%&quot; &gt; Block_input.log</span><br><span class="line">    # 9.过滤出块写入数据量Block O</span><br><span class="line">    cat $log_path/$server.txt |awk &#x27;&#123;print $13&#125;&#x27; | grep -v &quot;I/O&quot; &gt; Block_output.log</span><br><span class="line">    # 10.过滤出容器线程数Pids</span><br><span class="line">    # PIDS=cat $log_path/$server.txt |awk &#x27;&#123;print $14&#125;&#x27; | grep -v &quot;BLOCK&quot;</span><br><span class="line"></span><br><span class="line">    # 将日志移入LOG_PATH下</span><br><span class="line">    mv CONTAINER.log $log_result_path</span><br><span class="line">    mv CONTAINER_NAME.log $log_result_path</span><br><span class="line">    mv CPU_Usage.log $log_result_path</span><br><span class="line">    mv MEM_Usage.log $log_result_path</span><br><span class="line">    mv MEM_Rate.log $log_result_path</span><br><span class="line">    mv NET_input.log $log_result_path</span><br><span class="line">    mv NET_output.log $log_result_path</span><br><span class="line">    mv Block_input.log $log_result_path</span><br><span class="line">    mv Block_output.log $log_result_path</span><br><span class="line">    </span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算</span></span><br><span class="line"></span><br><span class="line">for server in $&#123;select_array[@]&#125;</span><br><span class="line">do</span><br><span class="line">    log_path=$server_log_path/$date_time/$server</span><br><span class="line">    log_result_path=$log_path/result/</span><br><span class="line">    python3 calc.py $log_result_path $server</span><br><span class="line"></span><br><span class="line">    # 打印</span><br><span class="line">    sleep 5</span><br><span class="line">    log_result_path=$log_path/result</span><br><span class="line">    cat $log_result_path/calc.txt</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    设置读取的文本路径</span></span><br><span class="line"><span class="string">    1.cpuUsagePath</span></span><br><span class="line"><span class="string">    2.memUsagePath</span></span><br><span class="line"><span class="string">    3.memRatePath</span></span><br><span class="line"><span class="string">    4.netInputPath</span></span><br><span class="line"><span class="string">    5.netOutputPath</span></span><br><span class="line"><span class="string">    6.blockInputPath</span></span><br><span class="line"><span class="string">    7.blockOutputPath</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">PATH = sys.argv[<span class="number">1</span>]</span><br><span class="line">server = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="comment">#print(&quot;============================================================&quot;)</span></span><br><span class="line"><span class="comment">#print(PATH)</span></span><br><span class="line">cpuUsagePath = PATH+<span class="string">&#x27;CPU_Usage.log&#x27;</span></span><br><span class="line">memUsagePath = PATH+<span class="string">&#x27;MEM_Usage.log&#x27;</span></span><br><span class="line">memRatePath = PATH+<span class="string">&#x27;MEM_Rate.log&#x27;</span></span><br><span class="line">netInputPath = PATH+<span class="string">&#x27;NET_input.log&#x27;</span></span><br><span class="line">netOutputPath = PATH+<span class="string">&#x27;NET_output.log&#x27;</span></span><br><span class="line">blockInputPath = PATH+<span class="string">&#x27;Block_input.log&#x27;</span></span><br><span class="line">blockOutputPath = PATH+<span class="string">&#x27;Block_output.log&#x27;</span></span><br><span class="line">arrayPath = [cpuUsagePath, memUsagePath, memRatePath, netInputPath, netOutputPath, blockInputPath, blockOutputPath]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_calc</span>():</span></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="comment">#print(&quot;路径为：&quot;+txtPath)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(server+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;======================================================\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%s\t%s\n&quot;</span> %(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;Max&quot;</span>,<span class="string">&quot;Min&quot;</span>,<span class="string">&quot;Avg&quot;</span>,<span class="string">&quot;PCT90&quot;</span>,<span class="string">&quot;PCT95&quot;</span>,<span class="string">&quot;PCT99&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.calc 函数接收两个参数，一个是shell过滤后的值的单位，一个是shell过滤后的数组</span></span><br><span class="line"><span class="string">    2.calc 仅接受排序后的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">unit,array,server,listName</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 90/95/99百分率计算</span></span><br><span class="line">    percent1 = <span class="number">99</span></span><br><span class="line">    percent2 = <span class="number">95</span></span><br><span class="line">    percent3 = <span class="number">90</span></span><br><span class="line">    a1 = percent1/<span class="number">100</span></span><br><span class="line">    a2 = percent2/<span class="number">100</span></span><br><span class="line">    a3 = percent3/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">    num_count = <span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大值、最小值、平均值</span></span><br><span class="line">    maxValue = array[-<span class="number">1</span>]</span><br><span class="line">    mixValue = array[<span class="number">0</span>]</span><br><span class="line">    averageValue = <span class="built_in">sum</span>(array)/<span class="built_in">len</span>(array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 90、95、99%</span></span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a1) == num_count:</span><br><span class="line">        percent_99 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_99 = array[math.ceil(num_count*a1)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a2) == num_count:</span><br><span class="line">        percent_95 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_95 = array[math.ceil(num_count*a2)]</span><br><span class="line">    <span class="keyword">if</span> math.ceil(num_count*a3) == num_count:</span><br><span class="line">        percent_90 = array[num_count-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        percent_90 = array[math.ceil(num_count*a3)]</span><br><span class="line"></span><br><span class="line">    txtPath = PATH + <span class="string">&#x27;calc.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txtPath,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;%s%s%s%s\t %.2f %.2f %.2f %.2f %.2f %.2f\n&quot;</span> %(listName,<span class="string">&quot;(&quot;</span>,unit,<span class="string">&quot;)&quot;</span>,maxValue,mixValue,averageValue,percent_90,percent_95,percent_99))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于分离出unit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line"><span class="string">    1.循环列表</span></span><br><span class="line"><span class="string">    2.打印要计算的列表的名称，如：CPU_Usage、MEM_Usage</span></span><br><span class="line"><span class="string">    3.读取该路径文件</span></span><br><span class="line"><span class="string">    4.按照read_file()分离出来的unit，添加数组元素</span></span><br><span class="line"><span class="string">    5.送入calc()计算</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    <span class="comment"># 分割出每个log中的单位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arrayPath:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            firstLine = f.readline()</span><br><span class="line">            <span class="comment"># 正则匹配非数字的最后一位，即单位</span></span><br><span class="line">            pattern_value = re.findall(<span class="string">r&#x27;\D+&#x27;</span>,firstLine)</span><br><span class="line">            unit = pattern_value[-<span class="number">1</span>]</span><br><span class="line">            unit = unit.split()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print(&#x27;-------------------------------------单位为：&#x27;+unit)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用于读取数据，并创建列表，将其送入calc计算最大、最小值</span></span><br><span class="line">        listName = i.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        listName = listName.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print()</span></span><br><span class="line">        <span class="comment">#print(listName)</span></span><br><span class="line">        <span class="comment">#print(type(listName))</span></span><br><span class="line">        array = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(i,<span class="string">&#x27;r+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                lineValue = line.split(unit)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    array.append(<span class="built_in">float</span>(lineValue))</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;加入列表进行计算的值格式有误!&quot;</span>)</span><br><span class="line">        array.sort()</span><br><span class="line">        calc(unit,array,server,listName)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    write_calc()</span><br><span class="line">    read_file()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>卡拉马佐夫兄弟</title>
    <url>/2022/10/20/%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>转载自<a href="https://www.zhihu.com/people/liu-zhao-11-41">虫虫</a></p>
</blockquote>
<p>1881年2月9日，就在陀思妥耶夫斯基执笔创作的时候，发生了一个小小的意外，或许根本算不上一个意外——他的的笔筒掉在了地上，然后滚到了书桌下面，于是他起身搬动书桌，然而，这成为了他生前的最后一个动作，在他搬动书桌的时候，突然由于用力过猛导致血管破裂，饱受病痛困扰的他永远地倒在了这次意外之中，而书桌上，还放着他未完成的遗作，就是这部《卡拉马佐夫兄弟》。</p>
<p>尽管陀思妥耶夫斯基最后的这部作品没有完成，但仍然是一部世界性的巨著，甚至把它称为人类历史上最伟大的小说也不为过，引用一句有些俗套的评价——任何语言都不足以形容这部作品的伟大。</p>
<span id="more"></span>

<p><strong>陀思妥耶夫斯基在《卡拉马佐夫兄弟》中显然比其它几部作品走得更远，可以视为其集大成之作，无论是《罪与罚》当中“到美国去”这条未能付诸实践的解脱之路，还是《白痴》中梅诗金公爵对周围环境徒然无力的感化，都在这本书中得到了延续。</strong></p>
<p><strong>不仅如此，陀思妥耶夫斯基笔下的社会往往充满罪恶感，擅于揭露人性中丑陋的一面，但是在这部作品当中，他表现出了自己最大的善意。</strong></p>
<p>《卡拉马佐夫兄弟》的故事并不复杂：老卡拉马佐夫贪财好色，只顾自己的享受而完全不顾及三个儿子的生活，导致三个儿子性格迥异。老大德米特里由于财产问题争得不可开交，甚至因为一个女子和父亲争风吃醋，到处扬言要杀死父亲。老二伊万是一个无神论者，他的思想最为激进，自己也饱受这方面的煎熬乃至被刺激到发疯。小儿子阿辽沙则简直是圣洁的化身，包括父亲在内的所有人都不可避免地被他吸引从而产生好感。一家人之间矛盾重重，最后终于因为长子德米特里和父亲矛盾激化，在情绪激动之下试图杀掉父亲，造成了一件使全俄罗斯震动并且扑朔迷离的“弑父案”。</p>
<h2 id="卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。"><a href="#卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。" class="headerlink" title="卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。"></a>卡拉马佐夫一家是整个俄罗斯的缩影，就如作品中所说：别的国家有哈姆莱特，而我们只有卡拉马佐夫。</h2><p>提起卡拉马佐夫一家，很多读者想到的是由书中青年拉基津之口所说的几个特性——好色、贪财、疯癫。<strong>但是另一面，卡拉马佐夫一家还有两个更重要的特征，就是智慧以及理性和原始欲望的碰撞。</strong></p>
<p>关于智慧，这一家人都在不同领域表现出了自己异于常人的地方，这在作品中有过多次描写。</p>
<p>老卡拉马佐夫对于赚钱有着灵敏嗅觉，并且善于察言观色，他在委托伊万去切尔马什尼亚办理树林采伐权之前的嘱咐尤为明显，<strong>他叮嘱伊万通过对方胡子抖动这个细节来判断对方是否说谎的细节可以说是神来之笔，这正是现在心理学上流行的“微反应”最直接的体现。</strong></p>
<p>伊万的智慧在小说中体现得最为明显，他不仅是一位受人尊敬的饱学之士，更是一位敢于和宗教直接对峙的无神论者，伊万可以看作是陀思妥耶夫斯基对宗教质疑的代言人，其在《宗教大法官》一章中的论述是整部作品的关键所在，甚至有很多读者认为伊万才是整部作品的灵魂人物。著名诺贝尔文学奖获得者阿尔贝·加缪在他的《西西弗神话》一书中就多次提及伊万，对这个人物进行了重要阐释，他认为伊万最具有卡拉马佐夫震摄人心的特质，而<strong>伊万的悲剧在于试图找到上帝以外的另一条路来爱别人，可惜的是，伊万没有具体的所爱对象，这种爱的情感因为无法被表达而被世界否定，以至于伊万最终毁灭了自己。</strong></p>
<p>阿辽沙的智慧在于他悲天悯人，他深受佐西玛长老和基督教的影响，是卡拉马佐夫一家中最具“神性”的人物，虽然作品未完成，对阿辽沙的塑造也没有完全展开，但是这并不妨碍阿辽沙这个角色本身的感化能力。<strong>在纯洁的孩子面前，阿辽沙就是天使的化身,小说结尾处阿辽沙在葬礼上对孩子们的演讲是升华之处，完全可以看做是陀思妥耶夫斯基对人类充满善意的期待。</strong></p>
<blockquote>
<p>要知道，最崇高的精神力量，在今后的生活中对身心最有益的感受，莫过于某种美好的回忆，尤其是童年时代从故乡故居保留下来的回忆。关于你们的教育问题人们经常向你们谈起，而某一段从童年时代保留下来的美好而神圣的回忆或许正是最好的教育。如果能带着很多这样的回忆走向生活，这个人便可终生得救</p>
</blockquote>
<p>而在长子德米特里身上，我们能深切地体会到理性和原始欲望碰撞产生的的矛盾，<strong>德米特里的形象看似歇斯底里，有着和其父一样好色和贪财的缺点，但德米特里其实更像是父亲之恶、阿辽沙之善以及伊万之理性结合而成的矛盾体。</strong>他一方面纠结于格露莘卡和卡捷琳娜两位女子的感情纠缠，一方面深陷于父亲死后被判是否有罪的泥潭，在这一波三折的冲突当中，他的感情迸发非常强烈。</p>
<p>著名法国作家安德烈·纪德曾<strong>把陀思妥耶夫斯基作品中的人物心灵分成了三个层面：智力区，这里滋生最坏的诱惑；情感区，激情泛滥；深层区，是智力和激情触及不到的，也可叫做复活区。如果照此来看，卡拉马佐夫三兄弟正好可以一一对应，伊万处在智力区，德米特里处在情感区，而阿辽沙则处在了深层区。</strong>当然，三个层面并无高低之分，彼此间的界限也没有那么明显。</p>
<p><strong>在对卡拉马佐夫三兄弟做了简要分析之后，下面来看关于文章标题的对应部分，陀思妥耶夫斯基在这部作品当中所表达出来的善意。</strong></p>
<h2 id="能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。"><a href="#能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。" class="headerlink" title="能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。"></a>能拯救一个人的，往往是一个不经意间的善举，就像作品里提到的一个葱头还有一斤榛子。</h2><p>一个葱头的故事出自于小说女主人公格露莘卡之口：一个恶毒的老太婆一生之中只做了一件微不足道的好事，就是将一个葱头给了女乞丐，于是在她死后到了地狱以后，上帝便将这个葱头给她当作逃出地狱火坑的唯一希望。老太婆抓住这个救命稻草拼尽全力向上爬，就在即将逃离火坑的时候，地狱中的其他罪人看到以后纷纷拉住老太婆想一起逃出，凶恶的老太婆用脚将别人踢开，妄想自己一个人爬出去，结果葱头马上断了，她被永远地留在了地狱忍受煎熬。</p>
<p>这个故事被日本著名作家芥川龙之介改编成了短篇小说《蛛丝》，两个故事有异曲同工之妙，<strong>一个葱头和蜘蛛之丝之所以不能使人得到解脱，不在于它们本身的承受力，而在于每个人心底是否存在善意，无论葱头还是蛛丝都是因为善意而生，同样又因为恶念而消亡。</strong></p>
<p>一斤榛子则是关于卡拉马佐夫家族长子德米特里的经历，在德米特里年幼的时候，由于父亲缺乏关爱而食不果腹、衣不蔽体，本地的一个医生看到可怜的小德米特里之后便给他买了一斤榛子，这对一个肚饿的小孩子来说简直是最珍贵的礼物，而德米特里也始终心怀感激之心，在长大成人之后专门去已经年老的医生家中致敬表示谢意，这件小事也给被指控犯了弑父罪的德米特里赢得了众人的好感。</p>
<p><strong>一斤榛子和一个葱头同样微不足道，然而两者却展现出了两种不同的力量，葱头之所以被毁灭和榛子之所以能够救赎其实质殊途同归，陀思妥耶夫斯基通过这两件小事表现出了对人类善意的鼓励。</strong></p>
<h2 id="《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们"><a href="#《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们" class="headerlink" title="《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们"></a>《卡拉马佐夫兄弟》最大也是最明显的善意，给了纯洁的孩子们</h2><p>陀思妥耶夫斯基在这部遗作当中，用了相当大的篇幅来描写关于孩子的场景。</p>
<p>在伊万和阿辽沙关于《宗教大法官》的那次谈话当中，伊万给阿辽沙描述了多种人类对孩子所犯下的罄竹难书的“兽行”，给了阿辽沙极大冲击。阿辽沙本人自始至终都非常喜欢孩子并且深受孩子们喜爱，伊万的这次谈话给阿辽沙带来的，正是社会上关于孩子们最阴暗但是真实存在的一面。</p>
<blockquote>
<p>将军吩咐把男孩的衣服脱光，可怜他浑身发抖，吓得魂飞魄散，一声也不敢吱。这时将军下令：‘赶他跑。’狗夫们便冲他大叫：‘快跑，快跑！’那孩子便开始跑……只听得将军大喝一声：‘给我追！’——指挥所有的猎犬向小男孩冲去。母亲眼睁睁看着一大群狗把她的孩子撕成碎片！</p>
</blockquote>
<p><strong>陀思妥耶夫斯基把这些血淋淋的事实摆在作品当中，目的当然是为了做出警示——如果这个世界连对孩子都不能表达出起码的善意，那这个世界一切所谓的“善行”又有什么意义。</strong></p>
<p>小说中另一个关于孩子的重点描写是伊柳沙的葬礼，这部分每次读起来都让人潸然泪下。伊柳沙是一个自小疾病缠身的孩子，家庭的贫困更是让他的病情雪上加霜，而在他父亲受到侮辱之后他的心灵也遭到了不可挽回的摧残，故事的结尾，伊柳沙不出意外的去世了。</p>
<p><strong>伊柳沙的去世自然让读者悲痛万分，但不可忽略的是，陀思妥耶夫斯基在这里仍然给了我们很大安慰，也传达出了他最后的善意。</strong>这个善意的发起者，正是阿辽沙和一群孩子。</p>
<p>前文已经说过，阿辽沙是孩子们心中的天使，而孩子们正是受到了阿辽沙的感化才竭尽自己所能给了病危的伊柳沙最后陪伴，他们想尽办法让伊柳沙开心，在伊柳沙离开以后做出承诺照顾他的家人，并且做出了最重要的承诺：<strong>永远不会忘记他给我们生活带来过的美好，这或许是对一个死者最好的怀念。</strong></p>
<blockquote>
<p>不管我们会变得多么狠毒——但愿上帝保佑，别让我们走到这一步！——但只要我们回忆起我们曾为伊柳沙送葬，在他最后的一些日子里我们是多么爱他，此刻在这块大石头旁边，我们曾这样聚在一起友好交谈，——那么，即便是我们中间最狠毒、最好挖苦的人（如果我们变成那样的话），他在自己心里毕竟不敢嘲笑自己此时此刻曾经那么善良、那么仁爱。</p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>《卡拉马佐夫兄弟》这部作品所表达的东西远不止上述所言，除此之外，陀思妥耶夫斯基对于人性以及宗教的探讨也格外深入，他的作品就像是一面面审视现实的镜子，无论多么细微或者深层之处在它的反射之下都无法隐匿。正如鲁迅所言：“陀思妥耶夫斯基是人类灵魂的伟大审问者”。</p>
<p><strong>这篇文章之所以选取“善意”这个角度作为切入点，也是为了想提醒热爱陀思妥耶夫斯基的读者，他不仅仅揭示了人性当中最深处的罪恶和丑陋，塑造了一个个充满悲剧的人生，也在传递着他对这个世界的善意和爱。</strong></p>
<p>最后用德国著名作家赫尔曼·黑塞的评价来结束这篇文章，相信这也是很多读者喜欢陀思妥耶夫斯基作品的原因：</p>
<blockquote>
<p>我们之必须阅读陀思妥耶夫斯基，只是在我们遭受痛苦不幸，而我们承受痛苦的能力又趋于极限之时，只是在我们感到整个生活有如一个火烧火燎、疼痛难忍的伤口之时，只是在我们充满绝望、经历无可慰藉的死亡之时。当我们孤独苦闷，麻木不仁地面对生活时，当我们不再能理解生活那疯狂而美丽的残酷，并对生活一无所求时，我们就会敞开心扉去聆听这位惊世骇俗、才华横溢的诗人的音乐。这样，我们就不再是旁观者，不再是欣赏者和评判者，而是与陀思妥耶夫斯基作品中所有受苦受难者共命运 的兄弟，我们承受他们的苦难，并与他们一道着魔般地、駸駸乎投身于生活的旋涡，投身于死亡的永恒碾盘。只有当我们体验到陀思妥耶夫斯基那令人恐惧的常常像地狱般的世界的奇妙意义，我们才能听到他的音乐和飘荡在音乐中的安慰和爱。</p>
</blockquote>
]]></content>
      <categories>
        <category>书评</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>软件评测师试题</title>
    <url>/2022/10/16/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="模拟题1"><a href="#模拟题1" class="headerlink" title="模拟题1"></a>模拟题1</h3><ol>
<li>最适合数字加减运算的是<font color="orange">补码</font>，最适合表示浮点数阶码的编码是<font color="orange">移码</font></li>
<li>主存容量16MB，按字节编址，表示该主存地址至少需要<font color="orange">24</font>位。</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">16MB</span> = <span class="number">16</span> * <span class="number">1024</span>KB = <span class="number">2</span>^<span class="number">4</span> * <span class="number">1024</span>B * <span class="number">1024</span>B = <span class="number">2</span>^<span class="number">4</span> * <span class="number">2</span>^<span class="number">10</span> * <span class="number">2</span>^<span class="number">10</span> = <span class="number">2</span>^<span class="number">24</span>B</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>操作数所处的位置，可以决定指令的寻址方式。操作数包含在指令中，寻址方式为 <font color="orange">立即寻址</font>；</p>
<p>操作数在寄存器中，寻址方式为<font color="orange">寄存器寻址</font>；</p>
<p>操作数的地址在寄存器中，寻址方式为<font color="orange">寄存器间接寻址</font> 。 </p>
<span id="more"></span></li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">指定操作数或操作数存放位置的方式称为寻址方式</span><br></pre></td></tr></table></figure>

<p><img src="%E6%93%8D%E4%BD%9C%E6%95%B0%E6%89%80%E5%9C%A8%E5%9C%B0%E5%9D%80%E7%9A%847%E7%A7%8D%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.png" alt="操作数所在地址的7种寻址方式"></p>
<center><small>操作数所在地址的7种寻址方式</small></center>

<blockquote>
<p>寻址方式参考：<a href="https://blog.csdn.net/weixin_42562387/article/details/114433665">https://blog.csdn.net/weixin_42562387/article/details/114433665</a></p>
</blockquote>
<h4 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h4><p>操作数包含在指令中，紧跟着操作码并与操作码一起存放在代码段中，与代码一起被取入CPU的指令队列，指令执行时不需要到其他地址单元中去取。<br>立即寻址中的操作数可以是计算机有效数制下的数值，也可以是带单引号的字符。这种寻址方式主要用于给寄存器或存储单元赋初值的场合。</p>
<p><strong>立即寻址方式是这七种寻址方式中速度最快的寻址方式。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ah,80h             ;8位</span><br><span class="line">mov ax,1234h           ;16位</span><br><span class="line">mov eax,12345678h      ;32位</span><br></pre></td></tr></table></figure>

<h4 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h4><p>操作数在CPU内部的寄存器中，在指令中指定寄存器号。需要注意的是:<strong>源操作数与目的操作数字长要相同</strong></p>
<ol>
<li>源操作数是寄存器</li>
</ol>
<blockquote>
<p>ADD VARD,EAX; VARD是双字类型变量</p>
</blockquote>
<ol>
<li>目的操作数是寄存器</li>
</ol>
<blockquote>
<p>ADD BH, 78h;</p>
</blockquote>
<ol>
<li>源和目的操作数都是寄存器</li>
</ol>
<blockquote>
<p>MOV EAX, EBX;</p>
</blockquote>
<h4 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h4><p>操作数存放在内存中，在指令中直接给出该操作数的有效地址，这种寻址方式为直接寻址方式。</p>
<h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p>操作数在存储器中，操作数的有效地址用SI、DI、BX和BP等四个寄存器之一来指定，称这种寻址方式为寄存器间接寻址方式。</p>
<p>规定：在不使用段超越前缀的情况下</p>
<p>若有效地址用SI、DI和BX等之一来指定，则其缺省的段寄存器为DS；<br>若有效地址用BP来指定，则其缺省的段寄存器为SS(即：堆栈段)。</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试基本理论</tag>
      </tags>
  </entry>
  <entry>
    <title>CH1 计算机概要与技术</title>
    <url>/2022/11/09/CH1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在读完本书后，我们能够理解以下问题：</p>
<ul>
<li><p>用C或Java等高级语言编写的程序如何翻译成硬件之间的语言？硬件如何执行程序？</p>
<p>领会这些概念是理解软硬件两者如何影响程序性能的基础</p>
</li>
<li><p>什么是软硬件之间的接口，以及软件如何指导硬件完成其功能？</p>
<p>这些概念对于许多软件的编写十分重要</p>
</li>
<li><p>哪些因素决定了程序的性能？程序员如何才能改进程序性能？</p>
<p>从本书中我们将知道，程序性能取决于原始程序、将该程序转换为计算机语言的软件以及执行该程序的硬件的有效性</p>
</li>
<li><p>什么技术可供硬件设计者用于改进性能？</p>
<p>本书将介绍现代计算机设计的基本概念。有感兴趣的读者可深入阅读另一本进阶教材《Computer Architecture: A Quantitative Approach》</p>
</li>
<li><p>硬件设计者可使用那些技术提高能效？什么技术可供程序员提高或降低能效？</p>
</li>
<li><p>为什么串行处理近来发展为并行处理？这种发展带来的结果是什么？</p>
<p>本书给出了解释，并介绍了当今支持并行处理的硬件机制，全面评述了新一代的多核微处理器（multicore microprocessor）</p>
</li>
<li><p>自1951年的第一台商用计算机开始，计算机架构师们提出的哪些伟大思想构成了计算机的基础？</p>
</li>
</ul>
<span id="more"></span>

<p><a href="/download/xmind/CH1%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E8%AE%BE%E8%AE%A1.xmind">点击下载 CH1 计算机概要与设计.xmind</a></p>
<h3 id="第一部分-计算机的分类"><a href="#第一部分-计算机的分类" class="headerlink" title="第一部分 计算机的分类"></a>第一部分 计算机的分类</h3><h4 id="计算机的分类"><a href="#计算机的分类" class="headerlink" title="计算机的分类"></a>计算机的分类</h4><p><strong>传统上</strong>，按照应用，计算机可分为：</p>
<ul>
<li><p><font color="orange">个人计算机（PC）</font></p>
</li>
<li><p><font color="orange">服务器</font></p>
<p>适用于执行大负载任务，多用户通过网络并行访问。</p>
<p>高端服务器被称为超级计算机</p>
</li>
<li><p><font color="orange">嵌入式计算机</font></p>
</li>
</ul>
<p>进入<strong>后PC时代：</strong></p>
<p>往小的方向发展为：<font color="orange">个人移动设备（PMD）</font></p>
<p>往大的方向发展为：仓储规模计算机（Warehouse-Scale Computer，<font color=orange>WSC</font>），大型数据中心的云计算服务器</p>
<h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p><strong>字节常用于存储容量，位常用于传输速度。1字节=8位</strong></p>
<table>
<thead>
<tr>
<th>十进制术语</th>
<th>缩写</th>
<th>数值</th>
<th>二进制术语</th>
<th>缩写</th>
<th>数值</th>
<th>数值差别</th>
</tr>
</thead>
<tbody><tr>
<td>kilobyte</td>
<td>KB</td>
<td>10^3</td>
<td>kibibyte</td>
<td>KiB</td>
<td>2^10</td>
<td>2%</td>
</tr>
<tr>
<td>megabyte</td>
<td>MB</td>
<td>10^6</td>
<td>mebibyte</td>
<td>MiB</td>
<td>2^20</td>
<td>5%</td>
</tr>
<tr>
<td>gigabyte</td>
<td>GB</td>
<td>10^9</td>
<td>gibibyte</td>
<td>GiB</td>
<td>2^30</td>
<td>7%</td>
</tr>
<tr>
<td>terabyte</td>
<td>TB</td>
<td>10^12</td>
<td>tebibyte</td>
<td>TiB</td>
<td>2^40</td>
<td>10%</td>
</tr>
<tr>
<td>petabyte</td>
<td>PB</td>
<td>10^15</td>
<td>pebibyte</td>
<td>PiB</td>
<td>2^50</td>
<td>13%</td>
</tr>
<tr>
<td>exabyte</td>
<td>EB</td>
<td>10^18</td>
<td>exbibyte</td>
<td>EiB</td>
<td>2^60</td>
<td>15%</td>
</tr>
<tr>
<td>zettabyte</td>
<td>ZB</td>
<td>10^21</td>
<td>zebibyte</td>
<td>ZiB</td>
<td>2^70</td>
<td>18%</td>
</tr>
<tr>
<td>yottabyte</td>
<td>YB</td>
<td>10^24</td>
<td>yobibyte</td>
<td>YiB</td>
<td>2^80</td>
<td>21%</td>
</tr>
</tbody></table>
<p>测验：</p>
<p>i5 + GTX3060 + 8G + 512G （GiB）</p>
<p>生活中，100兆（100Mbps）的带宽。传输速度是100MB/s / 8 = 12.5MiB/s</p>
<h4 id="理解程序性能"><a href="#理解程序性能" class="headerlink" title="理解程序性能"></a>理解程序性能</h4><p>一个程序的性能取决于以下各因素的组合：程序所用的算法的有效性，用来建立程序并将其翻译成机器指令的软件系统，计算机执行机器指令（可能包括I/O操作）的有效性</p>
<table>
<thead>
<tr>
<th>软件或硬件组成元素</th>
<th>该软件如何影响性能</th>
<th>该论题出现的位置</th>
</tr>
</thead>
<tbody><tr>
<td>算法</td>
<td>决定了源码级语句的数量和I/O操作的数量</td>
<td>其他书</td>
</tr>
<tr>
<td>编程语言、编译器和体系结构</td>
<td>决定了每条源码级语句对应的计算机指令数量</td>
<td>第2、3章</td>
</tr>
<tr>
<td>处理器和存储系统</td>
<td>决定了指令的执行速度</td>
<td>第4、5、6章</td>
</tr>
<tr>
<td>I/O系统（硬件和操作系统）</td>
<td>决定了I/O操作可能的执行速度</td>
<td>第4、5、6章</td>
</tr>
</tbody></table>
<br>

<h3 id="第二部分-计算机系统结构中的8个伟大思想"><a href="#第二部分-计算机系统结构中的8个伟大思想" class="headerlink" title="第二部分 计算机系统结构中的8个伟大思想"></a>第二部分 计算机系统结构中的8个伟大思想</h3><p><img src="8%E5%A4%A7%E4%BC%9F%E5%A4%A7%E6%80%9D%E6%83%B3.png" alt="8大伟大思想"></p>
<h4 id="2个设计原则"><a href="#2个设计原则" class="headerlink" title="2个设计原则"></a>2个设计原则</h4><p><strong><font color="orange">1、摩尔定律</font></strong></p>
<p>单芯片上的集成度（单位面积硅片能容纳的晶体管数量）每18个月翻一番</p>
<p>提出于1965年</p>
<p>芯片设计要依据设计 <u>完成</u> 时的工艺水平</p>
<p><strong><font color="orange">2、抽象简化设计</font></strong></p>
<p>省略低层次的细节，提供简化的模型</p>
<h4 id="4个提高性能的方法"><a href="#4个提高性能的方法" class="headerlink" title="4个提高性能的方法"></a>4个提高性能的方法</h4><p><strong><font color="orange">3、加速大概率事件</font></strong></p>
<p>一台计算机绝大部分时间用来打游戏，改进游戏新能还是其他性能更能提高整体性能？</p>
<p>定量分析：Amdahl定律</p>
<center>改进后的执行时间 = 改进影响的执行时间 / 改进量 + 改进不影响的执行时间</center>
<center>t改进 = t相关/S + t无关</center>

<p><strong><font color="orange">4、通过并行提高性能</font></strong></p>
<p>同时发生，典型例子是多核处理器</p>
<p><strong><font color="orange">5、通过流水线提高性能</font></strong></p>
<p>类比工业中的流水线</p>
<p><strong><font color="orange">6、通过预测提高性能</font></strong></p>
<ul>
<li>预测失误后恢复的代价不高</li>
<li>预测有相当的准确率则可以猜测哪些操作会发生，并提前开始执行</li>
</ul>
<h4 id="存储器层次与冗余"><a href="#存储器层次与冗余" class="headerlink" title="存储器层次与冗余"></a>存储器层次与冗余</h4><p><strong><font color="orange">7、存储器层次</font></strong></p>
<p>（见第三部分 软硬件接口）</p>
<p><strong><font color="orange">8、冗余提高可靠性</font></strong></p>
<p>计算机不仅需要速度快，还需要工作可靠。由于任何一个物理器件都可能失效，因此可以通过使用冗余部件的方式提高系统的可靠性（dependable），冗余部件可以代替失效部件并可以帮助检测错误。</p>
<p>物理器件的“备胎”，失效了就换上</p>
<h3 id="第三部分-软硬件基础"><a href="#第三部分-软硬件基础" class="headerlink" title="第三部分 软硬件基础"></a>第三部分 软硬件基础</h3><p><img src="%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80.png" alt="软硬件基础"></p>
<h4 id="编程语言分类"><a href="#编程语言分类" class="headerlink" title="编程语言分类"></a>编程语言分类</h4><p><strong>机器指令</strong></p>
<p>000000111100100100101100111111110010</p>
<blockquote>
<p> 汇编语言和由它<strong>汇编</strong>出的机器语言一一对应</p>
</blockquote>
<p><strong>汇编语言</strong></p>
<p>指令助记符、寄存器标号</p>
<p><code>addi $s1, $s1, 1</code></p>
<blockquote>
<p>一条高级语言语句可以<strong>编译</strong>出好几条汇编语言</p>
</blockquote>
<p><strong>高级语言</strong></p>
<p>语句接近自然语言，提高了程序的可移植性</p>
<p><code>cnt = cnt + 1</code></p>
<p>机器语言依赖于机器，所以被称作低级语言</p>
<p><u>汇编语言呢？高级语言呢？</u></p>
<br>

<h4 id="冯-·-诺依曼结构"><a href="#冯-·-诺依曼结构" class="headerlink" title="冯 · 诺依曼结构"></a>冯 · 诺依曼结构</h4><p>冯 · 诺依曼结构的五大经典部件：</p>
<p>1、外围的：<strong>输入设备</strong>、<strong>输出设备</strong>，合称I**/O设备**</p>
<ul>
<li><p>输入设备：键盘鼠标、扫描仪</p>
</li>
<li><p>输出设备：显示器、打印机</p>
</li>
<li><p>混合I/O设备：触摸屏、网卡</p>
</li>
</ul>
<p>2、存放程序和数据的：<strong>存储器</strong></p>
<ul>
<li><p>缓存cache ~ SRAM            快但是贵，容量很小（3MB）</p>
</li>
<li><p>主存/内存 ~ DRAM            比较快也比较贵，容量中等（8 ~ 16GB）</p>
</li>
<li><p>辅存/外存/二级存储器        慢但便宜，容量大（基本都是512GB起步）</p>
</li>
</ul>
<p>*只有放入内存的程序才会被CPU执行</p>
<p>3、组成CPU的两大部件：运算器（数据通路）、控制器</p>
<br>

<h4 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h4><p><img src="%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="存储器层次结构"></p>
<br>

<h4 id="指令集体系结构"><a href="#指令集体系结构" class="headerlink" title="指令集体系结构"></a>指令集体系结构</h4><p><img src="%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="指令集体系结构"></p>
<br>

<h4 id="集成电路制造"><a href="#集成电路制造" class="headerlink" title="集成电路制造"></a>集成电路制造</h4><p><img src="%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E5%88%B6%E9%80%A0.png" alt="集成电路制造.png"></p>
<br>

<h3 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h3><p>复习题是用来碎碎念回忆复习的，不是用来写的！</p>
<p>打*的问题在考试中不太重要或者比较复杂，请酌情跳过</p>
<ol>
<li>传统上计算机分为哪三类？后PC时代有哪两类计算机？</li>
<li>KB、MB、GB之上有哪些存储容量单位？</li>
<li>*计算机设计的八大伟大思想是什么？</li>
<li>Amdahl定律公式是什么？</li>
<li>高级语言经过什么过程变成汇编语言？汇编语言又经过什么变成机器语言？</li>
<li>冯·诺依曼结构由哪五大基本部件组成？CPU主要有哪两大部件？还有少量的哪个部件？</li>
<li>存储器层次中，最快贵小的、其次的、最廉价的是什么？分别采用什么技术？</li>
<li>Intel和苹果的处理器架构不同，是什么东西不同？</li>
<li>成品率、芯片面积、产量如何影响集成电路（IC）的自造成本？</li>
</ol>
<ul>
<li>传统意义上计算机分为PC、服务器、嵌入式计算机。后PC时代分为个人移动设备（PMD）、仓储规模计算机（WSC）</li>
<li>TB、PB、EB、ZB、YB</li>
<li>摩尔定律、抽象简化、加速大概率事件、并行提高、流水线提高性能、预测提高性能、存储器层次、冗余提高可靠性</li>
<li>改进后的执行时间 = 改进影响的执行时间 / 改进量 + 改进不影响的执行时间</li>
<li>高级语言经过编译变成汇编语言，汇编语言经过汇编转换为机器语言</li>
<li>控制器、存储器、运算器、输入\输出设备。CPU主要两大部件为控制器和运算器，还有少量的存储器</li>
<li>最快最贵最小的是高速缓存cache采用SRAM，其次是内存采用DRAM，辅存采用磁盘或闪存</li>
<li>Intel和苹果的处理器架构不同，是因为指令集体系结构不同即架构不同</li>
<li>成品率越高、产量越高、芯片面积越小，芯片的制造成本越低</li>
</ul>
<h3 id="第四部分-性能与功耗"><a href="#第四部分-性能与功耗" class="headerlink" title="第四部分 性能与功耗"></a>第四部分 性能与功耗</h3><p><img src="%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8A%9F%E8%80%97.png" alt="性能与功耗.png"></p>
<h4 id="评价性能的指标"><a href="#评价性能的指标" class="headerlink" title="评价性能的指标"></a>评价性能的指标</h4><p>个人计算机更看重<strong>响应时间（又称执行时间）</strong>：任务从开始到完成的时间</p>
<p>服务器更看重<strong>吞吐率</strong>：单位时间内完成的人物数量</p>
<p>课程主要讨论CPU执行时间</p>
<blockquote>
<p>性能 = 1 / 执行时间</p>
</blockquote>
<p>计算机A的性能是计算机B的几倍？-&gt; 计算机Ade执行时间是B的几分之一？</p>
<p><font color="grey">e.g. 运行同一个程序，计算机A用15秒，计算机B用10秒，谁的性能更高？它的性能比另外一台高多少？</font></p>
<p><font color="grey">计算机B的性能更高，B的性能比A高了15/10=1.5</font></p>
<h4 id="性能的度量"><a href="#性能的度量" class="headerlink" title="性能的度量"></a>性能的度量</h4><ul>
<li><strong>CPU执行时间：</strong>即CPU时间。它只表示在CPU上花费的时间，而不包括等待I/O或运行其他程序的时间。（包括用户CPU时间和系统CPU时间）</li>
<li><strong>用户CPU时间：</strong>用于用户程序为用户花费的CPU时间</li>
<li><strong>系统CPU时间：</strong>操作系统为用户花费的CPU时间</li>
<li><strong>时钟周期：</strong>也叫tick、clock tick、clock period、clock 或 cycle，为计算机一个时钟周期的时间，通常是处理器时钟，一般为常数</li>
<li><strong>时钟长度：</strong>每个时钟周期维持的时间长度</li>
<li>CPU的时钟频率f（主频）：一秒钟有多少个时钟周期。即：T = 1 / f                </li>
</ul>
<h4 id="CPU经典性能公式"><a href="#CPU经典性能公式" class="headerlink" title="CPU经典性能公式"></a>CPU经典性能公式</h4><blockquote>
<p>一个程序的CPU执行时间 = 一个程序的CPU时钟周期数 x 时钟周期时间    CPUtime = cycles * T</p>
</blockquote>
<blockquote>
<p>一个程序的CPU执行时间 = 一个程序的CPU时钟周期数 / 时钟评率</p>
</blockquote>
<p><font color="grey">e.g. 某程序在一台时钟频率为2GHz的计算机上运行需要10秒。现在将设计一台计算机B，希望将运行时间缩短为6秒。计算机的设计者采用的方法是提高时钟频率，但这会影响CPU其余部分的设计，使计算机B运行该程序时需要相当于计算机A的1.2倍时钟周期数。那么计算机设计者应该将时钟频率提高到多少？</font></p>
<p><img src="CPU%E9%A2%91%E7%8E%87%E9%A2%98.png" alt="CPU频率题.png"></p>
<ul>
<li><strong>CPI：</strong>每条指令的时钟周期数，表示执行某个程序或程序片断时每条指令所需的时钟周期平均数。</li>
</ul>
<blockquote>
<p>CPU时钟周期数 = 程序的指令数 x 每条指令的平均时钟周期数</p>
<p>cycles = IC x CPI</p>
</blockquote>
<p><img src="%E6%8C%87%E4%BB%A4%E6%80%A7%E8%83%BD%E5%85%AC%E5%BC%8F%E9%A2%98.png" alt="指令性能公式题.png"></p>
<blockquote>
<p>CPU 时间 = 指令数 x CPI x 时钟周期时间    CPUtime = IC * CPI * T</p>
</blockquote>
<p>或</p>
<blockquote>
<p>CPU 时间 = 指令数 x CPI / 时钟频率    CPUtime = IC * CPI / f</p>
</blockquote>
<p><font color="gray">e.g. 主频为4GHz的CPU，每个时钟周期的长度是多少秒？某程序共有3亿条指令，其中1亿条的CPI为3，2亿条的CPI为6，整个程序的CPI是多少?该CPU执行这个程序需要多长时间？</font></p>
<p><img src="%E7%BB%8F%E5%85%B8%E6%80%A7%E8%83%BD%E5%85%AC%E5%BC%8F.png"></p>
<h4 id="CPU经典性能公式为什么靠谱"><a href="#CPU经典性能公式为什么靠谱" class="headerlink" title="CPU经典性能公式为什么靠谱"></a>CPU经典性能公式为什么靠谱</h4><p>经典性能公式考虑了<strong>指令数IC</strong>、<strong>平均每条指令需要周期数CPI</strong>、<strong>时钟周期长度T（也就是主频 f 的倒数）</strong>全部三个因素</p>
<p>使用<strong>CPU执行时间</strong>这个靠谱的指标来衡量性能</p>
<ul>
<li><p>使用什么<font color="orange">编程语言</font>和<font color="orange">编译程序</font>、采取什么<font color="orange">算法</font>，影响指令数和CPI两个因素</p>
</li>
<li><p>采用什么<font color="orange">指令体系结构</font>，影响指令数、CPI、主频全部三个因素</p>
</li>
</ul>
<p>他们都会影响CPU性能</p>
<p>还有一个衡量性能的指标<font color="orange">MIPS</font>（million instruction per second，百万指令每秒）</p>
<blockquote>
<p>MIPS = IC / (CPUtime x 10^6) = f / (CPI x 10^6)</p>
</blockquote>
<p>因为只考虑了主频（周期长）和CPI两个指标，很受作者唾弃</p>
<h4 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h4><p>CMOS（互补型金属氧化半导体）是当前占统治地位的集成电路技术。</p>
<p>其中，晶体管的能耗主要来自动态能耗，即晶体管打开/关闭的短暂动态过程。</p>
<p>即 0 -&gt; 1 或 1 -&gt; 0 的过程</p>
<p>晶体管经历一次 0 -&gt; 1 -&gt; 0 或 1 -&gt; 0 -&gt; 1 的开关过程</p>
<p>能耗 = 负载电容 x 电压^2</p>
<p>开关频率与CPU主频相关</p>
<p>所以，功耗公式为</p>
<p><img src="%E5%8A%9F%E8%80%97%E5%85%AC%E5%BC%8F.png"></p>
<h3 id="教材习题"><a href="#教材习题" class="headerlink" title="教材习题"></a>教材习题</h3><p><strong>1.6</strong> 同一个指令集体系结构由两种不同实现。根据CPI不同，将指令分为A、B、C、D四类，P1的时钟频率是2.5GHz，CPI分别为1、2、3、3；P2的时钟评率是3GHz，CPI分别为2、2、2、2</p>
<p>一个程序有1x10E6条指令，四类指令比例分别为10%，20%，50%，20%</p>
<p>（1）每种实现的总CPI分别是？</p>
<p>（2）每种实现的时钟周期数为？</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">因为：<span class="attribute">CPI</span>=cycles/IC</span><br><span class="line">P1 CPI = (1<span class="number">*10E6</span><span class="number">*0</span>.1+2<span class="number">*10E6</span><span class="number">*0</span>.2+3<span class="number">*10E6</span><span class="number">*0</span>.5+3<span class="number">*10E6</span><span class="number">*0</span>.2)/1<span class="number">*10E6</span> = 2.6</span><br><span class="line">P2 CPI = (2<span class="number">*10E6</span><span class="number">*0</span>.1+2<span class="number">*10E6</span><span class="number">*0</span>.2+2<span class="number">*10E6</span><span class="number">*0</span>.5+2<span class="number">*10E6</span><span class="number">*0</span>.2)/1<span class="number">*10E6</span> = 2</span><br></pre></td></tr></table></figure>

<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">CPU时钟周期数 <span class="operator">=</span> 程序的指令数 <span class="keyword">x</span> 每条指令的平均时钟周期数</span><br><span class="line">即：cycles <span class="operator">=</span> IC <span class="keyword">x</span> CPI</span><br><span class="line">P<span class="number">1</span> cycles <span class="operator">=</span> <span class="number">1</span><span class="keyword">x</span><span class="number">10E6</span> * <span class="number">2.6</span></span><br><span class="line">P<span class="number">2</span> cycles <span class="operator">=</span> <span class="number">1</span><span class="keyword">x</span><span class="number">10E6</span> * <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>1.7 性能公式与加速比</strong></p>
<p>对同一个程序，编译器A产生1x10E9条指令，执行时间为1.1s；编译器B产生1.2x10E9条指令，执行时间为1.5s</p>
<p>（1）若处理器时钟周期长度为1ns，求两个编译器产生程序的CPI</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">CPU time = IC * <span class="keyword">CPI</span> * T</span><br><span class="line"></span><br><span class="line"><span class="number">1.1</span>s = <span class="number">1</span>*<span class="number">10E9</span> * A <span class="keyword">CPI</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="number">-9</span></span><br><span class="line">即 A <span class="keyword">CPI</span> = <span class="number">1.1</span></span><br><span class="line"><span class="number">1.5</span>s = <span class="number">1</span>*<span class="number">10E9</span> * B <span class="keyword">CPI</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="number">-9</span></span><br><span class="line">即 B <span class="keyword">CPI</span> = <span class="number">1.25</span></span><br></pre></td></tr></table></figure>

<p>（2）假设两个程序在不同处理器上运行，且执行时间相同，求：运行编译器A的处理器比运行B的快多少？</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">CPUtime = IC * CPI / fs</span><br><span class="line"></span><br><span class="line"><span class="comment">(ICa * CPIa)</span>/fa = <span class="comment">(ICb * CPIb)</span>/fb</span><br><span class="line"></span><br><span class="line">fb/fa = <span class="comment">(ICb * CPIb)</span> / <span class="comment">(ICa * CPIa)</span> = <span class="comment">(1.25 * 1.2*10E9)</span>/<span class="comment">(1.1 * 1*10E9s)</span> = <span class="number">1.37</span></span><br><span class="line"></span><br><span class="line">即运行编译器B比A快<span class="number">1.37</span>倍</span><br></pre></td></tr></table></figure>

<p>（3）有种新的编译器，只产生6x10E8条指令，CPI平均为1.1，求：这种新编译器相对于编译器A、B的加速比各多少？</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ICnew = 6<span class="number">*10E8</span></span><br><span class="line">CPInew = 1.1</span><br><span class="line">cycles new = 6.6<span class="number">*10E8</span></span><br><span class="line"></span><br><span class="line">S spead up = t 改进前/t 改进后</span><br><span class="line">Ta = ICa<span class="number">*C</span>PIa / ICnew<span class="number">*C</span>PInew</span><br><span class="line">   = 1<span class="number">*10E9</span><span class="number">*1</span>.1 / 6.6<span class="number">*10E8</span></span><br><span class="line">   = 1.67</span><br><span class="line">   </span><br><span class="line">Tb = ICb<span class="number">*C</span>PIb / ICnew<span class="number">*C</span>PInew</span><br><span class="line">   = 1.2<span class="number">*10E9</span><span class="number">*1</span>.25 / 6.6<span class="number">*10E8</span></span><br><span class="line">   = 2.27</span><br></pre></td></tr></table></figure>

<p><strong>1.11.4 1.11.11 性能公式的思想方式</strong></p>
<p>一台计算机运行SPEC基准测试程序用时750秒</p>
<p>（1）如果SPEC指令数增加10%，CPI增加5%，则执行时间变为原来的多少倍？</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">CPU <span class="built_in">time</span> = IC * CPI * <span class="built_in">T</span></span><br><span class="line">				 = <span class="number">1.1</span> IC * <span class="number">1.05</span> CPI * <span class="built_in">T</span></span><br><span class="line">				 = <span class="number">1.115</span></span><br></pre></td></tr></table></figure>

<p>（2）指令数不变，如果要在CPI降低15%的情况下，让CPU时间减少20%，时钟频率应该降为原来的多少倍？</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">CPU <span class="built_in">time</span> = IC * CPI * <span class="built_in">T</span></span><br><span class="line"><span class="number">0.8</span> CPU <span class="built_in">time</span> = IC * <span class="number">0.85</span> CPI * <span class="built_in">T</span></span><br><span class="line">即 <span class="built_in">T</span> = <span class="number">0.8</span>/<span class="number">0.85</span> = <span class="number">16</span>/<span class="number">17</span></span><br></pre></td></tr></table></figure>

<p><strong>1.14 Amdahl定律</strong></p>
<p>一个程序有50x10E6条浮点指令、110x10E6条整数指令、80x10E6条L/S指令和16x10E6条分支指令，4种指令的CPI分别是1、1、4、2，CPU时钟频率变为2GHz</p>
<p>（1）要让程序运行速度提高2倍，浮点指令的CPI应该变为多少</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CPU time = cycles * T</span><br><span class="line">即 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span></span><br><span class="line">1/2 cycles = 256<span class="number">*10E6</span>，只改变浮点指令CPI，其他指令<span class="attribute">cycles</span>=462*10E6</span><br><span class="line">所以，不能通过改变浮点指令CPI，使程序运行速度提高2倍</span><br></pre></td></tr></table></figure>

<p>（2）要让程序运行速度提高2倍，L/S指令的CPI应该变为多少</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CPU time = cycles * T</span><br><span class="line">即 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span></span><br><span class="line">1/2 cycles = 256<span class="number">*10E6</span>，只改变L/S指令的CPI，其他指令<span class="attribute">cycles</span>=320*10E6</span><br><span class="line">320<span class="number">*10E6</span> - 1/2(512<span class="number">*10E6</span>) = 64<span class="number">*10E6</span></span><br><span class="line">(80<span class="number">*10E6</span> * 4) / (64<span class="number">*10E6</span>)  = 5</span><br><span class="line">5/4 = 0.8</span><br></pre></td></tr></table></figure>

<p>（3）如果整数、浮点指令的CPI降低40%，L/S指令和分支指令的CPI减少30%，程序的执行时间改进多少？</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CPUtime 改进前 = cycles/f = 50x10E6<span class="number">*1</span> + 110x10E6<span class="number">*1</span> + 80x10E6<span class="number">*4</span> + 16x10E6<span class="number">*2</span> = 512<span class="number">*10E6</span> / 2<span class="number">*10E9</span> = 0.256s</span><br><span class="line">CPUtime 改进后 = cycles/f = 50x10E6<span class="number">*0</span>.6 + 110x10E6<span class="number">*0</span>.6 + 80x10E6<span class="number">*2</span>.8 + 16x10E6<span class="number">*1</span>.4 = 342.4<span class="number">*10E6</span> / 2<span class="number">*10E9</span> = 0.171s</span><br><span class="line">0.256 - 0.171 = 0.085s</span><br><span class="line">程序改进0.085秒</span><br></pre></td></tr></table></figure>



<p><strong>1.8 功耗</strong></p>
<p>奔腾4主频为3.6GHz，工作电压为1.25V，平均静态功耗为10W，动态功耗90W；酷睿i5主频为3.4GHz，工作电压为0.9V，平均静态功耗为30W，动态功耗40W。</p>
<p>两个处理器的平均负载电容分别是？</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">P = 1/2<span class="emphasis">*CU^2 *</span> f</span><br><span class="line"></span><br><span class="line">90w = 1/2 <span class="emphasis">* C *</span> 1.25^2 <span class="emphasis">* 3.6*</span>10E9</span><br><span class="line">即奔腾4的负载电容为：3.2<span class="emphasis">*10^-8(F)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">40w = 1/2 *</span> C <span class="emphasis">* 0.9^2 *</span> 3.4<span class="emphasis">*10E9</span></span><br><span class="line"><span class="emphasis">即酷睿i5的负载电容为：2.9*</span>10^-8(F)</span><br></pre></td></tr></table></figure>



<h3 id="四川大学期末习题"><a href="#四川大学期末习题" class="headerlink" title="四川大学期末习题"></a>四川大学期末习题</h3><p><strong>1、下面哪种处理器不是采用RISC指令系统（D）</strong></p>
<p>A. 华为麒麟处理器</p>
<p>B. 高通845 处理器</p>
<p>C. MIPS 处理器</p>
<p>D. Intel 处理器</p>
<p><strong>2、下面关于CPI的说法，错误的是（A）</strong></p>
<p>A. 多周期CPU比单周期CPU的CPI大，因此单周期CPU更快</p>
<p>B. 同一台机器中运行不同的程序CPI不一定相同</p>
<p>C. MIPS单周期CPU各种指令的CPI是相同的</p>
<p>D. MIPS多周期CPU访存指令CPI比R-type型指令CPI大</p>
<p><strong>3、下列哪一项和CPU的运算速度关系不大（D）</strong></p>
<p>A. CPU主频    B. MIPS    C. CPI    D. 主存频率</p>
<p><strong>4、将指令从符号码翻译成二进制码的程序（A）</strong></p>
<p>A. 汇编器    B. 编译器    C. 链接器    D. 加载器</p>
<p><strong>5、同一个程序，在同一台计算机的CPU超频前和超频后运行，假设内存的访问速度不变，超频前和超频后CPI对比应该是（B）</strong></p>
<p>注：CPU超频是指增大CPU的时钟频率</p>
<p>A. 超频前的CPI大</p>
<p>B. 超频后的CPI大</p>
<p>C. 一样大</p>
<p>D. 不确定</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">超频后，内存的访问速度不变，等待内存的时间长度相同，但是把时钟周期分的更小了，所以有了更多浪费掉的周期，所以引起了整个的<span class="keyword">CPI</span>增大</span><br></pre></td></tr></table></figure>

<p><strong>6、某处理器执行某一段程序，该程序包含三类指令，其中运算指令120条，访存指令60条，分支指令20条，各类指令的CPI分别为5、10和2。请计算执行这段程序的平均CPI</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">CPI = 总cycles / 总IC </span><br><span class="line">		= (120\*5<span class="string">+60</span>\*10<span class="string">+20</span>*2) / (120<span class="string">+60</span><span class="string">+20</span>) </span><br><span class="line">		= 6.2 </span><br></pre></td></tr></table></figure>

<p><strong>7、编译程序对一个应用在给定的处理器上的性能有极深的影响。假定一个程序，如果采用编译程序A，则动态指令数为1.0x10^9，执行时间为1.5s；如果采用编译程序B，则动态指令数为1.5x10^9，执行时间为2.1s。若该处理器的时钟周期为1ns，请分别求出每种编译程序下的平均CPI</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="attr">CPUtime</span> = IC * CPI * T</span><br><span class="line">CPI <span class="attr">A</span> = CPUtime / IC * <span class="attr">T</span> </span><br><span class="line">			= <span class="number">1.5</span> / <span class="number">1</span>*<span class="number">10</span>^<span class="number">9</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="attr">-9</span></span><br><span class="line">    	= <span class="number">1.5</span></span><br><span class="line">CPI <span class="attr">B</span> = CPUtime / IC * <span class="attr">T</span></span><br><span class="line">			= <span class="number">2.1</span> / <span class="number">1.5</span>*<span class="number">10</span>^<span class="number">9</span> * <span class="number">1</span>*<span class="number">10</span>^<span class="attr">-9</span></span><br><span class="line">			= <span class="number">1.4</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>转自：B站翼云</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机组成与设计</category>
      </categories>
  </entry>
  <entry>
    <title>CH2 指令: 计算机的语言</title>
    <url>/2023/01/12/CH2-%E6%8C%87%E4%BB%A4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MIPS 操作数</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>示例</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>32个寄存器</td>
<td>$s0-$s7, $t0-$t9, $zero,<br />$a0-$a3, $v0-$v1, $gp, $fp,<br />$sp, $ra, $at</td>
<td>寄存器用于数据的快速存取。在MIPS中，只能对存放在寄存器中的数据执行算数操作，寄存器$zero的值恒为0，寄存器$at被汇编器保留，用于处理大的常数</td>
</tr>
<tr>
<td>20^30个存储器字</td>
<td>Memory[0], Memory[4], …,<br />Memory[4294967292]</td>
<td>存储器只能通过数据传输指令访问。MIPS使用字节编址，所以连续的字地址相差4。存储器用于保存数据结构、数组和溢出的寄存器。</td>
</tr>
</tbody></table>
<span id="more"></span>

<p><img src="MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%801.png" alt="MIPS汇编语言"></p>
<p><img src="MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%802.png" alt="MIPS汇编语言"></p>
<h3 id="第一部分-MIPS-32概述"><a href="#第一部分-MIPS-32概述" class="headerlink" title="第一部分 MIPS-32概述"></a>第一部分 MIPS-32概述</h3><p><img src="MIPS-32%E6%A6%82%E8%BF%B0.png"></p>
<h4 id="指令的组成-MIPS的设计思想"><a href="#指令的组成-MIPS的设计思想" class="headerlink" title="指令的组成 MIPS的设计思想"></a>指令的组成 MIPS的设计思想</h4><p>计算机执行任何程序，本质上都是在执行机器语言指令（instruction），每条指令都是一条0-1串</p>
<p>指令首先要指明执行什么操作，通常用0-1串中的前几位来表示，称为操作码 指令还要指出需要操作的数据来自哪里、操作后的结果数据放回哪里 通常用0-1串中的剩余位来表示，称为<font color="orange">操作数</font>或<font color="orange">地址码</font>大部分操作数都是一个地址编号，告诉CPU从哪里取得数据、向哪里放回数据 所以操作数通常也叫做地址码</p>
<table>
<thead>
<tr>
<th align="center">操作码</th>
<th align="center">地址码</th>
<th align="center">地址码</th>
</tr>
</thead>
</table>
<p>MIPS作为RISC指令集，设计力求保证硬件设备的简单性，在我们讲解的32为MIPS汇编语言（MIPS-32）中，所有指令都是32位长</p>
</br>

<h4 id="MIPS-32中的通用寄存器"><a href="#MIPS-32中的通用寄存器" class="headerlink" title="MIPS-32中的通用寄存器"></a>MIPS-32中的通用寄存器</h4><p>MIPS中运算操作的操作数必须来自<font color="orange">寄存器</font>（register）或者指令本身一种位于CPU、比cache更小更快的存储器，用来暂时存放运算的源数据和结果</p>
<p>一些寄存器是专用的，如存放执行中指令的地址的<font color="orange">程序计数器</font>（PC）于此相对应，用于暂时存放运算数据的寄存器称为通用寄存器</p>
<p>MIPS中一共有32个32位寄存器，共128B（大部分架构都采用16或32个寄存器）</p>
<p>我们约定：</p>
<ul>
<li>程序中的变量存放在<font color="orange">保存寄存器</font>（store reg）中：$s0 ~ $s7 共8个</li>
<li>运算的临时变量、中间变量存放在<font color="orange">临时寄存器</font>（temp reg）中：$t0 ~ $t7 共8个</li>
<li>还有一个<font color="orange">零寄存器</font>，永远存放32位的0，写作$zero</li>
</ul>
<h3 id="第二部分-三类汇编指令"><a href="#第二部分-三类汇编指令" class="headerlink" title="第二部分 三类汇编指令"></a>第二部分 三类汇编指令</h3><p><img src="%E4%B8%89%E7%B1%BB%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4.png" alt="三类汇编指令"></p>
<h4 id="算数运算：加add、减sub"><a href="#算数运算：加add、减sub" class="headerlink" title="算数运算：加add、减sub"></a>算数运算：加add、减sub</h4><p>C赋值语句：c = a + b;</p>
<p><font color="orange">加法指令 add c, a, b</font>: 将a和b中的数据相加，并将结果存放在c中</p>
<p>再次强调：MIPS中运算的操作数必须来自寄存器或者指令本身！</p>
<p>假设变量a，b，c分别存放在寄存器$s0，$s1，$s2中，这条指令就应当写为</p>
<p><code>add $s2, $s0, $s1</code></p>
<p>加法中两个数可以对换，但减法不行，故c = a - b；必须写作</p>
<p><code>sub $s2, $s0, $s1</code></p>
<p>运算的 “原材料” a和b对应的寄存器$s0, $s1</p>
<p>分别称为源操作数1*（src1）和源操作数2（src2）</p>
<p>运算的结果c对应的寄存器$s2称为目的操作数（des）</p>
<p><code>加减指令的通式：add/sub des, src1, src2</code></p>
<h4 id="算术运算：加立即数addi"><a href="#算术运算：加立即数addi" class="headerlink" title="算术运算：加立即数addi"></a>算术运算：加立即数addi</h4><p>在 i++ 即 i = i + 1；这条赋值语句中，有个确定的常数1</p>
<p>与其采取额外的步骤将1装入某个寄存器，不如让指令本身包含这个1</p>
<p>假设变量i位于寄存器$s0，我们把加法指令的第二个源操作数改为常数1</p>
<p><code>addi $s0, $s0, 1</code></p>
<p>就成了加立即数(add immediate)指令</p>
<p>因为addi指令中的立即数可以取负数（对立即数取负后相加）</p>
<p>因此，MIPS中没有subi指令</p>
<h4 id="逻辑按位运算-and、or、nor指令"><a href="#逻辑按位运算-and、or、nor指令" class="headerlink" title="逻辑按位运算:and、or、nor指令"></a>逻辑按位运算:and、or、nor指令</h4><p>当两个源寄存器中，对应的位上同时为1时，与and操作结果为1 当两个源寄存器中，对应的位上至少有一个为1时，或or操作结果为1 因此，假设</p>
<p><code>$t0 = 0000 0000 0000 0000 0000 0000 0000 1001</code></p>
<p><code>$t1 = 0000 0000 0000 0000 0000 0000 0000 1100</code></p>
<p>执行下列两条指令后，$t2中的数据分别变为多少? </p>
<p><code>and $t2, $t0, $t1</code></p>
<p><code> or $t2, $t0, $t1</code></p>
<p>任何数据与0进行<font color="orange">或非nor操作</font>，都会0/1反转 执行下列指令后，$t2中的数据会变为多少?</p>
<p><code> nor $t2, $t0, $zero</code></p>
<p><code>$t2 = 1111 1111 1111 1111 1111 1111 1111 0110</code></p>
<h4 id="逻辑位移运算：sll-和-srl-指令"><a href="#逻辑位移运算：sll-和-srl-指令" class="headerlink" title="逻辑位移运算：sll 和 srl 指令"></a>逻辑位移运算：sll 和 srl 指令</h4><p>比较12和120两个十进制数，通过在对低位的右边添加一个0，变成了10倍</p>
<p>比较11和110两个二进制数，通过在最低位的右边添加一个0，变成了多少倍？1100呢？</p>
</br>

<p><font color="orange">逻辑左移（shift left logic）</font>指令让寄存器中的数据整体往左移动指定的位数，并在右边空出来的位上补0。</p>
<p>假设<code>$s2 = 0000 0000 0000 0000 0000 0000 0000 0101</code></p>
<p>逻辑左移两位后，放到寄存器$s0中：</p>
<p><code>sll $s0, $s2, 2</code></p>
<p>这里的2不是addi指令中的立即数，而是告诉计算机移动几位的<font color="orange">位移量（shift amount）</font></p>
</br>

<p>通过这样一条指令，我们实际上完成了x4的运算！</p>
<p>x2、x8、x128时，移位量分别是多少？</p>
<p>x2移位量为1，x8移位量为3，x128移位量为7</p>
<p><code>srl 指令可以实现/2运算，使用场景不多，不额外讨论</code></p>
<h4 id="综合练习1：变量运算与赋值"><a href="#综合练习1：变量运算与赋值" class="headerlink" title="综合练习1：变量运算与赋值"></a>综合练习1：变量运算与赋值</h4><p>翻译以下C语句：</p>
<p>result = a - 10 + (b + c * 5)；其中 result 为 $s3，a 为 $s0，b 为 $s1，c 为 $s2</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">c * <span class="number">5</span> -&gt; <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">s2</span>, <span class="number">2</span></span><br><span class="line">				 <span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, $<span class="built_in">s2</span></span><br><span class="line">				 </span><br><span class="line"><span class="keyword">b </span>+ c * <span class="number">5</span> -&gt; <span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">s1</span></span><br><span class="line"></span><br><span class="line">a - <span class="number">10</span> -&gt; <span class="keyword">addi </span>$<span class="built_in">t2</span>, $<span class="built_in">s0</span>, -<span class="number">10</span></span><br><span class="line"></span><br><span class="line">result = <span class="keyword">add </span>$<span class="built_in">s3</span>, $<span class="built_in">t2</span>, $<span class="built_in">t1</span></span><br></pre></td></tr></table></figure>



<h4 id="寄存器—存储器数据传送：lw指令"><a href="#寄存器—存储器数据传送：lw指令" class="headerlink" title="寄存器—存储器数据传送：lw指令"></a>寄存器—存储器数据传送：lw指令</h4><p>运算指令的操作数必须来自于寄存器/指令本身，但是，通用寄存器一共只有128B</p>
<p>数组元素却可以占据成千上万个字节，只能存放在内存中</p>
</br>

<p>这时，我们把数组第一个元素（a[0]）的32位地址，称为数组的<font color="orange">基址</font>，放在寄存器中</p>
<p>基址加上要找的元素的下标，就组成了这个元素的地址</p>
</br>

<p>如果源操作数在内存中，是数组a的5号元素（第六个元素），数组a的基址存放在$s1中。那么，a[5]的地址就表示为5($s1)</p>
<p>计算机会自动计算$s1中的基址和<font color="orange">偏移量</font>5的和，找到a[5]的地址</p>
</br>

<p>将a[5]从内存传送到寄存器$s0，使用<font color="orange">取字指令（load word）</font></p>
<p><code>lw $s0, 5($s1)</code></p>
<h4 id="寄存器—存储器数据传送：字与sw指令"><a href="#寄存器—存储器数据传送：字与sw指令" class="headerlink" title="寄存器—存储器数据传送：字与sw指令"></a>寄存器—存储器数据传送：字与sw指令</h4><p>MIPS的通用寄存器都是32位长，这个长度就是MIPS体系结构的<font color="orange">字长</font>，通常代表了参与运算的数据的长度，因此我们约定：整门课程中，1<font color="orange">字</font>=32b=4B</p>
</br>

<p>a[5]相对于a[0]，在内存中的距离是5个字，而不是5个字节。又因为内存按字节编址，即：内存每个字节都有一个特定的编号。</p>
<p>所以偏移量应该是 5x4=20个字节，a[5]的地址应该表示成20($s1)，于是取数指令变为<font color="orange"><code>lw $s0, 20($s1)</code></font></p>
</br>

<p>如果我们要把$t0中运算结果送回内存中的a[2]，需要用到<font color="orange">存字指令（store word）</font>:    <font color="orange"><code>sw $t0, 8($s1)</code></font></p>
<h4 id="寄存器间数据传送-装载立即数到寄存器"><a href="#寄存器间数据传送-装载立即数到寄存器" class="headerlink" title="寄存器间数据传送 装载立即数到寄存器"></a>寄存器间数据传送 装载立即数到寄存器</h4><p>如果我们需要把数从$t0保存到存放某变量的$s1中，怎么实现?</p>
<p>MIPS没有专门的寄存器间移动数据的指令。但是，通过把源寄存器中的数据加上0再保存到目标寄存器中，可以实现相同的功能</p>
<p><code>addi $s1, $t0, 0</code> 或 <code>add $s1, $t0, $zero</code></p>
<p>这个功能可以用<font color="orange">move伪指令</font>来代替 <font color="orange"><code>move $s1, $t0</code></font></p>
</br>

<p>假如我们要把一个常数10装入寄存器$s2，同样可以采用addi指令</p>
<p><code>addi $s2, $zero, 10</code> 或使用<font color="orange">取立即数（load immediate）伪指令 <code>li $s2, 10</code></font></p>
<p><em>程序设计题中能否使用伪指令，请咨询老师！</em></p>
<h4 id="装载32位立即数到寄存器"><a href="#装载32位立即数到寄存器" class="headerlink" title="装载32位立即数到寄存器"></a>装载32位立即数到寄存器</h4><p>我们说可以用addi指令向寄存器装载立即数：<code>addi $s2, $zero, 10</code></p>
<p>但是，addi指令中的立即数10只能占用32位指令中的一部分（16位，稍后介绍指令格式）</p>
<p>16位只能表示2E16，即六万多个数，寄存器却能容纳2E32即40多亿个数</p>
</br>

<p>二进制与十六进制的转化在此不作介绍</p>
<p>假设我们要向寄存器$s2装载一个32位的立即数：<code>10A2 7FFF(16)</code></p>
</br>

<p>我们必须先用取高位立即数（load upper immediate）指令，把10A2放入$s2的高16位</p>
<p><font color="orange"><code>lui $s2,4258</code></font>  #十六进制的10A2等于十进制的4258</p>
<p>再让$s2与低16位的立即数7FFF进行或运算</p>
<p><font color="orange"><code>ori $s2, $s2, 32767</code></font> #7FFF(16)=32767(10)</p>
<p>这样，就分两步把32位立即数装载到了32的寄存器中</p>
<p><code>&lt;font color=&quot;grey&quot;&gt;不能使用addi代替ori指令，如果低16位的最高位是1，addi会把它理解为负数&lt;/font&gt;</code></p>
<h4 id="综合练习2：数组元素运算与赋值"><a href="#综合练习2：数组元素运算与赋值" class="headerlink" title="综合练习2：数组元素运算与赋值"></a>综合练习2：数组元素运算与赋值</h4><p>a[i] = a[0] + 100000;</p>
<p>假设数组 a 的基址位于 $s0，变量 i 位于 $s1</p>
<p>100000(10) = 186A0(16)，1(16) = 1(10)，86A0(16) = 34464</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>.将a[<span class="number">0</span>]传到临时寄存器中</span><br><span class="line"><span class="attribute">lw</span> $t<span class="number">0</span>,<span class="number">0</span>($s<span class="number">0</span>)</span><br><span class="line"><span class="attribute">2</span>.将<span class="number">100000</span>装载<span class="number">32</span>位寄存器中</span><br><span class="line"><span class="attribute">lui</span> $t<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"><span class="attribute">ori</span> $t<span class="number">1</span>,$t<span class="number">1</span>,<span class="number">34464</span></span><br><span class="line"><span class="attribute">3</span>.将a[<span class="number">0</span>] 与 <span class="number">100000</span> 相加</span><br><span class="line"><span class="attribute">add</span> $t<span class="number">2</span>,$t<span class="number">0</span>,$t<span class="number">1</span></span><br><span class="line"><span class="attribute">4</span>.获取a[i]的元素</span><br><span class="line"><span class="attribute">sll</span> $t<span class="number">3</span>,$s<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="attribute">add</span> $t<span class="number">4</span>,$t<span class="number">0</span>,$t<span class="number">3</span></span><br><span class="line"><span class="attribute">5</span>.将t<span class="number">2</span>的值传给t<span class="number">4</span>所指向的a[i]地址</span><br><span class="line"><span class="attribute">sw</span> $t<span class="number">2</span>,<span class="number">0</span>($t<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h4 id="决策：条件分支beq和bne"><a href="#决策：条件分支beq和bne" class="headerlink" title="决策：条件分支beq和bne"></a>决策：条件分支beq和bne</h4><p>计算机和一般计算器的区别在于何处？</p>
<p>在于决策能力</p>
<p>即，根据一定的条件选择执行何种运算的能力</p>
</br>

<p>最基础的判断条件是相等关系</p>
<p>假设 $s0 = 0，$s1 = 0，$s2 = 1</p>
<p><font color="orange">相等则分支（branch if equal）指令</font>在两个源操作数寄存器中的值相同时分支，分支以<font color="orange">分支标签</font>表示</p>
<p><font color="orange"><code>beq $s0,$s1,Label</code></font></p>
<p>与此相对应，<font color="orange">不等则分支（branch if not equal）指令</font>在值不同时分支到标签</p>
<p><font color="orange"><code>bne $s0,s2,Label</code></font></p>
<p>如果 不发生分支，则继续执行内存中相邻的下一条指令</p>
</br>

<h4 id="综合练习3：if-else语句（无条件跳转-j-和条件分支）"><a href="#综合练习3：if-else语句（无条件跳转-j-和条件分支）" class="headerlink" title="综合练习3：if-else语句（无条件跳转 j 和条件分支）"></a>综合练习3：if-else语句（无条件跳转 j 和条件分支）</h4><p>If (i == j) f = g + h;</p>
<p>else f = g - h;</p>
<p>假设f、g、h、i、j 分别存放在$s0 - $s4中</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">beq</span> $<span class="built_in">s3</span>,$<span class="built_in">s4</span>,Label</span><br><span class="line"><span class="keyword">add</span> $<span class="built_in">s0</span>,$<span class="built_in">s1</span>,$<span class="built_in">s2</span></span><br><span class="line"><span class="symbol">Label</span> <span class="keyword">sub</span> $<span class="built_in">s0</span>,$<span class="built_in">s1</span>,$<span class="built_in">s2</span></span><br></pre></td></tr></table></figure>

<p><font color="orange">结论：判定相等 == 使用bne，判断不等 != 使用beq</font></p>
<h4 id="决策：小于则置位slt"><a href="#决策：小于则置位slt" class="headerlink" title="决策：小于则置位slt"></a>决策：小于则置位slt</h4><p>除了相等、不等关系，我们还经常比较两个数的大小</p>
<p>MIPS有一条<font color="orange">小于则置位（set on less than）指令slt</font></p>
<p><font color="grey">置位：将一位设置为1；复位：将一位设置为0</font></p>
</br>

<p>还是假设$s0 = 0，$s1 = 0，$s2 = 1</p>
<p><font color="orange"><code>slt $t0,$s0,$s2</code></font></p>
<p>源操作数1 &lt; 源操作数2 吗？ Yes</p>
<p>此时把目的炒作输寄存器$t0置位为1</p>
</br>

<p><code>slt $t0,$s0,$s1</code></p>
<p>源操作数1 &lt; 源操作数2 吗？No！</p>
<p>此时把目的操作数寄存器$t0复位为0</p>
<h4 id="6种条件判断及其伪指令"><a href="#6种条件判断及其伪指令" class="headerlink" title="6种条件判断及其伪指令"></a>6种条件判断及其伪指令</h4><p>通过slt、beq、bne（严格来说还有小于立即数则置位slti指令，不作讨论）指令的各种组合，我们就能够实现全部六种<font color="orange">比较指令</font>，即六种值为真或假的<font color="orange">布尔表达式</font></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &lt; j) <span class="attr">f</span> = g + h;</span><br><span class="line"><span class="keyword">else</span> <span class="attr">f</span> = g - h;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slt $t0,i,j						# 当 i&lt;j 时，把$t0置为1，否则为0</span><br><span class="line">beq $t0,$zero,Else		# 当 $t0为0时，执行else后的语句</span><br><span class="line">add f,g,h							# 否则顺着执行if后的语句</span><br><span class="line">j Exit								# 加法完成后退出if-else语句</span><br><span class="line">Else: sub f,g,h				# else</span><br><span class="line">Exit:</span><br></pre></td></tr></table></figure>

<p><font color="orange">结论：判断大于 &gt; 或小于  &lt; 使用 slt 和 beq，判定大于等于 &gt;= 或小于等于 &lt;= 使用 slt 和 bne </font></p>
<p>对于比大小的四种比较条件，可以使用伪指令：</p>
<ul>
<li>小于则分支blt</li>
<li>大于则分支bgt</li>
<li>小于等于则分支ble</li>
<li>大于等于则分支bge</li>
</ul>
<h4 id="综合练习4：while循环"><a href="#综合练习4：while循环" class="headerlink" title="综合练习4：while循环"></a>综合练习4：while循环</h4><p>while(a[i] == k) i++;<br>假设i,k分别存放在$s3和$s5中，a的基址放在$s6中</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="MIPS汇编指令小结"><a href="#MIPS汇编指令小结" class="headerlink" title="MIPS汇编指令小结"></a>MIPS汇编指令小结</h4><p><img src="MIPS%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93.png"></p>
<h4 id="指令格式：R型"><a href="#指令格式：R型" class="headerlink" title="指令格式：R型"></a>指令格式：R型</h4><p>指令中含三个寄存器的运算指令都属于<font color="orange">R型（register type）指令</font></p>
<p><strong><code>add/sub</code></strong><code>des,src1,src2</code></p>
<p><strong><code>and/or/nor</code></strong><code>des,src1,src2</code></p>
<p><strong><code>slt</code></strong><code>des,src1,src2</code></p>
<p>32位的MIPS指令一共分为6个字段：</p>
<table>
<thead>
<tr>
<th>op</th>
<th>rs</th>
<th>rt</th>
<th>rd</th>
<th>shamt</th>
<th>funct</th>
</tr>
</thead>
<tbody><tr>
<td>6位</td>
<td>5位</td>
<td>5位</td>
<td>5位</td>
<td>5位</td>
<td>6位</td>
</tr>
</tbody></table>
<ul>
<li><font color="orange">op</font>：operation code，源操作码</li>
<li><font color="orange">rs</font>：register source，源操作数寄存器 -&gt; <font color="orange">rt</font>：s后面是t，表示第二个源操作数寄存器</li>
<li><font color="orange">rd</font>：register destination，目的寄存器</li>
<li><font color="orange">shamt</font>：shift amount，位移量</li>
<li><font color="orange">funct</font>：function code，功能码</li>
</ul>
<h4 id="指令格式：R型-1"><a href="#指令格式：R型-1" class="headerlink" title="指令格式：R型"></a>指令格式：R型</h4><p>R型指令的操作码op都是6个0，由6位功能码funct进一步指定执行什么操作</p>
<p>以add指令为例</p>
<ul>
<li><p><font color="orange">$t0<del>$t7分别为8</del>15号寄存器</font></p>
</li>
<li><p><font color="orange">$s0<del>$s7分别为16</del>23号寄存器</font></p>
</li>
</ul>
<blockquote>
<p>转自：B站翼云</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机组成与设计</category>
      </categories>
  </entry>
  <entry>
    <title>Zabbix API</title>
    <url>/2023/01/20/Zabbix-API/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Zabbix API 半成品，可能会后续更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZabbixAPI</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, user, password</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.host = <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;/zabbix/api_jsonrpc.php&quot;</span></span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apiCall</span>(<span class="params">self,data</span>):</span></span><br><span class="line">        headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">        data = json.dumps(data)</span><br><span class="line">        response = requests.post(self.host, data, headers=headers)</span><br><span class="line">        responseResult = json.loads(response.text)</span><br><span class="line">        <span class="keyword">return</span> responseResult</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;user.login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;user&quot;</span>: self.user,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: self.password</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addZabbixHost</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;host.create&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: host,</span><br><span class="line">                <span class="string">&quot;interfaces&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;main&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;useip&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;ip&quot;</span>: host,</span><br><span class="line">                        <span class="string">&quot;dns&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;port&quot;</span>: port</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;groups&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;groupid&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;templates&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;templateid&quot;</span>: <span class="string">&quot;10001&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;error&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ERROR：addZabbixHost()报错 &quot;</span> + response[<span class="string">&#x27;error&#x27;</span>][<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;添加监控主机成功：&quot;</span> + <span class="built_in">str</span>(response[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;hostids&#x27;</span>]))</span><br><span class="line">            <span class="comment"># 返回主机列表</span></span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;hostids&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getItems</span>(<span class="params">self,host</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;item.get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;output&quot;</span>: <span class="string">&quot;extend&quot;</span>,</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: host,  <span class="comment"># 需要监控的主机</span></span><br><span class="line">                <span class="string">&quot;search&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;key_&quot;</span>: <span class="string">&quot;system.cpu.util[,idle]&quot;</span>  <span class="comment"># 监控项类型为&quot;系统监控&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="comment">#return response[&quot;result&quot;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查已经添加的主机，并返回hostid列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkHost</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;host.get&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;output&quot;</span>: [<span class="string">&quot;host&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        hostidList = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> response[<span class="string">&#x27;result&#x27;</span>]:</span><br><span class="line">            hostidList.append(i[<span class="string">&#x27;hostid&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已经添加的主机有：&quot;</span> + <span class="built_in">str</span>(i[<span class="string">&#x27;hostid&#x27;</span>]))</span><br><span class="line">        <span class="comment"># 返回查询到的主机hostid列表    </span></span><br><span class="line">        <span class="keyword">return</span> hostidList</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导出配置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exportConf</span>(<span class="params">self,hostidList=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> hostidList <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            hostidList = self.checkHost()</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: <span class="string">&quot;configuration.export&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;hosts&quot;</span>: hostidList</span><br><span class="line">                &#125;,</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;xml&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.login(),</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = self.apiCall(data)</span><br><span class="line">        <span class="comment"># 暂时不知道要干嘛，只是打印出来</span></span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line">p = ZabbixAPI(<span class="string">&#x27;172.22.144.81&#x27;</span>, <span class="string">&#x27;Admin&#x27;</span>, <span class="string">&#x27;zabbix&#x27;</span>)</span><br><span class="line">p.getItems(<span class="string">&#x27;172.22.144.81&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
</search>
